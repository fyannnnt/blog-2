{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image1.png","path":"images/og_image1.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9d8d27cbe55d66b11586869f0aaee6d49e054464","modified":1574226800441},{"_id":"themes/icarus/LICENSE","hash":"62e3701684087bc9a66f0b20386036ede9b430b7","modified":1574226800480},{"_id":"themes/icarus/README.md","hash":"921a87a50b130e1324fc0111e325d949ff74e1df","modified":1574226800480},{"_id":"themes/icarus/_config.yml","hash":"a825cc2c9cd3efab17a61d9f11bffb95f274b489","modified":1574229957601},{"_id":"themes/icarus/package.json","hash":"6866c0bff4854214cba431d0cbc079102fcba9c8","modified":1574226800601},{"_id":"source/about/index.md","hash":"9663b3056eb16a261a4eef40d832b0185b3140c2","modified":1574226800478},{"_id":"themes/icarus/languages/en.yml","hash":"cb16c889ac2ee5b11dd990b786fb1f4768ffd454","modified":1574226800517},{"_id":"themes/icarus/languages/es.yml","hash":"d7d9e8c43237bcdf3dd0dd9f40ae18a0a2e136d4","modified":1574226800517},{"_id":"themes/icarus/languages/fr.yml","hash":"b85a2d4fcc790a8b84326235850eb54532f6b75e","modified":1574226800519},{"_id":"themes/icarus/languages/id.yml","hash":"ee655e6a045eb28ea480a348bbefd10ef115494b","modified":1574226800519},{"_id":"themes/icarus/languages/ja.yml","hash":"3c921f24b19a797b2ae23cf621a35bb9b043ddf9","modified":1574226800520},{"_id":"themes/icarus/languages/ko.yml","hash":"2eeedc4efd27d344b4210310ee8ca68f8c826a72","modified":1574226800521},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"28ae713d8d26ab875104684e604592f4c495b638","modified":1574226800522},{"_id":"themes/icarus/languages/ru.yml","hash":"62451109780acfe2db8630248005697c10a68a61","modified":1574226800523},{"_id":"themes/icarus/languages/tr.yml","hash":"2e334f0f98756256754f48d8dff3baa045700283","modified":1574226800524},{"_id":"themes/icarus/languages/vn.yml","hash":"cd2d57a3fe6389bdd76f193c6c662d242960ed02","modified":1574226800525},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"1ca3f7b92872443c79b5f8026272b3bd21b4dd46","modified":1574226800527},{"_id":"themes/icarus/languages/zh-Hans.yml","hash":"1ca3f7b92872443c79b5f8026272b3bd21b4dd46","modified":1574226800528},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"57126abcfd47318e7c04c24034ab27d36a5663ac","modified":1574226800532},{"_id":"themes/icarus/layout/archive.ejs","hash":"20cf8fbafec35d826a2e363ce1eee8dbf1b3011c","modified":1574226800536},{"_id":"themes/icarus/layout/categories.ejs","hash":"5df2ae61ec3869d265113d695e2e25aaa60e8e67","modified":1574226800538},{"_id":"themes/icarus/layout/category.ejs","hash":"d3c97be4f70c7d5a6b8512d94d54110e044b8461","modified":1574226800540},{"_id":"themes/icarus/layout/index.ejs","hash":"4e088cfb6fa4b50a1cb422a00623aba1975529e1","modified":1574226800562},{"_id":"themes/icarus/layout/layout.ejs","hash":"82bb5a9f1371178f6c22d9af2150ad150de5b37f","modified":1574226800563},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1574226800564},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1574226800580},{"_id":"themes/icarus/layout/tag.ejs","hash":"148453030e534c70cdc68ed5b2a1c7037d662ace","modified":1574226800592},{"_id":"themes/icarus/layout/tags.ejs","hash":"9b185ad009855aa645e6fb5ccb28c022571852d0","modified":1574226800593},{"_id":"themes/icarus/scripts/index.js","hash":"4a4a465bee504ee69a4c90199a993543eb46fe9d","modified":1574226800603},{"_id":"source/_posts/2019-08/CSS Houdini实现动态波浪纹.md","hash":"602223eb6c2cb3c83007780a1cb630210f414792","modified":1574229207753},{"_id":"source/_posts/2019-08/Javascript抽象语法树上篇(基础篇).md","hash":"a50d9ccfc00edd5ac8f35da10452f51e621ec227","modified":1574226800446},{"_id":"source/_posts/2019-08/Javascript抽象语法树下篇(实践篇).md","hash":"84b84cb0430c194919c8d62328f9253b07b9775b","modified":1574226800447},{"_id":"source/_posts/2019-08/collision-detection.md","hash":"29bb57b6d025bfbf4405cbb79763e03588759eef","modified":1574226800448},{"_id":"source/_posts/2019-09/【译】Web内容如何影响电池的使用.md","hash":"ade61385fe19ba9b258a01d2733da17f85aa60bd","modified":1574226800451},{"_id":"source/_posts/2019-09/guid-mask.md","hash":"e46fd45131562be0182994f909bb5018440bbc6c","modified":1574229172388},{"_id":"source/_posts/2019-09/【译】在生产环境中使用原生JavaScript模块.md","hash":"249d2e158777449b0dcd8fbca4f7daaa06bc4015","modified":1574226800452},{"_id":"source/_posts/2019-09/前端资源治理（一）.md","hash":"44a482706a61b328c4d0f7bf2cf2cbbad5c0d1fa","modified":1574226800453},{"_id":"source/_posts/2019-10/Electron-实践笔记.md","hash":"ba0e0a9abaa4f3baff80dae17600bc7d69e1c64a","modified":1574226800458},{"_id":"source/_posts/2019-09/记一次Node-js直出服务的性能优化.md","hash":"00e9dc2c73f870a3c0f2844f2a4ca8aa3bff1184","modified":1574229188593},{"_id":"source/_posts/2019-09/手把手教你写webpack-loader.md","hash":"1e880d5cfbcde5180206a31f19c0f01cf17c3f05","modified":1574229181534},{"_id":"source/_posts/2019-10/TypeScript安利指南.md","hash":"154bcf623f1a5038bf81c2dd69116e0cf20017e3","modified":1574226800460},{"_id":"source/_posts/2019-10/V8-引擎和Javascript优化建议.md","hash":"f73a5441985fe1af69e7dc7e16a731961b22f7c2","modified":1574226800461},{"_id":"source/_posts/2019-10/Vue-js-3-0编译器compiler-core源码解析.md","hash":"d531ed1f600d967dc11e0f369939a65f618e51da","modified":1574226800464},{"_id":"source/_posts/2019-10/【译】interection-observer如何观察变化.md","hash":"d3d60107acdc424c2ec15fba94115f7d7ed2e876","modified":1574226800466},{"_id":"source/_posts/2019-10/写一个四则运算表达式转换成AST的方法.md","hash":"986d8c703cb55116a58740e875da74155681669d","modified":1574226800469},{"_id":"source/_posts/2019-10/手把手教你写一个AST解析器.md","hash":"2926279dba04e869cfeae280db453b96651e8d81","modified":1574229074096},{"_id":"source/_posts/2019-10/换种方式读源码：如何实现一个简易版的Mocha.md","hash":"6f4360f2bfe784ecc7d44a47ad4ed3e2ff141eca","modified":1574229109609},{"_id":"source/_posts/2019-10/浏览器层合成与页面渲染优化.md","hash":"956035c0496093ea900603fc928e184ff9a9ffb6","modified":1574229088016},{"_id":"source/_posts/2019-10/网页设计和开发中，关于字体的常识.md","hash":"49b21a84de85ce85afb2609ea7e1ef4cb03da46e","modified":1574228669491},{"_id":"source/_posts/2019-11/你应该知道的折叠屏收集适配.md","hash":"7d646bdd349cf5b717345db7659b33560cae8dcf","modified":1574228779002},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"b921f7ab80c3de92291ce2c9081baa4464133787","modified":1574226800482},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"7c7cec251070d72c33139d5c19bef03dc9a57e15","modified":1574226800484},{"_id":"themes/icarus/includes/common/utils.js","hash":"4099226113e3d631b58452f529d58cf00758fd24","modified":1574226800484},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"4c6b4a4062ef836295046b170bdcda8776729c66","modified":1574226800485},{"_id":"themes/icarus/includes/generators/categories.js","hash":"6aef75f08a11a06e5c72d9b0b768c3aa7462080c","modified":1574226800487},{"_id":"themes/icarus/includes/generators/category.js","hash":"1f40399fc0d56f89490d669c6399cd40b9465e93","modified":1574226800487},{"_id":"themes/icarus/includes/generators/insight.js","hash":"8fcac981ab9537fc110ff8a6d00f67bd6f41aeec","modified":1574226800488},{"_id":"themes/icarus/includes/generators/tags.js","hash":"ee929b68019b4759099d292257971d3267c5abd7","modified":1574226800489},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"93af18ef9dc7004ef61f3555b3d9ee27074982d0","modified":1574226800490},{"_id":"themes/icarus/includes/helpers/config.js","hash":"f1becefd247f03bf5b31347ffda23e9480bb4566","modified":1574226800493},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"f020fad32fd9977a17b19b755bb9e5fd506fc5a9","modified":1574226800494},{"_id":"themes/icarus/includes/helpers/override.js","hash":"26a5307c5ab99f7c8c96e94bbfc047c7fac5e6cd","modified":1574226800496},{"_id":"themes/icarus/includes/helpers/page.js","hash":"1486792ec2528fa656ad258d588a6d261bd94467","modified":1574226800497},{"_id":"themes/icarus/includes/helpers/site.js","hash":"4142e0b3418ff2ef186979d8bb7023f54ca3185d","modified":1574226800499},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"7625a4adbaaf4ce80ef4af2c34b4cdae194a0c4b","modified":1574226800501},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"a9e433f905270b6f8c5689bc0f8583b9c42696dc","modified":1574226800502},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"e2a6c34d7ac9a5af828670da4ff1ce92ed298e49","modified":1574226800503},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"bc47f29f158b5c61de45c3b7ab7b8932e145bed6","modified":1574226800504},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"6b65be067c332fba3c901e863a5802089a2149a3","modified":1574226800505},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"5424cb681dbb475908f3708d8635380cf48a610e","modified":1574226800505},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"850fc6f965089abc9e53e032eae1469994d5fd0c","modified":1574226800506},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"cb99fedec56fb1b1df72d90769d245fb0dd08a9d","modified":1574226800508},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"1ef55aafe89be3b3aee110cbea319ff0a7cf0df8","modified":1574226800508},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"cde56bce96c74ea40d8ebe5824e0b6b0b46c051a","modified":1574226800509},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"222a535e4fe9517ca4b6089a704fd38d6bec1a8a","modified":1574226800509},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"cf52737b5be1d3e8a71af89ec617cb12ea39393f","modified":1574226800511},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"b36aa88d2fc573eaa97df93ce5e00ad8610f6f16","modified":1574226800511},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"ce25f7c241a632f75da109895cc0f08d894369cd","modified":1574226800512},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"a69b003cd482c2fe4495705c5e075d73e7e54ceb","modified":1574226800513},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"79029c355e1c2dba598e901efe7c5f1ada488cdb","modified":1574226800514},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"73d0ff7bc3e40d7178fb5627fec2a41c15c585e6","modified":1574226800515},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"e0a2716e7a6c7da26182135fce4776596761a699","modified":1574226800543},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"dff3a7b30440cf7d0e318bfa69d7b9036881ae09","modified":1574226800544},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"e85147af863387b27ea2417581f7268708a4d863","modified":1574226800545},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"70250fc35364da499bcd4b3d902729f180f071cc","modified":1574226800546},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"886026a36495f3c57cdef46bc9e9a94a0e390eb0","modified":1574226800546},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"55bfe636859f118b40750bd36e2c3ef1a2ec4c0e","modified":1574226800547},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792a1e44b71ed8048903ea898aeaf74a6c109037","modified":1574226800548},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1574226800549},{"_id":"themes/icarus/layout/common/article.ejs","hash":"085c2191db896c66bf106d5e6ca63aeb4493a85c","modified":1574226800550},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"520de62ced1a7b794fd5f29f8750fd979fd3c723","modified":1574226800551},{"_id":"themes/icarus/layout/common/head.ejs","hash":"450c686f2b49d6cddd93d6e23d4e6fb420aee7d2","modified":1574226800552},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"556f2eee649caf431f32e64daf77c297e0937896","modified":1574226800553},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"92efd4c3f4a47d8423fe7e09ecdddb2e335553cc","modified":1574226800554},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"56d7eba29b1b25e81217a902ca4f417b40752997","modified":1574226800556},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"014af2cf013fae5d6cee74ec1b62692f6d7e07de","modified":1574226800557},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"c3b24c01f6d9ae8aac4dab9af658ba7b6566419f","modified":1574226800559},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"1720c77b63058faabfe76385c1f21442475534f9","modified":1574226800560},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"60d8b1432e123c2bc03d7cb77288661086dcdc3c","modified":1574226800561},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"456b0dcdd005ff04210c1cebbddd2b9fa2a94dca","modified":1574226800561},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"0454c332b5ecf2c811ed2bc4d7dbebb1b5fcf9cf","modified":1574226800568},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"15da86153379c409b475fd70336fcecafe502539","modified":1574226800569},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"97bd00bea4ac13580b107316c041fc850857da19","modified":1574226800571},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"2b10558454554ed47f1cb23d0ce1422d353684b4","modified":1574226800572},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"e8c4255a76e423ca41289b344b44df1e2283b34f","modified":1574226800573},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"dfab055884e07b2d54dab675fecb22826b6e4759","modified":1574226800574},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"5d07ebfabf5c43d32ad6df0ae135634d217f8c55","modified":1574226800575},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"10bf4c017afb40810cfa3dfa6616f7acc98ae2da","modified":1574226800575},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"6f3a7b78e0dd1db5bc901e9b20e0c7c719ace2e8","modified":1574226800577},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"ab71a935a9d760eca55ea90842378aa58f1bcdad","modified":1574226800578},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"c5a79c1450abf38317e697ef7a819858ff6ae898","modified":1574226800582},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"1a00151869919b230f1c0a0bec10475e24b81c97","modified":1574226800583},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"b22352d27cd0636898207a840a20b6c85267b23b","modified":1574226800585},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"9cc26da261527bbba8b0180e0f73e0c6ae5416b5","modified":1574226800587},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04930e5dde7d47ddb1375730504edbfb59afaed5","modified":1574226800588},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"90e24e50c1dc18c22fbb9fa24320bf669e8a6283","modified":1574226800589},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"b59c0708480ead768d15ef53ce028b5f1a715960","modified":1574226800590},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"307d905cd39ac4908ef5589829a18777f314428d","modified":1574226800591},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"96950a7e27b7b0b808d5b5a81f192d5e0fec1967","modified":1574226800594},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1574226800595},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"0c3896328be3ac7103232280e02f661ff77146dd","modified":1574226800595},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"1509350aee2119b4f91ee71d9cc3f820c11e7aca","modified":1574226800596},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"fc37971b9de01ba4cab5941bd85212609ca7813c","modified":1574226800597},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1574226800598},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"4a9d37e625762317a12b81b7f2b6bb530fda1c0b","modified":1574226800600},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"b15bf481b8e9aea8d1907126004b6a181d8c1935","modified":1574226800600},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"ab0304e684db5e2f45520a511df5aa36a04d2f2a","modified":1574226800604},{"_id":"themes/icarus/source/css/insight.css","hash":"10aedd26a4930166b826d72b25cdbd509609b84b","modified":1574226800605},{"_id":"themes/icarus/source/css/progressbar.css","hash":"a3ef2b1ee0ee0889a82c3c693e53139fd4c0d143","modified":1574226800606},{"_id":"themes/icarus/source/css/search.css","hash":"b2fb780ce22684998a47b282a57f603511b040b2","modified":1574226800607},{"_id":"themes/icarus/source/css/style.styl","hash":"2bb14fbf435fb5f8e5b1d23b825890a59c6d1f27","modified":1574226800608},{"_id":"themes/icarus/source/images/avatar.png","hash":"a6466a5e44f25e2904c1a1c470678a233a39d3b6","modified":1574226800610},{"_id":"themes/icarus/source/images/favicon.svg","hash":"50322629b1947588ff7a6e59fb07cb1b5bfb9f8c","modified":1574226800612},{"_id":"themes/icarus/source/images/logo.svg","hash":"f4a9aa50f9a732981ae79e3711a997fc7325a7db","modified":1574226800613},{"_id":"themes/icarus/source/images/og_image1.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1574226800620},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"38801ce6b2f60c660e1b8868da902c9ab553c82f","modified":1574226800622},{"_id":"themes/icarus/source/js/animation.js","hash":"eabfccd284ca67920dd7977aa664d8b32b1911f7","modified":1574226800622},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"0c59b27d77fbf53fe9197d0856f87114b2bb33aa","modified":1574226800624},{"_id":"themes/icarus/source/js/gallery.js","hash":"c161252f214d787a9fd895c4c5124579169445d1","modified":1574226800624},{"_id":"themes/icarus/source/js/insight.js","hash":"c8669315f46c197efe9e9cd448d5b983049f348d","modified":1574226800625},{"_id":"themes/icarus/source/js/main.js","hash":"4ce6070fa94d7f6d19acc15510db666de54c7132","modified":1574226800626},{"_id":"themes/icarus/source/images/og_image.png","hash":"2934d2c883f827869adce83d22102312ae7be63b","modified":1574226800617},{"_id":"themes/icarus/source/images/favicon.ico","hash":"84d30015319f84642723e4ceb005d3a7fc9fded6","modified":1574229460415}],"Category":[{"name":"Web开发","_id":"ck36vflph0003soyx9cq8mjxw"},{"name":"Node.js","_id":"ck36vflpo0008soyx66jzvuto"},{"name":"Web前端","_id":"ck36vflq4000lsoyx8eayiit4"}],"Data":[],"Page":[{"title":"WecTeam | 京东社交电商前端团队","date":"2019-09-10T10:08:41.000Z","_content":"## 维C团简介\n\n维C团(WecTeam)是京东社交电商部一群热爱技术、乐于分享的前端工程师自发成立的一个前端技术团队，希望通过技术实践总结、新技术探秘、Bug深度分析、优质英文资料引入等方式，参与和推动前端技术的发展，为公司及行业带来价值！\n\n## 联系我们\n![qr_code](https://wq.360buyimg.com/data/ppms/picture/wecteam_qrcode.jpeg)","source":"about/index.md","raw":"---\ntitle: WecTeam | 京东社交电商前端团队\ndate: 2019-09-10 18:08:41\n---\n## 维C团简介\n\n维C团(WecTeam)是京东社交电商部一群热爱技术、乐于分享的前端工程师自发成立的一个前端技术团队，希望通过技术实践总结、新技术探秘、Bug深度分析、优质英文资料引入等方式，参与和推动前端技术的发展，为公司及行业带来价值！\n\n## 联系我们\n![qr_code](https://wq.360buyimg.com/data/ppms/picture/wecteam_qrcode.jpeg)","updated":"2019-11-20T05:13:20.478Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck36vflob0000soyx3tmyqdij","content":"<h2 id=\"维C团简介\"><a href=\"#维C团简介\" class=\"headerlink\" title=\"维C团简介\"></a>维C团简介</h2><p>维C团(WecTeam)是京东社交电商部一群热爱技术、乐于分享的前端工程师自发成立的一个前端技术团队，希望通过技术实践总结、新技术探秘、Bug深度分析、优质英文资料引入等方式，参与和推动前端技术的发展，为公司及行业带来价值！</p>\n<h2 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h2><p><img src=\"https://wq.360buyimg.com/data/ppms/picture/wecteam_qrcode.jpeg\" alt=\"qr_code\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"维C团简介\"><a href=\"#维C团简介\" class=\"headerlink\" title=\"维C团简介\"></a>维C团简介</h2><p>维C团(WecTeam)是京东社交电商部一群热爱技术、乐于分享的前端工程师自发成立的一个前端技术团队，希望通过技术实践总结、新技术探秘、Bug深度分析、优质英文资料引入等方式，参与和推动前端技术的发展，为公司及行业带来价值！</p>\n<h2 id=\"联系我们\"><a href=\"#联系我们\" class=\"headerlink\" title=\"联系我们\"></a>联系我们</h2><p><img src=\"https://wq.360buyimg.com/data/ppms/picture/wecteam_qrcode.jpeg\" alt=\"qr_code\"></p>\n"}],"Post":[{"title":"CSS Houdini实现动态波浪纹","subtitle":"CSS Houdini号称CSS领域最令人振奋的革新，它直接将CSS的API暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的CSS属性，从而定制和扩展浏览器的展示行为。","cover":"https://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg","thumbnail":"https://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg","date":"2019-07-12T11:00:00.000Z","ckey":22,"author":{"nick":"黄浩群","github_name":"huanghaoqun"},"_content":"\n> 作者：黄浩群 \n\nCSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。\n<!--more-->\n## 背景\n\n我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。\n\n## 什么是 CSS Houdini？\n\nCSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。\n\n![](http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png)\n\nCSS Houdini 目前主要提供了以下几个 API：\n\n#### CSS Properties and Values API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png)\n\n允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 `--` 开头，通过 `var()` 调用：\n\n```css\ndiv {\n  --font-color: #9e4a9b;\n  color: var(--font-color);\n}\n```\n\n此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：\n\n```css\n.container {\n  --font-color: #9e4a9b;\n}\n.container .text {\n  color: var(--font-color);\n}\n```\n\n定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：\n\n ```css\n.text {\n  --box-shadow-color: #3a4ba2;\n  box-shadow: 0 0 30px var(--box-shadow-color);\n}\n.text:hover {\n  --box-shadow-color: #7f2c2b;\n}\n ```\n\n#### Painting API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png)\n\n允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，\"怎么画\" 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：\n\n```js\nregisterPaint('rect', class {\n  paint(ctx, size, properties, args) {\n    // @TODO\n  }\n});\n```\n\nregisterPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：\n\n- `ctx`：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。\n- `size`：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。\n- `properties`：包含节点的 CSS 属性，需要调用静态方法 `inputProperties` 声明注入。\n- `args`: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 `inputArguments` 声明注入。\n\n编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：\n\n```css\n.wrapper {\n  background-image: paint(rect);\n}\n```\n\nPainting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。\n\n#### Layout API\n\n允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，\"如何布局\" 的逻辑需要我们自己编写：\n\n```js\nregisterLayout('block-like', class {\n  layout(children, edges, constraints, properties, breakToken) {\n    // @TODO\n    return {\n      // inlineSize: number,\n      // blockSize: number,\n      // autoBlockSize: number,\n      // childFragments: sequence<LayoutFragment>\n    }\n  }\n})\n```\n\nregisterLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。\n\n同样的，调用时只需：\n\n```css\n.wrapper {\n  display: layout('block-like');\n}\n```\n\n因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。\n\n#### Worklets\n\nregisterPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：\n\n```js\nif (\"paintWorklet\" in CSS) {\n  CSS.paintWorklet.addModule(\"paintworklet.js\");\n}\n```\n\n```js\nif (\"layoutWorklet\" in CSS) {\n  CSS.layoutWorklet.addModule(\"layoutworklet.js\");\n}\n```\n\n\n## 基础：三步用上 Painting API\n\n我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 `--rect-color` 指定。\n\n#### 1、编写一个 Paint 类：\n\n新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：\n\n```js\nregisterPaint(\"rect\", class {\n  static get inputProperties() {\n    return [\"--rect-color\"];\n  }\n  paint(ctx, geom, properties) {\n    const color = properties.get(\"--rect-color\")[0];\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, geom.width, geom.height);\n  }\n});\n```\n\n上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 `--rect-color` 变量，并将元素的背景填充为指定颜色。由于需要使用属性 `--rect-color`，我们需要在静态方法 `inputProperties` 中声明。\n\n#### 2、Worklets 加载 Paint 类：\n\nHTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：\n\n```html\n<div class=\"rect\"></div>\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n  }\n</script>\n```\n\n#### 3、使用 Paint 类：\n\nCSS 中使用的时候，只需要调用 paint 方法：\n\n```css\n.rect {\n  width: 100vw;\n  height: 100vh;\n  background-image: paint(rect);\n  --rect-color: rgb(255, 64, 129);\n}\n```\n\n可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。\n\n## 进阶：实现动态波纹\n\n根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：\n\n```html\n<!-- index.html -->\n<div id=\"wave\"></div>\n\n<style>\n  #wave {\n    width: 20%;\n    height: 70vh;\n    margin: 10vh auto;\n    background-color: #ff3e81;\n    background-image: paint(wave);\n  }\n</style>\n\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n\n    const wave = document.querySelector(\"#wave\");\n    let tick = 0;  \n    requestAnimationFrame(function raf(now) {\n      tick += 1;\n      wave.style.cssText = `--animation-tick: ${tick};`;\n      requestAnimationFrame(raf);\n    });\n  }\n</script>\n```\n\n```js\n// paintworklet.js\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n  paint(ctx, geom, properties) {\n    let tick = Number(properties.get('--animation-tick'));\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * 0.4;\n    tick = tick * 2;\n\n    ctx.beginPath();\n    ctx.moveTo(0, initY + Math.sin(tick / 20) * 10);\n    for (let i = 1; i <= width; i++) {\n      ctx.lineTo(i, initY + Math.sin((i + tick) / 20) * 10);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + Math.sin(tick / 20) * 10);\n    ctx.closePath();\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n    ctx.fill();\n  }\n})\n```\n\npaintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif)\n\n然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：\n\n##### 1）波纹高度（Y）随位置（X）变化而不规则变化\n\n![](http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg)\n\n把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；\n\n##### 2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\n\n动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。\n\n提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？\n\n为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：\n\n```js\n// paintworklet.js\nimport SimplexNoise from 'simplex-noise';\nconst sim = new SimplexNoise(() => 1);\n\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n\n  paint(ctx, geom, properties) {\n    const tick = Number(properties.get('--animation-tick'));\n\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.4)', 0.004, tick, 15, 0.4);\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.5)', 0.006, tick, 12, 0.4);\n  }\n  \n  /**\n   * 绘制波纹\n   */\n  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) {\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * ih;\n    const speedT = tick * ratio;\n\n    ctx.beginPath();\n    for (let x = 0, speedX = 0; x <= width; x++) {\n      speedX += ratio * 1;\n      var y = initY + sim.noise2D(speedX, speedT) * amp;\n      ctx[x === 0 ? 'moveTo' : 'lineTo'](x, y);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + sim.noise2D(0, speedT) * amp);\n    ctx.closePath();\n\n    ctx.fillStyle = fillColor;\n    ctx.fill();\n  }\n})\n```\n\n修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！\n\n![](http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif)\n\n## 参考文章\n\n> [CSS Painting API Level 1](https://www.w3.org/TR/css-paint-api-1/)\n> [CSS Layout API Level 1](https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/)\n> [CSS 魔術師 Houdini API 介紹](https://blog.techbridge.cc/2017/05/23/css-houdini/)\n","source":"_posts/2019-08/CSS Houdini实现动态波浪纹.md","raw":"---\ntitle: CSS Houdini实现动态波浪纹\nsubtitle: CSS Houdini号称CSS领域最令人振奋的革新，它直接将CSS的API暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的CSS属性，从而定制和扩展浏览器的展示行为。\ncover: https://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg\nthumbnail: https://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg\ndate: 2019-07-12 19:00:00\ntags:\n  - CSS\n  - CSS Houdini\ncategories: Web开发\nckey: 22\nauthor:\n  nick: 黄浩群\n  github_name: huanghaoqun\n---\n\n> 作者：黄浩群 \n\nCSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。\n<!--more-->\n## 背景\n\n我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。\n\n## 什么是 CSS Houdini？\n\nCSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。\n\n![](http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png)\n\nCSS Houdini 目前主要提供了以下几个 API：\n\n#### CSS Properties and Values API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png)\n\n允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 `--` 开头，通过 `var()` 调用：\n\n```css\ndiv {\n  --font-color: #9e4a9b;\n  color: var(--font-color);\n}\n```\n\n此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：\n\n```css\n.container {\n  --font-color: #9e4a9b;\n}\n.container .text {\n  color: var(--font-color);\n}\n```\n\n定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：\n\n ```css\n.text {\n  --box-shadow-color: #3a4ba2;\n  box-shadow: 0 0 30px var(--box-shadow-color);\n}\n.text:hover {\n  --box-shadow-color: #7f2c2b;\n}\n ```\n\n#### Painting API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png)\n\n允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，\"怎么画\" 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：\n\n```js\nregisterPaint('rect', class {\n  paint(ctx, size, properties, args) {\n    // @TODO\n  }\n});\n```\n\nregisterPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：\n\n- `ctx`：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。\n- `size`：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。\n- `properties`：包含节点的 CSS 属性，需要调用静态方法 `inputProperties` 声明注入。\n- `args`: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 `inputArguments` 声明注入。\n\n编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：\n\n```css\n.wrapper {\n  background-image: paint(rect);\n}\n```\n\nPainting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。\n\n#### Layout API\n\n允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，\"如何布局\" 的逻辑需要我们自己编写：\n\n```js\nregisterLayout('block-like', class {\n  layout(children, edges, constraints, properties, breakToken) {\n    // @TODO\n    return {\n      // inlineSize: number,\n      // blockSize: number,\n      // autoBlockSize: number,\n      // childFragments: sequence<LayoutFragment>\n    }\n  }\n})\n```\n\nregisterLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。\n\n同样的，调用时只需：\n\n```css\n.wrapper {\n  display: layout('block-like');\n}\n```\n\n因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。\n\n#### Worklets\n\nregisterPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：\n\n```js\nif (\"paintWorklet\" in CSS) {\n  CSS.paintWorklet.addModule(\"paintworklet.js\");\n}\n```\n\n```js\nif (\"layoutWorklet\" in CSS) {\n  CSS.layoutWorklet.addModule(\"layoutworklet.js\");\n}\n```\n\n\n## 基础：三步用上 Painting API\n\n我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 `--rect-color` 指定。\n\n#### 1、编写一个 Paint 类：\n\n新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：\n\n```js\nregisterPaint(\"rect\", class {\n  static get inputProperties() {\n    return [\"--rect-color\"];\n  }\n  paint(ctx, geom, properties) {\n    const color = properties.get(\"--rect-color\")[0];\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, geom.width, geom.height);\n  }\n});\n```\n\n上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 `--rect-color` 变量，并将元素的背景填充为指定颜色。由于需要使用属性 `--rect-color`，我们需要在静态方法 `inputProperties` 中声明。\n\n#### 2、Worklets 加载 Paint 类：\n\nHTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：\n\n```html\n<div class=\"rect\"></div>\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n  }\n</script>\n```\n\n#### 3、使用 Paint 类：\n\nCSS 中使用的时候，只需要调用 paint 方法：\n\n```css\n.rect {\n  width: 100vw;\n  height: 100vh;\n  background-image: paint(rect);\n  --rect-color: rgb(255, 64, 129);\n}\n```\n\n可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。\n\n## 进阶：实现动态波纹\n\n根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：\n\n```html\n<!-- index.html -->\n<div id=\"wave\"></div>\n\n<style>\n  #wave {\n    width: 20%;\n    height: 70vh;\n    margin: 10vh auto;\n    background-color: #ff3e81;\n    background-image: paint(wave);\n  }\n</style>\n\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n\n    const wave = document.querySelector(\"#wave\");\n    let tick = 0;  \n    requestAnimationFrame(function raf(now) {\n      tick += 1;\n      wave.style.cssText = `--animation-tick: ${tick};`;\n      requestAnimationFrame(raf);\n    });\n  }\n</script>\n```\n\n```js\n// paintworklet.js\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n  paint(ctx, geom, properties) {\n    let tick = Number(properties.get('--animation-tick'));\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * 0.4;\n    tick = tick * 2;\n\n    ctx.beginPath();\n    ctx.moveTo(0, initY + Math.sin(tick / 20) * 10);\n    for (let i = 1; i <= width; i++) {\n      ctx.lineTo(i, initY + Math.sin((i + tick) / 20) * 10);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + Math.sin(tick / 20) * 10);\n    ctx.closePath();\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n    ctx.fill();\n  }\n})\n```\n\npaintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif)\n\n然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：\n\n##### 1）波纹高度（Y）随位置（X）变化而不规则变化\n\n![](http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg)\n\n把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；\n\n##### 2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\n\n动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。\n\n提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？\n\n为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：\n\n```js\n// paintworklet.js\nimport SimplexNoise from 'simplex-noise';\nconst sim = new SimplexNoise(() => 1);\n\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n\n  paint(ctx, geom, properties) {\n    const tick = Number(properties.get('--animation-tick'));\n\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.4)', 0.004, tick, 15, 0.4);\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.5)', 0.006, tick, 12, 0.4);\n  }\n  \n  /**\n   * 绘制波纹\n   */\n  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) {\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * ih;\n    const speedT = tick * ratio;\n\n    ctx.beginPath();\n    for (let x = 0, speedX = 0; x <= width; x++) {\n      speedX += ratio * 1;\n      var y = initY + sim.noise2D(speedX, speedT) * amp;\n      ctx[x === 0 ? 'moveTo' : 'lineTo'](x, y);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + sim.noise2D(0, speedT) * amp);\n    ctx.closePath();\n\n    ctx.fillStyle = fillColor;\n    ctx.fill();\n  }\n})\n```\n\n修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！\n\n![](http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif)\n\n## 参考文章\n\n> [CSS Painting API Level 1](https://www.w3.org/TR/css-paint-api-1/)\n> [CSS Layout API Level 1](https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/)\n> [CSS 魔術師 Houdini API 介紹](https://blog.techbridge.cc/2017/05/23/css-houdini/)\n","slug":"CSS Houdini实现动态波浪纹","published":1,"updated":"2019-11-20T05:53:27.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflp80001soyxjs81yfwb","content":"<blockquote>\n<p>作者：黄浩群 </p>\n</blockquote>\n<p>CSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。</p>\n<a id=\"more\"></a>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。</p>\n<h2 id=\"什么是-CSS-Houdini？\"><a href=\"#什么是-CSS-Houdini？\" class=\"headerlink\" title=\"什么是 CSS Houdini？\"></a>什么是 CSS Houdini？</h2><p>CSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png\" alt></p>\n<p>CSS Houdini 目前主要提供了以下几个 API：</p>\n<h4 id=\"CSS-Properties-and-Values-API\"><a href=\"#CSS-Properties-and-Values-API\" class=\"headerlink\" title=\"CSS Properties and Values API\"></a>CSS Properties and Values API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png\" alt></p>\n<p>允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 <code>--</code> 开头，通过 <code>var()</code> 调用：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--font-color</span>: <span class=\"hljs-number\">#9e4a9b</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--font-color</span>: <span class=\"hljs-number\">#9e4a9b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：</p>\n <figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--box-shadow-color</span>: <span class=\"hljs-number\">#3a4ba2</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">30px</span> <span class=\"hljs-built_in\">var</span>(--box-shadow-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.text</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--box-shadow-color</span>: <span class=\"hljs-number\">#7f2c2b</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Painting-API\"><a href=\"#Painting-API\" class=\"headerlink\" title=\"Painting API\"></a>Painting API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png\" alt></p>\n<p>允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，”怎么画” 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"hljs-string\">'rect'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  paint(ctx, size, properties, args) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// @TODO</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>registerPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：</p>\n<ul>\n<li><code>ctx</code>：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。</li>\n<li><code>size</code>：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。</li>\n<li><code>properties</code>：包含节点的 CSS 属性，需要调用静态方法 <code>inputProperties</code> 声明注入。</li>\n<li><code>args</code>: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 <code>inputArguments</code> 声明注入。</li>\n</ul>\n<p>编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(rect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Painting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。</p>\n<h4 id=\"Layout-API\"><a href=\"#Layout-API\" class=\"headerlink\" title=\"Layout API\"></a>Layout API</h4><p>允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，”如何布局” 的逻辑需要我们自己编写：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerLayout(<span class=\"hljs-string\">'block-like'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  layout(children, edges, constraints, properties, breakToken) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// @TODO</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// inlineSize: number,</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// blockSize: number,</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// autoBlockSize: number,</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// childFragments: sequence&lt;LayoutFragment&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>registerLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。</p>\n<p>同样的，调用时只需：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: <span class=\"hljs-built_in\">layout</span>(<span class=\"hljs-string\">'block-like'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。</p>\n<h4 id=\"Worklets\"><a href=\"#Worklets\" class=\"headerlink\" title=\"Worklets\"></a>Worklets</h4><p>registerPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"paintWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.paintWorklet.addModule(<span class=\"hljs-string\">\"paintworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"layoutWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.layoutWorklet.addModule(<span class=\"hljs-string\">\"layoutworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础：三步用上-Painting-API\"><a href=\"#基础：三步用上-Painting-API\" class=\"headerlink\" title=\"基础：三步用上 Painting API\"></a>基础：三步用上 Painting API</h2><p>我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 <code>--rect-color</code> 指定。</p>\n<h4 id=\"1、编写一个-Paint-类：\"><a href=\"#1、编写一个-Paint-类：\" class=\"headerlink\" title=\"1、编写一个 Paint 类：\"></a>1、编写一个 Paint 类：</h4><p>新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"hljs-string\">\"rect\"</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">\"--rect-color\"</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> color = properties.get(<span class=\"hljs-string\">\"--rect-color\"</span>)[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    ctx.fillStyle = color;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, geom.width, geom.height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 <code>--rect-color</code> 变量，并将元素的背景填充为指定颜色。由于需要使用属性 <code>--rect-color</code>，我们需要在静态方法 <code>inputProperties</code> 中声明。</p>\n<h4 id=\"2、Worklets-加载-Paint-类：\"><a href=\"#2、Worklets-加载-Paint-类：\" class=\"headerlink\" title=\"2、Worklets 加载 Paint 类：\"></a>2、Worklets 加载 Paint 类：</h4><p>HTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"rect\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"paintWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    CSS.paintWorklet.addModule(<span class=\"hljs-string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、使用-Paint-类：\"><a href=\"#3、使用-Paint-类：\" class=\"headerlink\" title=\"3、使用 Paint 类：\"></a>3、使用 Paint 类：</h4><p>CSS 中使用的时候，只需要调用 paint 方法：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.rect</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(rect);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--rect-color</span>: <span class=\"hljs-built_in\">rgb</span>(255, 64, 129);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。</p>\n<h2 id=\"进阶：实现动态波纹\"><a href=\"#进阶：实现动态波纹\" class=\"headerlink\" title=\"进阶：实现动态波纹\"></a>进阶：实现动态波纹</h2><p>根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"wave\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-id\">#wave</span> &#123;</span></span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    height: 70vh;</span><br><span class=\"line\">    margin: 10vh auto;</span><br><span class=\"line\"><span class=\"hljs-css\">    <span class=\"hljs-selector-tag\">background-color</span>: <span class=\"hljs-selector-id\">#ff3e81</span>;</span></span><br><span class=\"line\">    background-image: paint(wave);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"paintWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    CSS.paintWorklet.addModule(<span class=\"hljs-string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-keyword\">const</span> wave = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#wave\"</span>);</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-keyword\">let</span> tick = <span class=\"hljs-number\">0</span>;  </span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    requestAnimationFrame(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">raf</span>(<span class=\"hljs-params\">now</span>) </span>&#123;</span></span><br><span class=\"line\">      tick += 1;</span><br><span class=\"line\"><span class=\"hljs-javascript\">      wave.style.cssText = <span class=\"hljs-string\">`--animation-tick: <span class=\"hljs-subst\">$&#123;tick&#125;</span>;`</span>;</span></span><br><span class=\"line\">      requestAnimationFrame(raf);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// paintworklet.js</span></span><br><span class=\"line\">registerPaint(<span class=\"hljs-string\">'wave'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> tick = <span class=\"hljs-built_in\">Number</span>(properties.get(<span class=\"hljs-string\">'--animation-tick'</span>));</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> initY = height * <span class=\"hljs-number\">0.4</span>;</span><br><span class=\"line\">    tick = tick * <span class=\"hljs-number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(<span class=\"hljs-number\">0</span>, initY + <span class=\"hljs-built_in\">Math</span>.sin(tick / <span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">10</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      ctx.lineTo(i, initY + <span class=\"hljs-built_in\">Math</span>.sin((i + tick) / <span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, initY + <span class=\"hljs-built_in\">Math</span>.sin(tick / <span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">10</span>);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = <span class=\"hljs-string\">'rgba(255, 255, 255, 0.5)'</span>;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>paintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif\" alt></p>\n<p>然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：</p>\n<h5 id=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"><a href=\"#1）波纹高度（Y）随位置（X）变化而不规则变化\" class=\"headerlink\" title=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"></a>1）波纹高度（Y）随位置（X）变化而不规则变化</h5><p><img src=\"http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg\" alt></p>\n<p>把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；</p>\n<h5 id=\"2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\"><a href=\"#2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\" class=\"headerlink\" title=\"2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\"></a>2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化</h5><p>动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。</p>\n<p>提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？</p>\n<p>为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// paintworklet.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> SimplexNoise <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'simplex-noise'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> sim = <span class=\"hljs-keyword\">new</span> SimplexNoise(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">registerPaint(<span class=\"hljs-string\">'wave'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> tick = <span class=\"hljs-built_in\">Number</span>(properties.get(<span class=\"hljs-string\">'--animation-tick'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.drawWave(ctx, geom, <span class=\"hljs-string\">'rgba(255, 255, 255, 0.4)'</span>, <span class=\"hljs-number\">0.004</span>, tick, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">0.4</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.drawWave(ctx, geom, <span class=\"hljs-string\">'rgba(255, 255, 255, 0.5)'</span>, <span class=\"hljs-number\">0.006</span>, tick, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0.4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * 绘制波纹</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> initY = height * ih;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> speedT = tick * ratio;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>, speedX = <span class=\"hljs-number\">0</span>; x &lt;= width; x++) &#123;</span><br><span class=\"line\">      speedX += ratio * <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">var</span> y = initY + sim.noise2D(speedX, speedT) * amp;</span><br><span class=\"line\">      ctx[x === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">'moveTo'</span> : <span class=\"hljs-string\">'lineTo'</span>](x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, initY + sim.noise2D(<span class=\"hljs-number\">0</span>, speedT) * amp);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = fillColor;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://www.w3.org/TR/css-paint-api-1/\" target=\"_blank\" rel=\"noopener\">CSS Painting API Level 1</a><br><a href=\"https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/\" target=\"_blank\" rel=\"noopener\">CSS Layout API Level 1</a><br><a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"noopener\">CSS 魔術師 Houdini API 介紹</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：黄浩群 </p>\n</blockquote>\n<p>CSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。</p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。</p>\n<h2 id=\"什么是-CSS-Houdini？\"><a href=\"#什么是-CSS-Houdini？\" class=\"headerlink\" title=\"什么是 CSS Houdini？\"></a>什么是 CSS Houdini？</h2><p>CSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png\" alt></p>\n<p>CSS Houdini 目前主要提供了以下几个 API：</p>\n<h4 id=\"CSS-Properties-and-Values-API\"><a href=\"#CSS-Properties-and-Values-API\" class=\"headerlink\" title=\"CSS Properties and Values API\"></a>CSS Properties and Values API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png\" alt></p>\n<p>允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 <code>--</code> 开头，通过 <code>var()</code> 调用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--font-color</span>: <span class=\"number\">#9e4a9b</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--font-color</span>: <span class=\"number\">#9e4a9b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: <span class=\"number\">#3a4ba2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"built_in\">var</span>(--box-shadow-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.text</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: <span class=\"number\">#7f2c2b</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Painting-API\"><a href=\"#Painting-API\" class=\"headerlink\" title=\"Painting API\"></a>Painting API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png\" alt></p>\n<p>允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，”怎么画” 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"string\">'rect'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  paint(ctx, size, properties, args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @TODO</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>registerPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：</p>\n<ul>\n<li><code>ctx</code>：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。</li>\n<li><code>size</code>：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。</li>\n<li><code>properties</code>：包含节点的 CSS 属性，需要调用静态方法 <code>inputProperties</code> 声明注入。</li>\n<li><code>args</code>: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 <code>inputArguments</code> 声明注入。</li>\n</ul>\n<p>编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">paint</span>(rect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Painting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。</p>\n<h4 id=\"Layout-API\"><a href=\"#Layout-API\" class=\"headerlink\" title=\"Layout API\"></a>Layout API</h4><p>允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，”如何布局” 的逻辑需要我们自己编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerLayout(<span class=\"string\">'block-like'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  layout(children, edges, constraints, properties, breakToken) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @TODO</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// inlineSize: number,</span></span><br><span class=\"line\">      <span class=\"comment\">// blockSize: number,</span></span><br><span class=\"line\">      <span class=\"comment\">// autoBlockSize: number,</span></span><br><span class=\"line\">      <span class=\"comment\">// childFragments: sequence&lt;LayoutFragment&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>registerLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。</p>\n<p>同样的，调用时只需：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: <span class=\"built_in\">layout</span>(<span class=\"string\">'block-like'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。</p>\n<h4 id=\"Worklets\"><a href=\"#Worklets\" class=\"headerlink\" title=\"Worklets\"></a>Worklets</h4><p>registerPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"paintWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.paintWorklet.addModule(<span class=\"string\">\"paintworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"layoutWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.layoutWorklet.addModule(<span class=\"string\">\"layoutworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础：三步用上-Painting-API\"><a href=\"#基础：三步用上-Painting-API\" class=\"headerlink\" title=\"基础：三步用上 Painting API\"></a>基础：三步用上 Painting API</h2><p>我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 <code>--rect-color</code> 指定。</p>\n<h4 id=\"1、编写一个-Paint-类：\"><a href=\"#1、编写一个-Paint-类：\" class=\"headerlink\" title=\"1、编写一个 Paint 类：\"></a>1、编写一个 Paint 类：</h4><p>新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"string\">\"rect\"</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">\"--rect-color\"</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> color = properties.get(<span class=\"string\">\"--rect-color\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    ctx.fillStyle = color;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, geom.width, geom.height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 <code>--rect-color</code> 变量，并将元素的背景填充为指定颜色。由于需要使用属性 <code>--rect-color</code>，我们需要在静态方法 <code>inputProperties</code> 中声明。</p>\n<h4 id=\"2、Worklets-加载-Paint-类：\"><a href=\"#2、Worklets-加载-Paint-类：\" class=\"headerlink\" title=\"2、Worklets 加载 Paint 类：\"></a>2、Worklets 加载 Paint 类：</h4><p>HTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rect\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"paintWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    CSS.paintWorklet.addModule(<span class=\"string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、使用-Paint-类：\"><a href=\"#3、使用-Paint-类：\" class=\"headerlink\" title=\"3、使用 Paint 类：\"></a>3、使用 Paint 类：</h4><p>CSS 中使用的时候，只需要调用 paint 方法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.rect</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">paint</span>(rect);</span><br><span class=\"line\">  <span class=\"attribute\">--rect-color</span>: <span class=\"built_in\">rgb</span>(255, 64, 129);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。</p>\n<h2 id=\"进阶：实现动态波纹\"><a href=\"#进阶：实现动态波纹\" class=\"headerlink\" title=\"进阶：实现动态波纹\"></a>进阶：实现动态波纹</h2><p>根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wave\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#wave</span> &#123;</span></span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    height: 70vh;</span><br><span class=\"line\">    margin: 10vh auto;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff3e81</span>;</span></span><br><span class=\"line\">    background-image: paint(wave);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"paintWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    CSS.paintWorklet.addModule(<span class=\"string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> wave = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#wave\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> tick = <span class=\"number\">0</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">raf</span>(<span class=\"params\">now</span>) </span>&#123;</span></span><br><span class=\"line\">      tick += 1;</span><br><span class=\"line\"><span class=\"javascript\">      wave.style.cssText = <span class=\"string\">`--animation-tick: <span class=\"subst\">$&#123;tick&#125;</span>;`</span>;</span></span><br><span class=\"line\">      requestAnimationFrame(raf);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// paintworklet.js</span></span><br><span class=\"line\">registerPaint(<span class=\"string\">'wave'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tick = <span class=\"built_in\">Number</span>(properties.get(<span class=\"string\">'--animation-tick'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initY = height * <span class=\"number\">0.4</span>;</span><br><span class=\"line\">    tick = tick * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(<span class=\"number\">0</span>, initY + <span class=\"built_in\">Math</span>.sin(tick / <span class=\"number\">20</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      ctx.lineTo(i, initY + <span class=\"built_in\">Math</span>.sin((i + tick) / <span class=\"number\">20</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, initY + <span class=\"built_in\">Math</span>.sin(tick / <span class=\"number\">20</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = <span class=\"string\">'rgba(255, 255, 255, 0.5)'</span>;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>paintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif\" alt></p>\n<p>然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：</p>\n<h5 id=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"><a href=\"#1）波纹高度（Y）随位置（X）变化而不规则变化\" class=\"headerlink\" title=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"></a>1）波纹高度（Y）随位置（X）变化而不规则变化</h5><p><img src=\"http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg\" alt></p>\n<p>把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；</p>\n<h5 id=\"2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\"><a href=\"#2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\" class=\"headerlink\" title=\"2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\"></a>2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化</h5><p>动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。</p>\n<p>提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？</p>\n<p>为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// paintworklet.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimplexNoise <span class=\"keyword\">from</span> <span class=\"string\">'simplex-noise'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sim = <span class=\"keyword\">new</span> SimplexNoise(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">registerPaint(<span class=\"string\">'wave'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tick = <span class=\"built_in\">Number</span>(properties.get(<span class=\"string\">'--animation-tick'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawWave(ctx, geom, <span class=\"string\">'rgba(255, 255, 255, 0.4)'</span>, <span class=\"number\">0.004</span>, tick, <span class=\"number\">15</span>, <span class=\"number\">0.4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawWave(ctx, geom, <span class=\"string\">'rgba(255, 255, 255, 0.5)'</span>, <span class=\"number\">0.006</span>, tick, <span class=\"number\">12</span>, <span class=\"number\">0.4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 绘制波纹</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initY = height * ih;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> speedT = tick * ratio;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x = <span class=\"number\">0</span>, speedX = <span class=\"number\">0</span>; x &lt;= width; x++) &#123;</span><br><span class=\"line\">      speedX += ratio * <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> y = initY + sim.noise2D(speedX, speedT) * amp;</span><br><span class=\"line\">      ctx[x === <span class=\"number\">0</span> ? <span class=\"string\">'moveTo'</span> : <span class=\"string\">'lineTo'</span>](x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, initY + sim.noise2D(<span class=\"number\">0</span>, speedT) * amp);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = fillColor;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://www.w3.org/TR/css-paint-api-1/\" target=\"_blank\" rel=\"noopener\">CSS Painting API Level 1</a><br><a href=\"https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/\" target=\"_blank\" rel=\"noopener\">CSS Layout API Level 1</a><br><a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"noopener\">CSS 魔術師 Houdini API 介紹</a></p>\n</blockquote>"},{"title":"Javascript抽象语法树上篇(基础篇)","subtitle":"介绍AST基础、规范解读、业界现状","cover":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","thumbnail":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","date":"2019-07-19T14:00:00.000Z","author":{"nick":"陈晓强","github_name":"chenxiaoqiang12"},"_content":"\n> 作者：陈晓强 \n\n# 一、基础\n\n## 为什么要了解抽象语法树\n日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。\n<!--more-->\n## 什么是抽象语法树\n抽象语法树即：Abstract Syntax Tree。简称AST，见下图。\n1. 图中code先经过parse转换成一个树状数据结构\n2. 接着对树中节点进行转换，图中将叶子节点对换位置\n3. 将树状结构通过generate再生成code\n\n图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。\n\n![AST示例](https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png)  \n\n## 如何获得抽象语法树\n获得抽象语法树的过程为：代码 => 词法分析 => 语法分析 => AST  \n`词法分析`：把字符串形式的代码转换为令牌（tokens）流。  \n`语法分析`：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。  \n如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中`function`、`square`、`(`、`)`、`{`、`}`等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成`二元表达式`，关键词return与二元表达式组合成`return语句`。最后组合成一个`函数声明语句`。\n\n![语法分析](https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg)\n\n# 二、规范\n如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构\n\n![AST结构](https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg)\n\n那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。\n\n## 规范起源\n在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是[Parser_API](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[1]</sup>，后来被人整理到github项目[estree](https://github.com/estree/estree)<sup>[2]</sup>，慢慢的成了业界的规范。\n## 规范解读\n上面提到的`Parser_API`是规范的原文，中文版:[Parser_API](https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目[estree](https://github.com/estree/estree)，打开项目地址，如下图\n![estree](https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg)  \n其中最下面的`es5.md`为ES5规范，仅列出ES5的内容，`es2015.md`为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的`es2019.md`即ES10是对ES9的补充，仅有一条规则。\n\n打开最基础的`es5.md`，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用https://astexplorer.net/ 辅助阅读，可以实时输出AST。\n- [Node objects](###node-objects)\n- [Programs](###programs)\n- [Identifier](###identifier)\n- [Literal](###literal)\n- [Functions](###functions)\n- [Statements](###statements)\n- [Declarations](###declarations)\n- [Expressions](###expressions)\n- [Patterns](###patterns)\n\n\n### Node objects\n\n```js\ninterface Node {\n    type: string;\n    loc: SourceLocation | null;\n}\n```\n\n定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段\n\n`type`字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口  \n`loc`字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下\n\n```js\ninterface SourceLocation {\n    source: string | null;\n    start: Position;\n    end: Position;\n}\n```\n\n每个 `Position` 对象包含了行（从1开始）和列（从0开始）信息，接口如下\n\n```js\ninterface Position {\n    line: number; // >= 1\n    column: number; // >= 0\n}\n```\n\n### Programs\n\n```js\ninterface Program <: Node {\n    type: \"Program\";\n    body: [ Directive | Statement ];\n}\n```\n\n一棵完整的程序代码树，一般作为根节点\n\n### Identifier\n\n```js\ninterface Identifier <: Expression, Pattern {\n    type: \"Identifier\";\n    name: string;\n}\n```\n标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。\n\n### Literal\n\n```js\ninterface Literal <: Expression {\n    type: \"Literal\";\n    value: string | boolean | null | number | RegExp;\n}\n```\n字面量，如`“hello”`、`true`、`null`、`100`、`/\\d/`这些，注意字面量本身也是一个表达式语句(ExpressionStatement)\n\n### Functions\n\n```js\ninterface Function <: Node {\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: FunctionBody;\n}\n```\n\n一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。\n\n### Statements\n\n```js\ninterface Statement <: Node { }\n```\n语句，子类有很多，`块语句`、`if/switch语句`、`return语句`、`for/while语句`、`with语句`等等\n\n### Declarations\n\n```js\ninterface Declaration <: Statement { }\n```\n声明，子类主要有变量申明、函数声明。\n\n### Expressions\n\n```js\ninterface Expression <: Node { }\n```\n表达式，子类很多，有二元表达式(`n*n`)、函数表达式(var fun = `function(){}`)、数组表达式(var arr = `[]`)、对象表达式(var obj = `{}`)、赋值表达式(`a = 1`)等等\n\n### Patterns\n\n```js\ninterface Pattern <: Node { }\n```\n\n模式，主要在 ES6 的解构赋值中有意义(let `{name}` = user，其中{name}部分为`ObjectPattern`)，在 ES5 中，可以理解为和`Identifier` 差不多的东西。\n\n# 三、现状\n通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST\n- Esprima，比较经典，出现的比较早\n- Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析\n- UglifyJS2，主要用于代码压缩\n- babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser\n- Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代\n- flow、shift等等\n\nAST基础篇介绍完毕，下篇将从实践的角度继续介绍\n\n**References**  \n[1] Parser_API：https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API  \n[2] estree：https://github.com/estree/estree  \n[3] Parser_API(中文)：https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API  ","source":"_posts/2019-08/Javascript抽象语法树上篇(基础篇).md","raw":"---\ntitle: Javascript抽象语法树上篇(基础篇)\nsubtitle: 介绍AST基础、规范解读、业界现状\ncover: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\nthumbnail: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\ndate: 2019-07-19 22:00:00\ntags: \n  - AST\ncategories: Node.js\nauthor:\n    nick: 陈晓强\n    github_name: chenxiaoqiang12\n---\n\n> 作者：陈晓强 \n\n# 一、基础\n\n## 为什么要了解抽象语法树\n日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。\n<!--more-->\n## 什么是抽象语法树\n抽象语法树即：Abstract Syntax Tree。简称AST，见下图。\n1. 图中code先经过parse转换成一个树状数据结构\n2. 接着对树中节点进行转换，图中将叶子节点对换位置\n3. 将树状结构通过generate再生成code\n\n图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。\n\n![AST示例](https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png)  \n\n## 如何获得抽象语法树\n获得抽象语法树的过程为：代码 => 词法分析 => 语法分析 => AST  \n`词法分析`：把字符串形式的代码转换为令牌（tokens）流。  \n`语法分析`：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。  \n如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中`function`、`square`、`(`、`)`、`{`、`}`等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成`二元表达式`，关键词return与二元表达式组合成`return语句`。最后组合成一个`函数声明语句`。\n\n![语法分析](https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg)\n\n# 二、规范\n如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构\n\n![AST结构](https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg)\n\n那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。\n\n## 规范起源\n在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是[Parser_API](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[1]</sup>，后来被人整理到github项目[estree](https://github.com/estree/estree)<sup>[2]</sup>，慢慢的成了业界的规范。\n## 规范解读\n上面提到的`Parser_API`是规范的原文，中文版:[Parser_API](https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目[estree](https://github.com/estree/estree)，打开项目地址，如下图\n![estree](https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg)  \n其中最下面的`es5.md`为ES5规范，仅列出ES5的内容，`es2015.md`为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的`es2019.md`即ES10是对ES9的补充，仅有一条规则。\n\n打开最基础的`es5.md`，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用https://astexplorer.net/ 辅助阅读，可以实时输出AST。\n- [Node objects](###node-objects)\n- [Programs](###programs)\n- [Identifier](###identifier)\n- [Literal](###literal)\n- [Functions](###functions)\n- [Statements](###statements)\n- [Declarations](###declarations)\n- [Expressions](###expressions)\n- [Patterns](###patterns)\n\n\n### Node objects\n\n```js\ninterface Node {\n    type: string;\n    loc: SourceLocation | null;\n}\n```\n\n定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段\n\n`type`字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口  \n`loc`字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下\n\n```js\ninterface SourceLocation {\n    source: string | null;\n    start: Position;\n    end: Position;\n}\n```\n\n每个 `Position` 对象包含了行（从1开始）和列（从0开始）信息，接口如下\n\n```js\ninterface Position {\n    line: number; // >= 1\n    column: number; // >= 0\n}\n```\n\n### Programs\n\n```js\ninterface Program <: Node {\n    type: \"Program\";\n    body: [ Directive | Statement ];\n}\n```\n\n一棵完整的程序代码树，一般作为根节点\n\n### Identifier\n\n```js\ninterface Identifier <: Expression, Pattern {\n    type: \"Identifier\";\n    name: string;\n}\n```\n标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。\n\n### Literal\n\n```js\ninterface Literal <: Expression {\n    type: \"Literal\";\n    value: string | boolean | null | number | RegExp;\n}\n```\n字面量，如`“hello”`、`true`、`null`、`100`、`/\\d/`这些，注意字面量本身也是一个表达式语句(ExpressionStatement)\n\n### Functions\n\n```js\ninterface Function <: Node {\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: FunctionBody;\n}\n```\n\n一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。\n\n### Statements\n\n```js\ninterface Statement <: Node { }\n```\n语句，子类有很多，`块语句`、`if/switch语句`、`return语句`、`for/while语句`、`with语句`等等\n\n### Declarations\n\n```js\ninterface Declaration <: Statement { }\n```\n声明，子类主要有变量申明、函数声明。\n\n### Expressions\n\n```js\ninterface Expression <: Node { }\n```\n表达式，子类很多，有二元表达式(`n*n`)、函数表达式(var fun = `function(){}`)、数组表达式(var arr = `[]`)、对象表达式(var obj = `{}`)、赋值表达式(`a = 1`)等等\n\n### Patterns\n\n```js\ninterface Pattern <: Node { }\n```\n\n模式，主要在 ES6 的解构赋值中有意义(let `{name}` = user，其中{name}部分为`ObjectPattern`)，在 ES5 中，可以理解为和`Identifier` 差不多的东西。\n\n# 三、现状\n通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST\n- Esprima，比较经典，出现的比较早\n- Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析\n- UglifyJS2，主要用于代码压缩\n- babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser\n- Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代\n- flow、shift等等\n\nAST基础篇介绍完毕，下篇将从实践的角度继续介绍\n\n**References**  \n[1] Parser_API：https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API  \n[2] estree：https://github.com/estree/estree  \n[3] Parser_API(中文)：https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API  ","slug":"Javascript抽象语法树上篇(基础篇)","published":1,"updated":"2019-11-20T05:13:20.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpf0002soyx93vyaiwv","content":"<blockquote>\n<p>作者：陈晓强 </p>\n</blockquote>\n<h1 id=\"一、基础\"><a href=\"#一、基础\" class=\"headerlink\" title=\"一、基础\"></a>一、基础</h1><h2 id=\"为什么要了解抽象语法树\"><a href=\"#为什么要了解抽象语法树\" class=\"headerlink\" title=\"为什么要了解抽象语法树\"></a>为什么要了解抽象语法树</h2><p>日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h2><p>抽象语法树即：Abstract Syntax Tree。简称AST，见下图。</p>\n<ol>\n<li>图中code先经过parse转换成一个树状数据结构</li>\n<li>接着对树中节点进行转换，图中将叶子节点对换位置</li>\n<li>将树状结构通过generate再生成code</li>\n</ol>\n<p>图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\" alt=\"AST示例\">  </p>\n<h2 id=\"如何获得抽象语法树\"><a href=\"#如何获得抽象语法树\" class=\"headerlink\" title=\"如何获得抽象语法树\"></a>如何获得抽象语法树</h2><p>获得抽象语法树的过程为：代码 =&gt; 词法分析 =&gt; 语法分析 =&gt; AST<br><code>词法分析</code>：把字符串形式的代码转换为令牌（tokens）流。<br><code>语法分析</code>：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。<br>如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中<code>function</code>、<code>square</code>、<code>(</code>、<code>)</code>、<code>{</code>、<code>}</code>等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成<code>二元表达式</code>，关键词return与二元表达式组合成<code>return语句</code>。最后组合成一个<code>函数声明语句</code>。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg\" alt=\"语法分析\"></p>\n<h1 id=\"二、规范\"><a href=\"#二、规范\" class=\"headerlink\" title=\"二、规范\"></a>二、规范</h1><p>如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg\" alt=\"AST结构\"></p>\n<p>那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。</p>\n<h2 id=\"规范起源\"><a href=\"#规范起源\" class=\"headerlink\" title=\"规范起源\"></a>规范起源</h2><p>在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[1]</sup>，后来被人整理到github项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a><sup>[2]</sup>，慢慢的成了业界的规范。</p>\n<h2 id=\"规范解读\"><a href=\"#规范解读\" class=\"headerlink\" title=\"规范解读\"></a>规范解读</h2><p>上面提到的<code>Parser_API</code>是规范的原文，中文版:<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a>，打开项目地址，如下图<br><img src=\"https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg\" alt=\"estree\"><br>其中最下面的<code>es5.md</code>为ES5规范，仅列出ES5的内容，<code>es2015.md</code>为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的<code>es2019.md</code>即ES10是对ES9的补充，仅有一条规则。</p>\n<p>打开最基础的<code>es5.md</code>，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 辅助阅读，可以实时输出AST。</p>\n<ul>\n<li><a href=\"###node-objects\">Node objects</a></li>\n<li><a href=\"###programs\">Programs</a></li>\n<li><a href=\"###identifier\">Identifier</a></li>\n<li><a href=\"###literal\">Literal</a></li>\n<li><a href=\"###functions\">Functions</a></li>\n<li><a href=\"###statements\">Statements</a></li>\n<li><a href=\"###declarations\">Declarations</a></li>\n<li><a href=\"###expressions\">Expressions</a></li>\n<li><a href=\"###patterns\">Patterns</a></li>\n</ul>\n<h3 id=\"Node-objects\"><a href=\"#Node-objects\" class=\"headerlink\" title=\"Node objects\"></a>Node objects</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Node &#123;</span><br><span class=\"line\">    type: string;</span><br><span class=\"line\">    loc: SourceLocation | <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段</p>\n<p><code>type</code>字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口<br><code>loc</code>字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SourceLocation &#123;</span><br><span class=\"line\">    source: string | <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">    start: Position;</span><br><span class=\"line\">    end: Position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个 <code>Position</code> 对象包含了行（从1开始）和列（从0开始）信息，接口如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Position &#123;</span><br><span class=\"line\">    line: number; <span class=\"hljs-comment\">// &gt;= 1</span></span><br><span class=\"line\">    column: number; <span class=\"hljs-comment\">// &gt;= 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Programs\"><a href=\"#Programs\" class=\"headerlink\" title=\"Programs\"></a>Programs</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Program &lt;: Node &#123;</span><br><span class=\"line\">    type: <span class=\"hljs-string\">\"Program\"</span>;</span><br><span class=\"line\">    body: [ Directive | Statement ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一棵完整的程序代码树，一般作为根节点</p>\n<h3 id=\"Identifier\"><a href=\"#Identifier\" class=\"headerlink\" title=\"Identifier\"></a>Identifier</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Identifier &lt;: Expression, Pattern &#123;</span><br><span class=\"line\">    type: <span class=\"hljs-string\">\"Identifier\"</span>;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。</p>\n<h3 id=\"Literal\"><a href=\"#Literal\" class=\"headerlink\" title=\"Literal\"></a>Literal</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Literal &lt;: Expression &#123;</span><br><span class=\"line\">    type: <span class=\"hljs-string\">\"Literal\"</span>;</span><br><span class=\"line\">    value: string | boolean | <span class=\"hljs-literal\">null</span> | number | <span class=\"hljs-built_in\">RegExp</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字面量，如<code>“hello”</code>、<code>true</code>、<code>null</code>、<code>100</code>、<code>/\\d/</code>这些，注意字面量本身也是一个表达式语句(ExpressionStatement)</p>\n<h3 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"hljs-built_in\">Function</span> &lt;: Node &#123;</span><br><span class=\"line\">    id: Identifier | <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">    params: [ Pattern ];</span><br><span class=\"line\">    body: FunctionBody;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。</p>\n<h3 id=\"Statements\"><a href=\"#Statements\" class=\"headerlink\" title=\"Statements\"></a>Statements</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Statement &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>语句，子类有很多，<code>块语句</code>、<code>if/switch语句</code>、<code>return语句</code>、<code>for/while语句</code>、<code>with语句</code>等等</p>\n<h3 id=\"Declarations\"><a href=\"#Declarations\" class=\"headerlink\" title=\"Declarations\"></a>Declarations</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Declaration &lt;: Statement &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明，子类主要有变量申明、函数声明。</p>\n<h3 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Expression &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式，子类很多，有二元表达式(<code>n*n</code>)、函数表达式(var fun = <code>function(){}</code>)、数组表达式(var arr = <code>[]</code>)、对象表达式(var obj = <code>{}</code>)、赋值表达式(<code>a = 1</code>)等等</p>\n<h3 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Pattern &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>模式，主要在 ES6 的解构赋值中有意义(let <code>{name}</code> = user，其中{name}部分为<code>ObjectPattern</code>)，在 ES5 中，可以理解为和<code>Identifier</code> 差不多的东西。</p>\n<h1 id=\"三、现状\"><a href=\"#三、现状\" class=\"headerlink\" title=\"三、现状\"></a>三、现状</h1><p>通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST</p>\n<ul>\n<li>Esprima，比较经典，出现的比较早</li>\n<li>Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析</li>\n<li>UglifyJS2，主要用于代码压缩</li>\n<li>babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser</li>\n<li>Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代</li>\n<li>flow、shift等等</li>\n</ul>\n<p>AST基础篇介绍完毕，下篇将从实践的角度继续介绍</p>\n<p><strong>References</strong><br>[1] Parser_API：<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a><br>[2] estree：<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">https://github.com/estree/estree</a><br>[3] Parser_API(中文)：<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a>  </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：陈晓强 </p>\n</blockquote>\n<h1 id=\"一、基础\"><a href=\"#一、基础\" class=\"headerlink\" title=\"一、基础\"></a>一、基础</h1><h2 id=\"为什么要了解抽象语法树\"><a href=\"#为什么要了解抽象语法树\" class=\"headerlink\" title=\"为什么要了解抽象语法树\"></a>为什么要了解抽象语法树</h2><p>日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。</p>","more":"<h2 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h2><p>抽象语法树即：Abstract Syntax Tree。简称AST，见下图。</p>\n<ol>\n<li>图中code先经过parse转换成一个树状数据结构</li>\n<li>接着对树中节点进行转换，图中将叶子节点对换位置</li>\n<li>将树状结构通过generate再生成code</li>\n</ol>\n<p>图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\" alt=\"AST示例\">  </p>\n<h2 id=\"如何获得抽象语法树\"><a href=\"#如何获得抽象语法树\" class=\"headerlink\" title=\"如何获得抽象语法树\"></a>如何获得抽象语法树</h2><p>获得抽象语法树的过程为：代码 =&gt; 词法分析 =&gt; 语法分析 =&gt; AST<br><code>词法分析</code>：把字符串形式的代码转换为令牌（tokens）流。<br><code>语法分析</code>：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。<br>如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中<code>function</code>、<code>square</code>、<code>(</code>、<code>)</code>、<code>{</code>、<code>}</code>等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成<code>二元表达式</code>，关键词return与二元表达式组合成<code>return语句</code>。最后组合成一个<code>函数声明语句</code>。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg\" alt=\"语法分析\"></p>\n<h1 id=\"二、规范\"><a href=\"#二、规范\" class=\"headerlink\" title=\"二、规范\"></a>二、规范</h1><p>如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg\" alt=\"AST结构\"></p>\n<p>那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。</p>\n<h2 id=\"规范起源\"><a href=\"#规范起源\" class=\"headerlink\" title=\"规范起源\"></a>规范起源</h2><p>在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[1]</sup>，后来被人整理到github项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a><sup>[2]</sup>，慢慢的成了业界的规范。</p>\n<h2 id=\"规范解读\"><a href=\"#规范解读\" class=\"headerlink\" title=\"规范解读\"></a>规范解读</h2><p>上面提到的<code>Parser_API</code>是规范的原文，中文版:<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a>，打开项目地址，如下图<br><img src=\"https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg\" alt=\"estree\"><br>其中最下面的<code>es5.md</code>为ES5规范，仅列出ES5的内容，<code>es2015.md</code>为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的<code>es2019.md</code>即ES10是对ES9的补充，仅有一条规则。</p>\n<p>打开最基础的<code>es5.md</code>，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 辅助阅读，可以实时输出AST。</p>\n<ul>\n<li><a href=\"###node-objects\">Node objects</a></li>\n<li><a href=\"###programs\">Programs</a></li>\n<li><a href=\"###identifier\">Identifier</a></li>\n<li><a href=\"###literal\">Literal</a></li>\n<li><a href=\"###functions\">Functions</a></li>\n<li><a href=\"###statements\">Statements</a></li>\n<li><a href=\"###declarations\">Declarations</a></li>\n<li><a href=\"###expressions\">Expressions</a></li>\n<li><a href=\"###patterns\">Patterns</a></li>\n</ul>\n<h3 id=\"Node-objects\"><a href=\"#Node-objects\" class=\"headerlink\" title=\"Node objects\"></a>Node objects</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Node &#123;</span><br><span class=\"line\">    type: string;</span><br><span class=\"line\">    loc: SourceLocation | <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段</p>\n<p><code>type</code>字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口<br><code>loc</code>字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SourceLocation &#123;</span><br><span class=\"line\">    source: string | <span class=\"literal\">null</span>;</span><br><span class=\"line\">    start: Position;</span><br><span class=\"line\">    end: Position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个 <code>Position</code> 对象包含了行（从1开始）和列（从0开始）信息，接口如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Position &#123;</span><br><span class=\"line\">    line: number; <span class=\"comment\">// &gt;= 1</span></span><br><span class=\"line\">    column: number; <span class=\"comment\">// &gt;= 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Programs\"><a href=\"#Programs\" class=\"headerlink\" title=\"Programs\"></a>Programs</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Program &lt;: Node &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"Program\"</span>;</span><br><span class=\"line\">    body: [ Directive | Statement ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一棵完整的程序代码树，一般作为根节点</p>\n<h3 id=\"Identifier\"><a href=\"#Identifier\" class=\"headerlink\" title=\"Identifier\"></a>Identifier</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Identifier &lt;: Expression, Pattern &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"Identifier\"</span>;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。</p>\n<h3 id=\"Literal\"><a href=\"#Literal\" class=\"headerlink\" title=\"Literal\"></a>Literal</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Literal &lt;: Expression &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"Literal\"</span>;</span><br><span class=\"line\">    value: string | boolean | <span class=\"literal\">null</span> | number | <span class=\"built_in\">RegExp</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字面量，如<code>“hello”</code>、<code>true</code>、<code>null</code>、<code>100</code>、<code>/\\d/</code>这些，注意字面量本身也是一个表达式语句(ExpressionStatement)</p>\n<h3 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"built_in\">Function</span> &lt;: Node &#123;</span><br><span class=\"line\">    id: Identifier | <span class=\"literal\">null</span>;</span><br><span class=\"line\">    params: [ Pattern ];</span><br><span class=\"line\">    body: FunctionBody;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。</p>\n<h3 id=\"Statements\"><a href=\"#Statements\" class=\"headerlink\" title=\"Statements\"></a>Statements</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Statement &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>语句，子类有很多，<code>块语句</code>、<code>if/switch语句</code>、<code>return语句</code>、<code>for/while语句</code>、<code>with语句</code>等等</p>\n<h3 id=\"Declarations\"><a href=\"#Declarations\" class=\"headerlink\" title=\"Declarations\"></a>Declarations</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Declaration &lt;: Statement &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明，子类主要有变量申明、函数声明。</p>\n<h3 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Expression &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式，子类很多，有二元表达式(<code>n*n</code>)、函数表达式(var fun = <code>function(){}</code>)、数组表达式(var arr = <code>[]</code>)、对象表达式(var obj = <code>{}</code>)、赋值表达式(<code>a = 1</code>)等等</p>\n<h3 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Pattern &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>模式，主要在 ES6 的解构赋值中有意义(let <code>{name}</code> = user，其中{name}部分为<code>ObjectPattern</code>)，在 ES5 中，可以理解为和<code>Identifier</code> 差不多的东西。</p>\n<h1 id=\"三、现状\"><a href=\"#三、现状\" class=\"headerlink\" title=\"三、现状\"></a>三、现状</h1><p>通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST</p>\n<ul>\n<li>Esprima，比较经典，出现的比较早</li>\n<li>Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析</li>\n<li>UglifyJS2，主要用于代码压缩</li>\n<li>babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser</li>\n<li>Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代</li>\n<li>flow、shift等等</li>\n</ul>\n<p>AST基础篇介绍完毕，下篇将从实践的角度继续介绍</p>\n<p><strong>References</strong><br>[1] Parser_API：<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a><br>[2] estree：<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">https://github.com/estree/estree</a><br>[3] Parser_API(中文)：<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a>  </p>"},{"title":"Javascript抽象语法树下篇(实践篇)","subtitle":"AST应用","cover":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","thumbnail":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","date":"2019-07-20T14:00:00.000Z","author":{"nick":"陈晓强","github_name":"chenxiaoqiang12"},"_content":"\n> 作者：陈晓强 \n\n上篇已经对AST基础做了介绍，本篇介绍AST的运用\n\n## AST应用的三个要点\n1. 需要一个解析器，将代码转换为AST\n2. 需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作\n3. 需要一个代码生成器，能够将AST转换为代码\n<!--more-->\n\n## esprima与babel\n常用的满足上述3个要点的工具包有两个，一个是`esprima`，一个是`babel `\n\nesprima相关包及使用如下\n```js\nconst esprima = require('esprima');   // code => ast\nconst estraverse = require('estraverse'); //ast遍历\nconst escodegen = require('escodegen'); // ast => code\nlet code = 'const a = 1';\nconst ast = esprima.parseScript(code);\nestraverse.traverse(ast, {\n    enter: function (node) {\n        //节点操作\n    }\n});\nconst transformCode = escodegen.generate(ast);\n```\n\nbabel相关包及使用如下\n```js\nconst parser = require('@babel/parser');  //code => ast\nconst traverse = require('@babel/traverse').default; // ast遍历，节点增删改查，作用域处理等\nconst generate = require('@babel/generator').default; // ast => code\nconst t = require('@babel/types'); // 用于AST节点的Lodash式工具库,各节点构造、验证等\nlet code = 'const a = 1';\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  enter (path) { \n    //节点操作\n  }\n})\nconst transformCode = escodegen.generate(ast);\n```\n\n目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。\n\n## 使用babel工具操作AST\n如上一章节所示\n- `@babel/parser`用于将代码转换为AST\n- `@babel/traverse`用于对AST的遍历，包括节点增删改查、作用域等处理\n- `@babel/generator` 用于将AST转换成代码\n- `@babel/types` 用于AST节点操作的Lodash式工具库,各节点构造、验证等\n\n更多api详见[babel手册](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md)<sup>[1]</sup>\n\n下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。\n\n### 案例1:去掉代码中的console.log()\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nfunction square(n) {\n  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n CallExpression(path) {\n  let { callee } = path.node;\n  if (callee.type === ‘MemberExpression’ && callee.object.name === ‘console’ && callee.property.name === ‘log’ ) {\n   path.remove(); // 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除\n  }\n }\n})\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nfunction square(n) {\n-  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n```\n\n\n此案例涉及知识点\n1. 如何通过traverse遍历特定节点\n2. 识别出console.log()在规范中属于函数调用表达式,节点类型为`CallExpression`。\n3. console.log本身即`callee`是在对象console上的一个方法，因此`console.log`是一个成员表达式，类型为`MemberExpression`。\n4. `MemberExpression`根据规范有一个`object`属性代表被访问的对象，有一个`property`代表访问的成员。\n5. 通过`path.remove()`api可以对节点进行删除。\n6. 可以通过https://astexplorer.net/ 来辅助对代码节点的识别。注意选择`babylon7`，即babe7,对应`@babel/parser`\n\n\n### 案例2:变量混淆\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nfunction square(number) {\n  console.warn(number);\n  return number * number;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  FunctionDeclaration(path) {\n    let unia = path.scope.generateUidIdentifier(\"a\");\n    path.scope.rename(\"number\",unia.name);\n }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-function square(number) {\n+  function square(_a) {\n-  console.warn(number);\n+  console.warn(_a);\n-  return number * number;\n+  return _a * _a;\n}\n```\n\n此案例涉及知识点\n1. `path.scope`保存了当前作用域的相关信息\n2. 可以通过api对作用域内的变量名进行批量修改操作\n3. 通过`path.scope`可以获得当前作用域唯一标识符，避免变量名冲突\n\n\n\n### 案例3:转换箭头函数并去掉未使用参数\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nnew Promise((resolve,reject)=>{\n  setTimeout(()=>{\n    resolve(1);\n  },200)\n});\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ArrowFunctionExpression (path) { \n    let { id, params, body } = path.node;\n    for(let key in path.scope.bindings){   //注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this\n      if(!path.scope.bindings[key].referenced){\n        params = params.filter(param=>{\n          return param.name!==key;\n        })\n      }\n    }\n  path.replaceWith(t.functionExpression(id, params, body)); \n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-new Promise((resolve,reject)=>{\n+new Promise(function(resolve){\n-  setTimeout(()=>{\n+  setTimeout(function(){\n    resolve(1);\n  },200)\n});\n```\n\n此案例涉及知识点\n1. 箭头函数节点：`ArrowFunctionExpression`\n2. 通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用\n3. 通过@babel/types可以很方便的构建任意类型节点\n4. 通过`path.replaceWith()`可以进行节点替换\n\n### 案例4:京东购物小程序的Tree-shaking\n\n删掉小程序中的冗余代码，`部分`实现代码示例如下\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nexport function square (x) {\n    return x * x;\n}\nexport function cube (x) {\n    return x * x * x;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ExportNamedDeclaration (path) {\n    let unused = ['cube']   // 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的\n    let { declaration = {} } = path.node;\n    if (declaration.type === 'FunctionDeclaration') {\n      unused.forEach(exportItem => {\n        // references=1表示仅有一次引用，即export的引用，没有在别处调用\n        if (declaration.id.name === exportItem && path.scope.bindings[exportItem].references === 1) {\n          path.remove();\n        }\n      });\n    }\n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nexport function square (x) {\n    return x * x;\n}\n-export function cube (x) {\n-    return x * x * x;\n-}\n```\n\n此案例涉及知识点\n1. export节点：`ExportNamedDeclaration`\n\n\n\n### 案例5:将代码转换成svg流程图\n此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见[js-code-to-svg-flowchart](https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart)<sup>[2]</sup>\n\n可以体验一下：[demo](https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html)<sup>[3]</sup>\n\n通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情\n\n## AST在其他语言的应用\n除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。\n\n![其他AST](https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg)\n\n## 结语\n在上述[AST网站](https://astexplorer.net/)中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。\n\n**References**  \n[1] babel手册：https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md  \n[2] js-code-to-svg-flowchart：https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart  \n[3] demo：https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html  ","source":"_posts/2019-08/Javascript抽象语法树下篇(实践篇).md","raw":"---\ntitle: Javascript抽象语法树下篇(实践篇)\nsubtitle: AST应用\ncover: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\nthumbnail: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\ndate: 2019-07-20 22:00:00\ntags: \n  - AST\ncategories: Node.js\nauthor:\n    nick: 陈晓强\n    github_name: chenxiaoqiang12\n---\n\n> 作者：陈晓强 \n\n上篇已经对AST基础做了介绍，本篇介绍AST的运用\n\n## AST应用的三个要点\n1. 需要一个解析器，将代码转换为AST\n2. 需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作\n3. 需要一个代码生成器，能够将AST转换为代码\n<!--more-->\n\n## esprima与babel\n常用的满足上述3个要点的工具包有两个，一个是`esprima`，一个是`babel `\n\nesprima相关包及使用如下\n```js\nconst esprima = require('esprima');   // code => ast\nconst estraverse = require('estraverse'); //ast遍历\nconst escodegen = require('escodegen'); // ast => code\nlet code = 'const a = 1';\nconst ast = esprima.parseScript(code);\nestraverse.traverse(ast, {\n    enter: function (node) {\n        //节点操作\n    }\n});\nconst transformCode = escodegen.generate(ast);\n```\n\nbabel相关包及使用如下\n```js\nconst parser = require('@babel/parser');  //code => ast\nconst traverse = require('@babel/traverse').default; // ast遍历，节点增删改查，作用域处理等\nconst generate = require('@babel/generator').default; // ast => code\nconst t = require('@babel/types'); // 用于AST节点的Lodash式工具库,各节点构造、验证等\nlet code = 'const a = 1';\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  enter (path) { \n    //节点操作\n  }\n})\nconst transformCode = escodegen.generate(ast);\n```\n\n目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。\n\n## 使用babel工具操作AST\n如上一章节所示\n- `@babel/parser`用于将代码转换为AST\n- `@babel/traverse`用于对AST的遍历，包括节点增删改查、作用域等处理\n- `@babel/generator` 用于将AST转换成代码\n- `@babel/types` 用于AST节点操作的Lodash式工具库,各节点构造、验证等\n\n更多api详见[babel手册](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md)<sup>[1]</sup>\n\n下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。\n\n### 案例1:去掉代码中的console.log()\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nfunction square(n) {\n  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n CallExpression(path) {\n  let { callee } = path.node;\n  if (callee.type === ‘MemberExpression’ && callee.object.name === ‘console’ && callee.property.name === ‘log’ ) {\n   path.remove(); // 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除\n  }\n }\n})\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nfunction square(n) {\n-  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n```\n\n\n此案例涉及知识点\n1. 如何通过traverse遍历特定节点\n2. 识别出console.log()在规范中属于函数调用表达式,节点类型为`CallExpression`。\n3. console.log本身即`callee`是在对象console上的一个方法，因此`console.log`是一个成员表达式，类型为`MemberExpression`。\n4. `MemberExpression`根据规范有一个`object`属性代表被访问的对象，有一个`property`代表访问的成员。\n5. 通过`path.remove()`api可以对节点进行删除。\n6. 可以通过https://astexplorer.net/ 来辅助对代码节点的识别。注意选择`babylon7`，即babe7,对应`@babel/parser`\n\n\n### 案例2:变量混淆\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nfunction square(number) {\n  console.warn(number);\n  return number * number;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  FunctionDeclaration(path) {\n    let unia = path.scope.generateUidIdentifier(\"a\");\n    path.scope.rename(\"number\",unia.name);\n }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-function square(number) {\n+  function square(_a) {\n-  console.warn(number);\n+  console.warn(_a);\n-  return number * number;\n+  return _a * _a;\n}\n```\n\n此案例涉及知识点\n1. `path.scope`保存了当前作用域的相关信息\n2. 可以通过api对作用域内的变量名进行批量修改操作\n3. 通过`path.scope`可以获得当前作用域唯一标识符，避免变量名冲突\n\n\n\n### 案例3:转换箭头函数并去掉未使用参数\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nnew Promise((resolve,reject)=>{\n  setTimeout(()=>{\n    resolve(1);\n  },200)\n});\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ArrowFunctionExpression (path) { \n    let { id, params, body } = path.node;\n    for(let key in path.scope.bindings){   //注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this\n      if(!path.scope.bindings[key].referenced){\n        params = params.filter(param=>{\n          return param.name!==key;\n        })\n      }\n    }\n  path.replaceWith(t.functionExpression(id, params, body)); \n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-new Promise((resolve,reject)=>{\n+new Promise(function(resolve){\n-  setTimeout(()=>{\n+  setTimeout(function(){\n    resolve(1);\n  },200)\n});\n```\n\n此案例涉及知识点\n1. 箭头函数节点：`ArrowFunctionExpression`\n2. 通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用\n3. 通过@babel/types可以很方便的构建任意类型节点\n4. 通过`path.replaceWith()`可以进行节点替换\n\n### 案例4:京东购物小程序的Tree-shaking\n\n删掉小程序中的冗余代码，`部分`实现代码示例如下\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\nlet sourceCode = `\nexport function square (x) {\n    return x * x;\n}\nexport function cube (x) {\n    return x * x * x;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ExportNamedDeclaration (path) {\n    let unused = ['cube']   // 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的\n    let { declaration = {} } = path.node;\n    if (declaration.type === 'FunctionDeclaration') {\n      unused.forEach(exportItem => {\n        // references=1表示仅有一次引用，即export的引用，没有在别处调用\n        if (declaration.id.name === exportItem && path.scope.bindings[exportItem].references === 1) {\n          path.remove();\n        }\n      });\n    }\n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nexport function square (x) {\n    return x * x;\n}\n-export function cube (x) {\n-    return x * x * x;\n-}\n```\n\n此案例涉及知识点\n1. export节点：`ExportNamedDeclaration`\n\n\n\n### 案例5:将代码转换成svg流程图\n此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见[js-code-to-svg-flowchart](https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart)<sup>[2]</sup>\n\n可以体验一下：[demo](https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html)<sup>[3]</sup>\n\n通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情\n\n## AST在其他语言的应用\n除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。\n\n![其他AST](https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg)\n\n## 结语\n在上述[AST网站](https://astexplorer.net/)中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。\n\n**References**  \n[1] babel手册：https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md  \n[2] js-code-to-svg-flowchart：https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart  \n[3] demo：https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html  ","slug":"Javascript抽象语法树下篇(实践篇)","published":1,"updated":"2019-11-20T05:13:20.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpj0005soyxsj2pfjec","content":"<blockquote>\n<p>作者：陈晓强 </p>\n</blockquote>\n<p>上篇已经对AST基础做了介绍，本篇介绍AST的运用</p>\n<h2 id=\"AST应用的三个要点\"><a href=\"#AST应用的三个要点\" class=\"headerlink\" title=\"AST应用的三个要点\"></a>AST应用的三个要点</h2><ol>\n<li>需要一个解析器，将代码转换为AST</li>\n<li>需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作</li>\n<li>需要一个代码生成器，能够将AST转换为代码<a id=\"more\"></a>\n\n</li>\n</ol>\n<h2 id=\"esprima与babel\"><a href=\"#esprima与babel\" class=\"headerlink\" title=\"esprima与babel\"></a>esprima与babel</h2><p>常用的满足上述3个要点的工具包有两个，一个是<code>esprima</code>，一个是<code>babel</code></p>\n<p>esprima相关包及使用如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> esprima = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'esprima'</span>);   <span class=\"hljs-comment\">// code =&gt; ast</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> estraverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'estraverse'</span>); <span class=\"hljs-comment\">//ast遍历</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> escodegen = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'escodegen'</span>); <span class=\"hljs-comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> code = <span class=\"hljs-string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> ast = esprima.parseScript(code);</span><br><span class=\"line\">estraverse.traverse(ast, &#123;</span><br><span class=\"line\">    enter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">//节点操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>babel相关包及使用如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);  <span class=\"hljs-comment\">//code =&gt; ast</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default; <span class=\"hljs-comment\">// ast遍历，节点增删改查，作用域处理等</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default; <span class=\"hljs-comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>); <span class=\"hljs-comment\">// 用于AST节点的Lodash式工具库,各节点构造、验证等</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> code = <span class=\"hljs-string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  enter (path) &#123; </span><br><span class=\"line\">    <span class=\"hljs-comment\">//节点操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。</p>\n<h2 id=\"使用babel工具操作AST\"><a href=\"#使用babel工具操作AST\" class=\"headerlink\" title=\"使用babel工具操作AST\"></a>使用babel工具操作AST</h2><p>如上一章节所示</p>\n<ul>\n<li><code>@babel/parser</code>用于将代码转换为AST</li>\n<li><code>@babel/traverse</code>用于对AST的遍历，包括节点增删改查、作用域等处理</li>\n<li><code>@babel/generator</code> 用于将AST转换成代码</li>\n<li><code>@babel/types</code> 用于AST节点操作的Lodash式工具库,各节点构造、验证等</li>\n</ul>\n<p>更多api详见<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">babel手册</a><sup>[1]</sup></p>\n<p>下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。</p>\n<h3 id=\"案例1-去掉代码中的console-log\"><a href=\"#案例1-去掉代码中的console-log\" class=\"headerlink\" title=\"案例1:去掉代码中的console.log()\"></a>案例1:去掉代码中的console.log()</h3><p>实现代码</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">function square(n) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  console.log(n);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  console.warn(n);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  return n * n;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\"> CallExpression(path) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> &#123; callee &#125; = path.node;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (callee.type === ‘MemberExpression’ &amp;&amp; callee.object.name === ‘<span class=\"hljs-built_in\">console</span>’ &amp;&amp; callee.property.name === ‘log’ ) &#123;</span><br><span class=\"line\">   path.remove(); <span class=\"hljs-comment\">// 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function square(n) &#123;</span><br><span class=\"line\"><span class=\"hljs-deletion\">-  console.log(n);</span></span><br><span class=\"line\">  console.warn(n);</span><br><span class=\"line\">  return n * n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>如何通过traverse遍历特定节点</li>\n<li>识别出console.log()在规范中属于函数调用表达式,节点类型为<code>CallExpression</code>。</li>\n<li>console.log本身即<code>callee</code>是在对象console上的一个方法，因此<code>console.log</code>是一个成员表达式，类型为<code>MemberExpression</code>。</li>\n<li><code>MemberExpression</code>根据规范有一个<code>object</code>属性代表被访问的对象，有一个<code>property</code>代表访问的成员。</li>\n<li>通过<code>path.remove()</code>api可以对节点进行删除。</li>\n<li>可以通过<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 来辅助对代码节点的识别。注意选择<code>babylon7</code>，即babe7,对应<code>@babel/parser</code></li>\n</ol>\n<h3 id=\"案例2-变量混淆\"><a href=\"#案例2-变量混淆\" class=\"headerlink\" title=\"案例2:变量混淆\"></a>案例2:变量混淆</h3><p>实现代码</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  console.warn(number);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  return number * number;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  FunctionDeclaration(path) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> unia = path.scope.generateUidIdentifier(<span class=\"hljs-string\">\"a\"</span>);</span><br><span class=\"line\">    path.scope.rename(<span class=\"hljs-string\">\"number\"</span>,unia.name);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-deletion\">-function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  function square(_a) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-  console.warn(number);</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  console.warn(_a);</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-  return number * number;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  return _a * _a;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li><code>path.scope</code>保存了当前作用域的相关信息</li>\n<li>可以通过api对作用域内的变量名进行批量修改操作</li>\n<li>通过<code>path.scope</code>可以获得当前作用域唯一标识符，避免变量名冲突</li>\n</ol>\n<h3 id=\"案例3-转换箭头函数并去掉未使用参数\"><a href=\"#案例3-转换箭头函数并去掉未使用参数\" class=\"headerlink\" title=\"案例3:转换箭头函数并去掉未使用参数\"></a>案例3:转换箭头函数并去掉未使用参数</h3><p>实现代码</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    resolve(1);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &#125;,200)</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;);</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ArrowFunctionExpression (path) &#123; </span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> &#123; id, params, body &#125; = path.node;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> path.scope.bindings)&#123;   <span class=\"hljs-comment\">//注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span>(!path.scope.bindings[key].referenced)&#123;</span><br><span class=\"line\">        params = params.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">param</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span> param.name!==key;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  path.replaceWith(t.functionExpression(id, params, body)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-deletion\">-new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+new Promise(function(resolve)&#123;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  setTimeout(function()&#123;</span></span><br><span class=\"line\">    resolve(1);</span><br><span class=\"line\">  &#125;,200)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>箭头函数节点：<code>ArrowFunctionExpression</code></li>\n<li>通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用</li>\n<li>通过@babel/types可以很方便的构建任意类型节点</li>\n<li>通过<code>path.replaceWith()</code>可以进行节点替换</li>\n</ol>\n<h3 id=\"案例4-京东购物小程序的Tree-shaking\"><a href=\"#案例4-京东购物小程序的Tree-shaking\" class=\"headerlink\" title=\"案例4:京东购物小程序的Tree-shaking\"></a>案例4:京东购物小程序的Tree-shaking</h3><p>删掉小程序中的冗余代码，<code>部分</code>实现代码示例如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">export function square (x) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    return x * x;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    return x * x * x;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ExportNamedDeclaration (path) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> unused = [<span class=\"hljs-string\">'cube'</span>]   <span class=\"hljs-comment\">// 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> &#123; declaration = &#123;&#125; &#125; = path.node;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (declaration.type === <span class=\"hljs-string\">'FunctionDeclaration'</span>) &#123;</span><br><span class=\"line\">      unused.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">exportItem</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">// references=1表示仅有一次引用，即export的引用，没有在别处调用</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (declaration.id.name === exportItem &amp;&amp; path.scope.bindings[exportItem].references === <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"line\">          path.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function square (x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-deletion\">-export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-    return x * x * x;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>export节点：<code>ExportNamedDeclaration</code></li>\n</ol>\n<h3 id=\"案例5-将代码转换成svg流程图\"><a href=\"#案例5-将代码转换成svg流程图\" class=\"headerlink\" title=\"案例5:将代码转换成svg流程图\"></a>案例5:将代码转换成svg流程图</h3><p>此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">js-code-to-svg-flowchart</a><sup>[2]</sup></p>\n<p>可以体验一下：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">demo</a><sup>[3]</sup></p>\n<p>通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情</p>\n<h2 id=\"AST在其他语言的应用\"><a href=\"#AST在其他语言的应用\" class=\"headerlink\" title=\"AST在其他语言的应用\"></a>AST在其他语言的应用</h2><p>除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg\" alt=\"其他AST\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在上述<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST网站</a>中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。</p>\n<p><strong>References</strong><br>[1] babel手册：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</a><br>[2] js-code-to-svg-flowchart：<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart</a><br>[3] demo：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html</a>  </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：陈晓强 </p>\n</blockquote>\n<p>上篇已经对AST基础做了介绍，本篇介绍AST的运用</p>\n<h2 id=\"AST应用的三个要点\"><a href=\"#AST应用的三个要点\" class=\"headerlink\" title=\"AST应用的三个要点\"></a>AST应用的三个要点</h2><ol>\n<li>需要一个解析器，将代码转换为AST</li>\n<li>需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作</li>\n<li>需要一个代码生成器，能够将AST转换为代码</li></ol>","more":"</li>\n</ol>\n<h2 id=\"esprima与babel\"><a href=\"#esprima与babel\" class=\"headerlink\" title=\"esprima与babel\"></a>esprima与babel</h2><p>常用的满足上述3个要点的工具包有两个，一个是<code>esprima</code>，一个是<code>babel</code></p>\n<p>esprima相关包及使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> esprima = <span class=\"built_in\">require</span>(<span class=\"string\">'esprima'</span>);   <span class=\"comment\">// code =&gt; ast</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> estraverse = <span class=\"built_in\">require</span>(<span class=\"string\">'estraverse'</span>); <span class=\"comment\">//ast遍历</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> escodegen = <span class=\"built_in\">require</span>(<span class=\"string\">'escodegen'</span>); <span class=\"comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ast = esprima.parseScript(code);</span><br><span class=\"line\">estraverse.traverse(ast, &#123;</span><br><span class=\"line\">    enter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//节点操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>babel相关包及使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);  <span class=\"comment\">//code =&gt; ast</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default; <span class=\"comment\">// ast遍历，节点增删改查，作用域处理等</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default; <span class=\"comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>); <span class=\"comment\">// 用于AST节点的Lodash式工具库,各节点构造、验证等</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  enter (path) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//节点操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。</p>\n<h2 id=\"使用babel工具操作AST\"><a href=\"#使用babel工具操作AST\" class=\"headerlink\" title=\"使用babel工具操作AST\"></a>使用babel工具操作AST</h2><p>如上一章节所示</p>\n<ul>\n<li><code>@babel/parser</code>用于将代码转换为AST</li>\n<li><code>@babel/traverse</code>用于对AST的遍历，包括节点增删改查、作用域等处理</li>\n<li><code>@babel/generator</code> 用于将AST转换成代码</li>\n<li><code>@babel/types</code> 用于AST节点操作的Lodash式工具库,各节点构造、验证等</li>\n</ul>\n<p>更多api详见<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">babel手册</a><sup>[1]</sup></p>\n<p>下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。</p>\n<h3 id=\"案例1-去掉代码中的console-log\"><a href=\"#案例1-去掉代码中的console-log\" class=\"headerlink\" title=\"案例1:去掉代码中的console.log()\"></a>案例1:去掉代码中的console.log()</h3><p>实现代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function square(n) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(n);</span></span><br><span class=\"line\"><span class=\"string\">  console.warn(n);</span></span><br><span class=\"line\"><span class=\"string\">  return n * n;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\"> CallExpression(path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; callee &#125; = path.node;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callee.type === ‘MemberExpression’ &amp;&amp; callee.object.name === ‘<span class=\"built_in\">console</span>’ &amp;&amp; callee.property.name === ‘log’ ) &#123;</span><br><span class=\"line\">   path.remove(); <span class=\"comment\">// 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function square(n) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-  console.log(n);</span></span><br><span class=\"line\">  console.warn(n);</span><br><span class=\"line\">  return n * n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>如何通过traverse遍历特定节点</li>\n<li>识别出console.log()在规范中属于函数调用表达式,节点类型为<code>CallExpression</code>。</li>\n<li>console.log本身即<code>callee</code>是在对象console上的一个方法，因此<code>console.log</code>是一个成员表达式，类型为<code>MemberExpression</code>。</li>\n<li><code>MemberExpression</code>根据规范有一个<code>object</code>属性代表被访问的对象，有一个<code>property</code>代表访问的成员。</li>\n<li>通过<code>path.remove()</code>api可以对节点进行删除。</li>\n<li>可以通过<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 来辅助对代码节点的识别。注意选择<code>babylon7</code>，即babe7,对应<code>@babel/parser</code></li>\n</ol>\n<h3 id=\"案例2-变量混淆\"><a href=\"#案例2-变量混淆\" class=\"headerlink\" title=\"案例2:变量混淆\"></a>案例2:变量混淆</h3><p>实现代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.warn(number);</span></span><br><span class=\"line\"><span class=\"string\">  return number * number;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  FunctionDeclaration(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unia = path.scope.generateUidIdentifier(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    path.scope.rename(<span class=\"string\">\"number\"</span>,unia.name);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  function square(_a) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-  console.warn(number);</span></span><br><span class=\"line\"><span class=\"addition\">+  console.warn(_a);</span></span><br><span class=\"line\"><span class=\"deletion\">-  return number * number;</span></span><br><span class=\"line\"><span class=\"addition\">+  return _a * _a;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li><code>path.scope</code>保存了当前作用域的相关信息</li>\n<li>可以通过api对作用域内的变量名进行批量修改操作</li>\n<li>通过<code>path.scope</code>可以获得当前作用域唯一标识符，避免变量名冲突</li>\n</ol>\n<h3 id=\"案例3-转换箭头函数并去掉未使用参数\"><a href=\"#案例3-转换箭头函数并去掉未使用参数\" class=\"headerlink\" title=\"案例3:转换箭头函数并去掉未使用参数\"></a>案例3:转换箭头函数并去掉未使用参数</h3><p>实现代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    resolve(1);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,200)</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ArrowFunctionExpression (path) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; id, params, body &#125; = path.node;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> path.scope.bindings)&#123;   <span class=\"comment\">//注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!path.scope.bindings[key].referenced)&#123;</span><br><span class=\"line\">        params = params.filter(<span class=\"function\"><span class=\"params\">param</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> param.name!==key;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  path.replaceWith(t.functionExpression(id, params, body)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+new Promise(function(resolve)&#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  setTimeout(function()&#123;</span></span><br><span class=\"line\">    resolve(1);</span><br><span class=\"line\">  &#125;,200)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>箭头函数节点：<code>ArrowFunctionExpression</code></li>\n<li>通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用</li>\n<li>通过@babel/types可以很方便的构建任意类型节点</li>\n<li>通过<code>path.replaceWith()</code>可以进行节点替换</li>\n</ol>\n<h3 id=\"案例4-京东购物小程序的Tree-shaking\"><a href=\"#案例4-京东购物小程序的Tree-shaking\" class=\"headerlink\" title=\"案例4:京东购物小程序的Tree-shaking\"></a>案例4:京东购物小程序的Tree-shaking</h3><p>删掉小程序中的冗余代码，<code>部分</code>实现代码示例如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">export function square (x) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return x * x;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return x * x * x;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ExportNamedDeclaration (path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unused = [<span class=\"string\">'cube'</span>]   <span class=\"comment\">// 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; declaration = &#123;&#125; &#125; = path.node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (declaration.type === <span class=\"string\">'FunctionDeclaration'</span>) &#123;</span><br><span class=\"line\">      unused.forEach(<span class=\"function\"><span class=\"params\">exportItem</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// references=1表示仅有一次引用，即export的引用，没有在别处调用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (declaration.id.name === exportItem &amp;&amp; path.scope.bindings[exportItem].references === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          path.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function square (x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"deletion\">-export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-    return x * x * x;</span></span><br><span class=\"line\"><span class=\"deletion\">-&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>export节点：<code>ExportNamedDeclaration</code></li>\n</ol>\n<h3 id=\"案例5-将代码转换成svg流程图\"><a href=\"#案例5-将代码转换成svg流程图\" class=\"headerlink\" title=\"案例5:将代码转换成svg流程图\"></a>案例5:将代码转换成svg流程图</h3><p>此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">js-code-to-svg-flowchart</a><sup>[2]</sup></p>\n<p>可以体验一下：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">demo</a><sup>[3]</sup></p>\n<p>通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情</p>\n<h2 id=\"AST在其他语言的应用\"><a href=\"#AST在其他语言的应用\" class=\"headerlink\" title=\"AST在其他语言的应用\"></a>AST在其他语言的应用</h2><p>除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg\" alt=\"其他AST\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在上述<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST网站</a>中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。</p>\n<p><strong>References</strong><br>[1] babel手册：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</a><br>[2] js-code-to-svg-flowchart：<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart</a><br>[3] demo：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html</a>  </p>"},{"title":"【译】Web内容如何影响电池的使用","date":"2019-09-17T01:37:44.000Z","cover":"https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/56997/19/11003/158528/5d8039dcE9902aa49/f5c7d0573e9d1f97.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/56997/19/11003/158528/5d8039dcE9902aa49/f5c7d0573e9d1f97.jpg","_content":"\n> 原文地址：https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/\n> 原文作者：Benjamin Poulain & Simon Fraser\n> 译者：刘辉    校验：李刚松\n\n\n现在用户上网大多使用移动设备或者笔记本电脑。对这两者来说，电池寿命都很重要。在这篇文章里，我们将讨论影响电池寿命的因素，以及作为一个web开发者，我们如何让网页耗电更少，以便用户有更多时间来关注我们的内容。\n\n# 是什么在耗电？\n\n移动设备的电力消耗有以下几个因素：\n\n* CPU （核心处理器）\n* GPU （图形处理）\n* 网络 （wifi或者蜂窝移动网络）\n* 屏幕\n\n屏幕功耗相对稳定，并且主要由用户控制（通过屏幕使用时间和亮度），但是对于其他组件，例如CPU，GPU，网络模块，功耗是动态变化的，而且变化范围很大。\n<!--more-->\n系统根据当前正在处理的任务调整CPU和GPU性能，包括在Web浏览器中用户正在交互的网页以及使用Web内容的其他应用程序。这是通过打开或关闭某些组件以及通过更改其时钟频率来完成的。总的来说，芯片所需的性能越高，其功率效率就越低。硬件可以非常快速地提升到高性能（但是需要很大的功率），然后迅速恢复到更高效的低功耗状态。\n\n# 良好用电的一般原则\n\n为了最大限度地延长电池寿命，你必须尽量减少硬件处于高功率状态的时间，让硬件尽可能的处于空闲状态。\n\n对于web开发者来说，有三种交互场景需要注意：\n\n* 用户主动与内容交互\n* 页面处于前台，但是用户没有交互\n* 页面处于后台\n\n### 高效的用户交互\n\n用户交互的时候肯定会耗电。页面需要快速的加载，并且能够快速的响应触摸。在大多数场景中，减少首次渲染时间也会降低功耗。不过，在初始页面加载后继续加载资源和运行脚本时要小心。我们要尽快让系统返回空闲状态。总的来说，浏览器已经完成了布局和渲染，js执行的越少，耗电越少。\n\n一旦页面加载完，用户可能会滚屏或者点击页面，这同样会产生耗电（主要是CPU和GPU）,这是必要的消耗。要确保尽快返回空闲状态。并且，最好使用浏览器本身提供的功能。- 举例：普通的页面滚动肯定比用js自定义的滚动更高效。\n\n### 让空闲状态耗电趋向于零\n\n当用户没有和页面交互时，尽可能的使页面不耗电，例如：\n\n* 尽量少用定时器以避免唤醒CPU,可以把基于定时器的任务合并，使用尽可能少的定时器。大量滥用定时器会导致CPU被频繁唤醒，这比把这些任务合并处理要糟糕的多。\n* 最大限度地减少动画内容，如动画图像和自动播放视频。要特别注意\"loading\"用的gif图片或css动画，这些动画会不断触发渲染，即使看不到也会触发。[IntersectionObserver](https://webkit.org/blog/8582/intersectionobserver-in-webkit/)可以用来在可见时才运行动画。\n* 尽量用css做动画和过渡，这些动画不可见时，浏览器会进行优化，并且css动画比js动画要高效的多。\n* 避免通过轮询来获取服务器更新，可以用websocket或者持久连接来代替轮询。\n\n看起来处于空闲状态的页面，如果正在后台进行工作，其用户交互的响应效率也会降低，因此最小化后台活动也可以提高响应能力以及电池寿命。\n\n### 页面在后台时CPU零使用\n\n这几种场景时，页面变为非活动状态(不是用户的首要焦点)，例如：\n\n* 用户切换到其他tab\n* 用户切换到其他app\n* 浏览器窗口最小化\n* 浏览器窗口失去焦点\n* 浏览器窗口在其他窗口后面\n* 窗口所在的空间不是当前空间（MacOS才有空间的概念）\n\n当页面不活动时，webkit会自动做以下处理来减少耗电：\n\n* 停止调用requestAnimationFrame\n* CSS和SVG动画会暂停\n* 定时器会节流\n  \n此外，WebKit利用操作系统提供的能力来最大限度地提高效率：\n\n* 在iOS上，不用的选项卡(tab页)会完全暂停。\n* 在macOS上，选项卡会响应[App Nap](https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/AppNap.html)功能，这意味着不可视更新的选项卡的Web进程优先级较低，并且其计时器会做节流处理。\n\n但是，页面可以通过计时器（setTimeout和setInterval），消息，网络事件等触发CPU唤醒。页面在后台时应避免这些唤醒，有两个API对此有用：\n\n* [页面可见性API](https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API)提供了一种响应页面转换为后台或前台的方法。这是一种避免页面在后台时更新UI的好方法。用visibilitychange事件，在页面可见时更新页面内容。\n* 页面失去焦点时会发出blur事件。这时，页面依然可见，但是不是聚焦窗口。可以考虑暂停动画。\n  \n查找问题最简单的方式就是用浏览器控制台的时间线功能。页面在后台时，时间线记录中不应该有任何事件发生。\n\n# 找到问题所在\n\n现在我们知道了web页面主要的耗电因素，并且给出了一些创建高效页面的一般规则。 接下来讨论一下怎样找出并解决导致功耗过大的问题。\n\n### 脚本\n\n如上所述，现代CPU能够把功率从空闲态的非常低提升到非常高来满足用户交互和其他任务的要求。 也正因为如此，CPU是导致电池寿命减少的主要原因。页面加载期间CPU要做一连串工作包括加载、解析、渲染资源，并且执行js。在大多数现代web页面上，执行js花费的时间远远高出浏览器用在其余加载过程中花费的时间。因为尽量减少js执行时间对省电有最大的效益。\n\n测量CPU使用的最佳方法是使用Web Inspector，就像之前文章里所说的，时间线面板可以显示任意选定时间范围内的CPU活动。\n\n![Web-Inspector-CPU-Timeline-Overview-Dark](https://webkit.org/wp-content/uploads/Web-Inspector-CPU-Timeline-Overview-Dark.png)\n\n为了高效地使用CPU，WebKit尽可能在多核上分配工作（使用Workers的页面也可以使用多核）。Web Inspector提供与页面主线程同时运行的线程的细分图表。例如，以下屏幕截图显示了滚动具有复杂渲染和视频播放的页面时的线程：\n\n![Power-heavy-website-light](https://webkit.org/wp-content/uploads/Power-heavy-website-light.png)\n\n在寻找优化点时，应关注主线程，因为js运行在主线程上（除非您正在使用Workers）。我们可以使用时间线面板的 “JavaScript and Events” 项来了解触发脚本的内容。也许你在响应用户或滚动事件或从requestAnimationFrame触发隐藏元素的更新时做了太多工作。你需要了解你在页面上使用的JavaScript库和第三方脚本所做的工作。如果要深入挖掘，你可以使用Web Inspector的[JavaScript profiler](https://webkit.org/blog/6539/introducing-jscs-new-sampling-profiler/)来查看时间都用在哪些地方。\n\n“WebKit线程”中的活动主要由与JavaScript相关的工作触发：JIT编译和垃圾收集。因此减少运行的脚本数量并减少短生命周期的JavaScript对象可以降低webkit线程的活动。\n\nWebKit调用的各种其他系统框架都使用线程，“Other thread” 包括了这些工作; “Other thread” 最主要的工作是渲染，我们将在下面讨论。\n\n### 渲染\n\n主线程CPU使用也可以通过大量布局和绘制来触发；这些通常由脚本触发，但是除了transform，opacity和filter之外的属性的CSS动画也可以触发它们。查看时间线面板的 “Layout and Rendering” 项将帮助你了解导致活动的原因。\n\n如果 “Layout and Rendering” 显示的渲染过程不能清楚展示页面正在发生什么变化，可以启用 [Paint Flashing](https://developer.mozilla.org/en-US/docs/Tools/Paint_Flashing_Tool)：\n\n![Enable-Paint-Flashing-dark](https://webkit.org/wp-content/uploads/Enable-Paint-Flashing-dark.png)\n\n这部分渲染将用红色背景的高亮显示，你可以滚动页面查看。注意，WebKit会保留一些“透视”图块以允许平滑滚动，因此视口中不可见的图形仍然可以正常工作以使屏幕外图块保持最新。如果渲染展示在时间轴中，说明它正在工作。\n\n除了导致CPU耗电外，渲染通常还会触发GPU工作。macOS和iOS上的WebKit使用GPU进行渲染，因此触发渲染可以显着增加耗电。额外的CPU使用通常显示在时间线面板 “CPU” 项中的 “Other threads” 下。\n\nGPU还用于canvas渲染，包括2D画布和WebGL / WebGPU。为了最小限度使用绘图，canvas上显示的内容没有变化时不要调用canvas API，并尝试优化canvas绘制代码。\n\n\n许多Mac笔记本电脑都有两个GPU，一个与CPU相同内核的集成GPU，功能不强但功耗低，一个功能更强大但是功耗也更高的独立GPU。 WebKit默认使用集成GPU；你可以使用[powerPreference](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2.1)上下文创建参数请求独立GPU，但只有在你可以证明电源成本合理时才执行此操作。\n\n### 网络\n\n无线网络会以意想不到的方式影响电池寿命。手机有功能更强大的无线模块（WiFi和蜂窝网络芯片）和更小的电池，因此受到的影响最大。 遗憾的是，在实验室外测量网络的功率影响并不容易，但可以通过遵循一些简单的规则来减少。\n\n降低网络功耗的最直接方法是最大限度地利用浏览器的缓存。 减少页面加载时间的所有最佳实践也可以通过减少无线模块需要打开的时间来使电池受益。\n\n另一个重要方面是在时间上将网络请求组合在一起。每当有新请求到来时，操作系统都需要打开无线模块，连接到基站或蜂窝塔，并传输字节。在发送分组之后，在发送更多分组的情况下，无线电保持供电少量时间。\n\n如果页面非经常性的发送少量数据，则开销可能会大于传输数据所需的能量。\n\n![Networking-Power-Overhead-of-two-small-transmissions](https://webkit.org/wp-content/uploads/Networking-Power-Overhead-of-two-small-transmissions.png)\n\n可以从 Web Inspector 的时间线面板的 “Network Requests” 项中发现此类问题。例如，以下屏幕截图显示了几秒钟内发送的四个单独请求：\n\n![Network-requests-should-be-grouped-dark](https://webkit.org/wp-content/uploads/Network-requests-should-be-grouped-dark.png)\n\n同时发送所有请求将提高网络用电效率。\n\n\n# 总结\n\n我们可以对网页做很多优化来延长电池寿命。\n\n在Web Inspector中测量对电池影响并降低损耗非常重要。 这样做可以改善用户体验并延长电池寿命。\n\n提高电池寿命的最直接方法是最大限度地降低CPU使用率。 新的Web Inspector提供了强大的工具可以全程监控。\n\n为了让电池寿命更长，我们要：\n\n* 在空闲时将CPU使用率降至零\n* 在用户交互期间最大化性能以快速恢复空闲","source":"_posts/2019-09/【译】Web内容如何影响电池的使用.md","raw":"---\ntitle: 【译】Web内容如何影响电池的使用\ndate: 2019-09-17 09:37:44\ncover:  https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/56997/19/11003/158528/5d8039dcE9902aa49/f5c7d0573e9d1f97.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/56997/19/11003/158528/5d8039dcE9902aa49/f5c7d0573e9d1f97.jpg\ntags: \n  - web内容\n  - 电池电量\n  - 性能优化\ncategories: Web开发\n---\n\n> 原文地址：https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/\n> 原文作者：Benjamin Poulain & Simon Fraser\n> 译者：刘辉    校验：李刚松\n\n\n现在用户上网大多使用移动设备或者笔记本电脑。对这两者来说，电池寿命都很重要。在这篇文章里，我们将讨论影响电池寿命的因素，以及作为一个web开发者，我们如何让网页耗电更少，以便用户有更多时间来关注我们的内容。\n\n# 是什么在耗电？\n\n移动设备的电力消耗有以下几个因素：\n\n* CPU （核心处理器）\n* GPU （图形处理）\n* 网络 （wifi或者蜂窝移动网络）\n* 屏幕\n\n屏幕功耗相对稳定，并且主要由用户控制（通过屏幕使用时间和亮度），但是对于其他组件，例如CPU，GPU，网络模块，功耗是动态变化的，而且变化范围很大。\n<!--more-->\n系统根据当前正在处理的任务调整CPU和GPU性能，包括在Web浏览器中用户正在交互的网页以及使用Web内容的其他应用程序。这是通过打开或关闭某些组件以及通过更改其时钟频率来完成的。总的来说，芯片所需的性能越高，其功率效率就越低。硬件可以非常快速地提升到高性能（但是需要很大的功率），然后迅速恢复到更高效的低功耗状态。\n\n# 良好用电的一般原则\n\n为了最大限度地延长电池寿命，你必须尽量减少硬件处于高功率状态的时间，让硬件尽可能的处于空闲状态。\n\n对于web开发者来说，有三种交互场景需要注意：\n\n* 用户主动与内容交互\n* 页面处于前台，但是用户没有交互\n* 页面处于后台\n\n### 高效的用户交互\n\n用户交互的时候肯定会耗电。页面需要快速的加载，并且能够快速的响应触摸。在大多数场景中，减少首次渲染时间也会降低功耗。不过，在初始页面加载后继续加载资源和运行脚本时要小心。我们要尽快让系统返回空闲状态。总的来说，浏览器已经完成了布局和渲染，js执行的越少，耗电越少。\n\n一旦页面加载完，用户可能会滚屏或者点击页面，这同样会产生耗电（主要是CPU和GPU）,这是必要的消耗。要确保尽快返回空闲状态。并且，最好使用浏览器本身提供的功能。- 举例：普通的页面滚动肯定比用js自定义的滚动更高效。\n\n### 让空闲状态耗电趋向于零\n\n当用户没有和页面交互时，尽可能的使页面不耗电，例如：\n\n* 尽量少用定时器以避免唤醒CPU,可以把基于定时器的任务合并，使用尽可能少的定时器。大量滥用定时器会导致CPU被频繁唤醒，这比把这些任务合并处理要糟糕的多。\n* 最大限度地减少动画内容，如动画图像和自动播放视频。要特别注意\"loading\"用的gif图片或css动画，这些动画会不断触发渲染，即使看不到也会触发。[IntersectionObserver](https://webkit.org/blog/8582/intersectionobserver-in-webkit/)可以用来在可见时才运行动画。\n* 尽量用css做动画和过渡，这些动画不可见时，浏览器会进行优化，并且css动画比js动画要高效的多。\n* 避免通过轮询来获取服务器更新，可以用websocket或者持久连接来代替轮询。\n\n看起来处于空闲状态的页面，如果正在后台进行工作，其用户交互的响应效率也会降低，因此最小化后台活动也可以提高响应能力以及电池寿命。\n\n### 页面在后台时CPU零使用\n\n这几种场景时，页面变为非活动状态(不是用户的首要焦点)，例如：\n\n* 用户切换到其他tab\n* 用户切换到其他app\n* 浏览器窗口最小化\n* 浏览器窗口失去焦点\n* 浏览器窗口在其他窗口后面\n* 窗口所在的空间不是当前空间（MacOS才有空间的概念）\n\n当页面不活动时，webkit会自动做以下处理来减少耗电：\n\n* 停止调用requestAnimationFrame\n* CSS和SVG动画会暂停\n* 定时器会节流\n  \n此外，WebKit利用操作系统提供的能力来最大限度地提高效率：\n\n* 在iOS上，不用的选项卡(tab页)会完全暂停。\n* 在macOS上，选项卡会响应[App Nap](https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/AppNap.html)功能，这意味着不可视更新的选项卡的Web进程优先级较低，并且其计时器会做节流处理。\n\n但是，页面可以通过计时器（setTimeout和setInterval），消息，网络事件等触发CPU唤醒。页面在后台时应避免这些唤醒，有两个API对此有用：\n\n* [页面可见性API](https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API)提供了一种响应页面转换为后台或前台的方法。这是一种避免页面在后台时更新UI的好方法。用visibilitychange事件，在页面可见时更新页面内容。\n* 页面失去焦点时会发出blur事件。这时，页面依然可见，但是不是聚焦窗口。可以考虑暂停动画。\n  \n查找问题最简单的方式就是用浏览器控制台的时间线功能。页面在后台时，时间线记录中不应该有任何事件发生。\n\n# 找到问题所在\n\n现在我们知道了web页面主要的耗电因素，并且给出了一些创建高效页面的一般规则。 接下来讨论一下怎样找出并解决导致功耗过大的问题。\n\n### 脚本\n\n如上所述，现代CPU能够把功率从空闲态的非常低提升到非常高来满足用户交互和其他任务的要求。 也正因为如此，CPU是导致电池寿命减少的主要原因。页面加载期间CPU要做一连串工作包括加载、解析、渲染资源，并且执行js。在大多数现代web页面上，执行js花费的时间远远高出浏览器用在其余加载过程中花费的时间。因为尽量减少js执行时间对省电有最大的效益。\n\n测量CPU使用的最佳方法是使用Web Inspector，就像之前文章里所说的，时间线面板可以显示任意选定时间范围内的CPU活动。\n\n![Web-Inspector-CPU-Timeline-Overview-Dark](https://webkit.org/wp-content/uploads/Web-Inspector-CPU-Timeline-Overview-Dark.png)\n\n为了高效地使用CPU，WebKit尽可能在多核上分配工作（使用Workers的页面也可以使用多核）。Web Inspector提供与页面主线程同时运行的线程的细分图表。例如，以下屏幕截图显示了滚动具有复杂渲染和视频播放的页面时的线程：\n\n![Power-heavy-website-light](https://webkit.org/wp-content/uploads/Power-heavy-website-light.png)\n\n在寻找优化点时，应关注主线程，因为js运行在主线程上（除非您正在使用Workers）。我们可以使用时间线面板的 “JavaScript and Events” 项来了解触发脚本的内容。也许你在响应用户或滚动事件或从requestAnimationFrame触发隐藏元素的更新时做了太多工作。你需要了解你在页面上使用的JavaScript库和第三方脚本所做的工作。如果要深入挖掘，你可以使用Web Inspector的[JavaScript profiler](https://webkit.org/blog/6539/introducing-jscs-new-sampling-profiler/)来查看时间都用在哪些地方。\n\n“WebKit线程”中的活动主要由与JavaScript相关的工作触发：JIT编译和垃圾收集。因此减少运行的脚本数量并减少短生命周期的JavaScript对象可以降低webkit线程的活动。\n\nWebKit调用的各种其他系统框架都使用线程，“Other thread” 包括了这些工作; “Other thread” 最主要的工作是渲染，我们将在下面讨论。\n\n### 渲染\n\n主线程CPU使用也可以通过大量布局和绘制来触发；这些通常由脚本触发，但是除了transform，opacity和filter之外的属性的CSS动画也可以触发它们。查看时间线面板的 “Layout and Rendering” 项将帮助你了解导致活动的原因。\n\n如果 “Layout and Rendering” 显示的渲染过程不能清楚展示页面正在发生什么变化，可以启用 [Paint Flashing](https://developer.mozilla.org/en-US/docs/Tools/Paint_Flashing_Tool)：\n\n![Enable-Paint-Flashing-dark](https://webkit.org/wp-content/uploads/Enable-Paint-Flashing-dark.png)\n\n这部分渲染将用红色背景的高亮显示，你可以滚动页面查看。注意，WebKit会保留一些“透视”图块以允许平滑滚动，因此视口中不可见的图形仍然可以正常工作以使屏幕外图块保持最新。如果渲染展示在时间轴中，说明它正在工作。\n\n除了导致CPU耗电外，渲染通常还会触发GPU工作。macOS和iOS上的WebKit使用GPU进行渲染，因此触发渲染可以显着增加耗电。额外的CPU使用通常显示在时间线面板 “CPU” 项中的 “Other threads” 下。\n\nGPU还用于canvas渲染，包括2D画布和WebGL / WebGPU。为了最小限度使用绘图，canvas上显示的内容没有变化时不要调用canvas API，并尝试优化canvas绘制代码。\n\n\n许多Mac笔记本电脑都有两个GPU，一个与CPU相同内核的集成GPU，功能不强但功耗低，一个功能更强大但是功耗也更高的独立GPU。 WebKit默认使用集成GPU；你可以使用[powerPreference](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2.1)上下文创建参数请求独立GPU，但只有在你可以证明电源成本合理时才执行此操作。\n\n### 网络\n\n无线网络会以意想不到的方式影响电池寿命。手机有功能更强大的无线模块（WiFi和蜂窝网络芯片）和更小的电池，因此受到的影响最大。 遗憾的是，在实验室外测量网络的功率影响并不容易，但可以通过遵循一些简单的规则来减少。\n\n降低网络功耗的最直接方法是最大限度地利用浏览器的缓存。 减少页面加载时间的所有最佳实践也可以通过减少无线模块需要打开的时间来使电池受益。\n\n另一个重要方面是在时间上将网络请求组合在一起。每当有新请求到来时，操作系统都需要打开无线模块，连接到基站或蜂窝塔，并传输字节。在发送分组之后，在发送更多分组的情况下，无线电保持供电少量时间。\n\n如果页面非经常性的发送少量数据，则开销可能会大于传输数据所需的能量。\n\n![Networking-Power-Overhead-of-two-small-transmissions](https://webkit.org/wp-content/uploads/Networking-Power-Overhead-of-two-small-transmissions.png)\n\n可以从 Web Inspector 的时间线面板的 “Network Requests” 项中发现此类问题。例如，以下屏幕截图显示了几秒钟内发送的四个单独请求：\n\n![Network-requests-should-be-grouped-dark](https://webkit.org/wp-content/uploads/Network-requests-should-be-grouped-dark.png)\n\n同时发送所有请求将提高网络用电效率。\n\n\n# 总结\n\n我们可以对网页做很多优化来延长电池寿命。\n\n在Web Inspector中测量对电池影响并降低损耗非常重要。 这样做可以改善用户体验并延长电池寿命。\n\n提高电池寿命的最直接方法是最大限度地降低CPU使用率。 新的Web Inspector提供了强大的工具可以全程监控。\n\n为了让电池寿命更长，我们要：\n\n* 在空闲时将CPU使用率降至零\n* 在用户交互期间最大化性能以快速恢复空闲","slug":"【译】Web内容如何影响电池的使用","published":1,"updated":"2019-11-20T05:13:20.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpl0006soyxf22zf94i","content":"<blockquote>\n<p>原文地址：<a href=\"https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/\" target=\"_blank\" rel=\"noopener\">https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/</a><br>原文作者：Benjamin Poulain &amp; Simon Fraser<br>译者：刘辉    校验：李刚松</p>\n</blockquote>\n<p>现在用户上网大多使用移动设备或者笔记本电脑。对这两者来说，电池寿命都很重要。在这篇文章里，我们将讨论影响电池寿命的因素，以及作为一个web开发者，我们如何让网页耗电更少，以便用户有更多时间来关注我们的内容。</p>\n<h1 id=\"是什么在耗电？\"><a href=\"#是什么在耗电？\" class=\"headerlink\" title=\"是什么在耗电？\"></a>是什么在耗电？</h1><p>移动设备的电力消耗有以下几个因素：</p>\n<ul>\n<li>CPU （核心处理器）</li>\n<li>GPU （图形处理）</li>\n<li>网络 （wifi或者蜂窝移动网络）</li>\n<li>屏幕</li>\n</ul>\n<p>屏幕功耗相对稳定，并且主要由用户控制（通过屏幕使用时间和亮度），但是对于其他组件，例如CPU，GPU，网络模块，功耗是动态变化的，而且变化范围很大。</p>\n<a id=\"more\"></a>\n<p>系统根据当前正在处理的任务调整CPU和GPU性能，包括在Web浏览器中用户正在交互的网页以及使用Web内容的其他应用程序。这是通过打开或关闭某些组件以及通过更改其时钟频率来完成的。总的来说，芯片所需的性能越高，其功率效率就越低。硬件可以非常快速地提升到高性能（但是需要很大的功率），然后迅速恢复到更高效的低功耗状态。</p>\n<h1 id=\"良好用电的一般原则\"><a href=\"#良好用电的一般原则\" class=\"headerlink\" title=\"良好用电的一般原则\"></a>良好用电的一般原则</h1><p>为了最大限度地延长电池寿命，你必须尽量减少硬件处于高功率状态的时间，让硬件尽可能的处于空闲状态。</p>\n<p>对于web开发者来说，有三种交互场景需要注意：</p>\n<ul>\n<li>用户主动与内容交互</li>\n<li>页面处于前台，但是用户没有交互</li>\n<li>页面处于后台</li>\n</ul>\n<h3 id=\"高效的用户交互\"><a href=\"#高效的用户交互\" class=\"headerlink\" title=\"高效的用户交互\"></a>高效的用户交互</h3><p>用户交互的时候肯定会耗电。页面需要快速的加载，并且能够快速的响应触摸。在大多数场景中，减少首次渲染时间也会降低功耗。不过，在初始页面加载后继续加载资源和运行脚本时要小心。我们要尽快让系统返回空闲状态。总的来说，浏览器已经完成了布局和渲染，js执行的越少，耗电越少。</p>\n<p>一旦页面加载完，用户可能会滚屏或者点击页面，这同样会产生耗电（主要是CPU和GPU）,这是必要的消耗。要确保尽快返回空闲状态。并且，最好使用浏览器本身提供的功能。- 举例：普通的页面滚动肯定比用js自定义的滚动更高效。</p>\n<h3 id=\"让空闲状态耗电趋向于零\"><a href=\"#让空闲状态耗电趋向于零\" class=\"headerlink\" title=\"让空闲状态耗电趋向于零\"></a>让空闲状态耗电趋向于零</h3><p>当用户没有和页面交互时，尽可能的使页面不耗电，例如：</p>\n<ul>\n<li>尽量少用定时器以避免唤醒CPU,可以把基于定时器的任务合并，使用尽可能少的定时器。大量滥用定时器会导致CPU被频繁唤醒，这比把这些任务合并处理要糟糕的多。</li>\n<li>最大限度地减少动画内容，如动画图像和自动播放视频。要特别注意”loading”用的gif图片或css动画，这些动画会不断触发渲染，即使看不到也会触发。<a href=\"https://webkit.org/blog/8582/intersectionobserver-in-webkit/\" target=\"_blank\" rel=\"noopener\">IntersectionObserver</a>可以用来在可见时才运行动画。</li>\n<li>尽量用css做动画和过渡，这些动画不可见时，浏览器会进行优化，并且css动画比js动画要高效的多。</li>\n<li>避免通过轮询来获取服务器更新，可以用websocket或者持久连接来代替轮询。</li>\n</ul>\n<p>看起来处于空闲状态的页面，如果正在后台进行工作，其用户交互的响应效率也会降低，因此最小化后台活动也可以提高响应能力以及电池寿命。</p>\n<h3 id=\"页面在后台时CPU零使用\"><a href=\"#页面在后台时CPU零使用\" class=\"headerlink\" title=\"页面在后台时CPU零使用\"></a>页面在后台时CPU零使用</h3><p>这几种场景时，页面变为非活动状态(不是用户的首要焦点)，例如：</p>\n<ul>\n<li>用户切换到其他tab</li>\n<li>用户切换到其他app</li>\n<li>浏览器窗口最小化</li>\n<li>浏览器窗口失去焦点</li>\n<li>浏览器窗口在其他窗口后面</li>\n<li>窗口所在的空间不是当前空间（MacOS才有空间的概念）</li>\n</ul>\n<p>当页面不活动时，webkit会自动做以下处理来减少耗电：</p>\n<ul>\n<li>停止调用requestAnimationFrame</li>\n<li>CSS和SVG动画会暂停</li>\n<li>定时器会节流</li>\n</ul>\n<p>此外，WebKit利用操作系统提供的能力来最大限度地提高效率：</p>\n<ul>\n<li>在iOS上，不用的选项卡(tab页)会完全暂停。</li>\n<li>在macOS上，选项卡会响应<a href=\"https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/AppNap.html\" target=\"_blank\" rel=\"noopener\">App Nap</a>功能，这意味着不可视更新的选项卡的Web进程优先级较低，并且其计时器会做节流处理。</li>\n</ul>\n<p>但是，页面可以通过计时器（setTimeout和setInterval），消息，网络事件等触发CPU唤醒。页面在后台时应避免这些唤醒，有两个API对此有用：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\" target=\"_blank\" rel=\"noopener\">页面可见性API</a>提供了一种响应页面转换为后台或前台的方法。这是一种避免页面在后台时更新UI的好方法。用visibilitychange事件，在页面可见时更新页面内容。</li>\n<li>页面失去焦点时会发出blur事件。这时，页面依然可见，但是不是聚焦窗口。可以考虑暂停动画。</li>\n</ul>\n<p>查找问题最简单的方式就是用浏览器控制台的时间线功能。页面在后台时，时间线记录中不应该有任何事件发生。</p>\n<h1 id=\"找到问题所在\"><a href=\"#找到问题所在\" class=\"headerlink\" title=\"找到问题所在\"></a>找到问题所在</h1><p>现在我们知道了web页面主要的耗电因素，并且给出了一些创建高效页面的一般规则。 接下来讨论一下怎样找出并解决导致功耗过大的问题。</p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>如上所述，现代CPU能够把功率从空闲态的非常低提升到非常高来满足用户交互和其他任务的要求。 也正因为如此，CPU是导致电池寿命减少的主要原因。页面加载期间CPU要做一连串工作包括加载、解析、渲染资源，并且执行js。在大多数现代web页面上，执行js花费的时间远远高出浏览器用在其余加载过程中花费的时间。因为尽量减少js执行时间对省电有最大的效益。</p>\n<p>测量CPU使用的最佳方法是使用Web Inspector，就像之前文章里所说的，时间线面板可以显示任意选定时间范围内的CPU活动。</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Web-Inspector-CPU-Timeline-Overview-Dark.png\" alt=\"Web-Inspector-CPU-Timeline-Overview-Dark\"></p>\n<p>为了高效地使用CPU，WebKit尽可能在多核上分配工作（使用Workers的页面也可以使用多核）。Web Inspector提供与页面主线程同时运行的线程的细分图表。例如，以下屏幕截图显示了滚动具有复杂渲染和视频播放的页面时的线程：</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Power-heavy-website-light.png\" alt=\"Power-heavy-website-light\"></p>\n<p>在寻找优化点时，应关注主线程，因为js运行在主线程上（除非您正在使用Workers）。我们可以使用时间线面板的 “JavaScript and Events” 项来了解触发脚本的内容。也许你在响应用户或滚动事件或从requestAnimationFrame触发隐藏元素的更新时做了太多工作。你需要了解你在页面上使用的JavaScript库和第三方脚本所做的工作。如果要深入挖掘，你可以使用Web Inspector的<a href=\"https://webkit.org/blog/6539/introducing-jscs-new-sampling-profiler/\" target=\"_blank\" rel=\"noopener\">JavaScript profiler</a>来查看时间都用在哪些地方。</p>\n<p>“WebKit线程”中的活动主要由与JavaScript相关的工作触发：JIT编译和垃圾收集。因此减少运行的脚本数量并减少短生命周期的JavaScript对象可以降低webkit线程的活动。</p>\n<p>WebKit调用的各种其他系统框架都使用线程，“Other thread” 包括了这些工作; “Other thread” 最主要的工作是渲染，我们将在下面讨论。</p>\n<h3 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h3><p>主线程CPU使用也可以通过大量布局和绘制来触发；这些通常由脚本触发，但是除了transform，opacity和filter之外的属性的CSS动画也可以触发它们。查看时间线面板的 “Layout and Rendering” 项将帮助你了解导致活动的原因。</p>\n<p>如果 “Layout and Rendering” 显示的渲染过程不能清楚展示页面正在发生什么变化，可以启用 <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Paint_Flashing_Tool\" target=\"_blank\" rel=\"noopener\">Paint Flashing</a>：</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Enable-Paint-Flashing-dark.png\" alt=\"Enable-Paint-Flashing-dark\"></p>\n<p>这部分渲染将用红色背景的高亮显示，你可以滚动页面查看。注意，WebKit会保留一些“透视”图块以允许平滑滚动，因此视口中不可见的图形仍然可以正常工作以使屏幕外图块保持最新。如果渲染展示在时间轴中，说明它正在工作。</p>\n<p>除了导致CPU耗电外，渲染通常还会触发GPU工作。macOS和iOS上的WebKit使用GPU进行渲染，因此触发渲染可以显着增加耗电。额外的CPU使用通常显示在时间线面板 “CPU” 项中的 “Other threads” 下。</p>\n<p>GPU还用于canvas渲染，包括2D画布和WebGL / WebGPU。为了最小限度使用绘图，canvas上显示的内容没有变化时不要调用canvas API，并尝试优化canvas绘制代码。</p>\n<p>许多Mac笔记本电脑都有两个GPU，一个与CPU相同内核的集成GPU，功能不强但功耗低，一个功能更强大但是功耗也更高的独立GPU。 WebKit默认使用集成GPU；你可以使用<a href=\"https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2.1\" target=\"_blank\" rel=\"noopener\">powerPreference</a>上下文创建参数请求独立GPU，但只有在你可以证明电源成本合理时才执行此操作。</p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>无线网络会以意想不到的方式影响电池寿命。手机有功能更强大的无线模块（WiFi和蜂窝网络芯片）和更小的电池，因此受到的影响最大。 遗憾的是，在实验室外测量网络的功率影响并不容易，但可以通过遵循一些简单的规则来减少。</p>\n<p>降低网络功耗的最直接方法是最大限度地利用浏览器的缓存。 减少页面加载时间的所有最佳实践也可以通过减少无线模块需要打开的时间来使电池受益。</p>\n<p>另一个重要方面是在时间上将网络请求组合在一起。每当有新请求到来时，操作系统都需要打开无线模块，连接到基站或蜂窝塔，并传输字节。在发送分组之后，在发送更多分组的情况下，无线电保持供电少量时间。</p>\n<p>如果页面非经常性的发送少量数据，则开销可能会大于传输数据所需的能量。</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Networking-Power-Overhead-of-two-small-transmissions.png\" alt=\"Networking-Power-Overhead-of-two-small-transmissions\"></p>\n<p>可以从 Web Inspector 的时间线面板的 “Network Requests” 项中发现此类问题。例如，以下屏幕截图显示了几秒钟内发送的四个单独请求：</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Network-requests-should-be-grouped-dark.png\" alt=\"Network-requests-should-be-grouped-dark\"></p>\n<p>同时发送所有请求将提高网络用电效率。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>我们可以对网页做很多优化来延长电池寿命。</p>\n<p>在Web Inspector中测量对电池影响并降低损耗非常重要。 这样做可以改善用户体验并延长电池寿命。</p>\n<p>提高电池寿命的最直接方法是最大限度地降低CPU使用率。 新的Web Inspector提供了强大的工具可以全程监控。</p>\n<p>为了让电池寿命更长，我们要：</p>\n<ul>\n<li>在空闲时将CPU使用率降至零</li>\n<li>在用户交互期间最大化性能以快速恢复空闲</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文地址：<a href=\"https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/\" target=\"_blank\" rel=\"noopener\">https://webkit.org/blog/8970/how-web-content-can-affect-power-usage/</a><br>原文作者：Benjamin Poulain &amp; Simon Fraser<br>译者：刘辉    校验：李刚松</p>\n</blockquote>\n<p>现在用户上网大多使用移动设备或者笔记本电脑。对这两者来说，电池寿命都很重要。在这篇文章里，我们将讨论影响电池寿命的因素，以及作为一个web开发者，我们如何让网页耗电更少，以便用户有更多时间来关注我们的内容。</p>\n<h1 id=\"是什么在耗电？\"><a href=\"#是什么在耗电？\" class=\"headerlink\" title=\"是什么在耗电？\"></a>是什么在耗电？</h1><p>移动设备的电力消耗有以下几个因素：</p>\n<ul>\n<li>CPU （核心处理器）</li>\n<li>GPU （图形处理）</li>\n<li>网络 （wifi或者蜂窝移动网络）</li>\n<li>屏幕</li>\n</ul>\n<p>屏幕功耗相对稳定，并且主要由用户控制（通过屏幕使用时间和亮度），但是对于其他组件，例如CPU，GPU，网络模块，功耗是动态变化的，而且变化范围很大。</p>","more":"<p>系统根据当前正在处理的任务调整CPU和GPU性能，包括在Web浏览器中用户正在交互的网页以及使用Web内容的其他应用程序。这是通过打开或关闭某些组件以及通过更改其时钟频率来完成的。总的来说，芯片所需的性能越高，其功率效率就越低。硬件可以非常快速地提升到高性能（但是需要很大的功率），然后迅速恢复到更高效的低功耗状态。</p>\n<h1 id=\"良好用电的一般原则\"><a href=\"#良好用电的一般原则\" class=\"headerlink\" title=\"良好用电的一般原则\"></a>良好用电的一般原则</h1><p>为了最大限度地延长电池寿命，你必须尽量减少硬件处于高功率状态的时间，让硬件尽可能的处于空闲状态。</p>\n<p>对于web开发者来说，有三种交互场景需要注意：</p>\n<ul>\n<li>用户主动与内容交互</li>\n<li>页面处于前台，但是用户没有交互</li>\n<li>页面处于后台</li>\n</ul>\n<h3 id=\"高效的用户交互\"><a href=\"#高效的用户交互\" class=\"headerlink\" title=\"高效的用户交互\"></a>高效的用户交互</h3><p>用户交互的时候肯定会耗电。页面需要快速的加载，并且能够快速的响应触摸。在大多数场景中，减少首次渲染时间也会降低功耗。不过，在初始页面加载后继续加载资源和运行脚本时要小心。我们要尽快让系统返回空闲状态。总的来说，浏览器已经完成了布局和渲染，js执行的越少，耗电越少。</p>\n<p>一旦页面加载完，用户可能会滚屏或者点击页面，这同样会产生耗电（主要是CPU和GPU）,这是必要的消耗。要确保尽快返回空闲状态。并且，最好使用浏览器本身提供的功能。- 举例：普通的页面滚动肯定比用js自定义的滚动更高效。</p>\n<h3 id=\"让空闲状态耗电趋向于零\"><a href=\"#让空闲状态耗电趋向于零\" class=\"headerlink\" title=\"让空闲状态耗电趋向于零\"></a>让空闲状态耗电趋向于零</h3><p>当用户没有和页面交互时，尽可能的使页面不耗电，例如：</p>\n<ul>\n<li>尽量少用定时器以避免唤醒CPU,可以把基于定时器的任务合并，使用尽可能少的定时器。大量滥用定时器会导致CPU被频繁唤醒，这比把这些任务合并处理要糟糕的多。</li>\n<li>最大限度地减少动画内容，如动画图像和自动播放视频。要特别注意”loading”用的gif图片或css动画，这些动画会不断触发渲染，即使看不到也会触发。<a href=\"https://webkit.org/blog/8582/intersectionobserver-in-webkit/\" target=\"_blank\" rel=\"noopener\">IntersectionObserver</a>可以用来在可见时才运行动画。</li>\n<li>尽量用css做动画和过渡，这些动画不可见时，浏览器会进行优化，并且css动画比js动画要高效的多。</li>\n<li>避免通过轮询来获取服务器更新，可以用websocket或者持久连接来代替轮询。</li>\n</ul>\n<p>看起来处于空闲状态的页面，如果正在后台进行工作，其用户交互的响应效率也会降低，因此最小化后台活动也可以提高响应能力以及电池寿命。</p>\n<h3 id=\"页面在后台时CPU零使用\"><a href=\"#页面在后台时CPU零使用\" class=\"headerlink\" title=\"页面在后台时CPU零使用\"></a>页面在后台时CPU零使用</h3><p>这几种场景时，页面变为非活动状态(不是用户的首要焦点)，例如：</p>\n<ul>\n<li>用户切换到其他tab</li>\n<li>用户切换到其他app</li>\n<li>浏览器窗口最小化</li>\n<li>浏览器窗口失去焦点</li>\n<li>浏览器窗口在其他窗口后面</li>\n<li>窗口所在的空间不是当前空间（MacOS才有空间的概念）</li>\n</ul>\n<p>当页面不活动时，webkit会自动做以下处理来减少耗电：</p>\n<ul>\n<li>停止调用requestAnimationFrame</li>\n<li>CSS和SVG动画会暂停</li>\n<li>定时器会节流</li>\n</ul>\n<p>此外，WebKit利用操作系统提供的能力来最大限度地提高效率：</p>\n<ul>\n<li>在iOS上，不用的选项卡(tab页)会完全暂停。</li>\n<li>在macOS上，选项卡会响应<a href=\"https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/AppNap.html\" target=\"_blank\" rel=\"noopener\">App Nap</a>功能，这意味着不可视更新的选项卡的Web进程优先级较低，并且其计时器会做节流处理。</li>\n</ul>\n<p>但是，页面可以通过计时器（setTimeout和setInterval），消息，网络事件等触发CPU唤醒。页面在后台时应避免这些唤醒，有两个API对此有用：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\" target=\"_blank\" rel=\"noopener\">页面可见性API</a>提供了一种响应页面转换为后台或前台的方法。这是一种避免页面在后台时更新UI的好方法。用visibilitychange事件，在页面可见时更新页面内容。</li>\n<li>页面失去焦点时会发出blur事件。这时，页面依然可见，但是不是聚焦窗口。可以考虑暂停动画。</li>\n</ul>\n<p>查找问题最简单的方式就是用浏览器控制台的时间线功能。页面在后台时，时间线记录中不应该有任何事件发生。</p>\n<h1 id=\"找到问题所在\"><a href=\"#找到问题所在\" class=\"headerlink\" title=\"找到问题所在\"></a>找到问题所在</h1><p>现在我们知道了web页面主要的耗电因素，并且给出了一些创建高效页面的一般规则。 接下来讨论一下怎样找出并解决导致功耗过大的问题。</p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>如上所述，现代CPU能够把功率从空闲态的非常低提升到非常高来满足用户交互和其他任务的要求。 也正因为如此，CPU是导致电池寿命减少的主要原因。页面加载期间CPU要做一连串工作包括加载、解析、渲染资源，并且执行js。在大多数现代web页面上，执行js花费的时间远远高出浏览器用在其余加载过程中花费的时间。因为尽量减少js执行时间对省电有最大的效益。</p>\n<p>测量CPU使用的最佳方法是使用Web Inspector，就像之前文章里所说的，时间线面板可以显示任意选定时间范围内的CPU活动。</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Web-Inspector-CPU-Timeline-Overview-Dark.png\" alt=\"Web-Inspector-CPU-Timeline-Overview-Dark\"></p>\n<p>为了高效地使用CPU，WebKit尽可能在多核上分配工作（使用Workers的页面也可以使用多核）。Web Inspector提供与页面主线程同时运行的线程的细分图表。例如，以下屏幕截图显示了滚动具有复杂渲染和视频播放的页面时的线程：</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Power-heavy-website-light.png\" alt=\"Power-heavy-website-light\"></p>\n<p>在寻找优化点时，应关注主线程，因为js运行在主线程上（除非您正在使用Workers）。我们可以使用时间线面板的 “JavaScript and Events” 项来了解触发脚本的内容。也许你在响应用户或滚动事件或从requestAnimationFrame触发隐藏元素的更新时做了太多工作。你需要了解你在页面上使用的JavaScript库和第三方脚本所做的工作。如果要深入挖掘，你可以使用Web Inspector的<a href=\"https://webkit.org/blog/6539/introducing-jscs-new-sampling-profiler/\" target=\"_blank\" rel=\"noopener\">JavaScript profiler</a>来查看时间都用在哪些地方。</p>\n<p>“WebKit线程”中的活动主要由与JavaScript相关的工作触发：JIT编译和垃圾收集。因此减少运行的脚本数量并减少短生命周期的JavaScript对象可以降低webkit线程的活动。</p>\n<p>WebKit调用的各种其他系统框架都使用线程，“Other thread” 包括了这些工作; “Other thread” 最主要的工作是渲染，我们将在下面讨论。</p>\n<h3 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h3><p>主线程CPU使用也可以通过大量布局和绘制来触发；这些通常由脚本触发，但是除了transform，opacity和filter之外的属性的CSS动画也可以触发它们。查看时间线面板的 “Layout and Rendering” 项将帮助你了解导致活动的原因。</p>\n<p>如果 “Layout and Rendering” 显示的渲染过程不能清楚展示页面正在发生什么变化，可以启用 <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Paint_Flashing_Tool\" target=\"_blank\" rel=\"noopener\">Paint Flashing</a>：</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Enable-Paint-Flashing-dark.png\" alt=\"Enable-Paint-Flashing-dark\"></p>\n<p>这部分渲染将用红色背景的高亮显示，你可以滚动页面查看。注意，WebKit会保留一些“透视”图块以允许平滑滚动，因此视口中不可见的图形仍然可以正常工作以使屏幕外图块保持最新。如果渲染展示在时间轴中，说明它正在工作。</p>\n<p>除了导致CPU耗电外，渲染通常还会触发GPU工作。macOS和iOS上的WebKit使用GPU进行渲染，因此触发渲染可以显着增加耗电。额外的CPU使用通常显示在时间线面板 “CPU” 项中的 “Other threads” 下。</p>\n<p>GPU还用于canvas渲染，包括2D画布和WebGL / WebGPU。为了最小限度使用绘图，canvas上显示的内容没有变化时不要调用canvas API，并尝试优化canvas绘制代码。</p>\n<p>许多Mac笔记本电脑都有两个GPU，一个与CPU相同内核的集成GPU，功能不强但功耗低，一个功能更强大但是功耗也更高的独立GPU。 WebKit默认使用集成GPU；你可以使用<a href=\"https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2.1\" target=\"_blank\" rel=\"noopener\">powerPreference</a>上下文创建参数请求独立GPU，但只有在你可以证明电源成本合理时才执行此操作。</p>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>无线网络会以意想不到的方式影响电池寿命。手机有功能更强大的无线模块（WiFi和蜂窝网络芯片）和更小的电池，因此受到的影响最大。 遗憾的是，在实验室外测量网络的功率影响并不容易，但可以通过遵循一些简单的规则来减少。</p>\n<p>降低网络功耗的最直接方法是最大限度地利用浏览器的缓存。 减少页面加载时间的所有最佳实践也可以通过减少无线模块需要打开的时间来使电池受益。</p>\n<p>另一个重要方面是在时间上将网络请求组合在一起。每当有新请求到来时，操作系统都需要打开无线模块，连接到基站或蜂窝塔，并传输字节。在发送分组之后，在发送更多分组的情况下，无线电保持供电少量时间。</p>\n<p>如果页面非经常性的发送少量数据，则开销可能会大于传输数据所需的能量。</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Networking-Power-Overhead-of-two-small-transmissions.png\" alt=\"Networking-Power-Overhead-of-two-small-transmissions\"></p>\n<p>可以从 Web Inspector 的时间线面板的 “Network Requests” 项中发现此类问题。例如，以下屏幕截图显示了几秒钟内发送的四个单独请求：</p>\n<p><img src=\"https://webkit.org/wp-content/uploads/Network-requests-should-be-grouped-dark.png\" alt=\"Network-requests-should-be-grouped-dark\"></p>\n<p>同时发送所有请求将提高网络用电效率。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>我们可以对网页做很多优化来延长电池寿命。</p>\n<p>在Web Inspector中测量对电池影响并降低损耗非常重要。 这样做可以改善用户体验并延长电池寿命。</p>\n<p>提高电池寿命的最直接方法是最大限度地降低CPU使用率。 新的Web Inspector提供了强大的工具可以全程监控。</p>\n<p>为了让电池寿命更长，我们要：</p>\n<ul>\n<li>在空闲时将CPU使用率降至零</li>\n<li>在用户交互期间最大化性能以快速恢复空闲</li>\n</ul>"},{"title":"前端资源治理（一）","date":"2019-09-24T00:23:20.000Z","cover":"https://img11.360buyimg.com/jdphoto/s3000x2000_jfs/t1/78162/34/8449/187534/5d6735b7E2d6d21bb/1736ca1625d0ed3d.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s3000x2000_jfs/t1/78162/34/8449/187534/5d6735b7E2d6d21bb/1736ca1625d0ed3d.jpg","_content":"\n> 作者：李刚松\n\n## 0.也谈前端工程化 \n随着前端技术的飞速发展，前端需要一种更加工程化的方式解决前端开发日益复杂的问题。前端工程化本质也是软件工程的一种，由于软件工程并无严格的定义(或者说缺乏统一的定义)，因此前端工程化的内涵其实相当宽泛，一般来说，前端工程化重点关注的是研发和维护效率，所有最终目的是这个的，都可以算作前端工程化的范畴。\n前端工程化近几年也是技术热点，基本上大型前端技术交流会议都有此专题，从规范、组件、编译及构建、工作流、持续集成、监控等多个维度都有涉及，笔者尝试从前端资源治理的角度谈一下前端工程化,本文是系列文章的第一篇，主要讲问题及解决的思路，不涉及具体的实现细节。\n<!--more-->\n## 1.前端资源治理的含义\n首先，这里所说的前端资源，并非是仅指js、css、图片等静态资源，页面、后端接口、配置数据、监控点等，都可以纳入前端资源的定义的范畴。\n\n在工作中，你是否会碰到以下问题：\n1. 同事或者领导发现某个页面有bug，需要在微信群或者内部沟通工具大群里问是谁负责？可能还要挨个艾特各个TL，需要各个TL确认。\n2. 某个组件要升级，但是不知道那些页面使用了，需要在沟通群里问或者搜项目源代码，逐个找到负责人。\n3. 某个大型营销活动突然要换一个新的氛围logo，但是不知道哪些页面使用了旧logo，需要安排巡检，人肉去找出来。\n4. 告警发现某个重要页面的出现了内容空窗，原因是运营同学没有及时补充运营数据，但是不知道是哪个运营负责，需要在微信大群或者内部沟通工具大群里问。\n5. 大促来临，某个重要页面的流量预计有10倍或者20倍的增长，要通知各个接口的同学做扩容和容灾准备，需要手工梳理页面的依赖的接口列表。\n6. 某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里。\n7. 我要在统计系统上查看某个页面的性能数据，但是该系统是以页面名字而不是地址来查找的，查找过程找的人老眼昏花。\n8. 某个后端接口要升级或者要下线，需要分析nginx的访问日志找到页面地址，然后再拉各个TL，逐个确认都是哪些同事负责。\n9. 等等等\n\n上面的问题一般是大型复杂业务场景（通常是多个团队合作开发，业务复杂，页面成百上千甚至上万）下才有的，如果你所在的团队也有上面的问题，那么我认为你也需要对前端的资源进行治理。\n\n那么什么是前端资源治理呢？笔者对其的定义是：\n><em>将前端相关的页面、js/css/图片/字体、接口、配置、监控点等的依赖关系进行收集、存储和管理，并将割裂的组件系统、配置系统、监控系统、业务系统等进行重构和整合，最终形成以页面管理为基础的统一的有序的平台，所有关联信息都能够被查询和检索，最终实现整体协作效率的提升。</em>\n\n此处使用“治理”而不是“管理”的原因，“治理”一词更强调合作整改的过程。在很多互联网企业，通常已经有一些独立的组件系统、配置系统、监控系统等，但是这些系统很多都是独立的碎片化的系统，彼此都是割裂的，割裂意味着缺乏协同，进而影响研发效率。因此，前端资源治理的一个关键词是“整合”，整合已有的系统。\n\n第二个关键词是“关联关系管理”，前端相关的页面、组件、js/css/图片/字体、接口、配置、监控点及负责人等，他们是存在关联关系的，比如页面是谁负责的、谁修改的、引用了哪些组件、图片、字体、接口、在什么地方配置数据、监控点都有哪些等，我们需要把这些关联关系在管理端记录下来，并提供检索和查询。\n\n\n## 2.前端资源治理的实现\n前端资源信息看似繁杂，js、css、图片、页面、后端接口、配置数据、监控点等，但是他们有一个串联的锚点，这个锚点就是页面，不管是H5、小程序，还是原生APP，不管是从研发的角度，还是从反馈问题的角度，基本上都是以页面为单位进行的，其他的如组件、CSS、图片、接口、配置等，都是被页面引用的，都可以通过页面串联起来的，下图可以清晰的表达出这些依赖关系。\n\n![页面](https://img11.360buyimg.com/jdphoto/s1187x557_jfs/t1/60034/13/9411/74040/5d6f15f5E908267d0/2da1e3fdff61c788.png)\n\n因此，实现前端资源治理的第一个要点是做好页面管理，把页面自身的信息，如页面名称、页面地址、负责人、修改时间等信息进行提取、存储,使之能够被查询和检索。在页面管理基础之上，我们还要把js、css、图片、页面、后端接口、配置数据、监控点等各个前端资源之间的关联关系也要存储和管理起来，使之能够被查询和检索。\n\n关联关系从来源上讲，主要有以下几种来源：\n1. 代码静态分析产生。通常包括页面信息自身、页面跟js/css/图片等的依赖关系、页面跟接口的依赖关系等。\n2. 管理端配置产生。通常包括页面跟监控系统的配置、页面的运营配置数据等\n3. 统计数据产生。通常包括页面来源数据等。\n\n![关联关系管理](https://img11.360buyimg.com/jdphoto/s1065x705_jfs/t1/75735/10/9225/32429/5d6f1743E9da72389/e07d883ee6dfc51a.png)\n\n#### 2.1 页面信息的提取\n前端资源治理的第一要点是页面信息管理，因此必须能够拿到页面基本信息。页面基本信息应该包括哪些呢？通常来说，至少应该包括页面URL、页面名称、页面创建人、创建时间等几个字段。\n\n当前的前端页面开发，不管是H5、小程序，还是原生APP，通常会经过编译构建的过程（通常是命令行工具或者IDE，比如基于gulp和webpack的工作流工具），在构建完成阶段可以提取出页面的基本信息。以下是编译构建提取页面信息的流程：\n![页面信息的提取](https://img11.360buyimg.com/jdphoto/s762x445_jfs/t1/64924/37/9126/24880/5d6e8e53E5ca79145/6f646b4910b1dbbb.png)\n\n页面的编译构建流程，一般分为两种：\n1. 独立构建。常见于H5，此种场景一般是一个人负责一个页面，不存在多人协作的情况，也不需要git分支管理啥的，开发完成即可走构建流程，只需要在构建完成的时候分析即可，页面的URL、页面标题、创建人、创建时间等信息比较容易提取，比如页面修改人可以取自命令行工具的用户登录身份（命令行工具可以做类似于NPM的login功能，登录后记录用户身份ID）、页面标题可以解析页面html的title的内容（小程序下则解析自页面json文件的navigationBarTitleText字段）等。\n2. 持续集成构建。这种一般是需要多人协作的H5、小程序、原生APP等，一般涉及到分支管理和合并的问题，同一个页面可能被多人修改，因此页面信息中的用户信息部分提取相对复杂，需要分析git log信息才能拿到，其他的信息字段提取逻辑与独立构建情况相同。\n以下是一个典型的多人协作的页面的git log信息。\n<img src=\"https://img11.360buyimg.com/jdphoto/s1302x832_jfs/t1/73369/13/6946/175119/5d5157d1E2105714f/efcdf4cca35fa064.png\" width=\"50%\" height=\"50%\">\n\n对于上面的情况，我们可以考虑定一个规则，比如取最近的5条log，并移除持续集成系统生成的log，管理端存储的时候回，以用户名+时间为key，去掉重复的部分。\n\n构建流程分析出页面基本信息后，需提交到管理端保存，所以管理端需要提供post接口。管理端以此为基础，形成”页面管理系统“。\n\n#### 2.2 代码静态分析出的关联关系\n构建流程除可以分析基本信息外，还可以分析出页面的版本信息，比如页面依赖的组件依赖表、静态资源依赖表(js/css/图片)、接口依赖表、修改人、修改时间等。\n静态依赖分析通常有3种方式：\n1. 基于AST的依赖分析。\nAST就是抽象语法树，目前前端对他的研究和使用越来越广泛，webpack内部就使用了acorn这个AST分析库。借助于webpack强大的模块解析和依赖分析能力，我们可以拿到js与npm组件、css与背景图等之间的关联关系（可以在webpack的after-resolve钩子中进行分析）。另外，除了构建前的依赖关系，我们还可以拿到构建处理后的资源依赖关系（可以在webpac的emit钩子中进行分析），前者我们称为引用依赖关系（包括静态资源依赖表、组件依赖表），后者我们称为发布依赖关系。\n2. 基于DOM操作的依赖分析。\nwebpack并不是以html为入口的，但是实际上我们的开发的入口可以认为就是页面，借助于JsDom等强大的类库，我们可以用我们熟悉的前端的DOM操作来分析html页面对js、css、图片等的依赖关系。\n3. 基于正则匹配的依赖分析。\n页面对于接口的依赖分析，由于这种是非明确的代码依赖关系，所以一般通过正则匹配来解析。一般对代码有一定的约束规则，比如不用用变量拼接接口地址。这个解析不会如AST那么精确，但是只要约定规则，基本上都能满足需求。可以考虑把此类实现封装为webpack的loader。\n![关联信息的提取](https://img11.360buyimg.com/jdphoto/s1001x580_jfs/t1/63972/16/9196/24515/5d6e8f13Ee5583ec2/cd6021d6c45e2f56.png)\n上面的第一种和第三种的分析，都应该是一个递归分析过程，最终生成页面的静态资源依赖表、组件依赖表、接口依赖表等。这些信息提交到管理端进行保存。\n\n#### 2.3 管理系统之间的关联关系\n在很多互联网企业，通常已经有一些独立的成熟的CMS系统（如给运营用的内容配置系统，配置活动时间、商品ID等）、监控系统（如测速系统、业务监控系统、异常监控系统）等，通常这些系统由不同的团队开发，而且经常都有一个叫做\"页面管理\"的东西，且要手工配置页面地址。这些系统中的监控点配置、运营配置等信息，都是以页面维度进行创建和使用的，但是这些信息很难通过对前端代码静态分析的方法进行提取（比如运营配置信息，这个可以是前端直接使用，也可能是后端使用，要分析的话两端代码都要分析，比较麻烦）。我们的思路应该是在管理端通过页面管理来进行关联，实质上是要做系统整合。\n\n整合的思路也比较简单，就是原来各个系统废弃掉原来自身的”页面管理“，而是使用前面静态分析提取到的统一的页面管理，监控系统、运营配置系统等系统都可以以此为入口进入，从而把页面相关的各个管理系统关联起来，进而把各种能力串联。\n![管理系统的关联](https://img11.360buyimg.com/jdphoto/s815x487_jfs/t1/79814/31/9124/24005/5d6e8f5bEff12c5ee/3a87b35bf6595925.png)\n\n#### 2.4 统计数据产生的关联关系\n对于大型应用来说，一般都有一些业务统计数据，最典型的就是点击流数据了。这种数据既不在代码中，也不在管理端配置，而且通过统计和分析才能拿到。前面提到的“某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里”这种问题的解决，其实依赖于点击流的统计分析数据了，点击流系统一般都有“来源分析”，这种数据也不是敏感数据，所以可以考虑跟页面管理做关联和整合，或者提供API给页面管理系统。另外还有一个例子就是，接口和页面的关联关系，前面提到通过静态分析得到的页面和接口的依赖表有可能不够准确，但是接口访问Web Server的时候，一般都有access.log，可以通过access.log来做分析，拿到比较完整的页面依赖的接口信息，以及接口依赖的页面信息，有些接口的调用需要有open api的那种注册调用机制，就另当别论了。\n![统计系统的关联](https://img11.360buyimg.com/jdphoto/s798x545_jfs/t1/49549/18/9573/24174/5d6e8fa1E97ed2043/01f2e6fad7b0bc29.png)\n\n#### 2.5 关联关系的查询和存储\n管理端应该提供正反两个方向的查询和检索能力：\n1. 正向查询。通过页面来查询依赖的组件、静态资源(js/css/图片)、后端接口等。此种比较简单，因为提交的时候已经有完整的依赖信息，只需要提供简单的查询。\n2. 反向查询。通过组件、静态资源、接口、运营配置信息、监控配置信息等，反查有哪些页面依赖。\n\n对于关联关系的存储，用关系型DB的话，一般只能使用like查询，可能要扫描全表，因而性能比较差，可以考虑存储到MongoDB中创建索引，或者存储到ElasticSearch中建立索引。\n\n#### 2.6 其他\n前面提到的，其实有一个假设的前提“只有一个Web应用，且接口都是前端发起的”，但是对于其他情况，思路是类似的：\n1. 多应用（业务）。多应用情况，通常要在页面管理的上一层加上“应用管理”，即页面属于哪一个应用(业务)。对于同一个页面投放在不同应用的场景，可能页面还得加上渠道标识。\n2. 页面直出（服务端渲染）。对于页面直出逻辑的代码，做前面类似的分析即可。\n另外，本文主要是探讨从前端视角考虑问题，所以关联核心是页面管理，但是从整体技术架构视角，可能就不是了。\n\n## 3.结语\n本文探讨了前端资源治理的含义以及要解决的问题，并介绍了实现前端资源治理的思路，是笔者近期在前端工程化方面的思考，部分已经完成，部分正在推进。本文并不涉及实现的细节，细节在后面的系列文章中进一步讲解。\n前端治理的两个关键点，一个是系统整合，一个是关联关系管理，整体串联的核心是页面管理。","source":"_posts/2019-09/前端资源治理（一）.md","raw":"---\ntitle: 前端资源治理（一）\ndate: 2019-09-24 08:23:20\ncover:  https://img11.360buyimg.com/jdphoto/s3000x2000_jfs/t1/78162/34/8449/187534/5d6735b7E2d6d21bb/1736ca1625d0ed3d.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s3000x2000_jfs/t1/78162/34/8449/187534/5d6735b7E2d6d21bb/1736ca1625d0ed3d.jpg\ntags: \n  - 资源治理\n  - 前端工程化\ncategories: Web开发\n---\n\n> 作者：李刚松\n\n## 0.也谈前端工程化 \n随着前端技术的飞速发展，前端需要一种更加工程化的方式解决前端开发日益复杂的问题。前端工程化本质也是软件工程的一种，由于软件工程并无严格的定义(或者说缺乏统一的定义)，因此前端工程化的内涵其实相当宽泛，一般来说，前端工程化重点关注的是研发和维护效率，所有最终目的是这个的，都可以算作前端工程化的范畴。\n前端工程化近几年也是技术热点，基本上大型前端技术交流会议都有此专题，从规范、组件、编译及构建、工作流、持续集成、监控等多个维度都有涉及，笔者尝试从前端资源治理的角度谈一下前端工程化,本文是系列文章的第一篇，主要讲问题及解决的思路，不涉及具体的实现细节。\n<!--more-->\n## 1.前端资源治理的含义\n首先，这里所说的前端资源，并非是仅指js、css、图片等静态资源，页面、后端接口、配置数据、监控点等，都可以纳入前端资源的定义的范畴。\n\n在工作中，你是否会碰到以下问题：\n1. 同事或者领导发现某个页面有bug，需要在微信群或者内部沟通工具大群里问是谁负责？可能还要挨个艾特各个TL，需要各个TL确认。\n2. 某个组件要升级，但是不知道那些页面使用了，需要在沟通群里问或者搜项目源代码，逐个找到负责人。\n3. 某个大型营销活动突然要换一个新的氛围logo，但是不知道哪些页面使用了旧logo，需要安排巡检，人肉去找出来。\n4. 告警发现某个重要页面的出现了内容空窗，原因是运营同学没有及时补充运营数据，但是不知道是哪个运营负责，需要在微信大群或者内部沟通工具大群里问。\n5. 大促来临，某个重要页面的流量预计有10倍或者20倍的增长，要通知各个接口的同学做扩容和容灾准备，需要手工梳理页面的依赖的接口列表。\n6. 某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里。\n7. 我要在统计系统上查看某个页面的性能数据，但是该系统是以页面名字而不是地址来查找的，查找过程找的人老眼昏花。\n8. 某个后端接口要升级或者要下线，需要分析nginx的访问日志找到页面地址，然后再拉各个TL，逐个确认都是哪些同事负责。\n9. 等等等\n\n上面的问题一般是大型复杂业务场景（通常是多个团队合作开发，业务复杂，页面成百上千甚至上万）下才有的，如果你所在的团队也有上面的问题，那么我认为你也需要对前端的资源进行治理。\n\n那么什么是前端资源治理呢？笔者对其的定义是：\n><em>将前端相关的页面、js/css/图片/字体、接口、配置、监控点等的依赖关系进行收集、存储和管理，并将割裂的组件系统、配置系统、监控系统、业务系统等进行重构和整合，最终形成以页面管理为基础的统一的有序的平台，所有关联信息都能够被查询和检索，最终实现整体协作效率的提升。</em>\n\n此处使用“治理”而不是“管理”的原因，“治理”一词更强调合作整改的过程。在很多互联网企业，通常已经有一些独立的组件系统、配置系统、监控系统等，但是这些系统很多都是独立的碎片化的系统，彼此都是割裂的，割裂意味着缺乏协同，进而影响研发效率。因此，前端资源治理的一个关键词是“整合”，整合已有的系统。\n\n第二个关键词是“关联关系管理”，前端相关的页面、组件、js/css/图片/字体、接口、配置、监控点及负责人等，他们是存在关联关系的，比如页面是谁负责的、谁修改的、引用了哪些组件、图片、字体、接口、在什么地方配置数据、监控点都有哪些等，我们需要把这些关联关系在管理端记录下来，并提供检索和查询。\n\n\n## 2.前端资源治理的实现\n前端资源信息看似繁杂，js、css、图片、页面、后端接口、配置数据、监控点等，但是他们有一个串联的锚点，这个锚点就是页面，不管是H5、小程序，还是原生APP，不管是从研发的角度，还是从反馈问题的角度，基本上都是以页面为单位进行的，其他的如组件、CSS、图片、接口、配置等，都是被页面引用的，都可以通过页面串联起来的，下图可以清晰的表达出这些依赖关系。\n\n![页面](https://img11.360buyimg.com/jdphoto/s1187x557_jfs/t1/60034/13/9411/74040/5d6f15f5E908267d0/2da1e3fdff61c788.png)\n\n因此，实现前端资源治理的第一个要点是做好页面管理，把页面自身的信息，如页面名称、页面地址、负责人、修改时间等信息进行提取、存储,使之能够被查询和检索。在页面管理基础之上，我们还要把js、css、图片、页面、后端接口、配置数据、监控点等各个前端资源之间的关联关系也要存储和管理起来，使之能够被查询和检索。\n\n关联关系从来源上讲，主要有以下几种来源：\n1. 代码静态分析产生。通常包括页面信息自身、页面跟js/css/图片等的依赖关系、页面跟接口的依赖关系等。\n2. 管理端配置产生。通常包括页面跟监控系统的配置、页面的运营配置数据等\n3. 统计数据产生。通常包括页面来源数据等。\n\n![关联关系管理](https://img11.360buyimg.com/jdphoto/s1065x705_jfs/t1/75735/10/9225/32429/5d6f1743E9da72389/e07d883ee6dfc51a.png)\n\n#### 2.1 页面信息的提取\n前端资源治理的第一要点是页面信息管理，因此必须能够拿到页面基本信息。页面基本信息应该包括哪些呢？通常来说，至少应该包括页面URL、页面名称、页面创建人、创建时间等几个字段。\n\n当前的前端页面开发，不管是H5、小程序，还是原生APP，通常会经过编译构建的过程（通常是命令行工具或者IDE，比如基于gulp和webpack的工作流工具），在构建完成阶段可以提取出页面的基本信息。以下是编译构建提取页面信息的流程：\n![页面信息的提取](https://img11.360buyimg.com/jdphoto/s762x445_jfs/t1/64924/37/9126/24880/5d6e8e53E5ca79145/6f646b4910b1dbbb.png)\n\n页面的编译构建流程，一般分为两种：\n1. 独立构建。常见于H5，此种场景一般是一个人负责一个页面，不存在多人协作的情况，也不需要git分支管理啥的，开发完成即可走构建流程，只需要在构建完成的时候分析即可，页面的URL、页面标题、创建人、创建时间等信息比较容易提取，比如页面修改人可以取自命令行工具的用户登录身份（命令行工具可以做类似于NPM的login功能，登录后记录用户身份ID）、页面标题可以解析页面html的title的内容（小程序下则解析自页面json文件的navigationBarTitleText字段）等。\n2. 持续集成构建。这种一般是需要多人协作的H5、小程序、原生APP等，一般涉及到分支管理和合并的问题，同一个页面可能被多人修改，因此页面信息中的用户信息部分提取相对复杂，需要分析git log信息才能拿到，其他的信息字段提取逻辑与独立构建情况相同。\n以下是一个典型的多人协作的页面的git log信息。\n<img src=\"https://img11.360buyimg.com/jdphoto/s1302x832_jfs/t1/73369/13/6946/175119/5d5157d1E2105714f/efcdf4cca35fa064.png\" width=\"50%\" height=\"50%\">\n\n对于上面的情况，我们可以考虑定一个规则，比如取最近的5条log，并移除持续集成系统生成的log，管理端存储的时候回，以用户名+时间为key，去掉重复的部分。\n\n构建流程分析出页面基本信息后，需提交到管理端保存，所以管理端需要提供post接口。管理端以此为基础，形成”页面管理系统“。\n\n#### 2.2 代码静态分析出的关联关系\n构建流程除可以分析基本信息外，还可以分析出页面的版本信息，比如页面依赖的组件依赖表、静态资源依赖表(js/css/图片)、接口依赖表、修改人、修改时间等。\n静态依赖分析通常有3种方式：\n1. 基于AST的依赖分析。\nAST就是抽象语法树，目前前端对他的研究和使用越来越广泛，webpack内部就使用了acorn这个AST分析库。借助于webpack强大的模块解析和依赖分析能力，我们可以拿到js与npm组件、css与背景图等之间的关联关系（可以在webpack的after-resolve钩子中进行分析）。另外，除了构建前的依赖关系，我们还可以拿到构建处理后的资源依赖关系（可以在webpac的emit钩子中进行分析），前者我们称为引用依赖关系（包括静态资源依赖表、组件依赖表），后者我们称为发布依赖关系。\n2. 基于DOM操作的依赖分析。\nwebpack并不是以html为入口的，但是实际上我们的开发的入口可以认为就是页面，借助于JsDom等强大的类库，我们可以用我们熟悉的前端的DOM操作来分析html页面对js、css、图片等的依赖关系。\n3. 基于正则匹配的依赖分析。\n页面对于接口的依赖分析，由于这种是非明确的代码依赖关系，所以一般通过正则匹配来解析。一般对代码有一定的约束规则，比如不用用变量拼接接口地址。这个解析不会如AST那么精确，但是只要约定规则，基本上都能满足需求。可以考虑把此类实现封装为webpack的loader。\n![关联信息的提取](https://img11.360buyimg.com/jdphoto/s1001x580_jfs/t1/63972/16/9196/24515/5d6e8f13Ee5583ec2/cd6021d6c45e2f56.png)\n上面的第一种和第三种的分析，都应该是一个递归分析过程，最终生成页面的静态资源依赖表、组件依赖表、接口依赖表等。这些信息提交到管理端进行保存。\n\n#### 2.3 管理系统之间的关联关系\n在很多互联网企业，通常已经有一些独立的成熟的CMS系统（如给运营用的内容配置系统，配置活动时间、商品ID等）、监控系统（如测速系统、业务监控系统、异常监控系统）等，通常这些系统由不同的团队开发，而且经常都有一个叫做\"页面管理\"的东西，且要手工配置页面地址。这些系统中的监控点配置、运营配置等信息，都是以页面维度进行创建和使用的，但是这些信息很难通过对前端代码静态分析的方法进行提取（比如运营配置信息，这个可以是前端直接使用，也可能是后端使用，要分析的话两端代码都要分析，比较麻烦）。我们的思路应该是在管理端通过页面管理来进行关联，实质上是要做系统整合。\n\n整合的思路也比较简单，就是原来各个系统废弃掉原来自身的”页面管理“，而是使用前面静态分析提取到的统一的页面管理，监控系统、运营配置系统等系统都可以以此为入口进入，从而把页面相关的各个管理系统关联起来，进而把各种能力串联。\n![管理系统的关联](https://img11.360buyimg.com/jdphoto/s815x487_jfs/t1/79814/31/9124/24005/5d6e8f5bEff12c5ee/3a87b35bf6595925.png)\n\n#### 2.4 统计数据产生的关联关系\n对于大型应用来说，一般都有一些业务统计数据，最典型的就是点击流数据了。这种数据既不在代码中，也不在管理端配置，而且通过统计和分析才能拿到。前面提到的“某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里”这种问题的解决，其实依赖于点击流的统计分析数据了，点击流系统一般都有“来源分析”，这种数据也不是敏感数据，所以可以考虑跟页面管理做关联和整合，或者提供API给页面管理系统。另外还有一个例子就是，接口和页面的关联关系，前面提到通过静态分析得到的页面和接口的依赖表有可能不够准确，但是接口访问Web Server的时候，一般都有access.log，可以通过access.log来做分析，拿到比较完整的页面依赖的接口信息，以及接口依赖的页面信息，有些接口的调用需要有open api的那种注册调用机制，就另当别论了。\n![统计系统的关联](https://img11.360buyimg.com/jdphoto/s798x545_jfs/t1/49549/18/9573/24174/5d6e8fa1E97ed2043/01f2e6fad7b0bc29.png)\n\n#### 2.5 关联关系的查询和存储\n管理端应该提供正反两个方向的查询和检索能力：\n1. 正向查询。通过页面来查询依赖的组件、静态资源(js/css/图片)、后端接口等。此种比较简单，因为提交的时候已经有完整的依赖信息，只需要提供简单的查询。\n2. 反向查询。通过组件、静态资源、接口、运营配置信息、监控配置信息等，反查有哪些页面依赖。\n\n对于关联关系的存储，用关系型DB的话，一般只能使用like查询，可能要扫描全表，因而性能比较差，可以考虑存储到MongoDB中创建索引，或者存储到ElasticSearch中建立索引。\n\n#### 2.6 其他\n前面提到的，其实有一个假设的前提“只有一个Web应用，且接口都是前端发起的”，但是对于其他情况，思路是类似的：\n1. 多应用（业务）。多应用情况，通常要在页面管理的上一层加上“应用管理”，即页面属于哪一个应用(业务)。对于同一个页面投放在不同应用的场景，可能页面还得加上渠道标识。\n2. 页面直出（服务端渲染）。对于页面直出逻辑的代码，做前面类似的分析即可。\n另外，本文主要是探讨从前端视角考虑问题，所以关联核心是页面管理，但是从整体技术架构视角，可能就不是了。\n\n## 3.结语\n本文探讨了前端资源治理的含义以及要解决的问题，并介绍了实现前端资源治理的思路，是笔者近期在前端工程化方面的思考，部分已经完成，部分正在推进。本文并不涉及实现的细节，细节在后面的系列文章中进一步讲解。\n前端治理的两个关键点，一个是系统整合，一个是关联关系管理，整体串联的核心是页面管理。","slug":"前端资源治理（一）","published":1,"updated":"2019-11-20T05:13:20.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpn0007soyxmqfrq3di","content":"<blockquote>\n<p>作者：李刚松</p>\n</blockquote>\n<h2 id=\"0-也谈前端工程化\"><a href=\"#0-也谈前端工程化\" class=\"headerlink\" title=\"0.也谈前端工程化\"></a>0.也谈前端工程化</h2><p>随着前端技术的飞速发展，前端需要一种更加工程化的方式解决前端开发日益复杂的问题。前端工程化本质也是软件工程的一种，由于软件工程并无严格的定义(或者说缺乏统一的定义)，因此前端工程化的内涵其实相当宽泛，一般来说，前端工程化重点关注的是研发和维护效率，所有最终目的是这个的，都可以算作前端工程化的范畴。<br>前端工程化近几年也是技术热点，基本上大型前端技术交流会议都有此专题，从规范、组件、编译及构建、工作流、持续集成、监控等多个维度都有涉及，笔者尝试从前端资源治理的角度谈一下前端工程化,本文是系列文章的第一篇，主要讲问题及解决的思路，不涉及具体的实现细节。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-前端资源治理的含义\"><a href=\"#1-前端资源治理的含义\" class=\"headerlink\" title=\"1.前端资源治理的含义\"></a>1.前端资源治理的含义</h2><p>首先，这里所说的前端资源，并非是仅指js、css、图片等静态资源，页面、后端接口、配置数据、监控点等，都可以纳入前端资源的定义的范畴。</p>\n<p>在工作中，你是否会碰到以下问题：</p>\n<ol>\n<li>同事或者领导发现某个页面有bug，需要在微信群或者内部沟通工具大群里问是谁负责？可能还要挨个艾特各个TL，需要各个TL确认。</li>\n<li>某个组件要升级，但是不知道那些页面使用了，需要在沟通群里问或者搜项目源代码，逐个找到负责人。</li>\n<li>某个大型营销活动突然要换一个新的氛围logo，但是不知道哪些页面使用了旧logo，需要安排巡检，人肉去找出来。</li>\n<li>告警发现某个重要页面的出现了内容空窗，原因是运营同学没有及时补充运营数据，但是不知道是哪个运营负责，需要在微信大群或者内部沟通工具大群里问。</li>\n<li>大促来临，某个重要页面的流量预计有10倍或者20倍的增长，要通知各个接口的同学做扩容和容灾准备，需要手工梳理页面的依赖的接口列表。</li>\n<li>某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里。</li>\n<li>我要在统计系统上查看某个页面的性能数据，但是该系统是以页面名字而不是地址来查找的，查找过程找的人老眼昏花。</li>\n<li>某个后端接口要升级或者要下线，需要分析nginx的访问日志找到页面地址，然后再拉各个TL，逐个确认都是哪些同事负责。</li>\n<li>等等等</li>\n</ol>\n<p>上面的问题一般是大型复杂业务场景（通常是多个团队合作开发，业务复杂，页面成百上千甚至上万）下才有的，如果你所在的团队也有上面的问题，那么我认为你也需要对前端的资源进行治理。</p>\n<p>那么什么是前端资源治理呢？笔者对其的定义是：</p>\n<blockquote>\n<p><em>将前端相关的页面、js/css/图片/字体、接口、配置、监控点等的依赖关系进行收集、存储和管理，并将割裂的组件系统、配置系统、监控系统、业务系统等进行重构和整合，最终形成以页面管理为基础的统一的有序的平台，所有关联信息都能够被查询和检索，最终实现整体协作效率的提升。</em></p>\n</blockquote>\n<p>此处使用“治理”而不是“管理”的原因，“治理”一词更强调合作整改的过程。在很多互联网企业，通常已经有一些独立的组件系统、配置系统、监控系统等，但是这些系统很多都是独立的碎片化的系统，彼此都是割裂的，割裂意味着缺乏协同，进而影响研发效率。因此，前端资源治理的一个关键词是“整合”，整合已有的系统。</p>\n<p>第二个关键词是“关联关系管理”，前端相关的页面、组件、js/css/图片/字体、接口、配置、监控点及负责人等，他们是存在关联关系的，比如页面是谁负责的、谁修改的、引用了哪些组件、图片、字体、接口、在什么地方配置数据、监控点都有哪些等，我们需要把这些关联关系在管理端记录下来，并提供检索和查询。</p>\n<h2 id=\"2-前端资源治理的实现\"><a href=\"#2-前端资源治理的实现\" class=\"headerlink\" title=\"2.前端资源治理的实现\"></a>2.前端资源治理的实现</h2><p>前端资源信息看似繁杂，js、css、图片、页面、后端接口、配置数据、监控点等，但是他们有一个串联的锚点，这个锚点就是页面，不管是H5、小程序，还是原生APP，不管是从研发的角度，还是从反馈问题的角度，基本上都是以页面为单位进行的，其他的如组件、CSS、图片、接口、配置等，都是被页面引用的，都可以通过页面串联起来的，下图可以清晰的表达出这些依赖关系。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1187x557_jfs/t1/60034/13/9411/74040/5d6f15f5E908267d0/2da1e3fdff61c788.png\" alt=\"页面\"></p>\n<p>因此，实现前端资源治理的第一个要点是做好页面管理，把页面自身的信息，如页面名称、页面地址、负责人、修改时间等信息进行提取、存储,使之能够被查询和检索。在页面管理基础之上，我们还要把js、css、图片、页面、后端接口、配置数据、监控点等各个前端资源之间的关联关系也要存储和管理起来，使之能够被查询和检索。</p>\n<p>关联关系从来源上讲，主要有以下几种来源：</p>\n<ol>\n<li>代码静态分析产生。通常包括页面信息自身、页面跟js/css/图片等的依赖关系、页面跟接口的依赖关系等。</li>\n<li>管理端配置产生。通常包括页面跟监控系统的配置、页面的运营配置数据等</li>\n<li>统计数据产生。通常包括页面来源数据等。</li>\n</ol>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1065x705_jfs/t1/75735/10/9225/32429/5d6f1743E9da72389/e07d883ee6dfc51a.png\" alt=\"关联关系管理\"></p>\n<h4 id=\"2-1-页面信息的提取\"><a href=\"#2-1-页面信息的提取\" class=\"headerlink\" title=\"2.1 页面信息的提取\"></a>2.1 页面信息的提取</h4><p>前端资源治理的第一要点是页面信息管理，因此必须能够拿到页面基本信息。页面基本信息应该包括哪些呢？通常来说，至少应该包括页面URL、页面名称、页面创建人、创建时间等几个字段。</p>\n<p>当前的前端页面开发，不管是H5、小程序，还是原生APP，通常会经过编译构建的过程（通常是命令行工具或者IDE，比如基于gulp和webpack的工作流工具），在构建完成阶段可以提取出页面的基本信息。以下是编译构建提取页面信息的流程：<br><img src=\"https://img11.360buyimg.com/jdphoto/s762x445_jfs/t1/64924/37/9126/24880/5d6e8e53E5ca79145/6f646b4910b1dbbb.png\" alt=\"页面信息的提取\"></p>\n<p>页面的编译构建流程，一般分为两种：</p>\n<ol>\n<li>独立构建。常见于H5，此种场景一般是一个人负责一个页面，不存在多人协作的情况，也不需要git分支管理啥的，开发完成即可走构建流程，只需要在构建完成的时候分析即可，页面的URL、页面标题、创建人、创建时间等信息比较容易提取，比如页面修改人可以取自命令行工具的用户登录身份（命令行工具可以做类似于NPM的login功能，登录后记录用户身份ID）、页面标题可以解析页面html的title的内容（小程序下则解析自页面json文件的navigationBarTitleText字段）等。</li>\n<li>持续集成构建。这种一般是需要多人协作的H5、小程序、原生APP等，一般涉及到分支管理和合并的问题，同一个页面可能被多人修改，因此页面信息中的用户信息部分提取相对复杂，需要分析git log信息才能拿到，其他的信息字段提取逻辑与独立构建情况相同。<br>以下是一个典型的多人协作的页面的git log信息。<img src=\"https://img11.360buyimg.com/jdphoto/s1302x832_jfs/t1/73369/13/6946/175119/5d5157d1E2105714f/efcdf4cca35fa064.png\" width=\"50%\" height=\"50%\">\n\n</li>\n</ol>\n<p>对于上面的情况，我们可以考虑定一个规则，比如取最近的5条log，并移除持续集成系统生成的log，管理端存储的时候回，以用户名+时间为key，去掉重复的部分。</p>\n<p>构建流程分析出页面基本信息后，需提交到管理端保存，所以管理端需要提供post接口。管理端以此为基础，形成”页面管理系统“。</p>\n<h4 id=\"2-2-代码静态分析出的关联关系\"><a href=\"#2-2-代码静态分析出的关联关系\" class=\"headerlink\" title=\"2.2 代码静态分析出的关联关系\"></a>2.2 代码静态分析出的关联关系</h4><p>构建流程除可以分析基本信息外，还可以分析出页面的版本信息，比如页面依赖的组件依赖表、静态资源依赖表(js/css/图片)、接口依赖表、修改人、修改时间等。<br>静态依赖分析通常有3种方式：</p>\n<ol>\n<li>基于AST的依赖分析。<br>AST就是抽象语法树，目前前端对他的研究和使用越来越广泛，webpack内部就使用了acorn这个AST分析库。借助于webpack强大的模块解析和依赖分析能力，我们可以拿到js与npm组件、css与背景图等之间的关联关系（可以在webpack的after-resolve钩子中进行分析）。另外，除了构建前的依赖关系，我们还可以拿到构建处理后的资源依赖关系（可以在webpac的emit钩子中进行分析），前者我们称为引用依赖关系（包括静态资源依赖表、组件依赖表），后者我们称为发布依赖关系。</li>\n<li>基于DOM操作的依赖分析。<br>webpack并不是以html为入口的，但是实际上我们的开发的入口可以认为就是页面，借助于JsDom等强大的类库，我们可以用我们熟悉的前端的DOM操作来分析html页面对js、css、图片等的依赖关系。</li>\n<li>基于正则匹配的依赖分析。<br>页面对于接口的依赖分析，由于这种是非明确的代码依赖关系，所以一般通过正则匹配来解析。一般对代码有一定的约束规则，比如不用用变量拼接接口地址。这个解析不会如AST那么精确，但是只要约定规则，基本上都能满足需求。可以考虑把此类实现封装为webpack的loader。<br><img src=\"https://img11.360buyimg.com/jdphoto/s1001x580_jfs/t1/63972/16/9196/24515/5d6e8f13Ee5583ec2/cd6021d6c45e2f56.png\" alt=\"关联信息的提取\"><br>上面的第一种和第三种的分析，都应该是一个递归分析过程，最终生成页面的静态资源依赖表、组件依赖表、接口依赖表等。这些信息提交到管理端进行保存。</li>\n</ol>\n<h4 id=\"2-3-管理系统之间的关联关系\"><a href=\"#2-3-管理系统之间的关联关系\" class=\"headerlink\" title=\"2.3 管理系统之间的关联关系\"></a>2.3 管理系统之间的关联关系</h4><p>在很多互联网企业，通常已经有一些独立的成熟的CMS系统（如给运营用的内容配置系统，配置活动时间、商品ID等）、监控系统（如测速系统、业务监控系统、异常监控系统）等，通常这些系统由不同的团队开发，而且经常都有一个叫做”页面管理”的东西，且要手工配置页面地址。这些系统中的监控点配置、运营配置等信息，都是以页面维度进行创建和使用的，但是这些信息很难通过对前端代码静态分析的方法进行提取（比如运营配置信息，这个可以是前端直接使用，也可能是后端使用，要分析的话两端代码都要分析，比较麻烦）。我们的思路应该是在管理端通过页面管理来进行关联，实质上是要做系统整合。</p>\n<p>整合的思路也比较简单，就是原来各个系统废弃掉原来自身的”页面管理“，而是使用前面静态分析提取到的统一的页面管理，监控系统、运营配置系统等系统都可以以此为入口进入，从而把页面相关的各个管理系统关联起来，进而把各种能力串联。<br><img src=\"https://img11.360buyimg.com/jdphoto/s815x487_jfs/t1/79814/31/9124/24005/5d6e8f5bEff12c5ee/3a87b35bf6595925.png\" alt=\"管理系统的关联\"></p>\n<h4 id=\"2-4-统计数据产生的关联关系\"><a href=\"#2-4-统计数据产生的关联关系\" class=\"headerlink\" title=\"2.4 统计数据产生的关联关系\"></a>2.4 统计数据产生的关联关系</h4><p>对于大型应用来说，一般都有一些业务统计数据，最典型的就是点击流数据了。这种数据既不在代码中，也不在管理端配置，而且通过统计和分析才能拿到。前面提到的“某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里”这种问题的解决，其实依赖于点击流的统计分析数据了，点击流系统一般都有“来源分析”，这种数据也不是敏感数据，所以可以考虑跟页面管理做关联和整合，或者提供API给页面管理系统。另外还有一个例子就是，接口和页面的关联关系，前面提到通过静态分析得到的页面和接口的依赖表有可能不够准确，但是接口访问Web Server的时候，一般都有access.log，可以通过access.log来做分析，拿到比较完整的页面依赖的接口信息，以及接口依赖的页面信息，有些接口的调用需要有open api的那种注册调用机制，就另当别论了。<br><img src=\"https://img11.360buyimg.com/jdphoto/s798x545_jfs/t1/49549/18/9573/24174/5d6e8fa1E97ed2043/01f2e6fad7b0bc29.png\" alt=\"统计系统的关联\"></p>\n<h4 id=\"2-5-关联关系的查询和存储\"><a href=\"#2-5-关联关系的查询和存储\" class=\"headerlink\" title=\"2.5 关联关系的查询和存储\"></a>2.5 关联关系的查询和存储</h4><p>管理端应该提供正反两个方向的查询和检索能力：</p>\n<ol>\n<li>正向查询。通过页面来查询依赖的组件、静态资源(js/css/图片)、后端接口等。此种比较简单，因为提交的时候已经有完整的依赖信息，只需要提供简单的查询。</li>\n<li>反向查询。通过组件、静态资源、接口、运营配置信息、监控配置信息等，反查有哪些页面依赖。</li>\n</ol>\n<p>对于关联关系的存储，用关系型DB的话，一般只能使用like查询，可能要扫描全表，因而性能比较差，可以考虑存储到MongoDB中创建索引，或者存储到ElasticSearch中建立索引。</p>\n<h4 id=\"2-6-其他\"><a href=\"#2-6-其他\" class=\"headerlink\" title=\"2.6 其他\"></a>2.6 其他</h4><p>前面提到的，其实有一个假设的前提“只有一个Web应用，且接口都是前端发起的”，但是对于其他情况，思路是类似的：</p>\n<ol>\n<li>多应用（业务）。多应用情况，通常要在页面管理的上一层加上“应用管理”，即页面属于哪一个应用(业务)。对于同一个页面投放在不同应用的场景，可能页面还得加上渠道标识。</li>\n<li>页面直出（服务端渲染）。对于页面直出逻辑的代码，做前面类似的分析即可。<br>另外，本文主要是探讨从前端视角考虑问题，所以关联核心是页面管理，但是从整体技术架构视角，可能就不是了。</li>\n</ol>\n<h2 id=\"3-结语\"><a href=\"#3-结语\" class=\"headerlink\" title=\"3.结语\"></a>3.结语</h2><p>本文探讨了前端资源治理的含义以及要解决的问题，并介绍了实现前端资源治理的思路，是笔者近期在前端工程化方面的思考，部分已经完成，部分正在推进。本文并不涉及实现的细节，细节在后面的系列文章中进一步讲解。<br>前端治理的两个关键点，一个是系统整合，一个是关联关系管理，整体串联的核心是页面管理。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李刚松</p>\n</blockquote>\n<h2 id=\"0-也谈前端工程化\"><a href=\"#0-也谈前端工程化\" class=\"headerlink\" title=\"0.也谈前端工程化\"></a>0.也谈前端工程化</h2><p>随着前端技术的飞速发展，前端需要一种更加工程化的方式解决前端开发日益复杂的问题。前端工程化本质也是软件工程的一种，由于软件工程并无严格的定义(或者说缺乏统一的定义)，因此前端工程化的内涵其实相当宽泛，一般来说，前端工程化重点关注的是研发和维护效率，所有最终目的是这个的，都可以算作前端工程化的范畴。<br>前端工程化近几年也是技术热点，基本上大型前端技术交流会议都有此专题，从规范、组件、编译及构建、工作流、持续集成、监控等多个维度都有涉及，笔者尝试从前端资源治理的角度谈一下前端工程化,本文是系列文章的第一篇，主要讲问题及解决的思路，不涉及具体的实现细节。</p>","more":"<h2 id=\"1-前端资源治理的含义\"><a href=\"#1-前端资源治理的含义\" class=\"headerlink\" title=\"1.前端资源治理的含义\"></a>1.前端资源治理的含义</h2><p>首先，这里所说的前端资源，并非是仅指js、css、图片等静态资源，页面、后端接口、配置数据、监控点等，都可以纳入前端资源的定义的范畴。</p>\n<p>在工作中，你是否会碰到以下问题：</p>\n<ol>\n<li>同事或者领导发现某个页面有bug，需要在微信群或者内部沟通工具大群里问是谁负责？可能还要挨个艾特各个TL，需要各个TL确认。</li>\n<li>某个组件要升级，但是不知道那些页面使用了，需要在沟通群里问或者搜项目源代码，逐个找到负责人。</li>\n<li>某个大型营销活动突然要换一个新的氛围logo，但是不知道哪些页面使用了旧logo，需要安排巡检，人肉去找出来。</li>\n<li>告警发现某个重要页面的出现了内容空窗，原因是运营同学没有及时补充运营数据，但是不知道是哪个运营负责，需要在微信大群或者内部沟通工具大群里问。</li>\n<li>大促来临，某个重要页面的流量预计有10倍或者20倍的增长，要通知各个接口的同学做扩容和容灾准备，需要手工梳理页面的依赖的接口列表。</li>\n<li>某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里。</li>\n<li>我要在统计系统上查看某个页面的性能数据，但是该系统是以页面名字而不是地址来查找的，查找过程找的人老眼昏花。</li>\n<li>某个后端接口要升级或者要下线，需要分析nginx的访问日志找到页面地址，然后再拉各个TL，逐个确认都是哪些同事负责。</li>\n<li>等等等</li>\n</ol>\n<p>上面的问题一般是大型复杂业务场景（通常是多个团队合作开发，业务复杂，页面成百上千甚至上万）下才有的，如果你所在的团队也有上面的问题，那么我认为你也需要对前端的资源进行治理。</p>\n<p>那么什么是前端资源治理呢？笔者对其的定义是：</p>\n<blockquote>\n<p><em>将前端相关的页面、js/css/图片/字体、接口、配置、监控点等的依赖关系进行收集、存储和管理，并将割裂的组件系统、配置系统、监控系统、业务系统等进行重构和整合，最终形成以页面管理为基础的统一的有序的平台，所有关联信息都能够被查询和检索，最终实现整体协作效率的提升。</em></p>\n</blockquote>\n<p>此处使用“治理”而不是“管理”的原因，“治理”一词更强调合作整改的过程。在很多互联网企业，通常已经有一些独立的组件系统、配置系统、监控系统等，但是这些系统很多都是独立的碎片化的系统，彼此都是割裂的，割裂意味着缺乏协同，进而影响研发效率。因此，前端资源治理的一个关键词是“整合”，整合已有的系统。</p>\n<p>第二个关键词是“关联关系管理”，前端相关的页面、组件、js/css/图片/字体、接口、配置、监控点及负责人等，他们是存在关联关系的，比如页面是谁负责的、谁修改的、引用了哪些组件、图片、字体、接口、在什么地方配置数据、监控点都有哪些等，我们需要把这些关联关系在管理端记录下来，并提供检索和查询。</p>\n<h2 id=\"2-前端资源治理的实现\"><a href=\"#2-前端资源治理的实现\" class=\"headerlink\" title=\"2.前端资源治理的实现\"></a>2.前端资源治理的实现</h2><p>前端资源信息看似繁杂，js、css、图片、页面、后端接口、配置数据、监控点等，但是他们有一个串联的锚点，这个锚点就是页面，不管是H5、小程序，还是原生APP，不管是从研发的角度，还是从反馈问题的角度，基本上都是以页面为单位进行的，其他的如组件、CSS、图片、接口、配置等，都是被页面引用的，都可以通过页面串联起来的，下图可以清晰的表达出这些依赖关系。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1187x557_jfs/t1/60034/13/9411/74040/5d6f15f5E908267d0/2da1e3fdff61c788.png\" alt=\"页面\"></p>\n<p>因此，实现前端资源治理的第一个要点是做好页面管理，把页面自身的信息，如页面名称、页面地址、负责人、修改时间等信息进行提取、存储,使之能够被查询和检索。在页面管理基础之上，我们还要把js、css、图片、页面、后端接口、配置数据、监控点等各个前端资源之间的关联关系也要存储和管理起来，使之能够被查询和检索。</p>\n<p>关联关系从来源上讲，主要有以下几种来源：</p>\n<ol>\n<li>代码静态分析产生。通常包括页面信息自身、页面跟js/css/图片等的依赖关系、页面跟接口的依赖关系等。</li>\n<li>管理端配置产生。通常包括页面跟监控系统的配置、页面的运营配置数据等</li>\n<li>统计数据产生。通常包括页面来源数据等。</li>\n</ol>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1065x705_jfs/t1/75735/10/9225/32429/5d6f1743E9da72389/e07d883ee6dfc51a.png\" alt=\"关联关系管理\"></p>\n<h4 id=\"2-1-页面信息的提取\"><a href=\"#2-1-页面信息的提取\" class=\"headerlink\" title=\"2.1 页面信息的提取\"></a>2.1 页面信息的提取</h4><p>前端资源治理的第一要点是页面信息管理，因此必须能够拿到页面基本信息。页面基本信息应该包括哪些呢？通常来说，至少应该包括页面URL、页面名称、页面创建人、创建时间等几个字段。</p>\n<p>当前的前端页面开发，不管是H5、小程序，还是原生APP，通常会经过编译构建的过程（通常是命令行工具或者IDE，比如基于gulp和webpack的工作流工具），在构建完成阶段可以提取出页面的基本信息。以下是编译构建提取页面信息的流程：<br><img src=\"https://img11.360buyimg.com/jdphoto/s762x445_jfs/t1/64924/37/9126/24880/5d6e8e53E5ca79145/6f646b4910b1dbbb.png\" alt=\"页面信息的提取\"></p>\n<p>页面的编译构建流程，一般分为两种：</p>\n<ol>\n<li>独立构建。常见于H5，此种场景一般是一个人负责一个页面，不存在多人协作的情况，也不需要git分支管理啥的，开发完成即可走构建流程，只需要在构建完成的时候分析即可，页面的URL、页面标题、创建人、创建时间等信息比较容易提取，比如页面修改人可以取自命令行工具的用户登录身份（命令行工具可以做类似于NPM的login功能，登录后记录用户身份ID）、页面标题可以解析页面html的title的内容（小程序下则解析自页面json文件的navigationBarTitleText字段）等。</li>\n<li>持续集成构建。这种一般是需要多人协作的H5、小程序、原生APP等，一般涉及到分支管理和合并的问题，同一个页面可能被多人修改，因此页面信息中的用户信息部分提取相对复杂，需要分析git log信息才能拿到，其他的信息字段提取逻辑与独立构建情况相同。<br>以下是一个典型的多人协作的页面的git log信息。<img src=\"https://img11.360buyimg.com/jdphoto/s1302x832_jfs/t1/73369/13/6946/175119/5d5157d1E2105714f/efcdf4cca35fa064.png\" width=\"50%\" height=\"50%\">\n\n</li>\n</ol>\n<p>对于上面的情况，我们可以考虑定一个规则，比如取最近的5条log，并移除持续集成系统生成的log，管理端存储的时候回，以用户名+时间为key，去掉重复的部分。</p>\n<p>构建流程分析出页面基本信息后，需提交到管理端保存，所以管理端需要提供post接口。管理端以此为基础，形成”页面管理系统“。</p>\n<h4 id=\"2-2-代码静态分析出的关联关系\"><a href=\"#2-2-代码静态分析出的关联关系\" class=\"headerlink\" title=\"2.2 代码静态分析出的关联关系\"></a>2.2 代码静态分析出的关联关系</h4><p>构建流程除可以分析基本信息外，还可以分析出页面的版本信息，比如页面依赖的组件依赖表、静态资源依赖表(js/css/图片)、接口依赖表、修改人、修改时间等。<br>静态依赖分析通常有3种方式：</p>\n<ol>\n<li>基于AST的依赖分析。<br>AST就是抽象语法树，目前前端对他的研究和使用越来越广泛，webpack内部就使用了acorn这个AST分析库。借助于webpack强大的模块解析和依赖分析能力，我们可以拿到js与npm组件、css与背景图等之间的关联关系（可以在webpack的after-resolve钩子中进行分析）。另外，除了构建前的依赖关系，我们还可以拿到构建处理后的资源依赖关系（可以在webpac的emit钩子中进行分析），前者我们称为引用依赖关系（包括静态资源依赖表、组件依赖表），后者我们称为发布依赖关系。</li>\n<li>基于DOM操作的依赖分析。<br>webpack并不是以html为入口的，但是实际上我们的开发的入口可以认为就是页面，借助于JsDom等强大的类库，我们可以用我们熟悉的前端的DOM操作来分析html页面对js、css、图片等的依赖关系。</li>\n<li>基于正则匹配的依赖分析。<br>页面对于接口的依赖分析，由于这种是非明确的代码依赖关系，所以一般通过正则匹配来解析。一般对代码有一定的约束规则，比如不用用变量拼接接口地址。这个解析不会如AST那么精确，但是只要约定规则，基本上都能满足需求。可以考虑把此类实现封装为webpack的loader。<br><img src=\"https://img11.360buyimg.com/jdphoto/s1001x580_jfs/t1/63972/16/9196/24515/5d6e8f13Ee5583ec2/cd6021d6c45e2f56.png\" alt=\"关联信息的提取\"><br>上面的第一种和第三种的分析，都应该是一个递归分析过程，最终生成页面的静态资源依赖表、组件依赖表、接口依赖表等。这些信息提交到管理端进行保存。</li>\n</ol>\n<h4 id=\"2-3-管理系统之间的关联关系\"><a href=\"#2-3-管理系统之间的关联关系\" class=\"headerlink\" title=\"2.3 管理系统之间的关联关系\"></a>2.3 管理系统之间的关联关系</h4><p>在很多互联网企业，通常已经有一些独立的成熟的CMS系统（如给运营用的内容配置系统，配置活动时间、商品ID等）、监控系统（如测速系统、业务监控系统、异常监控系统）等，通常这些系统由不同的团队开发，而且经常都有一个叫做”页面管理”的东西，且要手工配置页面地址。这些系统中的监控点配置、运营配置等信息，都是以页面维度进行创建和使用的，但是这些信息很难通过对前端代码静态分析的方法进行提取（比如运营配置信息，这个可以是前端直接使用，也可能是后端使用，要分析的话两端代码都要分析，比较麻烦）。我们的思路应该是在管理端通过页面管理来进行关联，实质上是要做系统整合。</p>\n<p>整合的思路也比较简单，就是原来各个系统废弃掉原来自身的”页面管理“，而是使用前面静态分析提取到的统一的页面管理，监控系统、运营配置系统等系统都可以以此为入口进入，从而把页面相关的各个管理系统关联起来，进而把各种能力串联。<br><img src=\"https://img11.360buyimg.com/jdphoto/s815x487_jfs/t1/79814/31/9124/24005/5d6e8f5bEff12c5ee/3a87b35bf6595925.png\" alt=\"管理系统的关联\"></p>\n<h4 id=\"2-4-统计数据产生的关联关系\"><a href=\"#2-4-统计数据产生的关联关系\" class=\"headerlink\" title=\"2.4 统计数据产生的关联关系\"></a>2.4 统计数据产生的关联关系</h4><p>对于大型应用来说，一般都有一些业务统计数据，最典型的就是点击流数据了。这种数据既不在代码中，也不在管理端配置，而且通过统计和分析才能拿到。前面提到的“某个限时的页面已经到点下线，但是仍然有流量，不知道流量入口在哪里”这种问题的解决，其实依赖于点击流的统计分析数据了，点击流系统一般都有“来源分析”，这种数据也不是敏感数据，所以可以考虑跟页面管理做关联和整合，或者提供API给页面管理系统。另外还有一个例子就是，接口和页面的关联关系，前面提到通过静态分析得到的页面和接口的依赖表有可能不够准确，但是接口访问Web Server的时候，一般都有access.log，可以通过access.log来做分析，拿到比较完整的页面依赖的接口信息，以及接口依赖的页面信息，有些接口的调用需要有open api的那种注册调用机制，就另当别论了。<br><img src=\"https://img11.360buyimg.com/jdphoto/s798x545_jfs/t1/49549/18/9573/24174/5d6e8fa1E97ed2043/01f2e6fad7b0bc29.png\" alt=\"统计系统的关联\"></p>\n<h4 id=\"2-5-关联关系的查询和存储\"><a href=\"#2-5-关联关系的查询和存储\" class=\"headerlink\" title=\"2.5 关联关系的查询和存储\"></a>2.5 关联关系的查询和存储</h4><p>管理端应该提供正反两个方向的查询和检索能力：</p>\n<ol>\n<li>正向查询。通过页面来查询依赖的组件、静态资源(js/css/图片)、后端接口等。此种比较简单，因为提交的时候已经有完整的依赖信息，只需要提供简单的查询。</li>\n<li>反向查询。通过组件、静态资源、接口、运营配置信息、监控配置信息等，反查有哪些页面依赖。</li>\n</ol>\n<p>对于关联关系的存储，用关系型DB的话，一般只能使用like查询，可能要扫描全表，因而性能比较差，可以考虑存储到MongoDB中创建索引，或者存储到ElasticSearch中建立索引。</p>\n<h4 id=\"2-6-其他\"><a href=\"#2-6-其他\" class=\"headerlink\" title=\"2.6 其他\"></a>2.6 其他</h4><p>前面提到的，其实有一个假设的前提“只有一个Web应用，且接口都是前端发起的”，但是对于其他情况，思路是类似的：</p>\n<ol>\n<li>多应用（业务）。多应用情况，通常要在页面管理的上一层加上“应用管理”，即页面属于哪一个应用(业务)。对于同一个页面投放在不同应用的场景，可能页面还得加上渠道标识。</li>\n<li>页面直出（服务端渲染）。对于页面直出逻辑的代码，做前面类似的分析即可。<br>另外，本文主要是探讨从前端视角考虑问题，所以关联核心是页面管理，但是从整体技术架构视角，可能就不是了。</li>\n</ol>\n<h2 id=\"3-结语\"><a href=\"#3-结语\" class=\"headerlink\" title=\"3.结语\"></a>3.结语</h2><p>本文探讨了前端资源治理的含义以及要解决的问题，并介绍了实现前端资源治理的思路，是笔者近期在前端工程化方面的思考，部分已经完成，部分正在推进。本文并不涉及实现的细节，细节在后面的系列文章中进一步讲解。<br>前端治理的两个关键点，一个是系统整合，一个是关联关系管理，整体串联的核心是页面管理。</p>"},{"title":"手把手教你写webpack loader","date":"2019-09-17T01:32:51.000Z","cover":"https://img10.360buyimg.com/wq/jfs/t1/74297/12/5206/14769/5d359eedEb8b76619/be9c3c22fbe93ae2.jpg","thumbnail":"https://img10.360buyimg.com/wq/jfs/t1/74297/12/5206/14769/5d359eedEb8b76619/be9c3c22fbe93ae2.jpg","_content":"\n> 作者：黄浩群 \n\n## 一、什么是 loader\n \nloader 和 plugins 是 webpack 系统的两大重要组成元素。依靠对 loader、plugins 的不同组合搭配，我们可以灵活定制出高度适配自身业务的打包构建流程。\n\nloader 是 webpack 容纳各类资源的一个重要手段，它用于对模块的源代码进行转换，允许你在 import 或加载模块时预处理文件，利用 loader，我们可以将各种类型的资源转换成 webpack 本质接受的资源类型，如 javascript。\n<!--more-->\n## 二、如何编写一个 yaml-loader\n\n### 1、YAML\n\nyaml 语言多用于编写配置文件，结构与 JSON 类似，但语法格式比 JSON 更加方便简洁。yaml 支持注释，大小写敏感，使用缩进来表示层级关系：\n\n```yaml\n#对象 \nversion: 1.2.4\n#数组\nauthor:\n  - Mike\n  - Hankle\n#常量\nname: \"my project\" #定义一个字符串\nlimit: 30 #定义一个数值\nes6: true #定义一个布尔值\nopenkey: Null #定义一个null\n#锚点引用\nserver:\n  base: &base\n    port: 8005\n  dev:\n    ip: 120.168.117.21\n    <<: *base\n  gamma:\n    ip: 120.168.117.22\n    <<: *base\n```\n\n等同于：\n\n```json\n{\n  \"version\": \"1.2.4\",\n  \"author\": [\"Mike\", \"Hankle\"],\n  \"name\": \"my project\",\n  \"limit\": 30,\n  \"es6\": true,\n  \"openkey\": null,\n  \"server\": {\n    \"base\": {\n      \"port\": 8005\n    },\n    \"dev\": {\n      \"ip\": \"120.168.117.21\",\n      \"port\": 8005\n    },\n    \"gamma\": {\n      \"ip\": \"120.168.117.22\",\n      \"port\": 8005\n    }\n  }\n}\n```\n\n在基于 webpack 构建的应用中，如果希望能够引用 yaml 文件中的数据，就需要一个 yaml-loader 来支持编译。一般情况下，你都能在 npm 上找到可用的 loader，但如果万一没有对应的支持，或者你希望有一些自定义的转换，那么就需要自己编写一个 webpack loader 了。\n\n### 2、loader 的原理\n\nloader 是一个 node 模块，它导出为一个函数，用于在转换资源时调用。该函数接收一个 String/Buffer 类型的入参，并返回一个 String/Buffer 类型的返回值。一个最简单的 loader 是这样的：\n\n```js\n// loaders/yaml-loader.js\nmodule.exports = function(source) {\n  return source;\n};\n```\n\nloader 支持管道式传递，对同一类型的文件，我们可以使用多个 loader 进行处理，这批 loader 将按照“从下到上、从右到左”的顺序执行，并以前一个 loader 的返回值作为后一个 loader 的入参。这个机制无非是希望我们在编写 loader 的时候能够尽量避免重复造轮子，只关注需要实现的核心功能。因此配置的时候，我们可以引入 json-loader：\n\n```js\n// webpack.config.js\nconst path = require(\"path\");\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.yml$/,\n        use: [\n          {\n            loader: \"json-loader\"\n          },\n          {\n            loader: path.resolve(__dirname, \"./loaders/yaml-loader.js\")\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n### 3、开始\n\n这样一来，我们需要的 yaml-loader，就只做一件事情：将 yaml 的数据转化成为一个 JSON 字符串。因此，我们可以很简单地实现这样一个 yaml-loader：\n\n```js\nvar yaml = require(\"js-yaml\");\n\nmodule.exports = function(source) {\n  this.cacheable && this.cacheable();\n  try {\n    var res = yaml.safeLoad(source);\n    return JSON.stringify(res, undefined, \"\\t\");\n  } catch (err) {\n    this.emitError(err);\n    return null;\n  }\n};\n```\n\n就是这么简单。但是可能有朋友会问，这里是因为有个现成的模块 js-yaml，可以直接将 yaml 转换成 JavaScript 对象，万一没有这个模块，该怎么做呢？是的，loader 的核心工作其实就是字符串的处理，这是个相当恶心的活儿，尤其是在这类语法转换的场景上，对源代码的字符串处理将变得极其复杂。这个情况下，我们可以考虑另外一种解法，借助 AST 语法树，来协助我们更加便捷地操作转换。\n\n### 4、利用 AST 作源码转换\n\nyaml-ast-parser 是一个将 yaml 转换成 AST 语法树的 node 模块，我们把字符串解析的工作交给了 AST parser，而操作 AST 语法树远比操作字符串要简单、方便得多：\n\n```js\nconst yaml = require(\"yaml-ast-parser\");\n\nclass YamlParser {\n  constructor(source) {\n    this.data = yaml.load(source);\n    this.parse();\n  }\n\n  parse() {\n    // parse ast into javascript object\n  }\n}\n\nmodule.exports = function(source) {\n  this.cacheable && this.cacheable();\n  try {\n    const parser = new YamlParser(source);\n    return JSON.stringify(parser.data, undefined, \"\\t\");\n  } catch (err) {\n    this.emitError(err);\n    return null;\n  }\n};\n```\n\n这里我们可以利用 AST parser 提供的方法直接转化出 json，如果没有或者有所定制，也可以手动实现一下 parse 的过程，仅仅只是一个树结构的迭代遍历而已，关键步骤是对 AST 语法树的各类型节点分别进行处理：\n\n```js\nconst yaml = require(\"yaml-ast-parser\");\nconst types = yaml.Kind;\n\nclass YamlParser {\n  // ...\n  parse() {\n    this.data = this.traverse(this.data);\n  }\n\n  traverse(node) {\n    const type = types[node.kind];\n\n    switch (type) {\n      // 对象\n      case \"MAP\": {\n        const ret = {};\n        node.mappings.forEach(mapping => {\n          Object.assign(ret, this.traverse(mapping));\n        });\n        return ret;\n      }\n      // 键值对\n      case \"MAPPING\": {\n        let ret = {};\n        // 验证\n        const keyValid =\n          yaml.determineScalarType(node.key) == yaml.ScalarType.string;\n        if (!keyValid) {\n          throw Error(\"键值非法\");\n        }\n\n        if (node.key.value == \"<<\" && types[node.value.kind] === \"ANCHOR_REF\") {\n          // 引用合并\n          ret = this.traverse(node.value);\n        } else {\n          ret[node.key.value] = this.traverse(node.value);\n        }\n        return ret;\n      }\n      // 常量\n      case \"SCALAR\": {\n        return node.valueObject !== undefined ? node.valueObject : node.value;\n      }\n      // 数组\n      case \"SEQ\": {\n        const ret = [];\n        node.items.forEach(item => {\n          ret.push(this.traverse(item));\n        });\n        return ret;\n      }\n      // 锚点引用\n      case \"ANCHOR_REF\": {\n        return this.traverse(node.value);\n      }\n      default:\n        throw Error(\"unvalid node\");\n    }\n  }\n}\n// ...\n```\n\n当然这样的实现略为粗糙，正常来说，一些完备的 AST parser 一般都会自带遍历方法（traverse），这样的方法都是有做过优化的，我们可以直接调用，尽量避免自己手动实现。\n\n按照相同的做法，你还可以实现一个 markdown-loader，甚至更为复杂的 vue-loader。\n\n## 三、loader 的一些开发技巧\n\n### 1、单一任务\n\n只做一件事情，做好一件事情。loader 的管道（pipeline）设计正是希望能够将任务拆解并独立成一个个子任务，由多个 loader 分别处理，以此来保证每个 loader 的可复用性。因此我们在开发 loader 前一定要先给 loader 一个准确的功能定位，从通用的角度出发去设计，避免做多余的事。\n\n### 2、无状态\n\nloader 应该是不保存状态的。这样的好处一方面是使我们 loader 中的数据流简单清晰，另一方面是保证 loader 具有良好可测性。因此我们的 loader 每次运行都不应该依赖于自身之前的编译结果，也不应该通过除出入参外的其他方式与其他编译模块进行数据交流。当然，这并不代表 loader 必须是一个无任何副作用的纯函数，loader 支持异步，因此是可以在 loader 中有 I/O 操作的。\n\n### 3、尽可能使用缓存\n\n在开发时，loader 可能会被不断地执行，合理的缓存能够降低重复编译带来的成本。loader 执行时默认是开启缓存的，这样一来， webpack 在编译过程中执行到判断是否需要重编译 loader 实例的时候，会直接跳过 rebuild 环节，节省不必要重建带来的开销。\n\n当且仅当有你的 loader 有其他不稳定的外部依赖（如 I/O 接口依赖）时，可以关闭缓存：\n\n```js\nthis.cacheable && this.cacheable(false);\n```","source":"_posts/2019-09/手把手教你写webpack-loader.md","raw":"---\ntitle: 手把手教你写webpack loader\ndate: 2019-09-17 09:32:51\ncover: https://img10.360buyimg.com/wq/jfs/t1/74297/12/5206/14769/5d359eedEb8b76619/be9c3c22fbe93ae2.jpg\nthumbnail: https://img10.360buyimg.com/wq/jfs/t1/74297/12/5206/14769/5d359eedEb8b76619/be9c3c22fbe93ae2.jpg\ntags: \n  - webpack loader\n  - 工程化\ncategories: Web开发\n---\n\n> 作者：黄浩群 \n\n## 一、什么是 loader\n \nloader 和 plugins 是 webpack 系统的两大重要组成元素。依靠对 loader、plugins 的不同组合搭配，我们可以灵活定制出高度适配自身业务的打包构建流程。\n\nloader 是 webpack 容纳各类资源的一个重要手段，它用于对模块的源代码进行转换，允许你在 import 或加载模块时预处理文件，利用 loader，我们可以将各种类型的资源转换成 webpack 本质接受的资源类型，如 javascript。\n<!--more-->\n## 二、如何编写一个 yaml-loader\n\n### 1、YAML\n\nyaml 语言多用于编写配置文件，结构与 JSON 类似，但语法格式比 JSON 更加方便简洁。yaml 支持注释，大小写敏感，使用缩进来表示层级关系：\n\n```yaml\n#对象 \nversion: 1.2.4\n#数组\nauthor:\n  - Mike\n  - Hankle\n#常量\nname: \"my project\" #定义一个字符串\nlimit: 30 #定义一个数值\nes6: true #定义一个布尔值\nopenkey: Null #定义一个null\n#锚点引用\nserver:\n  base: &base\n    port: 8005\n  dev:\n    ip: 120.168.117.21\n    <<: *base\n  gamma:\n    ip: 120.168.117.22\n    <<: *base\n```\n\n等同于：\n\n```json\n{\n  \"version\": \"1.2.4\",\n  \"author\": [\"Mike\", \"Hankle\"],\n  \"name\": \"my project\",\n  \"limit\": 30,\n  \"es6\": true,\n  \"openkey\": null,\n  \"server\": {\n    \"base\": {\n      \"port\": 8005\n    },\n    \"dev\": {\n      \"ip\": \"120.168.117.21\",\n      \"port\": 8005\n    },\n    \"gamma\": {\n      \"ip\": \"120.168.117.22\",\n      \"port\": 8005\n    }\n  }\n}\n```\n\n在基于 webpack 构建的应用中，如果希望能够引用 yaml 文件中的数据，就需要一个 yaml-loader 来支持编译。一般情况下，你都能在 npm 上找到可用的 loader，但如果万一没有对应的支持，或者你希望有一些自定义的转换，那么就需要自己编写一个 webpack loader 了。\n\n### 2、loader 的原理\n\nloader 是一个 node 模块，它导出为一个函数，用于在转换资源时调用。该函数接收一个 String/Buffer 类型的入参，并返回一个 String/Buffer 类型的返回值。一个最简单的 loader 是这样的：\n\n```js\n// loaders/yaml-loader.js\nmodule.exports = function(source) {\n  return source;\n};\n```\n\nloader 支持管道式传递，对同一类型的文件，我们可以使用多个 loader 进行处理，这批 loader 将按照“从下到上、从右到左”的顺序执行，并以前一个 loader 的返回值作为后一个 loader 的入参。这个机制无非是希望我们在编写 loader 的时候能够尽量避免重复造轮子，只关注需要实现的核心功能。因此配置的时候，我们可以引入 json-loader：\n\n```js\n// webpack.config.js\nconst path = require(\"path\");\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.yml$/,\n        use: [\n          {\n            loader: \"json-loader\"\n          },\n          {\n            loader: path.resolve(__dirname, \"./loaders/yaml-loader.js\")\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n### 3、开始\n\n这样一来，我们需要的 yaml-loader，就只做一件事情：将 yaml 的数据转化成为一个 JSON 字符串。因此，我们可以很简单地实现这样一个 yaml-loader：\n\n```js\nvar yaml = require(\"js-yaml\");\n\nmodule.exports = function(source) {\n  this.cacheable && this.cacheable();\n  try {\n    var res = yaml.safeLoad(source);\n    return JSON.stringify(res, undefined, \"\\t\");\n  } catch (err) {\n    this.emitError(err);\n    return null;\n  }\n};\n```\n\n就是这么简单。但是可能有朋友会问，这里是因为有个现成的模块 js-yaml，可以直接将 yaml 转换成 JavaScript 对象，万一没有这个模块，该怎么做呢？是的，loader 的核心工作其实就是字符串的处理，这是个相当恶心的活儿，尤其是在这类语法转换的场景上，对源代码的字符串处理将变得极其复杂。这个情况下，我们可以考虑另外一种解法，借助 AST 语法树，来协助我们更加便捷地操作转换。\n\n### 4、利用 AST 作源码转换\n\nyaml-ast-parser 是一个将 yaml 转换成 AST 语法树的 node 模块，我们把字符串解析的工作交给了 AST parser，而操作 AST 语法树远比操作字符串要简单、方便得多：\n\n```js\nconst yaml = require(\"yaml-ast-parser\");\n\nclass YamlParser {\n  constructor(source) {\n    this.data = yaml.load(source);\n    this.parse();\n  }\n\n  parse() {\n    // parse ast into javascript object\n  }\n}\n\nmodule.exports = function(source) {\n  this.cacheable && this.cacheable();\n  try {\n    const parser = new YamlParser(source);\n    return JSON.stringify(parser.data, undefined, \"\\t\");\n  } catch (err) {\n    this.emitError(err);\n    return null;\n  }\n};\n```\n\n这里我们可以利用 AST parser 提供的方法直接转化出 json，如果没有或者有所定制，也可以手动实现一下 parse 的过程，仅仅只是一个树结构的迭代遍历而已，关键步骤是对 AST 语法树的各类型节点分别进行处理：\n\n```js\nconst yaml = require(\"yaml-ast-parser\");\nconst types = yaml.Kind;\n\nclass YamlParser {\n  // ...\n  parse() {\n    this.data = this.traverse(this.data);\n  }\n\n  traverse(node) {\n    const type = types[node.kind];\n\n    switch (type) {\n      // 对象\n      case \"MAP\": {\n        const ret = {};\n        node.mappings.forEach(mapping => {\n          Object.assign(ret, this.traverse(mapping));\n        });\n        return ret;\n      }\n      // 键值对\n      case \"MAPPING\": {\n        let ret = {};\n        // 验证\n        const keyValid =\n          yaml.determineScalarType(node.key) == yaml.ScalarType.string;\n        if (!keyValid) {\n          throw Error(\"键值非法\");\n        }\n\n        if (node.key.value == \"<<\" && types[node.value.kind] === \"ANCHOR_REF\") {\n          // 引用合并\n          ret = this.traverse(node.value);\n        } else {\n          ret[node.key.value] = this.traverse(node.value);\n        }\n        return ret;\n      }\n      // 常量\n      case \"SCALAR\": {\n        return node.valueObject !== undefined ? node.valueObject : node.value;\n      }\n      // 数组\n      case \"SEQ\": {\n        const ret = [];\n        node.items.forEach(item => {\n          ret.push(this.traverse(item));\n        });\n        return ret;\n      }\n      // 锚点引用\n      case \"ANCHOR_REF\": {\n        return this.traverse(node.value);\n      }\n      default:\n        throw Error(\"unvalid node\");\n    }\n  }\n}\n// ...\n```\n\n当然这样的实现略为粗糙，正常来说，一些完备的 AST parser 一般都会自带遍历方法（traverse），这样的方法都是有做过优化的，我们可以直接调用，尽量避免自己手动实现。\n\n按照相同的做法，你还可以实现一个 markdown-loader，甚至更为复杂的 vue-loader。\n\n## 三、loader 的一些开发技巧\n\n### 1、单一任务\n\n只做一件事情，做好一件事情。loader 的管道（pipeline）设计正是希望能够将任务拆解并独立成一个个子任务，由多个 loader 分别处理，以此来保证每个 loader 的可复用性。因此我们在开发 loader 前一定要先给 loader 一个准确的功能定位，从通用的角度出发去设计，避免做多余的事。\n\n### 2、无状态\n\nloader 应该是不保存状态的。这样的好处一方面是使我们 loader 中的数据流简单清晰，另一方面是保证 loader 具有良好可测性。因此我们的 loader 每次运行都不应该依赖于自身之前的编译结果，也不应该通过除出入参外的其他方式与其他编译模块进行数据交流。当然，这并不代表 loader 必须是一个无任何副作用的纯函数，loader 支持异步，因此是可以在 loader 中有 I/O 操作的。\n\n### 3、尽可能使用缓存\n\n在开发时，loader 可能会被不断地执行，合理的缓存能够降低重复编译带来的成本。loader 执行时默认是开启缓存的，这样一来， webpack 在编译过程中执行到判断是否需要重编译 loader 实例的时候，会直接跳过 rebuild 环节，节省不必要重建带来的开销。\n\n当且仅当有你的 loader 有其他不稳定的外部依赖（如 I/O 接口依赖）时，可以关闭缓存：\n\n```js\nthis.cacheable && this.cacheable(false);\n```","slug":"手把手教你写webpack-loader","published":1,"updated":"2019-11-20T05:53:01.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpq000asoyxdc03p0pj","content":"<blockquote>\n<p>作者：黄浩群 </p>\n</blockquote>\n<h2 id=\"一、什么是-loader\"><a href=\"#一、什么是-loader\" class=\"headerlink\" title=\"一、什么是 loader\"></a>一、什么是 loader</h2><p>loader 和 plugins 是 webpack 系统的两大重要组成元素。依靠对 loader、plugins 的不同组合搭配，我们可以灵活定制出高度适配自身业务的打包构建流程。</p>\n<p>loader 是 webpack 容纳各类资源的一个重要手段，它用于对模块的源代码进行转换，允许你在 import 或加载模块时预处理文件，利用 loader，我们可以将各种类型的资源转换成 webpack 本质接受的资源类型，如 javascript。</p>\n<a id=\"more\"></a>\n<h2 id=\"二、如何编写一个-yaml-loader\"><a href=\"#二、如何编写一个-yaml-loader\" class=\"headerlink\" title=\"二、如何编写一个 yaml-loader\"></a>二、如何编写一个 yaml-loader</h2><h3 id=\"1、YAML\"><a href=\"#1、YAML\" class=\"headerlink\" title=\"1、YAML\"></a>1、YAML</h3><p>yaml 语言多用于编写配置文件，结构与 JSON 类似，但语法格式比 JSON 更加方便简洁。yaml 支持注释，大小写敏感，使用缩进来表示层级关系：</p>\n<figure class=\"highlight yaml hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">#对象 </span></span><br><span class=\"line\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.4</span></span><br><span class=\"line\"><span class=\"hljs-comment\">#数组</span></span><br><span class=\"line\"><span class=\"hljs-attr\">author:</span></span><br><span class=\"line\"><span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">Mike</span></span><br><span class=\"line\"><span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">Hankle</span></span><br><span class=\"line\"><span class=\"hljs-comment\">#常量</span></span><br><span class=\"line\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"my project\"</span> <span class=\"hljs-comment\">#定义一个字符串</span></span><br><span class=\"line\"><span class=\"hljs-attr\">limit:</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-comment\">#定义一个数值</span></span><br><span class=\"line\"><span class=\"hljs-attr\">es6:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#定义一个布尔值</span></span><br><span class=\"line\"><span class=\"hljs-attr\">openkey:</span> <span class=\"hljs-literal\">Null</span> <span class=\"hljs-comment\">#定义一个null</span></span><br><span class=\"line\"><span class=\"hljs-comment\">#锚点引用</span></span><br><span class=\"line\"><span class=\"hljs-attr\">server:</span></span><br><span class=\"line\"><span class=\"hljs-attr\">  base:</span> <span class=\"hljs-meta\">&amp;base</span></span><br><span class=\"line\"><span class=\"hljs-attr\">    port:</span> <span class=\"hljs-number\">8005</span></span><br><span class=\"line\"><span class=\"hljs-attr\">  dev:</span></span><br><span class=\"line\"><span class=\"hljs-attr\">    ip:</span> <span class=\"hljs-number\">120.168</span><span class=\"hljs-number\">.117</span><span class=\"hljs-number\">.21</span></span><br><span class=\"line\">    <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*base</span></span><br><span class=\"line\"><span class=\"hljs-attr\">  gamma:</span></span><br><span class=\"line\"><span class=\"hljs-attr\">    ip:</span> <span class=\"hljs-number\">120.168</span><span class=\"hljs-number\">.117</span><span class=\"hljs-number\">.22</span></span><br><span class=\"line\">    <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*base</span></span><br></pre></td></tr></table></figure>\n\n<p>等同于：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.2.4\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"author\"</span>: [<span class=\"hljs-string\">\"Mike\"</span>, <span class=\"hljs-string\">\"Hankle\"</span>],</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"my project\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"limit\"</span>: <span class=\"hljs-number\">30</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"es6\"</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"openkey\"</span>: <span class=\"hljs-literal\">null</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"server\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"base\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"hljs-attr\">\"port\"</span>: <span class=\"hljs-number\">8005</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"dev\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"hljs-attr\">\"ip\"</span>: <span class=\"hljs-string\">\"120.168.117.21\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">\"port\"</span>: <span class=\"hljs-number\">8005</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"gamma\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"hljs-attr\">\"ip\"</span>: <span class=\"hljs-string\">\"120.168.117.22\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-attr\">\"port\"</span>: <span class=\"hljs-number\">8005</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在基于 webpack 构建的应用中，如果希望能够引用 yaml 文件中的数据，就需要一个 yaml-loader 来支持编译。一般情况下，你都能在 npm 上找到可用的 loader，但如果万一没有对应的支持，或者你希望有一些自定义的转换，那么就需要自己编写一个 webpack loader 了。</p>\n<h3 id=\"2、loader-的原理\"><a href=\"#2、loader-的原理\" class=\"headerlink\" title=\"2、loader 的原理\"></a>2、loader 的原理</h3><p>loader 是一个 node 模块，它导出为一个函数，用于在转换资源时调用。该函数接收一个 String/Buffer 类型的入参，并返回一个 String/Buffer 类型的返回值。一个最简单的 loader 是这样的：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// loaders/yaml-loader.js</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>loader 支持管道式传递，对同一类型的文件，我们可以使用多个 loader 进行处理，这批 loader 将按照“从下到上、从右到左”的顺序执行，并以前一个 loader 的返回值作为后一个 loader 的入参。这个机制无非是希望我们在编写 loader 的时候能够尽量避免重复造轮子，只关注需要实现的核心功能。因此配置的时候，我们可以引入 json-loader：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.yml$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"hljs-string\">\"json-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: path.resolve(__dirname, <span class=\"hljs-string\">\"./loaders/yaml-loader.js\"</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、开始\"><a href=\"#3、开始\" class=\"headerlink\" title=\"3、开始\"></a>3、开始</h3><p>这样一来，我们需要的 yaml-loader，就只做一件事情：将 yaml 的数据转化成为一个 JSON 字符串。因此，我们可以很简单地实现这样一个 yaml-loader：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> yaml = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"js-yaml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.cacheable &amp;&amp; <span class=\"hljs-keyword\">this</span>.cacheable();</span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> res = yaml.safeLoad(source);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.stringify(res, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"\\t\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emitError(err);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就是这么简单。但是可能有朋友会问，这里是因为有个现成的模块 js-yaml，可以直接将 yaml 转换成 JavaScript 对象，万一没有这个模块，该怎么做呢？是的，loader 的核心工作其实就是字符串的处理，这是个相当恶心的活儿，尤其是在这类语法转换的场景上，对源代码的字符串处理将变得极其复杂。这个情况下，我们可以考虑另外一种解法，借助 AST 语法树，来协助我们更加便捷地操作转换。</p>\n<h3 id=\"4、利用-AST-作源码转换\"><a href=\"#4、利用-AST-作源码转换\" class=\"headerlink\" title=\"4、利用 AST 作源码转换\"></a>4、利用 AST 作源码转换</h3><p>yaml-ast-parser 是一个将 yaml 转换成 AST 语法树的 node 模块，我们把字符串解析的工作交给了 AST parser，而操作 AST 语法树远比操作字符串要简单、方便得多：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> yaml = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"yaml-ast-parser\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">YamlParser</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(source) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.data = yaml.load(source);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.parse();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parse() &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// parse ast into javascript object</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.cacheable &amp;&amp; <span class=\"hljs-keyword\">this</span>.cacheable();</span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-keyword\">new</span> YamlParser(source);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.stringify(parser.data, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"\\t\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emitError(err);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们可以利用 AST parser 提供的方法直接转化出 json，如果没有或者有所定制，也可以手动实现一下 parse 的过程，仅仅只是一个树结构的迭代遍历而已，关键步骤是对 AST 语法树的各类型节点分别进行处理：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> yaml = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"yaml-ast-parser\"</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> types = yaml.Kind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">YamlParser</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">  parse() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.data = <span class=\"hljs-keyword\">this</span>.traverse(<span class=\"hljs-keyword\">this</span>.data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  traverse(node) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> type = types[node.kind];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 对象</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"MAP\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> ret = &#123;&#125;;</span><br><span class=\"line\">        node.mappings.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">mapping</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"hljs-built_in\">Object</span>.assign(ret, <span class=\"hljs-keyword\">this</span>.traverse(mapping));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> ret;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 键值对</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"MAPPING\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">let</span> ret = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"hljs-comment\">// 验证</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> keyValid =</span><br><span class=\"line\">          yaml.determineScalarType(node.key) == yaml.ScalarType.string;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (!keyValid) &#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"键值非法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (node.key.value == <span class=\"hljs-string\">\"&lt;&lt;\"</span> &amp;&amp; types[node.value.kind] === <span class=\"hljs-string\">\"ANCHOR_REF\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-comment\">// 引用合并</span></span><br><span class=\"line\">          ret = <span class=\"hljs-keyword\">this</span>.traverse(node.value);</span><br><span class=\"line\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">          ret[node.key.value] = <span class=\"hljs-keyword\">this</span>.traverse(node.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> ret;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 常量</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"SCALAR\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> node.valueObject !== <span class=\"hljs-literal\">undefined</span> ? node.valueObject : node.value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 数组</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"SEQ\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> ret = [];</span><br><span class=\"line\">        node.items.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">          ret.push(<span class=\"hljs-keyword\">this</span>.traverse(item));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> ret;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 锚点引用</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"ANCHOR_REF\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.traverse(node.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"unvalid node\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>当然这样的实现略为粗糙，正常来说，一些完备的 AST parser 一般都会自带遍历方法（traverse），这样的方法都是有做过优化的，我们可以直接调用，尽量避免自己手动实现。</p>\n<p>按照相同的做法，你还可以实现一个 markdown-loader，甚至更为复杂的 vue-loader。</p>\n<h2 id=\"三、loader-的一些开发技巧\"><a href=\"#三、loader-的一些开发技巧\" class=\"headerlink\" title=\"三、loader 的一些开发技巧\"></a>三、loader 的一些开发技巧</h2><h3 id=\"1、单一任务\"><a href=\"#1、单一任务\" class=\"headerlink\" title=\"1、单一任务\"></a>1、单一任务</h3><p>只做一件事情，做好一件事情。loader 的管道（pipeline）设计正是希望能够将任务拆解并独立成一个个子任务，由多个 loader 分别处理，以此来保证每个 loader 的可复用性。因此我们在开发 loader 前一定要先给 loader 一个准确的功能定位，从通用的角度出发去设计，避免做多余的事。</p>\n<h3 id=\"2、无状态\"><a href=\"#2、无状态\" class=\"headerlink\" title=\"2、无状态\"></a>2、无状态</h3><p>loader 应该是不保存状态的。这样的好处一方面是使我们 loader 中的数据流简单清晰，另一方面是保证 loader 具有良好可测性。因此我们的 loader 每次运行都不应该依赖于自身之前的编译结果，也不应该通过除出入参外的其他方式与其他编译模块进行数据交流。当然，这并不代表 loader 必须是一个无任何副作用的纯函数，loader 支持异步，因此是可以在 loader 中有 I/O 操作的。</p>\n<h3 id=\"3、尽可能使用缓存\"><a href=\"#3、尽可能使用缓存\" class=\"headerlink\" title=\"3、尽可能使用缓存\"></a>3、尽可能使用缓存</h3><p>在开发时，loader 可能会被不断地执行，合理的缓存能够降低重复编译带来的成本。loader 执行时默认是开启缓存的，这样一来， webpack 在编译过程中执行到判断是否需要重编译 loader 实例的时候，会直接跳过 rebuild 环节，节省不必要重建带来的开销。</p>\n<p>当且仅当有你的 loader 有其他不稳定的外部依赖（如 I/O 接口依赖）时，可以关闭缓存：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">this</span>.cacheable &amp;&amp; <span class=\"hljs-keyword\">this</span>.cacheable(<span class=\"hljs-literal\">false</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：黄浩群 </p>\n</blockquote>\n<h2 id=\"一、什么是-loader\"><a href=\"#一、什么是-loader\" class=\"headerlink\" title=\"一、什么是 loader\"></a>一、什么是 loader</h2><p>loader 和 plugins 是 webpack 系统的两大重要组成元素。依靠对 loader、plugins 的不同组合搭配，我们可以灵活定制出高度适配自身业务的打包构建流程。</p>\n<p>loader 是 webpack 容纳各类资源的一个重要手段，它用于对模块的源代码进行转换，允许你在 import 或加载模块时预处理文件，利用 loader，我们可以将各种类型的资源转换成 webpack 本质接受的资源类型，如 javascript。</p>","more":"<h2 id=\"二、如何编写一个-yaml-loader\"><a href=\"#二、如何编写一个-yaml-loader\" class=\"headerlink\" title=\"二、如何编写一个 yaml-loader\"></a>二、如何编写一个 yaml-loader</h2><h3 id=\"1、YAML\"><a href=\"#1、YAML\" class=\"headerlink\" title=\"1、YAML\"></a>1、YAML</h3><p>yaml 语言多用于编写配置文件，结构与 JSON 类似，但语法格式比 JSON 更加方便简洁。yaml 支持注释，大小写敏感，使用缩进来表示层级关系：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#对象 </span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">1.2</span><span class=\"number\">.4</span></span><br><span class=\"line\"><span class=\"comment\">#数组</span></span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Mike</span></span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Hankle</span></span><br><span class=\"line\"><span class=\"comment\">#常量</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">\"my project\"</span> <span class=\"comment\">#定义一个字符串</span></span><br><span class=\"line\"><span class=\"attr\">limit:</span> <span class=\"number\">30</span> <span class=\"comment\">#定义一个数值</span></span><br><span class=\"line\"><span class=\"attr\">es6:</span> <span class=\"literal\">true</span> <span class=\"comment\">#定义一个布尔值</span></span><br><span class=\"line\"><span class=\"attr\">openkey:</span> <span class=\"literal\">Null</span> <span class=\"comment\">#定义一个null</span></span><br><span class=\"line\"><span class=\"comment\">#锚点引用</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  base:</span> <span class=\"meta\">&amp;base</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">8005</span></span><br><span class=\"line\"><span class=\"attr\">  dev:</span></span><br><span class=\"line\"><span class=\"attr\">    ip:</span> <span class=\"number\">120.168</span><span class=\"number\">.117</span><span class=\"number\">.21</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*base</span></span><br><span class=\"line\"><span class=\"attr\">  gamma:</span></span><br><span class=\"line\"><span class=\"attr\">    ip:</span> <span class=\"number\">120.168</span><span class=\"number\">.117</span><span class=\"number\">.22</span></span><br><span class=\"line\">    <span class=\"string\">&lt;&lt;:</span> <span class=\"meta\">*base</span></span><br></pre></td></tr></table></figure>\n\n<p>等同于：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.2.4\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: [<span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Hankle\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"limit\"</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"es6\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"openkey\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"server\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"base\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">8005</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"ip\"</span>: <span class=\"string\">\"120.168.117.21\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">8005</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"gamma\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"ip\"</span>: <span class=\"string\">\"120.168.117.22\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">8005</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在基于 webpack 构建的应用中，如果希望能够引用 yaml 文件中的数据，就需要一个 yaml-loader 来支持编译。一般情况下，你都能在 npm 上找到可用的 loader，但如果万一没有对应的支持，或者你希望有一些自定义的转换，那么就需要自己编写一个 webpack loader 了。</p>\n<h3 id=\"2、loader-的原理\"><a href=\"#2、loader-的原理\" class=\"headerlink\" title=\"2、loader 的原理\"></a>2、loader 的原理</h3><p>loader 是一个 node 模块，它导出为一个函数，用于在转换资源时调用。该函数接收一个 String/Buffer 类型的入参，并返回一个 String/Buffer 类型的返回值。一个最简单的 loader 是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// loaders/yaml-loader.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>loader 支持管道式传递，对同一类型的文件，我们可以使用多个 loader 进行处理，这批 loader 将按照“从下到上、从右到左”的顺序执行，并以前一个 loader 的返回值作为后一个 loader 的入参。这个机制无非是希望我们在编写 loader 的时候能够尽量避免重复造轮子，只关注需要实现的核心功能。因此配置的时候，我们可以引入 json-loader：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.yml$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"json-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: path.resolve(__dirname, <span class=\"string\">\"./loaders/yaml-loader.js\"</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、开始\"><a href=\"#3、开始\" class=\"headerlink\" title=\"3、开始\"></a>3、开始</h3><p>这样一来，我们需要的 yaml-loader，就只做一件事情：将 yaml 的数据转化成为一个 JSON 字符串。因此，我们可以很简单地实现这样一个 yaml-loader：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yaml = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-yaml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = yaml.safeLoad(source);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(res, <span class=\"literal\">undefined</span>, <span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitError(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就是这么简单。但是可能有朋友会问，这里是因为有个现成的模块 js-yaml，可以直接将 yaml 转换成 JavaScript 对象，万一没有这个模块，该怎么做呢？是的，loader 的核心工作其实就是字符串的处理，这是个相当恶心的活儿，尤其是在这类语法转换的场景上，对源代码的字符串处理将变得极其复杂。这个情况下，我们可以考虑另外一种解法，借助 AST 语法树，来协助我们更加便捷地操作转换。</p>\n<h3 id=\"4、利用-AST-作源码转换\"><a href=\"#4、利用-AST-作源码转换\" class=\"headerlink\" title=\"4、利用 AST 作源码转换\"></a>4、利用 AST 作源码转换</h3><p>yaml-ast-parser 是一个将 yaml 转换成 AST 语法树的 node 模块，我们把字符串解析的工作交给了 AST parser，而操作 AST 语法树远比操作字符串要简单、方便得多：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> yaml = <span class=\"built_in\">require</span>(<span class=\"string\">\"yaml-ast-parser\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YamlParser</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(source) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = yaml.load(source);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parse();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parse() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// parse ast into javascript object</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parser = <span class=\"keyword\">new</span> YamlParser(source);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(parser.data, <span class=\"literal\">undefined</span>, <span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emitError(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们可以利用 AST parser 提供的方法直接转化出 json，如果没有或者有所定制，也可以手动实现一下 parse 的过程，仅仅只是一个树结构的迭代遍历而已，关键步骤是对 AST 语法树的各类型节点分别进行处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> yaml = <span class=\"built_in\">require</span>(<span class=\"string\">\"yaml-ast-parser\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> types = yaml.Kind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YamlParser</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  parse() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.traverse(<span class=\"keyword\">this</span>.data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  traverse(node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = types[node.kind];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对象</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"MAP\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ret = &#123;&#125;;</span><br><span class=\"line\">        node.mappings.forEach(<span class=\"function\"><span class=\"params\">mapping</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">Object</span>.assign(ret, <span class=\"keyword\">this</span>.traverse(mapping));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 键值对</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"MAPPING\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ret = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 验证</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> keyValid =</span><br><span class=\"line\">          yaml.determineScalarType(node.key) == yaml.ScalarType.string;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!keyValid) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"键值非法\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.key.value == <span class=\"string\">\"&lt;&lt;\"</span> &amp;&amp; types[node.value.kind] === <span class=\"string\">\"ANCHOR_REF\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 引用合并</span></span><br><span class=\"line\">          ret = <span class=\"keyword\">this</span>.traverse(node.value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          ret[node.key.value] = <span class=\"keyword\">this</span>.traverse(node.value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 常量</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"SCALAR\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.valueObject !== <span class=\"literal\">undefined</span> ? node.valueObject : node.value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 数组</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"SEQ\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ret = [];</span><br><span class=\"line\">        node.items.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">          ret.push(<span class=\"keyword\">this</span>.traverse(item));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 锚点引用</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"ANCHOR_REF\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.traverse(node.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"unvalid node\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>当然这样的实现略为粗糙，正常来说，一些完备的 AST parser 一般都会自带遍历方法（traverse），这样的方法都是有做过优化的，我们可以直接调用，尽量避免自己手动实现。</p>\n<p>按照相同的做法，你还可以实现一个 markdown-loader，甚至更为复杂的 vue-loader。</p>\n<h2 id=\"三、loader-的一些开发技巧\"><a href=\"#三、loader-的一些开发技巧\" class=\"headerlink\" title=\"三、loader 的一些开发技巧\"></a>三、loader 的一些开发技巧</h2><h3 id=\"1、单一任务\"><a href=\"#1、单一任务\" class=\"headerlink\" title=\"1、单一任务\"></a>1、单一任务</h3><p>只做一件事情，做好一件事情。loader 的管道（pipeline）设计正是希望能够将任务拆解并独立成一个个子任务，由多个 loader 分别处理，以此来保证每个 loader 的可复用性。因此我们在开发 loader 前一定要先给 loader 一个准确的功能定位，从通用的角度出发去设计，避免做多余的事。</p>\n<h3 id=\"2、无状态\"><a href=\"#2、无状态\" class=\"headerlink\" title=\"2、无状态\"></a>2、无状态</h3><p>loader 应该是不保存状态的。这样的好处一方面是使我们 loader 中的数据流简单清晰，另一方面是保证 loader 具有良好可测性。因此我们的 loader 每次运行都不应该依赖于自身之前的编译结果，也不应该通过除出入参外的其他方式与其他编译模块进行数据交流。当然，这并不代表 loader 必须是一个无任何副作用的纯函数，loader 支持异步，因此是可以在 loader 中有 I/O 操作的。</p>\n<h3 id=\"3、尽可能使用缓存\"><a href=\"#3、尽可能使用缓存\" class=\"headerlink\" title=\"3、尽可能使用缓存\"></a>3、尽可能使用缓存</h3><p>在开发时，loader 可能会被不断地执行，合理的缓存能够降低重复编译带来的成本。loader 执行时默认是开启缓存的，这样一来， webpack 在编译过程中执行到判断是否需要重编译 loader 实例的时候，会直接跳过 rebuild 环节，节省不必要重建带来的开销。</p>\n<p>当且仅当有你的 loader 有其他不稳定的外部依赖（如 I/O 接口依赖）时，可以关闭缓存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.cacheable &amp;&amp; <span class=\"keyword\">this</span>.cacheable(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>"},{"title":"V8引擎和JavaScript优化建议","date":"2019-10-23T09:12:03.000Z","cover":"https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg","_content":"\n\n> * 原文地址：[https://alligator.io/js/v8-engine/](https://alligator.io/js/v8-engine/)\n> * 翻译：马雪琴\n\n \n>V8 是谷歌用于编译 JavaScript 的引擎，Firefox 同样也有一个，叫 SpiderMonkey，它和 V8 有一些不同，但总体颇为相似。我们将在本篇文章中讨论 V8。\n\nV8 引擎的一些基础点：\n\n* 用 C++ 语言实现，使用在 Chrome 浏览器和 Node.js 中（以及最新版的 Microsoft Edge）\n* 遵循 ECMA-262 标准\n<!--more-->\n# JavaScript 旅程\n\n当我们把压缩、混淆以及做了各种处理的 JavaScript 放到 V8 引擎中解析时，到底发生了些什么？\n\n下图阐述了整个流程，接下来我们会对其中的每个步骤进行详细说明：\n![](https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg)\n\n在本篇文章中，我们将探讨 JavaScript 代码是如何被解析的，以及如何最大程度的优化 JavaScript 的编译效率。V8 里的优化编译器（又名 Turbofan）拿到 JavaScript 代码之后，会将其转化成高效率的机器码，因此，我们能向其输入越多的代码，我们的应用就会越快。附注一点，Chrome 里的解释器称作 Ignition。\n\n# JavaScript 解析\n\n整个过程中的第一步是解析 JavaScript。首先探讨什么是解析。\n\n解析有两个阶段：\n\n* Eager（全解析）- 立即解析所有的代码\n* Lazy（预解析）- 按需做最少的解析，剩下的留到后面\n\n哪一种方式更好则需要根据实际情况来决定。\n\n下面来看一段代码。\n\n```\n// 变量声明会被立即解析\nconst a = 1;\nconst b = 2;\n\n// 目前不需要的暂时不解析\nfunction add(a, b) {\n  return a + b;\n}\n\n// add 方法被执行到了，所以需要返回解析该方法\nadd(a, b);\n```\n\n变量声明会被立即解析，函数则会被懒解析，但上述代码里紧接着就执行了 add(a, b)，说明 add 方法是马上就需要用到的，所以这种情况下，把 add 函数进行即时解析会更高效。\n\n为了让 add 方法被立即解析，我们可以这样做：\n\n```\n// 变量声明会被立即解析\nconst a = 1;\nconst b = 2;\n\n// eager parse this too\nvar add = (function(a, b) {\n  return a + b;\n})();\n\n// add 方法已经被解析过了，所以这段代码可以立即执行\nadd(a, b);\n```\n\n这就是大多数模块被创建的过程。那么，立即解析会是高效 JavaScript 应用的最好方式吗？\n\n我们可以用 [optimize-js](https://nolanlawson.github.io/test-optimize-js/) 这个工具对公共库代码进行完全的立即解析处理，比如对比较有名的 lodash 进行处理后，优化效果是很显著的：\n\n* 没有使用 optimize-js：11.86ms\n* 使用了 optimize-js：11.24ms\n\n必须声明的是，该结果是在 Chrome 浏览器中得到的，其它环境的结果则无法保证：\n\n![](https://img11.360buyimg.com/jdphoto/s780x342_jfs/t1/75143/19/13407/57666/5dad9422E39e89ead/e7e04d5c564ce44a.jpg)\n\n如果您需要优化应用，必须在所有的环境中进行测试。\n\n另一个解析相关的建议是不要让函数嵌套：\n\n```\n// 糟糕的方式\nfunction sumOfSquares(a, b) {\n  // 这里将被反复懒解析\n  function square(num) {\n    return num * num;\n  }\n\n  return square(a) + square(b);\n}\n```\n\n改进后的方式如下：\n\n```\nfunction square(num) {\n  return num * num;\n}\n\n// 好的方式\nfunction sumOfSquares(a, b) {\n  return square(a) + square(b);\n}\n\nsumOfSquares(a, b);\n```\n\n上述示例中，square 方法只被懒解析了一次。\n\n# 内联函数\n\nChrome 有时候会重写 JavaScript 代码，内联函数即是这样一种情况。\n\n下面是一个代码示例：\n\n```\nconst square = (x) => { return x * x }\n\nconst callFunction100Times = (func) => {\n  for(let i = 100; i < 100; i++) {\n    // func 参数会被调用100次\n    func(2)\n  }\n}\n\ncallFunction100Times(square)\n```\n\n上述代码会被 V8 引擎进行如下优化：\n\n```\nconst square = (x) => { return x * x }\n\nconst callFunction100Times = (func) => {\n  for(let i = 100; i < 100; i++) {\n    // 函数被内联后就不会被持续调用了\n    return x * x\n  }\n}\n\ncallFunction100Times(square)\n```\n从上面可以看出，V8 实际上会把 square 函数体内联，以消除调用函数的步骤。这对提高代码的性能是很有用处的。\n\n# 内联函数问题\n\n上述方法存在一点问题，让我们看看下面这段代码：\n\n```\nconst square = (x) => { return x * x }\nconst cube = (x) => { return x * x * x }\n\nconst callFunction100Times = (func) => {\n  for(let i = 100; i < 100; i++) {\n    // 函数被内联后就不会被持续调用了\n    func(2)\n  }\n}\n\ncallFunction100Times(square)\ncallFunction100Times(cube)\n```\n上面的代码中先会调用 square 函数100次，紧接着又会调用 cube 函数100次。在调用 cube 之前，我们必须先对 callFunction100Times 进行反优化，因为我们已经内联了 square 函数。在这个例子中，square 函数似乎会比 cube 函数快，但实际上，因为反优化的这个步骤，使得整个执行过程变得更长了。\n\n# 对象\n谈到对象，V8 引擎底层有个类型系统可以区分它们：\n\n## 单态\n对象具有相同的键，这些键没有区别。\n\n```\n// 单态示例\nconst person = { name: 'John' }\nconst person2 = { name: 'Paul' }\n```\n\n## 多态\n对象有相似的结构，并存在一些细微的差别。\n\n```\n// 多态示例\nconst person = { name: 'John' }\nconst person2 = { name: 'Paul', age: 27 }\n```\n\n## 复杂态\n这两个对象完全不同，不能比较。\n\n```\n// 复杂态示例\nconst person = { name: 'John' }\nconst building = { rooms: ['cafe', 'meeting room A', 'meeting room B'], doors: 27 }\n```\n现在我们了解了 V8 里的不同对象，接下来看看 V8 引擎是如何优化对象的。\n\n## 隐藏类\n隐藏类是 V8 区分对象的方式。\n\n让我们将这个过程分解一下。\n\n首先声明一个对象：\n\n```\nconst obj = { name: 'John'}\n```\n\nV8 会为这个对象声明一个 classId。\n\n```\nconst objClassId = ['name', 1]\n```\n\n然后对象会按如下方式被创建：\n\n```\nconst obj = {...objClassId, 'John'}\n```\n\n然后当我们获取对象里的 name 属性时：\n\n```\nobj.name\n```\n\nV8 会做如下查找：\n\n```\nobj[getProp(obj[0], name)]\n```\n\n这就是 V8 创建对象的过程，接下来看看如何优化对象以及重用 classId。\n\n## 创建对象的建议\n应该尽量将属性放在构造器中声明，以保证对象的结构不变，从而让 V8 可以优化对象。\n```\nclass Point {\n  constructor(x,y) {\n    this.x = x\n    this.y = y\n  }\n}\n\nconst p1 = new Point(11, 22) // 隐藏的 classId 被创建\nconst p2 = new Point(33, 44)\n```\n\n应该保证属性的顺序不变，如下面这个示例：\n```\nconst obj = { a: 1 } // 隐藏的 classId 被创建\nobj.b = 3\n\nconst obj2 = { b: 3 } // 另一个隐藏的 classId 被创建\nobj2.a = 1\n\n// 这样会更好\nconst obj = { a: 1 } // 隐藏的 classId 被创建\nobj.b = 3\n\nconst obj2 = { a: 1 } // 隐藏类被复用\nobj2.b = 3\n```\n\n# 其它的优化建议\n接下来我们看一下其它的 JavaScript 代码优化建议。\n\n## 修正函数参数类型\n当参数被传进函数中时，保证参数的类型一致是很重要的。如果参数的类型不同，Turbofan 在尝试优化4次之后就会放弃。\n\n下面是一个例子：\n\n```\nfunction add(x,y) {\n  return x + y\n}\n\nadd(1,2) // 单态\nadd('a', 'b') // 多态\nadd(true, false)\nadd({},{})\nadd([],[]) // 复杂态 - 在这个阶段, 已经尝试了4+次, 不会再做优化了\n\n```\n另一个建议是保证在全局作用域下声明类：\n```\n\n// 不要这样做\nfunction createPoint(x, y) {\n  class Point {\n    constructor(x,y) {\n      this.x = x\n      this.y = y\n    }\n  }\n\n  // 每次都会重新创建一个 point 对象\n  return new Point(x,y)\n}\n\nfunction length(point) {\n  //...\n}\n```\n\n# 结论\n希望大家学到了一些 V8 底层的知识，知道如何去编写更优的 JavaScript 代码。\n","source":"_posts/2019-10/V8-引擎和Javascript优化建议.md","raw":"---\ntitle: V8引擎和JavaScript优化建议\ndate: 2019-10-23 17:12:03\ncover: https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg\ntags:\n\t- V8引擎\ncategories: Web前端\n---\n\n\n> * 原文地址：[https://alligator.io/js/v8-engine/](https://alligator.io/js/v8-engine/)\n> * 翻译：马雪琴\n\n \n>V8 是谷歌用于编译 JavaScript 的引擎，Firefox 同样也有一个，叫 SpiderMonkey，它和 V8 有一些不同，但总体颇为相似。我们将在本篇文章中讨论 V8。\n\nV8 引擎的一些基础点：\n\n* 用 C++ 语言实现，使用在 Chrome 浏览器和 Node.js 中（以及最新版的 Microsoft Edge）\n* 遵循 ECMA-262 标准\n<!--more-->\n# JavaScript 旅程\n\n当我们把压缩、混淆以及做了各种处理的 JavaScript 放到 V8 引擎中解析时，到底发生了些什么？\n\n下图阐述了整个流程，接下来我们会对其中的每个步骤进行详细说明：\n![](https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg)\n\n在本篇文章中，我们将探讨 JavaScript 代码是如何被解析的，以及如何最大程度的优化 JavaScript 的编译效率。V8 里的优化编译器（又名 Turbofan）拿到 JavaScript 代码之后，会将其转化成高效率的机器码，因此，我们能向其输入越多的代码，我们的应用就会越快。附注一点，Chrome 里的解释器称作 Ignition。\n\n# JavaScript 解析\n\n整个过程中的第一步是解析 JavaScript。首先探讨什么是解析。\n\n解析有两个阶段：\n\n* Eager（全解析）- 立即解析所有的代码\n* Lazy（预解析）- 按需做最少的解析，剩下的留到后面\n\n哪一种方式更好则需要根据实际情况来决定。\n\n下面来看一段代码。\n\n```\n// 变量声明会被立即解析\nconst a = 1;\nconst b = 2;\n\n// 目前不需要的暂时不解析\nfunction add(a, b) {\n  return a + b;\n}\n\n// add 方法被执行到了，所以需要返回解析该方法\nadd(a, b);\n```\n\n变量声明会被立即解析，函数则会被懒解析，但上述代码里紧接着就执行了 add(a, b)，说明 add 方法是马上就需要用到的，所以这种情况下，把 add 函数进行即时解析会更高效。\n\n为了让 add 方法被立即解析，我们可以这样做：\n\n```\n// 变量声明会被立即解析\nconst a = 1;\nconst b = 2;\n\n// eager parse this too\nvar add = (function(a, b) {\n  return a + b;\n})();\n\n// add 方法已经被解析过了，所以这段代码可以立即执行\nadd(a, b);\n```\n\n这就是大多数模块被创建的过程。那么，立即解析会是高效 JavaScript 应用的最好方式吗？\n\n我们可以用 [optimize-js](https://nolanlawson.github.io/test-optimize-js/) 这个工具对公共库代码进行完全的立即解析处理，比如对比较有名的 lodash 进行处理后，优化效果是很显著的：\n\n* 没有使用 optimize-js：11.86ms\n* 使用了 optimize-js：11.24ms\n\n必须声明的是，该结果是在 Chrome 浏览器中得到的，其它环境的结果则无法保证：\n\n![](https://img11.360buyimg.com/jdphoto/s780x342_jfs/t1/75143/19/13407/57666/5dad9422E39e89ead/e7e04d5c564ce44a.jpg)\n\n如果您需要优化应用，必须在所有的环境中进行测试。\n\n另一个解析相关的建议是不要让函数嵌套：\n\n```\n// 糟糕的方式\nfunction sumOfSquares(a, b) {\n  // 这里将被反复懒解析\n  function square(num) {\n    return num * num;\n  }\n\n  return square(a) + square(b);\n}\n```\n\n改进后的方式如下：\n\n```\nfunction square(num) {\n  return num * num;\n}\n\n// 好的方式\nfunction sumOfSquares(a, b) {\n  return square(a) + square(b);\n}\n\nsumOfSquares(a, b);\n```\n\n上述示例中，square 方法只被懒解析了一次。\n\n# 内联函数\n\nChrome 有时候会重写 JavaScript 代码，内联函数即是这样一种情况。\n\n下面是一个代码示例：\n\n```\nconst square = (x) => { return x * x }\n\nconst callFunction100Times = (func) => {\n  for(let i = 100; i < 100; i++) {\n    // func 参数会被调用100次\n    func(2)\n  }\n}\n\ncallFunction100Times(square)\n```\n\n上述代码会被 V8 引擎进行如下优化：\n\n```\nconst square = (x) => { return x * x }\n\nconst callFunction100Times = (func) => {\n  for(let i = 100; i < 100; i++) {\n    // 函数被内联后就不会被持续调用了\n    return x * x\n  }\n}\n\ncallFunction100Times(square)\n```\n从上面可以看出，V8 实际上会把 square 函数体内联，以消除调用函数的步骤。这对提高代码的性能是很有用处的。\n\n# 内联函数问题\n\n上述方法存在一点问题，让我们看看下面这段代码：\n\n```\nconst square = (x) => { return x * x }\nconst cube = (x) => { return x * x * x }\n\nconst callFunction100Times = (func) => {\n  for(let i = 100; i < 100; i++) {\n    // 函数被内联后就不会被持续调用了\n    func(2)\n  }\n}\n\ncallFunction100Times(square)\ncallFunction100Times(cube)\n```\n上面的代码中先会调用 square 函数100次，紧接着又会调用 cube 函数100次。在调用 cube 之前，我们必须先对 callFunction100Times 进行反优化，因为我们已经内联了 square 函数。在这个例子中，square 函数似乎会比 cube 函数快，但实际上，因为反优化的这个步骤，使得整个执行过程变得更长了。\n\n# 对象\n谈到对象，V8 引擎底层有个类型系统可以区分它们：\n\n## 单态\n对象具有相同的键，这些键没有区别。\n\n```\n// 单态示例\nconst person = { name: 'John' }\nconst person2 = { name: 'Paul' }\n```\n\n## 多态\n对象有相似的结构，并存在一些细微的差别。\n\n```\n// 多态示例\nconst person = { name: 'John' }\nconst person2 = { name: 'Paul', age: 27 }\n```\n\n## 复杂态\n这两个对象完全不同，不能比较。\n\n```\n// 复杂态示例\nconst person = { name: 'John' }\nconst building = { rooms: ['cafe', 'meeting room A', 'meeting room B'], doors: 27 }\n```\n现在我们了解了 V8 里的不同对象，接下来看看 V8 引擎是如何优化对象的。\n\n## 隐藏类\n隐藏类是 V8 区分对象的方式。\n\n让我们将这个过程分解一下。\n\n首先声明一个对象：\n\n```\nconst obj = { name: 'John'}\n```\n\nV8 会为这个对象声明一个 classId。\n\n```\nconst objClassId = ['name', 1]\n```\n\n然后对象会按如下方式被创建：\n\n```\nconst obj = {...objClassId, 'John'}\n```\n\n然后当我们获取对象里的 name 属性时：\n\n```\nobj.name\n```\n\nV8 会做如下查找：\n\n```\nobj[getProp(obj[0], name)]\n```\n\n这就是 V8 创建对象的过程，接下来看看如何优化对象以及重用 classId。\n\n## 创建对象的建议\n应该尽量将属性放在构造器中声明，以保证对象的结构不变，从而让 V8 可以优化对象。\n```\nclass Point {\n  constructor(x,y) {\n    this.x = x\n    this.y = y\n  }\n}\n\nconst p1 = new Point(11, 22) // 隐藏的 classId 被创建\nconst p2 = new Point(33, 44)\n```\n\n应该保证属性的顺序不变，如下面这个示例：\n```\nconst obj = { a: 1 } // 隐藏的 classId 被创建\nobj.b = 3\n\nconst obj2 = { b: 3 } // 另一个隐藏的 classId 被创建\nobj2.a = 1\n\n// 这样会更好\nconst obj = { a: 1 } // 隐藏的 classId 被创建\nobj.b = 3\n\nconst obj2 = { a: 1 } // 隐藏类被复用\nobj2.b = 3\n```\n\n# 其它的优化建议\n接下来我们看一下其它的 JavaScript 代码优化建议。\n\n## 修正函数参数类型\n当参数被传进函数中时，保证参数的类型一致是很重要的。如果参数的类型不同，Turbofan 在尝试优化4次之后就会放弃。\n\n下面是一个例子：\n\n```\nfunction add(x,y) {\n  return x + y\n}\n\nadd(1,2) // 单态\nadd('a', 'b') // 多态\nadd(true, false)\nadd({},{})\nadd([],[]) // 复杂态 - 在这个阶段, 已经尝试了4+次, 不会再做优化了\n\n```\n另一个建议是保证在全局作用域下声明类：\n```\n\n// 不要这样做\nfunction createPoint(x, y) {\n  class Point {\n    constructor(x,y) {\n      this.x = x\n      this.y = y\n    }\n  }\n\n  // 每次都会重新创建一个 point 对象\n  return new Point(x,y)\n}\n\nfunction length(point) {\n  //...\n}\n```\n\n# 结论\n希望大家学到了一些 V8 底层的知识，知道如何去编写更优的 JavaScript 代码。\n","slug":"V8-引擎和Javascript优化建议","published":1,"updated":"2019-11-20T05:13:20.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpt000bsoyx5tj0k0h7","content":"<blockquote>\n<ul>\n<li>原文地址：<a href=\"https://alligator.io/js/v8-engine/\" target=\"_blank\" rel=\"noopener\">https://alligator.io/js/v8-engine/</a></li>\n<li>翻译：马雪琴</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>V8 是谷歌用于编译 JavaScript 的引擎，Firefox 同样也有一个，叫 SpiderMonkey，它和 V8 有一些不同，但总体颇为相似。我们将在本篇文章中讨论 V8。</p>\n</blockquote>\n<p>V8 引擎的一些基础点：</p>\n<ul>\n<li>用 C++ 语言实现，使用在 Chrome 浏览器和 Node.js 中（以及最新版的 Microsoft Edge）</li>\n<li>遵循 ECMA-262 标准<a id=\"more\"></a>\n<h1 id=\"JavaScript-旅程\"><a href=\"#JavaScript-旅程\" class=\"headerlink\" title=\"JavaScript 旅程\"></a>JavaScript 旅程</h1></li>\n</ul>\n<p>当我们把压缩、混淆以及做了各种处理的 JavaScript 放到 V8 引擎中解析时，到底发生了些什么？</p>\n<p>下图阐述了整个流程，接下来我们会对其中的每个步骤进行详细说明：<br><img src=\"https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg\" alt></p>\n<p>在本篇文章中，我们将探讨 JavaScript 代码是如何被解析的，以及如何最大程度的优化 JavaScript 的编译效率。V8 里的优化编译器（又名 Turbofan）拿到 JavaScript 代码之后，会将其转化成高效率的机器码，因此，我们能向其输入越多的代码，我们的应用就会越快。附注一点，Chrome 里的解释器称作 Ignition。</p>\n<h1 id=\"JavaScript-解析\"><a href=\"#JavaScript-解析\" class=\"headerlink\" title=\"JavaScript 解析\"></a>JavaScript 解析</h1><p>整个过程中的第一步是解析 JavaScript。首先探讨什么是解析。</p>\n<p>解析有两个阶段：</p>\n<ul>\n<li>Eager（全解析）- 立即解析所有的代码</li>\n<li>Lazy（预解析）- 按需做最少的解析，剩下的留到后面</li>\n</ul>\n<p>哪一种方式更好则需要根据实际情况来决定。</p>\n<p>下面来看一段代码。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 变量声明会被立即解析</span><br><span class=\"line\">const a = 1;</span><br><span class=\"line\">const b = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">// 目前不需要的暂时不解析</span><br><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// add 方法被执行到了，所以需要返回解析该方法</span><br><span class=\"line\">add(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>变量声明会被立即解析，函数则会被懒解析，但上述代码里紧接着就执行了 add(a, b)，说明 add 方法是马上就需要用到的，所以这种情况下，把 add 函数进行即时解析会更高效。</p>\n<p>为了让 add 方法被立即解析，我们可以这样做：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 变量声明会被立即解析</span><br><span class=\"line\">const a = 1;</span><br><span class=\"line\">const b = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">// eager parse this too</span><br><span class=\"line\">var add = (function(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">// add 方法已经被解析过了，所以这段代码可以立即执行</span><br><span class=\"line\">add(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>这就是大多数模块被创建的过程。那么，立即解析会是高效 JavaScript 应用的最好方式吗？</p>\n<p>我们可以用 <a href=\"https://nolanlawson.github.io/test-optimize-js/\" target=\"_blank\" rel=\"noopener\">optimize-js</a> 这个工具对公共库代码进行完全的立即解析处理，比如对比较有名的 lodash 进行处理后，优化效果是很显著的：</p>\n<ul>\n<li>没有使用 optimize-js：11.86ms</li>\n<li>使用了 optimize-js：11.24ms</li>\n</ul>\n<p>必须声明的是，该结果是在 Chrome 浏览器中得到的，其它环境的结果则无法保证：</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s780x342_jfs/t1/75143/19/13407/57666/5dad9422E39e89ead/e7e04d5c564ce44a.jpg\" alt></p>\n<p>如果您需要优化应用，必须在所有的环境中进行测试。</p>\n<p>另一个解析相关的建议是不要让函数嵌套：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 糟糕的方式</span><br><span class=\"line\">function sumOfSquares(a, b) &#123;</span><br><span class=\"line\">  // 这里将被反复懒解析</span><br><span class=\"line\">  function square(num) &#123;</span><br><span class=\"line\">    return num * num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return square(a) + square(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的方式如下：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function square(num) &#123;</span><br><span class=\"line\">  return num * num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 好的方式</span><br><span class=\"line\">function sumOfSquares(a, b) &#123;</span><br><span class=\"line\">  return square(a) + square(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sumOfSquares(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>上述示例中，square 方法只被懒解析了一次。</p>\n<h1 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h1><p>Chrome 有时候会重写 JavaScript 代码，内联函数即是这样一种情况。</p>\n<p>下面是一个代码示例：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const square = (x) =&gt; &#123; return x * x &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const callFunction100Times = (func) =&gt; &#123;</span><br><span class=\"line\">  for(let i = 100; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    // func 参数会被调用100次</span><br><span class=\"line\">    func(2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callFunction100Times(square)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会被 V8 引擎进行如下优化：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const square = (x) =&gt; &#123; return x * x &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const callFunction100Times = (func) =&gt; &#123;</span><br><span class=\"line\">  for(let i = 100; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    // 函数被内联后就不会被持续调用了</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callFunction100Times(square)</span><br></pre></td></tr></table></figure>\n\n<p>从上面可以看出，V8 实际上会把 square 函数体内联，以消除调用函数的步骤。这对提高代码的性能是很有用处的。</p>\n<h1 id=\"内联函数问题\"><a href=\"#内联函数问题\" class=\"headerlink\" title=\"内联函数问题\"></a>内联函数问题</h1><p>上述方法存在一点问题，让我们看看下面这段代码：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const square = (x) =&gt; &#123; return x * x &#125;</span><br><span class=\"line\">const cube = (x) =&gt; &#123; return x * x * x &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const callFunction100Times = (func) =&gt; &#123;</span><br><span class=\"line\">  for(let i = 100; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    // 函数被内联后就不会被持续调用了</span><br><span class=\"line\">    func(2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callFunction100Times(square)</span><br><span class=\"line\">callFunction100Times(cube)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中先会调用 square 函数100次，紧接着又会调用 cube 函数100次。在调用 cube 之前，我们必须先对 callFunction100Times 进行反优化，因为我们已经内联了 square 函数。在这个例子中，square 函数似乎会比 cube 函数快，但实际上，因为反优化的这个步骤，使得整个执行过程变得更长了。</p>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><p>谈到对象，V8 引擎底层有个类型系统可以区分它们：</p>\n<h2 id=\"单态\"><a href=\"#单态\" class=\"headerlink\" title=\"单态\"></a>单态</h2><p>对象具有相同的键，这些键没有区别。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单态示例</span><br><span class=\"line\">const person = &#123; name: &apos;John&apos; &#125;</span><br><span class=\"line\">const person2 = &#123; name: &apos;Paul&apos; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>对象有相似的结构，并存在一些细微的差别。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多态示例</span><br><span class=\"line\">const person = &#123; name: &apos;John&apos; &#125;</span><br><span class=\"line\">const person2 = &#123; name: &apos;Paul&apos;, age: 27 &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂态\"><a href=\"#复杂态\" class=\"headerlink\" title=\"复杂态\"></a>复杂态</h2><p>这两个对象完全不同，不能比较。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 复杂态示例</span><br><span class=\"line\">const person = &#123; name: &apos;John&apos; &#125;</span><br><span class=\"line\">const building = &#123; rooms: [&apos;cafe&apos;, &apos;meeting room A&apos;, &apos;meeting room B&apos;], doors: 27 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们了解了 V8 里的不同对象，接下来看看 V8 引擎是如何优化对象的。</p>\n<h2 id=\"隐藏类\"><a href=\"#隐藏类\" class=\"headerlink\" title=\"隐藏类\"></a>隐藏类</h2><p>隐藏类是 V8 区分对象的方式。</p>\n<p>让我们将这个过程分解一下。</p>\n<p>首先声明一个对象：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123; name: &apos;John&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>V8 会为这个对象声明一个 classId。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const objClassId = [&apos;name&apos;, 1]</span><br></pre></td></tr></table></figure>\n\n<p>然后对象会按如下方式被创建：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;...objClassId, &apos;John&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后当我们获取对象里的 name 属性时：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.name</span><br></pre></td></tr></table></figure>\n\n<p>V8 会做如下查找：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[getProp(obj[0], name)]</span><br></pre></td></tr></table></figure>\n\n<p>这就是 V8 创建对象的过程，接下来看看如何优化对象以及重用 classId。</p>\n<h2 id=\"创建对象的建议\"><a href=\"#创建对象的建议\" class=\"headerlink\" title=\"创建对象的建议\"></a>创建对象的建议</h2><p>应该尽量将属性放在构造器中声明，以保证对象的结构不变，从而让 V8 可以优化对象。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x,y) &#123;</span><br><span class=\"line\">    this.x = x</span><br><span class=\"line\">    this.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const p1 = new Point(11, 22) // 隐藏的 classId 被创建</span><br><span class=\"line\">const p2 = new Point(33, 44)</span><br></pre></td></tr></table></figure>\n\n<p>应该保证属性的顺序不变，如下面这个示例：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123; a: 1 &#125; // 隐藏的 classId 被创建</span><br><span class=\"line\">obj.b = 3</span><br><span class=\"line\"></span><br><span class=\"line\">const obj2 = &#123; b: 3 &#125; // 另一个隐藏的 classId 被创建</span><br><span class=\"line\">obj2.a = 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 这样会更好</span><br><span class=\"line\">const obj = &#123; a: 1 &#125; // 隐藏的 classId 被创建</span><br><span class=\"line\">obj.b = 3</span><br><span class=\"line\"></span><br><span class=\"line\">const obj2 = &#123; a: 1 &#125; // 隐藏类被复用</span><br><span class=\"line\">obj2.b = 3</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其它的优化建议\"><a href=\"#其它的优化建议\" class=\"headerlink\" title=\"其它的优化建议\"></a>其它的优化建议</h1><p>接下来我们看一下其它的 JavaScript 代码优化建议。</p>\n<h2 id=\"修正函数参数类型\"><a href=\"#修正函数参数类型\" class=\"headerlink\" title=\"修正函数参数类型\"></a>修正函数参数类型</h2><p>当参数被传进函数中时，保证参数的类型一致是很重要的。如果参数的类型不同，Turbofan 在尝试优化4次之后就会放弃。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x,y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2) // 单态</span><br><span class=\"line\">add(&apos;a&apos;, &apos;b&apos;) // 多态</span><br><span class=\"line\">add(true, false)</span><br><span class=\"line\">add(&#123;&#125;,&#123;&#125;)</span><br><span class=\"line\">add([],[]) // 复杂态 - 在这个阶段, 已经尝试了4+次, 不会再做优化了</span><br></pre></td></tr></table></figure>\n\n<p>另一个建议是保证在全局作用域下声明类：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 不要这样做</span><br><span class=\"line\">function createPoint(x, y) &#123;</span><br><span class=\"line\">  class Point &#123;</span><br><span class=\"line\">    constructor(x,y) &#123;</span><br><span class=\"line\">      this.x = x</span><br><span class=\"line\">      this.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 每次都会重新创建一个 point 对象</span><br><span class=\"line\">  return new Point(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function length(point) &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>希望大家学到了一些 V8 底层的知识，知道如何去编写更优的 JavaScript 代码。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<ul>\n<li>原文地址：<a href=\"https://alligator.io/js/v8-engine/\" target=\"_blank\" rel=\"noopener\">https://alligator.io/js/v8-engine/</a></li>\n<li>翻译：马雪琴</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>V8 是谷歌用于编译 JavaScript 的引擎，Firefox 同样也有一个，叫 SpiderMonkey，它和 V8 有一些不同，但总体颇为相似。我们将在本篇文章中讨论 V8。</p>\n</blockquote>\n<p>V8 引擎的一些基础点：</p>\n<ul>\n<li>用 C++ 语言实现，使用在 Chrome 浏览器和 Node.js 中（以及最新版的 Microsoft Edge）</li>\n<li>遵循 ECMA-262 标准</li></ul>","more":"<h1 id=\"JavaScript-旅程\"><a href=\"#JavaScript-旅程\" class=\"headerlink\" title=\"JavaScript 旅程\"></a>JavaScript 旅程</h1></li>\n</ul>\n<p>当我们把压缩、混淆以及做了各种处理的 JavaScript 放到 V8 引擎中解析时，到底发生了些什么？</p>\n<p>下图阐述了整个流程，接下来我们会对其中的每个步骤进行详细说明：<br><img src=\"https://img11.360buyimg.com/jdphoto/s873x468_jfs/t1/78957/13/13275/56500/5dad9422E1ab45cbb/0a9ecdcfb11ed007.jpg\" alt></p>\n<p>在本篇文章中，我们将探讨 JavaScript 代码是如何被解析的，以及如何最大程度的优化 JavaScript 的编译效率。V8 里的优化编译器（又名 Turbofan）拿到 JavaScript 代码之后，会将其转化成高效率的机器码，因此，我们能向其输入越多的代码，我们的应用就会越快。附注一点，Chrome 里的解释器称作 Ignition。</p>\n<h1 id=\"JavaScript-解析\"><a href=\"#JavaScript-解析\" class=\"headerlink\" title=\"JavaScript 解析\"></a>JavaScript 解析</h1><p>整个过程中的第一步是解析 JavaScript。首先探讨什么是解析。</p>\n<p>解析有两个阶段：</p>\n<ul>\n<li>Eager（全解析）- 立即解析所有的代码</li>\n<li>Lazy（预解析）- 按需做最少的解析，剩下的留到后面</li>\n</ul>\n<p>哪一种方式更好则需要根据实际情况来决定。</p>\n<p>下面来看一段代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 变量声明会被立即解析</span><br><span class=\"line\">const a = 1;</span><br><span class=\"line\">const b = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">// 目前不需要的暂时不解析</span><br><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// add 方法被执行到了，所以需要返回解析该方法</span><br><span class=\"line\">add(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>变量声明会被立即解析，函数则会被懒解析，但上述代码里紧接着就执行了 add(a, b)，说明 add 方法是马上就需要用到的，所以这种情况下，把 add 函数进行即时解析会更高效。</p>\n<p>为了让 add 方法被立即解析，我们可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 变量声明会被立即解析</span><br><span class=\"line\">const a = 1;</span><br><span class=\"line\">const b = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">// eager parse this too</span><br><span class=\"line\">var add = (function(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">// add 方法已经被解析过了，所以这段代码可以立即执行</span><br><span class=\"line\">add(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>这就是大多数模块被创建的过程。那么，立即解析会是高效 JavaScript 应用的最好方式吗？</p>\n<p>我们可以用 <a href=\"https://nolanlawson.github.io/test-optimize-js/\" target=\"_blank\" rel=\"noopener\">optimize-js</a> 这个工具对公共库代码进行完全的立即解析处理，比如对比较有名的 lodash 进行处理后，优化效果是很显著的：</p>\n<ul>\n<li>没有使用 optimize-js：11.86ms</li>\n<li>使用了 optimize-js：11.24ms</li>\n</ul>\n<p>必须声明的是，该结果是在 Chrome 浏览器中得到的，其它环境的结果则无法保证：</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s780x342_jfs/t1/75143/19/13407/57666/5dad9422E39e89ead/e7e04d5c564ce44a.jpg\" alt></p>\n<p>如果您需要优化应用，必须在所有的环境中进行测试。</p>\n<p>另一个解析相关的建议是不要让函数嵌套：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 糟糕的方式</span><br><span class=\"line\">function sumOfSquares(a, b) &#123;</span><br><span class=\"line\">  // 这里将被反复懒解析</span><br><span class=\"line\">  function square(num) &#123;</span><br><span class=\"line\">    return num * num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return square(a) + square(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function square(num) &#123;</span><br><span class=\"line\">  return num * num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 好的方式</span><br><span class=\"line\">function sumOfSquares(a, b) &#123;</span><br><span class=\"line\">  return square(a) + square(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sumOfSquares(a, b);</span><br></pre></td></tr></table></figure>\n\n<p>上述示例中，square 方法只被懒解析了一次。</p>\n<h1 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h1><p>Chrome 有时候会重写 JavaScript 代码，内联函数即是这样一种情况。</p>\n<p>下面是一个代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const square = (x) =&gt; &#123; return x * x &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const callFunction100Times = (func) =&gt; &#123;</span><br><span class=\"line\">  for(let i = 100; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    // func 参数会被调用100次</span><br><span class=\"line\">    func(2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callFunction100Times(square)</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会被 V8 引擎进行如下优化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const square = (x) =&gt; &#123; return x * x &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const callFunction100Times = (func) =&gt; &#123;</span><br><span class=\"line\">  for(let i = 100; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    // 函数被内联后就不会被持续调用了</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callFunction100Times(square)</span><br></pre></td></tr></table></figure>\n\n<p>从上面可以看出，V8 实际上会把 square 函数体内联，以消除调用函数的步骤。这对提高代码的性能是很有用处的。</p>\n<h1 id=\"内联函数问题\"><a href=\"#内联函数问题\" class=\"headerlink\" title=\"内联函数问题\"></a>内联函数问题</h1><p>上述方法存在一点问题，让我们看看下面这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const square = (x) =&gt; &#123; return x * x &#125;</span><br><span class=\"line\">const cube = (x) =&gt; &#123; return x * x * x &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const callFunction100Times = (func) =&gt; &#123;</span><br><span class=\"line\">  for(let i = 100; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    // 函数被内联后就不会被持续调用了</span><br><span class=\"line\">    func(2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callFunction100Times(square)</span><br><span class=\"line\">callFunction100Times(cube)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中先会调用 square 函数100次，紧接着又会调用 cube 函数100次。在调用 cube 之前，我们必须先对 callFunction100Times 进行反优化，因为我们已经内联了 square 函数。在这个例子中，square 函数似乎会比 cube 函数快，但实际上，因为反优化的这个步骤，使得整个执行过程变得更长了。</p>\n<h1 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h1><p>谈到对象，V8 引擎底层有个类型系统可以区分它们：</p>\n<h2 id=\"单态\"><a href=\"#单态\" class=\"headerlink\" title=\"单态\"></a>单态</h2><p>对象具有相同的键，这些键没有区别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单态示例</span><br><span class=\"line\">const person = &#123; name: &apos;John&apos; &#125;</span><br><span class=\"line\">const person2 = &#123; name: &apos;Paul&apos; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>对象有相似的结构，并存在一些细微的差别。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多态示例</span><br><span class=\"line\">const person = &#123; name: &apos;John&apos; &#125;</span><br><span class=\"line\">const person2 = &#123; name: &apos;Paul&apos;, age: 27 &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂态\"><a href=\"#复杂态\" class=\"headerlink\" title=\"复杂态\"></a>复杂态</h2><p>这两个对象完全不同，不能比较。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 复杂态示例</span><br><span class=\"line\">const person = &#123; name: &apos;John&apos; &#125;</span><br><span class=\"line\">const building = &#123; rooms: [&apos;cafe&apos;, &apos;meeting room A&apos;, &apos;meeting room B&apos;], doors: 27 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们了解了 V8 里的不同对象，接下来看看 V8 引擎是如何优化对象的。</p>\n<h2 id=\"隐藏类\"><a href=\"#隐藏类\" class=\"headerlink\" title=\"隐藏类\"></a>隐藏类</h2><p>隐藏类是 V8 区分对象的方式。</p>\n<p>让我们将这个过程分解一下。</p>\n<p>首先声明一个对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123; name: &apos;John&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>V8 会为这个对象声明一个 classId。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const objClassId = [&apos;name&apos;, 1]</span><br></pre></td></tr></table></figure>\n\n<p>然后对象会按如下方式被创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;...objClassId, &apos;John&apos;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后当我们获取对象里的 name 属性时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.name</span><br></pre></td></tr></table></figure>\n\n<p>V8 会做如下查找：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj[getProp(obj[0], name)]</span><br></pre></td></tr></table></figure>\n\n<p>这就是 V8 创建对象的过程，接下来看看如何优化对象以及重用 classId。</p>\n<h2 id=\"创建对象的建议\"><a href=\"#创建对象的建议\" class=\"headerlink\" title=\"创建对象的建议\"></a>创建对象的建议</h2><p>应该尽量将属性放在构造器中声明，以保证对象的结构不变，从而让 V8 可以优化对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x,y) &#123;</span><br><span class=\"line\">    this.x = x</span><br><span class=\"line\">    this.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const p1 = new Point(11, 22) // 隐藏的 classId 被创建</span><br><span class=\"line\">const p2 = new Point(33, 44)</span><br></pre></td></tr></table></figure>\n\n<p>应该保证属性的顺序不变，如下面这个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123; a: 1 &#125; // 隐藏的 classId 被创建</span><br><span class=\"line\">obj.b = 3</span><br><span class=\"line\"></span><br><span class=\"line\">const obj2 = &#123; b: 3 &#125; // 另一个隐藏的 classId 被创建</span><br><span class=\"line\">obj2.a = 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 这样会更好</span><br><span class=\"line\">const obj = &#123; a: 1 &#125; // 隐藏的 classId 被创建</span><br><span class=\"line\">obj.b = 3</span><br><span class=\"line\"></span><br><span class=\"line\">const obj2 = &#123; a: 1 &#125; // 隐藏类被复用</span><br><span class=\"line\">obj2.b = 3</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其它的优化建议\"><a href=\"#其它的优化建议\" class=\"headerlink\" title=\"其它的优化建议\"></a>其它的优化建议</h1><p>接下来我们看一下其它的 JavaScript 代码优化建议。</p>\n<h2 id=\"修正函数参数类型\"><a href=\"#修正函数参数类型\" class=\"headerlink\" title=\"修正函数参数类型\"></a>修正函数参数类型</h2><p>当参数被传进函数中时，保证参数的类型一致是很重要的。如果参数的类型不同，Turbofan 在尝试优化4次之后就会放弃。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x,y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2) // 单态</span><br><span class=\"line\">add(&apos;a&apos;, &apos;b&apos;) // 多态</span><br><span class=\"line\">add(true, false)</span><br><span class=\"line\">add(&#123;&#125;,&#123;&#125;)</span><br><span class=\"line\">add([],[]) // 复杂态 - 在这个阶段, 已经尝试了4+次, 不会再做优化了</span><br></pre></td></tr></table></figure>\n\n<p>另一个建议是保证在全局作用域下声明类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 不要这样做</span><br><span class=\"line\">function createPoint(x, y) &#123;</span><br><span class=\"line\">  class Point &#123;</span><br><span class=\"line\">    constructor(x,y) &#123;</span><br><span class=\"line\">      this.x = x</span><br><span class=\"line\">      this.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 每次都会重新创建一个 point 对象</span><br><span class=\"line\">  return new Point(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function length(point) &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>希望大家学到了一些 V8 底层的知识，知道如何去编写更优的 JavaScript 代码。</p>"},{"title":"手把手教你写一个AST解析器","date":"2019-10-17T04:07:18.000Z","cover":"https://img10.360buyimg.com/jdphoto/jfs/t1/60663/11/12316/608013/5d9c0c97E87cc646c/283a78ebaa056e47.png","thumbnail":"https://img10.360buyimg.com/jdphoto/jfs/t1/60663/11/12316/608013/5d9c0c97E87cc646c/283a78ebaa056e47.png","_content":"\n> 作者：深山蚂蚁\n\nAST 解析器工作中经常用到，Vue.js中的VNode就是如此！  \n其实如果有需要将 非结构化数据转 换成 结构化对象用 来分析、处理、渲染的场景，我们都可以用此思想做转换。\n\n## 如何解析成 AST ？\n\n我们知道 HTML 源码只是一个文本数据，尽管它里面包含复杂的含义和嵌套节点逻辑，但是对于浏览器，Babel 或者 Vue 来说，输入的就是一个长字符串，显然，纯粹的一个字符串是表示不出来啥含义，那么就需要转换成结构化的数据，能够清晰的表达每一节点是干嘛的。字符串的处理，自然而然就是强大的正则表达式了。 <!--more--> \n\n本文阐述 AST 解析器的实现方法和主要细节，简单易懂~~~~~~~~，总共解析器代码不过百行！\n\n## 目标\n\n本次目标，一步一步将如下 HTML 结构文档转换成 AST 抽象语法树\n```html\n<div class=\"classAttr\" data-type=\"dataType\" data-id=\"dataId\" style=\"color:red\">我是外层div\n    <span>我是内层span</span>\n</div>\n```\n结构比较简单，外层一个div,内层嵌套一个span，外层有class,data，stye等属性。  \n麻雀虽小，五脏俱全，基本包含我们经常用到的了。其中转换后的 AST 结构 有哪些属性，需要怎样的形式显示，都可以根据需要自己定义即可。   \n本次转换后的结构：  \n```js\n{\n    \"node\": \"root\",\n    \"child\": [{\n        \"node\": \"element\",\n        \"tag\": \"div\",\n        \"class\": \"classAttr\",\n        \"dataset\": {\n            \"type\": \"dataType\",\n            \"id\": \"dataId\"\n        },\n        \"attrs\": [{\n            \"name\": \"style\",\n            \"value\": \"color:red\"\n        }],\n        \"child\": [{\n            \"node\": \"text\",\n            \"text\": \"我是外层div\"\n        }, {\n            \"node\": \"element\",\n            \"tag\": \"span\",\n            \"dataset\": {},\n            \"attrs\": [],\n            \"child\": [{\n                \"node\": \"text\",\n                \"text\": \"我是内层span\"\n            }]\n        }]\n    }]\n}\n```\n不难发现，外层是根节点，然后内层用child一层一层标记子节点，有 attr 标记节点的属性，classStr 来标记 class 属性，data来标记 data- 属性，type 来标记节点类型，比如自定义的 data-type=\"title\" 等。   \n\n## 回顾正则表达式\n先来看几组简单的正则表达式：  \n\n- ^ 匹配一个输入或一行的开头，/^a/匹配\"ab\"，而不匹配\"ba\"\n- $ 匹配一个输入或一行的结尾，/a$/匹配\"ba\"，而不匹配\"ab\"\n- * 匹配前面元字符0次或多次，/ab*/将匹配a,ab,abb,abbb  \n- + 匹配前面元字符1次或多次，/ab+/将匹配ab,abb,但是不匹配a\n- [ab] 字符集匹配，匹配这个集合中的任一一个字符(或元字符)，/[ab]/将匹配a,b,ab\n- \\w 组成单词匹配，匹配字母，数字，下划线，等于[a-zA-Z0-9]\n\n## 匹配标签元素\n首先我们将如下的 HTML 字符串用正则表达式表示出来：    \n```html\n<div>我是一个div</div>\n```\n这个字符串用正则描述大致如下：  \n\n以 < 开头 跟着 div 字符，然后接着 > ，然后是中文 “我是一个 div”，再跟着 </ ，然后继续是元素 div 最后已 > 结尾。   \n\n1. <div>  \n\ndiv 是HTML的标签，我们知道HTML标签是已字母和下划线开头，包含字母、数字、下滑线、中划线、点号组成的，对应正则如下：  \n```js\nconst ncname = '[a-zA-Z_][\\w-.]*'\n```\n于是组合的正则表达式如下：  \n```js\n`<${ncname}>`\n```\n2. <div></div>  \n根据上面分析，很容易得出正则表达式为下：   \n```js\n`<${ncname}></${ncname}>`\n```\n3. <div>我是一个div</div>  \n\n标签内可以是任意字符，那么任意字符如何描述呢？   \n\\s 匹配一个空白字符\n\\S 匹配一个非空白字符\n\\w 是字母数字数字下划线   \n\\W 是非\\w的   \n同理还有\\d和\\D等。   \n我们通常采用\\s和\\S来描述任何字符（1、通用，2、规则简单，利于正则匹配）：   \n```js\n`<${ncname}>[\\s\\S]*</${ncname}>`\n```\n## 匹配标签属性\n\nHTML标签上的属性名称有哪些呢，常见的有class,id,style,data-属性，当然也可以用户随便定义。但是属性名称我们也需要遵循原则，通常是用字母、下划线、冒号开头(Vue的绑定属性用:开头，通常我们不会这么定义)的，然后包含字母数字下划线中划线冒号和点的，正则描述如下：  \n```js\nconst attrKey = /[a-zA-Z_:][-a-zA-Z0-9_:.]*/\n```\nHTML的属性的写法目前有以下几种：  \n1. class=\"title\"\n2. class='title'\n3. class=title\n\n```js\nconst attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)=(\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)/\n```\nattrKey 跟着 = ，然后跟着三种情况:  \n\n1. ” 开头 跟着多个不是 \" 的字符，然后跟着 ” 结尾\n2. ' 开头 跟着多个不是 ‘ 的字符，然后跟着 ' 结尾\n3. 不是（空格，”，’,=,<,>）的多个字符\n\n我们测试一下attr的正则   \n```JS\n\"class=abc\".match(attr);\n// output\n(6) [\"class=abc\", \"class\", \"abc\", undefined, undefined, \"abc\", index: 0, input: \"class=abc\", groups: undefined]\n\n\"class='abc'\".match(attr);\n// output\n(6) [\"class='abc'\", \"class\", \"'abc'\", undefined, \"abc\", undefined, index: 0, input: \"class='abc'\", groups: undefined]\n```\n我们发现，第二个带单引号的，匹配的结果是\"‘abc’\"，多了一个单引号‘，因此我们需要用到正则里面的非匹配获取（?:）了。  \n例子：  \n```js\n\"abcde\".match(/a(?:b)c(.*)/);   输出 [\"abcde\", \"de\", index: 0, input: \"abcde\"]\n```\n这里匹配到了b，但是在output的结果里面并没有b字符。   \n场景：正则需要匹配到存在b，但是输出结果中不需要有该匹配的字符。      \n于是我么增加空格和非匹配获取的属性匹配表达式如下：  \n```js\nconst attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+))/\n```\n = 两边可以增加零或多个空格，= 号右边的匹配括号使用非匹配获取，那么类似 = 号右侧的最外层大括号的获取匹配失效，而内层的括号获取匹配的是在双引号和单引号里面。效果如下：  \n\n ![正则](https://raw.githubusercontent.com/antiter/blogs/master/images/ast_1.png?raw=true)   \n\n 从图中我们清晰看到，匹配的结果的数组的第二位是属性名称，第三位如果有值就是双引号的，第四位如果有值就是单引号的，第五位如果有值就是没有引号的。\n\n## 匹配节点\n\n有了上面的标签匹配和属性匹配之后，那么将两者合起来就是如下：  \n\n```js\n/<[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)))*>[\\s\\S]*<\\/[a-zA-Z_][\\w\\-\\.]*>/\n```\n上述正则完整描述了一个节点，理解了签名的描述，现在看起来是不是很简答啦~\n\n## AST 解析实战\n\n有了前面的HTML节点的正则表达式的基础，我们现在开始解析上面的节点元素。   \n显然，HTML 节点拥有复杂的多层次的嵌套，我们无法用一个正则表达式就把 HTML 的结构都一次性的表述出来，因此我们需要一段一段处理。   \n我们将字符串分段处理，总共分成三段：  \n1. 标签的起始   \n2. 标签内的内容\n3. 标签的结束  \n\n于是将上述正则拆分：  \n```js\nconst DOM = /<[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)))*>[\\s\\S]*<\\/[a-zA-Z_][\\w\\-\\.]*>/;\n// 增加()分组输出\nconst startTag = /<([a-zA-Z_][\\w\\-\\.]*)((?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)))*)\\s*(\\/?)>/;\n\nconst endTag = /<\\/([a-zA-Z_][\\w\\-\\.]*)>/;\n\nconst attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+))/g\n\n// 其他的就是标签里面的内容了\n```\n不难发现，标签已 < 开头，为标签起始标识位置，已 </ 开头的为标签结束标识位置。  \n我们将 HTML 拼接成字符串形式，就是如下了。  \n```js\nlet html = '<div class=\"classAttr\" data-type=\"dataType\" data-id=\"dataId\" style=\"color:red\">我是外层div<span>我是内层span</span></div>';\n```\n我们开始一段一段处理上面的 html 字符串吧~  \n```js\nconst bufArray = [];\nconst results = {\n    node: 'root',\n    child: [],\n};\nlet chars;\nlet match;\nwhile (html&&last!=html){\n    last = html;\n    chars = true;// 是不是文本内容\n    // do something parse html\n}\n```\nbufArray: 用了存储未匹配完成的起始标签   \nresults: 定义一个开始的 AST 的节点。  \n我们再循环处理HTML的时候，如果已经处理的字符，则将其删除，这里判断 last!=html 如果处理一轮之后，html 还是等于 last，说明没有需要处理的了，结束循环。   \n\n首先判断是否是 </ 开头，如果是则说明是标签结尾标识\n```js\nif(html.indexOf(\"</\")==0){\n    match = html.match(endTag);\n    if(match){\n        chars = false;\n        html = html.substring(match[0].length);\n        match[0].replace(endTag, parseEndTag);\n    }\n}\n```\n已 </ 开头，且能匹配上实时截止标签的正则，则该 html 字符串内容要向后移动匹配到的长度，继续匹配剩下的。   \n这里使用了 replace 方法，parseEndTag 的参数就是\"()\"匹配的输出结果了，已经匹配到的字符再 parseEndTag 处理标签。  \n\n如果不是已 </ 开头的，则判断是否是 < 开头的，如果是说明是标签起始标识，同理，需要 substring 来剔除已经处理过的字符。  \n```js\nelse if(html.indexOf(\"<\")==0){\n    match = html.match(startTag);\n    if(match){\n        chars = false;\n        html = html.substring(match[0].length);\n        match[0].replace(startTag, parseStartTag);\n    }\n}\n```\n如果既不是起始标签，也不是截止标签，或者是不符合起始和截止标签的正则，我们统一当文本内容处理。 \n```js\nif(chars){\n    let index = html.indexOf('<');\n    let text;\n    if(index < 0){\n        text = html;\n        html = '';\n    }else{\n        text = html.substring(0,index);\n        html = html.substring(index);;\n    }\n    const node = {\n        node: 'text',\n        text,\n    };\n    pushChild(node);\n}\n```\n如果是文本节点，我们则加入文本节点到目标 AST 上，我们着手 pushChild 方法，bufArray 是匹配起始和截止标签的临时数组，存放还没有找到截止标签的起始标签内容。  \n\n```js\nfunction pushChild (node) {\n    if (bufArray.length === 0) {\n        results.child.push(node);\n    } else {\n        const parent = bufArray[bufArray.length - 1];\n        if (typeof parent.child == 'undefined') {\n            parent.child = [];\n        }\n        parent.child.push(node);\n    }\n}\n```\n如果没有 bufArray ，说明当前Node是一个新Node，不是上一个节点的嵌套子节点，则新push一个节点；否则 取最后一个bufArray的值，也就是最近的一个未匹配标签起始节点，将当前节点当做为最近节点的子节点。  \n```html\n<div><div></div></div>\n```\n显然，第一个 <\\/div> 截止节点，匹配这里的第二个起始节点 <div> ，即最后一个未匹配的节点。   \n\n在每一轮循环中，如果是符合预期，HTML字符串会越来越少，直到被处理完成。   \n\n接下来我们来处理  parseStartTag 方法，也是稍微复杂一点的方法。     \n\n```js\nfunction parseStartTag (tag, tagName, rest) {\n    tagName = tagName.toLowerCase();\n\n    const ds = {};\n    const attrs = [];\n    let unary = !!arguments[7];\n\n    const node = {\n        node: 'element',\n        tag:tagName\n    };\n    rest.replace(attr, function (match, name) {\n        const value = arguments[2] ? arguments[2] :\n            arguments[3] ? arguments[3] :\n                arguments[4] ? arguments[4] :'';\n        if(name&&name.indexOf('data-')==0){\n            ds[name.replace('data-',\"\")] = value;\n        }else{\n            if(name=='class'){\n                node.class = value;\n            }else{\n                attrs.push({\n                    name,\n                    value\n                });\n            }\n        }\n    });\n    node.dataset = ds;\n    node.attrs = attrs;\n    if (!unary){\n         bufArray.push(node);\n    }else{\n        pushChild(node);\n    }\n}\n```\n遇到起始标签，如果该起始标签不是一个结束标签(unary为true，如：<img />,如果本身是截止标签，那么直接处理完即可)，则将起始标签入栈，等待找到下一个匹配的截止标签。    \n起始标签除了标签名称外的属性内容，我们将 dataset 内容放在dataset字段，其他属性放在attrs   \n\n我们接下来看下处理截止标签   \n```js\nfunction parseEndTag (tag, tagName) {\n    let pos = 0;\n    for (pos = bufArray.length - 1; pos >= 0; pos--){\n        if (bufArray[pos].tag == tagName){ \n            break; \n        }\n    }\n    if (pos >= 0) {\n        pushChild(bufArray.pop());\n    }\n}\n```\n记录还未匹配到的起始标签的bufArray数组，从最后的数组位置开始查找，找到最近匹配的标签。  \n比如：  \n```html\n<div class=\"One\"><div class=\"Two\"></div></div>\n```\nclass One的标签先入栈，class Two的再入栈，然后遇到第一个<\\/div>，匹配的则是class Two的起始标签，然后再匹配的是class One的起始标签。\n\n到此，一个简单的 AST解析器已经完成了。  \n\n当然，本文是实现一个简单的 AST解析器，基本主逻辑已经包含，完整版参考如下：  \n\n[完整解析参考：vue-html-parse](https://github.com/vuejs/vue/blob/dev/src/compiler/parser/html-parser.js)\n\n\n本文的 AST解析器的完整代码如下：  \n\n[easy-ast](https://github.com/antiter/blogs/tree/master/code-mark/easy-ast.js)","source":"_posts/2019-10/手把手教你写一个AST解析器.md","raw":"---\ntitle: 手把手教你写一个AST解析器\ndate: 2019-10-17 12:07:18\ncover: https://img10.360buyimg.com/jdphoto/jfs/t1/60663/11/12316/608013/5d9c0c97E87cc646c/283a78ebaa056e47.png\nthumbnail: https://img10.360buyimg.com/jdphoto/jfs/t1/60663/11/12316/608013/5d9c0c97E87cc646c/283a78ebaa056e47.png\ncategories: Web前端\ntags: \n  - AST\n---\n\n> 作者：深山蚂蚁\n\nAST 解析器工作中经常用到，Vue.js中的VNode就是如此！  \n其实如果有需要将 非结构化数据转 换成 结构化对象用 来分析、处理、渲染的场景，我们都可以用此思想做转换。\n\n## 如何解析成 AST ？\n\n我们知道 HTML 源码只是一个文本数据，尽管它里面包含复杂的含义和嵌套节点逻辑，但是对于浏览器，Babel 或者 Vue 来说，输入的就是一个长字符串，显然，纯粹的一个字符串是表示不出来啥含义，那么就需要转换成结构化的数据，能够清晰的表达每一节点是干嘛的。字符串的处理，自然而然就是强大的正则表达式了。 <!--more--> \n\n本文阐述 AST 解析器的实现方法和主要细节，简单易懂~~~~~~~~，总共解析器代码不过百行！\n\n## 目标\n\n本次目标，一步一步将如下 HTML 结构文档转换成 AST 抽象语法树\n```html\n<div class=\"classAttr\" data-type=\"dataType\" data-id=\"dataId\" style=\"color:red\">我是外层div\n    <span>我是内层span</span>\n</div>\n```\n结构比较简单，外层一个div,内层嵌套一个span，外层有class,data，stye等属性。  \n麻雀虽小，五脏俱全，基本包含我们经常用到的了。其中转换后的 AST 结构 有哪些属性，需要怎样的形式显示，都可以根据需要自己定义即可。   \n本次转换后的结构：  \n```js\n{\n    \"node\": \"root\",\n    \"child\": [{\n        \"node\": \"element\",\n        \"tag\": \"div\",\n        \"class\": \"classAttr\",\n        \"dataset\": {\n            \"type\": \"dataType\",\n            \"id\": \"dataId\"\n        },\n        \"attrs\": [{\n            \"name\": \"style\",\n            \"value\": \"color:red\"\n        }],\n        \"child\": [{\n            \"node\": \"text\",\n            \"text\": \"我是外层div\"\n        }, {\n            \"node\": \"element\",\n            \"tag\": \"span\",\n            \"dataset\": {},\n            \"attrs\": [],\n            \"child\": [{\n                \"node\": \"text\",\n                \"text\": \"我是内层span\"\n            }]\n        }]\n    }]\n}\n```\n不难发现，外层是根节点，然后内层用child一层一层标记子节点，有 attr 标记节点的属性，classStr 来标记 class 属性，data来标记 data- 属性，type 来标记节点类型，比如自定义的 data-type=\"title\" 等。   \n\n## 回顾正则表达式\n先来看几组简单的正则表达式：  \n\n- ^ 匹配一个输入或一行的开头，/^a/匹配\"ab\"，而不匹配\"ba\"\n- $ 匹配一个输入或一行的结尾，/a$/匹配\"ba\"，而不匹配\"ab\"\n- * 匹配前面元字符0次或多次，/ab*/将匹配a,ab,abb,abbb  \n- + 匹配前面元字符1次或多次，/ab+/将匹配ab,abb,但是不匹配a\n- [ab] 字符集匹配，匹配这个集合中的任一一个字符(或元字符)，/[ab]/将匹配a,b,ab\n- \\w 组成单词匹配，匹配字母，数字，下划线，等于[a-zA-Z0-9]\n\n## 匹配标签元素\n首先我们将如下的 HTML 字符串用正则表达式表示出来：    \n```html\n<div>我是一个div</div>\n```\n这个字符串用正则描述大致如下：  \n\n以 < 开头 跟着 div 字符，然后接着 > ，然后是中文 “我是一个 div”，再跟着 </ ，然后继续是元素 div 最后已 > 结尾。   \n\n1. <div>  \n\ndiv 是HTML的标签，我们知道HTML标签是已字母和下划线开头，包含字母、数字、下滑线、中划线、点号组成的，对应正则如下：  \n```js\nconst ncname = '[a-zA-Z_][\\w-.]*'\n```\n于是组合的正则表达式如下：  \n```js\n`<${ncname}>`\n```\n2. <div></div>  \n根据上面分析，很容易得出正则表达式为下：   \n```js\n`<${ncname}></${ncname}>`\n```\n3. <div>我是一个div</div>  \n\n标签内可以是任意字符，那么任意字符如何描述呢？   \n\\s 匹配一个空白字符\n\\S 匹配一个非空白字符\n\\w 是字母数字数字下划线   \n\\W 是非\\w的   \n同理还有\\d和\\D等。   \n我们通常采用\\s和\\S来描述任何字符（1、通用，2、规则简单，利于正则匹配）：   \n```js\n`<${ncname}>[\\s\\S]*</${ncname}>`\n```\n## 匹配标签属性\n\nHTML标签上的属性名称有哪些呢，常见的有class,id,style,data-属性，当然也可以用户随便定义。但是属性名称我们也需要遵循原则，通常是用字母、下划线、冒号开头(Vue的绑定属性用:开头，通常我们不会这么定义)的，然后包含字母数字下划线中划线冒号和点的，正则描述如下：  \n```js\nconst attrKey = /[a-zA-Z_:][-a-zA-Z0-9_:.]*/\n```\nHTML的属性的写法目前有以下几种：  \n1. class=\"title\"\n2. class='title'\n3. class=title\n\n```js\nconst attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)=(\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)/\n```\nattrKey 跟着 = ，然后跟着三种情况:  \n\n1. ” 开头 跟着多个不是 \" 的字符，然后跟着 ” 结尾\n2. ' 开头 跟着多个不是 ‘ 的字符，然后跟着 ' 结尾\n3. 不是（空格，”，’,=,<,>）的多个字符\n\n我们测试一下attr的正则   \n```JS\n\"class=abc\".match(attr);\n// output\n(6) [\"class=abc\", \"class\", \"abc\", undefined, undefined, \"abc\", index: 0, input: \"class=abc\", groups: undefined]\n\n\"class='abc'\".match(attr);\n// output\n(6) [\"class='abc'\", \"class\", \"'abc'\", undefined, \"abc\", undefined, index: 0, input: \"class='abc'\", groups: undefined]\n```\n我们发现，第二个带单引号的，匹配的结果是\"‘abc’\"，多了一个单引号‘，因此我们需要用到正则里面的非匹配获取（?:）了。  \n例子：  \n```js\n\"abcde\".match(/a(?:b)c(.*)/);   输出 [\"abcde\", \"de\", index: 0, input: \"abcde\"]\n```\n这里匹配到了b，但是在output的结果里面并没有b字符。   \n场景：正则需要匹配到存在b，但是输出结果中不需要有该匹配的字符。      \n于是我么增加空格和非匹配获取的属性匹配表达式如下：  \n```js\nconst attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+))/\n```\n = 两边可以增加零或多个空格，= 号右边的匹配括号使用非匹配获取，那么类似 = 号右侧的最外层大括号的获取匹配失效，而内层的括号获取匹配的是在双引号和单引号里面。效果如下：  \n\n ![正则](https://raw.githubusercontent.com/antiter/blogs/master/images/ast_1.png?raw=true)   \n\n 从图中我们清晰看到，匹配的结果的数组的第二位是属性名称，第三位如果有值就是双引号的，第四位如果有值就是单引号的，第五位如果有值就是没有引号的。\n\n## 匹配节点\n\n有了上面的标签匹配和属性匹配之后，那么将两者合起来就是如下：  \n\n```js\n/<[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)))*>[\\s\\S]*<\\/[a-zA-Z_][\\w\\-\\.]*>/\n```\n上述正则完整描述了一个节点，理解了签名的描述，现在看起来是不是很简答啦~\n\n## AST 解析实战\n\n有了前面的HTML节点的正则表达式的基础，我们现在开始解析上面的节点元素。   \n显然，HTML 节点拥有复杂的多层次的嵌套，我们无法用一个正则表达式就把 HTML 的结构都一次性的表述出来，因此我们需要一段一段处理。   \n我们将字符串分段处理，总共分成三段：  \n1. 标签的起始   \n2. 标签内的内容\n3. 标签的结束  \n\n于是将上述正则拆分：  \n```js\nconst DOM = /<[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)))*>[\\s\\S]*<\\/[a-zA-Z_][\\w\\-\\.]*>/;\n// 增加()分组输出\nconst startTag = /<([a-zA-Z_][\\w\\-\\.]*)((?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+)))*)\\s*(\\/?)>/;\n\nconst endTag = /<\\/([a-zA-Z_][\\w\\-\\.]*)>/;\n\nconst attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=<>`]+))/g\n\n// 其他的就是标签里面的内容了\n```\n不难发现，标签已 < 开头，为标签起始标识位置，已 </ 开头的为标签结束标识位置。  \n我们将 HTML 拼接成字符串形式，就是如下了。  \n```js\nlet html = '<div class=\"classAttr\" data-type=\"dataType\" data-id=\"dataId\" style=\"color:red\">我是外层div<span>我是内层span</span></div>';\n```\n我们开始一段一段处理上面的 html 字符串吧~  \n```js\nconst bufArray = [];\nconst results = {\n    node: 'root',\n    child: [],\n};\nlet chars;\nlet match;\nwhile (html&&last!=html){\n    last = html;\n    chars = true;// 是不是文本内容\n    // do something parse html\n}\n```\nbufArray: 用了存储未匹配完成的起始标签   \nresults: 定义一个开始的 AST 的节点。  \n我们再循环处理HTML的时候，如果已经处理的字符，则将其删除，这里判断 last!=html 如果处理一轮之后，html 还是等于 last，说明没有需要处理的了，结束循环。   \n\n首先判断是否是 </ 开头，如果是则说明是标签结尾标识\n```js\nif(html.indexOf(\"</\")==0){\n    match = html.match(endTag);\n    if(match){\n        chars = false;\n        html = html.substring(match[0].length);\n        match[0].replace(endTag, parseEndTag);\n    }\n}\n```\n已 </ 开头，且能匹配上实时截止标签的正则，则该 html 字符串内容要向后移动匹配到的长度，继续匹配剩下的。   \n这里使用了 replace 方法，parseEndTag 的参数就是\"()\"匹配的输出结果了，已经匹配到的字符再 parseEndTag 处理标签。  \n\n如果不是已 </ 开头的，则判断是否是 < 开头的，如果是说明是标签起始标识，同理，需要 substring 来剔除已经处理过的字符。  \n```js\nelse if(html.indexOf(\"<\")==0){\n    match = html.match(startTag);\n    if(match){\n        chars = false;\n        html = html.substring(match[0].length);\n        match[0].replace(startTag, parseStartTag);\n    }\n}\n```\n如果既不是起始标签，也不是截止标签，或者是不符合起始和截止标签的正则，我们统一当文本内容处理。 \n```js\nif(chars){\n    let index = html.indexOf('<');\n    let text;\n    if(index < 0){\n        text = html;\n        html = '';\n    }else{\n        text = html.substring(0,index);\n        html = html.substring(index);;\n    }\n    const node = {\n        node: 'text',\n        text,\n    };\n    pushChild(node);\n}\n```\n如果是文本节点，我们则加入文本节点到目标 AST 上，我们着手 pushChild 方法，bufArray 是匹配起始和截止标签的临时数组，存放还没有找到截止标签的起始标签内容。  \n\n```js\nfunction pushChild (node) {\n    if (bufArray.length === 0) {\n        results.child.push(node);\n    } else {\n        const parent = bufArray[bufArray.length - 1];\n        if (typeof parent.child == 'undefined') {\n            parent.child = [];\n        }\n        parent.child.push(node);\n    }\n}\n```\n如果没有 bufArray ，说明当前Node是一个新Node，不是上一个节点的嵌套子节点，则新push一个节点；否则 取最后一个bufArray的值，也就是最近的一个未匹配标签起始节点，将当前节点当做为最近节点的子节点。  \n```html\n<div><div></div></div>\n```\n显然，第一个 <\\/div> 截止节点，匹配这里的第二个起始节点 <div> ，即最后一个未匹配的节点。   \n\n在每一轮循环中，如果是符合预期，HTML字符串会越来越少，直到被处理完成。   \n\n接下来我们来处理  parseStartTag 方法，也是稍微复杂一点的方法。     \n\n```js\nfunction parseStartTag (tag, tagName, rest) {\n    tagName = tagName.toLowerCase();\n\n    const ds = {};\n    const attrs = [];\n    let unary = !!arguments[7];\n\n    const node = {\n        node: 'element',\n        tag:tagName\n    };\n    rest.replace(attr, function (match, name) {\n        const value = arguments[2] ? arguments[2] :\n            arguments[3] ? arguments[3] :\n                arguments[4] ? arguments[4] :'';\n        if(name&&name.indexOf('data-')==0){\n            ds[name.replace('data-',\"\")] = value;\n        }else{\n            if(name=='class'){\n                node.class = value;\n            }else{\n                attrs.push({\n                    name,\n                    value\n                });\n            }\n        }\n    });\n    node.dataset = ds;\n    node.attrs = attrs;\n    if (!unary){\n         bufArray.push(node);\n    }else{\n        pushChild(node);\n    }\n}\n```\n遇到起始标签，如果该起始标签不是一个结束标签(unary为true，如：<img />,如果本身是截止标签，那么直接处理完即可)，则将起始标签入栈，等待找到下一个匹配的截止标签。    \n起始标签除了标签名称外的属性内容，我们将 dataset 内容放在dataset字段，其他属性放在attrs   \n\n我们接下来看下处理截止标签   \n```js\nfunction parseEndTag (tag, tagName) {\n    let pos = 0;\n    for (pos = bufArray.length - 1; pos >= 0; pos--){\n        if (bufArray[pos].tag == tagName){ \n            break; \n        }\n    }\n    if (pos >= 0) {\n        pushChild(bufArray.pop());\n    }\n}\n```\n记录还未匹配到的起始标签的bufArray数组，从最后的数组位置开始查找，找到最近匹配的标签。  \n比如：  \n```html\n<div class=\"One\"><div class=\"Two\"></div></div>\n```\nclass One的标签先入栈，class Two的再入栈，然后遇到第一个<\\/div>，匹配的则是class Two的起始标签，然后再匹配的是class One的起始标签。\n\n到此，一个简单的 AST解析器已经完成了。  \n\n当然，本文是实现一个简单的 AST解析器，基本主逻辑已经包含，完整版参考如下：  \n\n[完整解析参考：vue-html-parse](https://github.com/vuejs/vue/blob/dev/src/compiler/parser/html-parser.js)\n\n\n本文的 AST解析器的完整代码如下：  \n\n[easy-ast](https://github.com/antiter/blogs/tree/master/code-mark/easy-ast.js)","slug":"手把手教你写一个AST解析器","published":1,"updated":"2019-11-20T05:51:14.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflpx000fsoyx4l1dnusj","content":"<blockquote>\n<p>作者：深山蚂蚁</p>\n</blockquote>\n<p>AST 解析器工作中经常用到，Vue.js中的VNode就是如此！<br>其实如果有需要将 非结构化数据转 换成 结构化对象用 来分析、处理、渲染的场景，我们都可以用此思想做转换。</p>\n<h2 id=\"如何解析成-AST-？\"><a href=\"#如何解析成-AST-？\" class=\"headerlink\" title=\"如何解析成 AST ？\"></a>如何解析成 AST ？</h2><p>我们知道 HTML 源码只是一个文本数据，尽管它里面包含复杂的含义和嵌套节点逻辑，但是对于浏览器，Babel 或者 Vue 来说，输入的就是一个长字符串，显然，纯粹的一个字符串是表示不出来啥含义，那么就需要转换成结构化的数据，能够清晰的表达每一节点是干嘛的。字符串的处理，自然而然就是强大的正则表达式了。 <a id=\"more\"></a> </p>\n<p>本文阐述 AST 解析器的实现方法和主要细节，简单易懂<del>~</del>，总共解析器代码不过百行！</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>本次目标，一步一步将如下 HTML 结构文档转换成 AST 抽象语法树</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"classAttr\"</span> <span class=\"hljs-attr\">data-type</span>=<span class=\"hljs-string\">\"dataType\"</span> <span class=\"hljs-attr\">data-id</span>=<span class=\"hljs-string\">\"dataId\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color:red\"</span>&gt;</span>我是外层div</span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>我是内层span<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结构比较简单，外层一个div,内层嵌套一个span，外层有class,data，stye等属性。<br>麻雀虽小，五脏俱全，基本包含我们经常用到的了。其中转换后的 AST 结构 有哪些属性，需要怎样的形式显示，都可以根据需要自己定义即可。<br>本次转换后的结构：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"hljs-string\">\"node\"</span>: <span class=\"hljs-string\">\"root\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"child\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"hljs-string\">\"node\"</span>: <span class=\"hljs-string\">\"element\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"tag\"</span>: <span class=\"hljs-string\">\"div\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"class\"</span>: <span class=\"hljs-string\">\"classAttr\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"dataset\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"dataType\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"dataId\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"attrs\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"style\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"color:red\"</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        <span class=\"hljs-string\">\"child\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"hljs-string\">\"node\"</span>: <span class=\"hljs-string\">\"text\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"我是外层div\"</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            <span class=\"hljs-string\">\"node\"</span>: <span class=\"hljs-string\">\"element\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"tag\"</span>: <span class=\"hljs-string\">\"span\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"dataset\"</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"attrs\"</span>: [],</span><br><span class=\"line\">            <span class=\"hljs-string\">\"child\"</span>: [&#123;</span><br><span class=\"line\">                <span class=\"hljs-string\">\"node\"</span>: <span class=\"hljs-string\">\"text\"</span>,</span><br><span class=\"line\">                <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"我是内层span\"</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现，外层是根节点，然后内层用child一层一层标记子节点，有 attr 标记节点的属性，classStr 来标记 class 属性，data来标记 data- 属性，type 来标记节点类型，比如自定义的 data-type=”title” 等。   </p>\n<h2 id=\"回顾正则表达式\"><a href=\"#回顾正则表达式\" class=\"headerlink\" title=\"回顾正则表达式\"></a>回顾正则表达式</h2><p>先来看几组简单的正则表达式：  </p>\n<ul>\n<li>^ 匹配一个输入或一行的开头，/^a/匹配”ab”，而不匹配”ba”</li>\n<li>$ 匹配一个输入或一行的结尾，/a$/匹配”ba”，而不匹配”ab”</li>\n<li><ul>\n<li>匹配前面元字符0次或多次，/ab*/将匹配a,ab,abb,abbb  </li>\n</ul>\n</li>\n<li><ul>\n<li>匹配前面元字符1次或多次，/ab+/将匹配ab,abb,但是不匹配a</li>\n</ul>\n</li>\n<li>[ab] 字符集匹配，匹配这个集合中的任一一个字符(或元字符)，/[ab]/将匹配a,b,ab</li>\n<li>\\w 组成单词匹配，匹配字母，数字，下划线，等于[a-zA-Z0-9]</li>\n</ul>\n<h2 id=\"匹配标签元素\"><a href=\"#匹配标签元素\" class=\"headerlink\" title=\"匹配标签元素\"></a>匹配标签元素</h2><p>首先我们将如下的 HTML 字符串用正则表达式表示出来：    </p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>我是一个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个字符串用正则描述大致如下：  </p>\n<p>以 &lt; 开头 跟着 div 字符，然后接着 &gt; ，然后是中文 “我是一个 div”，再跟着 &lt;/ ，然后继续是元素 div 最后已 &gt; 结尾。   </p>\n<ol>\n<li><div>  \n\n</div></li>\n</ol>\n<p>div 是HTML的标签，我们知道HTML标签是已字母和下划线开头，包含字母、数字、下滑线、中划线、点号组成的，对应正则如下：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ncname = <span class=\"hljs-string\">'[a-zA-Z_][\\w-.]*'</span></span><br></pre></td></tr></table></figure>\n\n<p>于是组合的正则表达式如下：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">`&lt;<span class=\"hljs-subst\">$&#123;ncname&#125;</span>&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><div></div>  \n根据上面分析，很容易得出正则表达式为下：   \n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">`&lt;<span class=\"hljs-subst\">$&#123;ncname&#125;</span>&gt;&lt;/<span class=\"hljs-subst\">$&#123;ncname&#125;</span>&gt;`</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><div>我是一个div</div>  \n\n</li>\n</ol>\n<p>标签内可以是任意字符，那么任意字符如何描述呢？<br>\\s 匹配一个空白字符<br>\\S 匹配一个非空白字符<br>\\w 是字母数字数字下划线<br>\\W 是非\\w的<br>同理还有\\d和\\D等。<br>我们通常采用\\s和\\S来描述任何字符（1、通用，2、规则简单，利于正则匹配）：   </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">`&lt;<span class=\"hljs-subst\">$&#123;ncname&#125;</span>&gt;[\\s\\S]*&lt;/<span class=\"hljs-subst\">$&#123;ncname&#125;</span>&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匹配标签属性\"><a href=\"#匹配标签属性\" class=\"headerlink\" title=\"匹配标签属性\"></a>匹配标签属性</h2><p>HTML标签上的属性名称有哪些呢，常见的有class,id,style,data-属性，当然也可以用户随便定义。但是属性名称我们也需要遵循原则，通常是用字母、下划线、冒号开头(Vue的绑定属性用:开头，通常我们不会这么定义)的，然后包含字母数字下划线中划线冒号和点的，正则描述如下：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> attrKey = <span class=\"hljs-regexp\">/[a-zA-Z_:][-a-zA-Z0-9_:.]*/</span></span><br></pre></td></tr></table></figure>\n\n<p>HTML的属性的写法目前有以下几种：  </p>\n<ol>\n<li>class=”title”</li>\n<li>class=’title’</li>\n<li>class=title</li>\n</ol>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> attr = <span class=\"hljs-regexp\">/([a-zA-Z_:][-a-zA-Z0-9_:.]*)=(\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)/</span></span><br></pre></td></tr></table></figure>\n\n<p>attrKey 跟着 = ，然后跟着三种情况:  </p>\n<ol>\n<li>” 开头 跟着多个不是 “ 的字符，然后跟着 ” 结尾</li>\n<li>‘ 开头 跟着多个不是 ‘ 的字符，然后跟着 ‘ 结尾</li>\n<li>不是（空格，”，’,=,&lt;,&gt;）的多个字符</li>\n</ol>\n<p>我们测试一下attr的正则   </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">\"class=abc\"</span>.match(attr);</span><br><span class=\"line\"><span class=\"hljs-comment\">// output</span></span><br><span class=\"line\">(<span class=\"hljs-number\">6</span>) [<span class=\"hljs-string\">\"class=abc\"</span>, <span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">input</span>: <span class=\"hljs-string\">\"class=abc\"</span>, <span class=\"hljs-attr\">groups</span>: <span class=\"hljs-literal\">undefined</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-string\">\"class='abc'\"</span>.match(attr);</span><br><span class=\"line\"><span class=\"hljs-comment\">// output</span></span><br><span class=\"line\">(<span class=\"hljs-number\">6</span>) [<span class=\"hljs-string\">\"class='abc'\"</span>, <span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"'abc'\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">input</span>: <span class=\"hljs-string\">\"class='abc'\"</span>, <span class=\"hljs-attr\">groups</span>: <span class=\"hljs-literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，第二个带单引号的，匹配的结果是”‘abc’”，多了一个单引号‘，因此我们需要用到正则里面的非匹配获取（?:）了。<br>例子：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">\"abcde\"</span>.match(<span class=\"hljs-regexp\">/a(?:b)c(.*)/</span>);   输出 [<span class=\"hljs-string\">\"abcde\"</span>, <span class=\"hljs-string\">\"de\"</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">input</span>: <span class=\"hljs-string\">\"abcde\"</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这里匹配到了b，但是在output的结果里面并没有b字符。<br>场景：正则需要匹配到存在b，但是输出结果中不需要有该匹配的字符。<br>于是我么增加空格和非匹配获取的属性匹配表达式如下：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> attr = <span class=\"hljs-regexp\">/([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+))/</span></span><br></pre></td></tr></table></figure>\n\n<p> = 两边可以增加零或多个空格，= 号右边的匹配括号使用非匹配获取，那么类似 = 号右侧的最外层大括号的获取匹配失效，而内层的括号获取匹配的是在双引号和单引号里面。效果如下：  </p>\n<p> <img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/ast_1.png?raw=true\" alt=\"正则\">   </p>\n<p> 从图中我们清晰看到，匹配的结果的数组的第二位是属性名称，第三位如果有值就是双引号的，第四位如果有值就是单引号的，第五位如果有值就是没有引号的。</p>\n<h2 id=\"匹配节点\"><a href=\"#匹配节点\" class=\"headerlink\" title=\"匹配节点\"></a>匹配节点</h2><p>有了上面的标签匹配和属性匹配之后，那么将两者合起来就是如下：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)))*&gt;[\\s\\S]*&lt;\\/[a-zA-Z_][\\w\\-\\.]*&gt;/</span><br></pre></td></tr></table></figure>\n\n<p>上述正则完整描述了一个节点，理解了签名的描述，现在看起来是不是很简答啦~</p>\n<h2 id=\"AST-解析实战\"><a href=\"#AST-解析实战\" class=\"headerlink\" title=\"AST 解析实战\"></a>AST 解析实战</h2><p>有了前面的HTML节点的正则表达式的基础，我们现在开始解析上面的节点元素。<br>显然，HTML 节点拥有复杂的多层次的嵌套，我们无法用一个正则表达式就把 HTML 的结构都一次性的表述出来，因此我们需要一段一段处理。<br>我们将字符串分段处理，总共分成三段：  </p>\n<ol>\n<li>标签的起始   </li>\n<li>标签内的内容</li>\n<li>标签的结束  </li>\n</ol>\n<p>于是将上述正则拆分：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> DOM = <span class=\"hljs-regexp\">/&lt;[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)))*&gt;[\\s\\S]*&lt;\\/[a-zA-Z_][\\w\\-\\.]*&gt;/</span>;</span><br><span class=\"line\"><span class=\"hljs-comment\">// 增加()分组输出</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> startTag = <span class=\"hljs-regexp\">/&lt;([a-zA-Z_][\\w\\-\\.]*)((?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)))*)\\s*(\\/?)&gt;/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> endTag = <span class=\"hljs-regexp\">/&lt;\\/([a-zA-Z_][\\w\\-\\.]*)&gt;/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> attr = <span class=\"hljs-regexp\">/([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+))/g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 其他的就是标签里面的内容了</span></span><br></pre></td></tr></table></figure>\n\n<p>不难发现，标签已 &lt; 开头，为标签起始标识位置，已 &lt;/ 开头的为标签结束标识位置。<br>我们将 HTML 拼接成字符串形式，就是如下了。  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">'&lt;div class=\"classAttr\" data-type=\"dataType\" data-id=\"dataId\" style=\"color:red\"&gt;我是外层div&lt;span&gt;我是内层span&lt;/span&gt;&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们开始一段一段处理上面的 html 字符串吧~  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> bufArray = [];</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> results = &#123;</span><br><span class=\"line\">    node: <span class=\"hljs-string\">'root'</span>,</span><br><span class=\"line\">    child: [],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> chars;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> match;</span><br><span class=\"line\"><span class=\"hljs-keyword\">while</span> (html&amp;&amp;last!=html)&#123;</span><br><span class=\"line\">    last = html;</span><br><span class=\"line\">    chars = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">// 是不是文本内容</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// do something parse html</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>bufArray: 用了存储未匹配完成的起始标签<br>results: 定义一个开始的 AST 的节点。<br>我们再循环处理HTML的时候，如果已经处理的字符，则将其删除，这里判断 last!=html 如果处理一轮之后，html 还是等于 last，说明没有需要处理的了，结束循环。   </p>\n<p>首先判断是否是 &lt;/ 开头，如果是则说明是标签结尾标识</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span>(html.indexOf(<span class=\"hljs-string\">\"&lt;/\"</span>)==<span class=\"hljs-number\">0</span>)&#123;</span><br><span class=\"line\">    match = html.match(endTag);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(match)&#123;</span><br><span class=\"line\">        chars = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">        html = html.substring(match[<span class=\"hljs-number\">0</span>].length);</span><br><span class=\"line\">        match[<span class=\"hljs-number\">0</span>].replace(endTag, parseEndTag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已 &lt;/ 开头，且能匹配上实时截止标签的正则，则该 html 字符串内容要向后移动匹配到的长度，继续匹配剩下的。<br>这里使用了 replace 方法，parseEndTag 的参数就是”()”匹配的输出结果了，已经匹配到的字符再 parseEndTag 处理标签。  </p>\n<p>如果不是已 &lt;/ 开头的，则判断是否是 &lt; 开头的，如果是说明是标签起始标识，同理，需要 substring 来剔除已经处理过的字符。  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(html.indexOf(<span class=\"hljs-string\">\"&lt;\"</span>)==<span class=\"hljs-number\">0</span>)&#123;</span><br><span class=\"line\">    match = html.match(startTag);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(match)&#123;</span><br><span class=\"line\">        chars = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">        html = html.substring(match[<span class=\"hljs-number\">0</span>].length);</span><br><span class=\"line\">        match[<span class=\"hljs-number\">0</span>].replace(startTag, parseStartTag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果既不是起始标签，也不是截止标签，或者是不符合起始和截止标签的正则，我们统一当文本内容处理。 </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span>(chars)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> index = html.indexOf(<span class=\"hljs-string\">'&lt;'</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> text;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span>)&#123;</span><br><span class=\"line\">        text = html;</span><br><span class=\"line\">        html = <span class=\"hljs-string\">''</span>;</span><br><span class=\"line\">    &#125;<span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"line\">        text = html.substring(<span class=\"hljs-number\">0</span>,index);</span><br><span class=\"line\">        html = html.substring(index);;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> node = &#123;</span><br><span class=\"line\">        node: <span class=\"hljs-string\">'text'</span>,</span><br><span class=\"line\">        text,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    pushChild(node);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是文本节点，我们则加入文本节点到目标 AST 上，我们着手 pushChild 方法，bufArray 是匹配起始和截止标签的临时数组，存放还没有找到截止标签的起始标签内容。  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pushChild</span> (<span class=\"hljs-params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (bufArray.length === <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">        results.child.push(node);</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> parent = bufArray[bufArray.length - <span class=\"hljs-number\">1</span>];</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> parent.child == <span class=\"hljs-string\">'undefined'</span>) &#123;</span><br><span class=\"line\">            parent.child = [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parent.child.push(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果没有 bufArray ，说明当前Node是一个新Node，不是上一个节点的嵌套子节点，则新push一个节点；否则 取最后一个bufArray的值，也就是最近的一个未匹配标签起始节点，将当前节点当做为最近节点的子节点。  </p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>显然，第一个 &lt;/div&gt; 截止节点，匹配这里的第二个起始节点 <div> ，即最后一个未匹配的节点。   </div></p>\n<p>在每一轮循环中，如果是符合预期，HTML字符串会越来越少，直到被处理完成。   </p>\n<p>接下来我们来处理  parseStartTag 方法，也是稍微复杂一点的方法。     </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseStartTag</span> (<span class=\"hljs-params\">tag, tagName, rest</span>) </span>&#123;</span><br><span class=\"line\">    tagName = tagName.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> ds = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> attrs = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> unary = !!<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> node = &#123;</span><br><span class=\"line\">        node: <span class=\"hljs-string\">'element'</span>,</span><br><span class=\"line\">        tag:tagName</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    rest.replace(attr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">match, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">2</span>] ? <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">2</span>] :</span><br><span class=\"line\">            <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">3</span>] ? <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">3</span>] :</span><br><span class=\"line\">                <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">4</span>] ? <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">4</span>] :<span class=\"hljs-string\">''</span>;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span>(name&amp;&amp;name.indexOf(<span class=\"hljs-string\">'data-'</span>)==<span class=\"hljs-number\">0</span>)&#123;</span><br><span class=\"line\">            ds[name.replace(<span class=\"hljs-string\">'data-'</span>,<span class=\"hljs-string\">\"\"</span>)] = value;</span><br><span class=\"line\">        &#125;<span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"hljs-keyword\">if</span>(name==<span class=\"hljs-string\">'class'</span>)&#123;</span><br><span class=\"line\">                node.class = value;</span><br><span class=\"line\">            &#125;<span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"line\">                attrs.push(&#123;</span><br><span class=\"line\">                    name,</span><br><span class=\"line\">                    value</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    node.dataset = ds;</span><br><span class=\"line\">    node.attrs = attrs;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!unary)&#123;</span><br><span class=\"line\">         bufArray.push(node);</span><br><span class=\"line\">    &#125;<span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"line\">        pushChild(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遇到起始标签，如果该起始标签不是一个结束标签(unary为true，如：<img>,如果本身是截止标签，那么直接处理完即可)，则将起始标签入栈，等待找到下一个匹配的截止标签。<br>起始标签除了标签名称外的属性内容，我们将 dataset 内容放在dataset字段，其他属性放在attrs   </p>\n<p>我们接下来看下处理截止标签   </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseEndTag</span> (<span class=\"hljs-params\">tag, tagName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> pos = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (pos = bufArray.length - <span class=\"hljs-number\">1</span>; pos &gt;= <span class=\"hljs-number\">0</span>; pos--)&#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (bufArray[pos].tag == tagName)&#123; </span><br><span class=\"line\">            <span class=\"hljs-keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (pos &gt;= <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">        pushChild(bufArray.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>记录还未匹配到的起始标签的bufArray数组，从最后的数组位置开始查找，找到最近匹配的标签。<br>比如：  </p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"One\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"Two\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>class One的标签先入栈，class Two的再入栈，然后遇到第一个&lt;/div&gt;，匹配的则是class Two的起始标签，然后再匹配的是class One的起始标签。</p>\n<p>到此，一个简单的 AST解析器已经完成了。  </p>\n<p>当然，本文是实现一个简单的 AST解析器，基本主逻辑已经包含，完整版参考如下：  </p>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/compiler/parser/html-parser.js\" target=\"_blank\" rel=\"noopener\">完整解析参考：vue-html-parse</a></p>\n<p>本文的 AST解析器的完整代码如下：  </p>\n<p><a href=\"https://github.com/antiter/blogs/tree/master/code-mark/easy-ast.js\" target=\"_blank\" rel=\"noopener\">easy-ast</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：深山蚂蚁</p>\n</blockquote>\n<p>AST 解析器工作中经常用到，Vue.js中的VNode就是如此！<br>其实如果有需要将 非结构化数据转 换成 结构化对象用 来分析、处理、渲染的场景，我们都可以用此思想做转换。</p>\n<h2 id=\"如何解析成-AST-？\"><a href=\"#如何解析成-AST-？\" class=\"headerlink\" title=\"如何解析成 AST ？\"></a>如何解析成 AST ？</h2><p>我们知道 HTML 源码只是一个文本数据，尽管它里面包含复杂的含义和嵌套节点逻辑，但是对于浏览器，Babel 或者 Vue 来说，输入的就是一个长字符串，显然，纯粹的一个字符串是表示不出来啥含义，那么就需要转换成结构化的数据，能够清晰的表达每一节点是干嘛的。字符串的处理，自然而然就是强大的正则表达式了。</p>","more":"</p>\n<p>本文阐述 AST 解析器的实现方法和主要细节，简单易懂<del>~</del>，总共解析器代码不过百行！</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>本次目标，一步一步将如下 HTML 结构文档转换成 AST 抽象语法树</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"classAttr\"</span> <span class=\"attr\">data-type</span>=<span class=\"string\">\"dataType\"</span> <span class=\"attr\">data-id</span>=<span class=\"string\">\"dataId\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>我是外层div</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是内层span<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结构比较简单，外层一个div,内层嵌套一个span，外层有class,data，stye等属性。<br>麻雀虽小，五脏俱全，基本包含我们经常用到的了。其中转换后的 AST 结构 有哪些属性，需要怎样的形式显示，都可以根据需要自己定义即可。<br>本次转换后的结构：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"node\"</span>: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"child\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"string\">\"node\"</span>: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"tag\"</span>: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"class\"</span>: <span class=\"string\">\"classAttr\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dataset\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"dataType\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"id\"</span>: <span class=\"string\">\"dataId\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"attrs\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"style\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"value\"</span>: <span class=\"string\">\"color:red\"</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">        <span class=\"string\">\"child\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"string\">\"node\"</span>: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"text\"</span>: <span class=\"string\">\"我是外层div\"</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            <span class=\"string\">\"node\"</span>: <span class=\"string\">\"element\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"tag\"</span>: <span class=\"string\">\"span\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"dataset\"</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"string\">\"attrs\"</span>: [],</span><br><span class=\"line\">            <span class=\"string\">\"child\"</span>: [&#123;</span><br><span class=\"line\">                <span class=\"string\">\"node\"</span>: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"text\"</span>: <span class=\"string\">\"我是内层span\"</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不难发现，外层是根节点，然后内层用child一层一层标记子节点，有 attr 标记节点的属性，classStr 来标记 class 属性，data来标记 data- 属性，type 来标记节点类型，比如自定义的 data-type=”title” 等。   </p>\n<h2 id=\"回顾正则表达式\"><a href=\"#回顾正则表达式\" class=\"headerlink\" title=\"回顾正则表达式\"></a>回顾正则表达式</h2><p>先来看几组简单的正则表达式：  </p>\n<ul>\n<li>^ 匹配一个输入或一行的开头，/^a/匹配”ab”，而不匹配”ba”</li>\n<li>$ 匹配一个输入或一行的结尾，/a$/匹配”ba”，而不匹配”ab”</li>\n<li><ul>\n<li>匹配前面元字符0次或多次，/ab*/将匹配a,ab,abb,abbb  </li>\n</ul>\n</li>\n<li><ul>\n<li>匹配前面元字符1次或多次，/ab+/将匹配ab,abb,但是不匹配a</li>\n</ul>\n</li>\n<li>[ab] 字符集匹配，匹配这个集合中的任一一个字符(或元字符)，/[ab]/将匹配a,b,ab</li>\n<li>\\w 组成单词匹配，匹配字母，数字，下划线，等于[a-zA-Z0-9]</li>\n</ul>\n<h2 id=\"匹配标签元素\"><a href=\"#匹配标签元素\" class=\"headerlink\" title=\"匹配标签元素\"></a>匹配标签元素</h2><p>首先我们将如下的 HTML 字符串用正则表达式表示出来：    </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是一个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个字符串用正则描述大致如下：  </p>\n<p>以 &lt; 开头 跟着 div 字符，然后接着 &gt; ，然后是中文 “我是一个 div”，再跟着 &lt;/ ，然后继续是元素 div 最后已 &gt; 结尾。   </p>\n<ol>\n<li><div>  \n\n</div></li>\n</ol>\n<p>div 是HTML的标签，我们知道HTML标签是已字母和下划线开头，包含字母、数字、下滑线、中划线、点号组成的，对应正则如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ncname = <span class=\"string\">'[a-zA-Z_][\\w-.]*'</span></span><br></pre></td></tr></table></figure>\n\n<p>于是组合的正则表达式如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`&lt;<span class=\"subst\">$&#123;ncname&#125;</span>&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><div></div>  \n根据上面分析，很容易得出正则表达式为下：   \n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`&lt;<span class=\"subst\">$&#123;ncname&#125;</span>&gt;&lt;/<span class=\"subst\">$&#123;ncname&#125;</span>&gt;`</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><div>我是一个div</div>  \n\n</li>\n</ol>\n<p>标签内可以是任意字符，那么任意字符如何描述呢？<br>\\s 匹配一个空白字符<br>\\S 匹配一个非空白字符<br>\\w 是字母数字数字下划线<br>\\W 是非\\w的<br>同理还有\\d和\\D等。<br>我们通常采用\\s和\\S来描述任何字符（1、通用，2、规则简单，利于正则匹配）：   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`&lt;<span class=\"subst\">$&#123;ncname&#125;</span>&gt;[\\s\\S]*&lt;/<span class=\"subst\">$&#123;ncname&#125;</span>&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匹配标签属性\"><a href=\"#匹配标签属性\" class=\"headerlink\" title=\"匹配标签属性\"></a>匹配标签属性</h2><p>HTML标签上的属性名称有哪些呢，常见的有class,id,style,data-属性，当然也可以用户随便定义。但是属性名称我们也需要遵循原则，通常是用字母、下划线、冒号开头(Vue的绑定属性用:开头，通常我们不会这么定义)的，然后包含字母数字下划线中划线冒号和点的，正则描述如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> attrKey = <span class=\"regexp\">/[a-zA-Z_:][-a-zA-Z0-9_:.]*/</span></span><br></pre></td></tr></table></figure>\n\n<p>HTML的属性的写法目前有以下几种：  </p>\n<ol>\n<li>class=”title”</li>\n<li>class=’title’</li>\n<li>class=title</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> attr = <span class=\"regexp\">/([a-zA-Z_:][-a-zA-Z0-9_:.]*)=(\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)/</span></span><br></pre></td></tr></table></figure>\n\n<p>attrKey 跟着 = ，然后跟着三种情况:  </p>\n<ol>\n<li>” 开头 跟着多个不是 “ 的字符，然后跟着 ” 结尾</li>\n<li>‘ 开头 跟着多个不是 ‘ 的字符，然后跟着 ‘ 结尾</li>\n<li>不是（空格，”，’,=,&lt;,&gt;）的多个字符</li>\n</ol>\n<p>我们测试一下attr的正则   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"class=abc\"</span>.match(attr);</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">(<span class=\"number\">6</span>) [<span class=\"string\">\"class=abc\"</span>, <span class=\"string\">\"class\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"abc\"</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">\"class=abc\"</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"class='abc'\"</span>.match(attr);</span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\">(<span class=\"number\">6</span>) [<span class=\"string\">\"class='abc'\"</span>, <span class=\"string\">\"class\"</span>, <span class=\"string\">\"'abc'\"</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"abc\"</span>, <span class=\"literal\">undefined</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">\"class='abc'\"</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，第二个带单引号的，匹配的结果是”‘abc’”，多了一个单引号‘，因此我们需要用到正则里面的非匹配获取（?:）了。<br>例子：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"abcde\"</span>.match(<span class=\"regexp\">/a(?:b)c(.*)/</span>);   输出 [<span class=\"string\">\"abcde\"</span>, <span class=\"string\">\"de\"</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">\"abcde\"</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这里匹配到了b，但是在output的结果里面并没有b字符。<br>场景：正则需要匹配到存在b，但是输出结果中不需要有该匹配的字符。<br>于是我么增加空格和非匹配获取的属性匹配表达式如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> attr = <span class=\"regexp\">/([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+))/</span></span><br></pre></td></tr></table></figure>\n\n<p> = 两边可以增加零或多个空格，= 号右边的匹配括号使用非匹配获取，那么类似 = 号右侧的最外层大括号的获取匹配失效，而内层的括号获取匹配的是在双引号和单引号里面。效果如下：  </p>\n<p> <img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/ast_1.png?raw=true\" alt=\"正则\">   </p>\n<p> 从图中我们清晰看到，匹配的结果的数组的第二位是属性名称，第三位如果有值就是双引号的，第四位如果有值就是单引号的，第五位如果有值就是没有引号的。</p>\n<h2 id=\"匹配节点\"><a href=\"#匹配节点\" class=\"headerlink\" title=\"匹配节点\"></a>匹配节点</h2><p>有了上面的标签匹配和属性匹配之后，那么将两者合起来就是如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)))*&gt;[\\s\\S]*&lt;\\/[a-zA-Z_][\\w\\-\\.]*&gt;/</span><br></pre></td></tr></table></figure>\n\n<p>上述正则完整描述了一个节点，理解了签名的描述，现在看起来是不是很简答啦~</p>\n<h2 id=\"AST-解析实战\"><a href=\"#AST-解析实战\" class=\"headerlink\" title=\"AST 解析实战\"></a>AST 解析实战</h2><p>有了前面的HTML节点的正则表达式的基础，我们现在开始解析上面的节点元素。<br>显然，HTML 节点拥有复杂的多层次的嵌套，我们无法用一个正则表达式就把 HTML 的结构都一次性的表述出来，因此我们需要一段一段处理。<br>我们将字符串分段处理，总共分成三段：  </p>\n<ol>\n<li>标签的起始   </li>\n<li>标签内的内容</li>\n<li>标签的结束  </li>\n</ol>\n<p>于是将上述正则拆分：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DOM = <span class=\"regexp\">/&lt;[a-zA-Z_][\\w\\-\\.]*(?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)))*&gt;[\\s\\S]*&lt;\\/[a-zA-Z_][\\w\\-\\.]*&gt;/</span>;</span><br><span class=\"line\"><span class=\"comment\">// 增加()分组输出</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> startTag = <span class=\"regexp\">/&lt;([a-zA-Z_][\\w\\-\\.]*)((?:\\s+([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+)))*)\\s*(\\/?)&gt;/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> endTag = <span class=\"regexp\">/&lt;\\/([a-zA-Z_][\\w\\-\\.]*)&gt;/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> attr = <span class=\"regexp\">/([a-zA-Z_:][-a-zA-Z0-9_:.]*)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\\s\"'=&lt;&gt;`]+))/g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他的就是标签里面的内容了</span></span><br></pre></td></tr></table></figure>\n\n<p>不难发现，标签已 &lt; 开头，为标签起始标识位置，已 &lt;/ 开头的为标签结束标识位置。<br>我们将 HTML 拼接成字符串形式，就是如下了。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> html = <span class=\"string\">'&lt;div class=\"classAttr\" data-type=\"dataType\" data-id=\"dataId\" style=\"color:red\"&gt;我是外层div&lt;span&gt;我是内层span&lt;/span&gt;&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们开始一段一段处理上面的 html 字符串吧~  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bufArray = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = &#123;</span><br><span class=\"line\">    node: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">    child: [],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> chars;</span><br><span class=\"line\"><span class=\"keyword\">let</span> match;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (html&amp;&amp;last!=html)&#123;</span><br><span class=\"line\">    last = html;</span><br><span class=\"line\">    chars = <span class=\"literal\">true</span>;<span class=\"comment\">// 是不是文本内容</span></span><br><span class=\"line\">    <span class=\"comment\">// do something parse html</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>bufArray: 用了存储未匹配完成的起始标签<br>results: 定义一个开始的 AST 的节点。<br>我们再循环处理HTML的时候，如果已经处理的字符，则将其删除，这里判断 last!=html 如果处理一轮之后，html 还是等于 last，说明没有需要处理的了，结束循环。   </p>\n<p>首先判断是否是 &lt;/ 开头，如果是则说明是标签结尾标识</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(html.indexOf(<span class=\"string\">\"&lt;/\"</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    match = html.match(endTag);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(match)&#123;</span><br><span class=\"line\">        chars = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        html = html.substring(match[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">        match[<span class=\"number\">0</span>].replace(endTag, parseEndTag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已 &lt;/ 开头，且能匹配上实时截止标签的正则，则该 html 字符串内容要向后移动匹配到的长度，继续匹配剩下的。<br>这里使用了 replace 方法，parseEndTag 的参数就是”()”匹配的输出结果了，已经匹配到的字符再 parseEndTag 处理标签。  </p>\n<p>如果不是已 &lt;/ 开头的，则判断是否是 &lt; 开头的，如果是说明是标签起始标识，同理，需要 substring 来剔除已经处理过的字符。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(html.indexOf(<span class=\"string\">\"&lt;\"</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    match = html.match(startTag);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(match)&#123;</span><br><span class=\"line\">        chars = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        html = html.substring(match[<span class=\"number\">0</span>].length);</span><br><span class=\"line\">        match[<span class=\"number\">0</span>].replace(startTag, parseStartTag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果既不是起始标签，也不是截止标签，或者是不符合起始和截止标签的正则，我们统一当文本内容处理。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(chars)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = html.indexOf(<span class=\"string\">'&lt;'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        text = html;</span><br><span class=\"line\">        html = <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        text = html.substring(<span class=\"number\">0</span>,index);</span><br><span class=\"line\">        html = html.substring(index);;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">        node: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">        text,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    pushChild(node);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是文本节点，我们则加入文本节点到目标 AST 上，我们着手 pushChild 方法，bufArray 是匹配起始和截止标签的临时数组，存放还没有找到截止标签的起始标签内容。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushChild</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bufArray.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        results.child.push(node);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = bufArray[bufArray.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> parent.child == <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">            parent.child = [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parent.child.push(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果没有 bufArray ，说明当前Node是一个新Node，不是上一个节点的嵌套子节点，则新push一个节点；否则 取最后一个bufArray的值，也就是最近的一个未匹配标签起始节点，将当前节点当做为最近节点的子节点。  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>显然，第一个 &lt;/div&gt; 截止节点，匹配这里的第二个起始节点 <div> ，即最后一个未匹配的节点。   </div></p>\n<p>在每一轮循环中，如果是符合预期，HTML字符串会越来越少，直到被处理完成。   </p>\n<p>接下来我们来处理  parseStartTag 方法，也是稍微复杂一点的方法。     </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseStartTag</span> (<span class=\"params\">tag, tagName, rest</span>) </span>&#123;</span><br><span class=\"line\">    tagName = tagName.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ds = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attrs = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unary = !!<span class=\"built_in\">arguments</span>[<span class=\"number\">7</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">        node: <span class=\"string\">'element'</span>,</span><br><span class=\"line\">        tag:tagName</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    rest.replace(attr, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">match, name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] ? <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] :</span><br><span class=\"line\">            <span class=\"built_in\">arguments</span>[<span class=\"number\">3</span>] ? <span class=\"built_in\">arguments</span>[<span class=\"number\">3</span>] :</span><br><span class=\"line\">                <span class=\"built_in\">arguments</span>[<span class=\"number\">4</span>] ? <span class=\"built_in\">arguments</span>[<span class=\"number\">4</span>] :<span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name&amp;&amp;name.indexOf(<span class=\"string\">'data-'</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            ds[name.replace(<span class=\"string\">'data-'</span>,<span class=\"string\">\"\"</span>)] = value;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(name==<span class=\"string\">'class'</span>)&#123;</span><br><span class=\"line\">                node.class = value;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                attrs.push(&#123;</span><br><span class=\"line\">                    name,</span><br><span class=\"line\">                    value</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    node.dataset = ds;</span><br><span class=\"line\">    node.attrs = attrs;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!unary)&#123;</span><br><span class=\"line\">         bufArray.push(node);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        pushChild(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遇到起始标签，如果该起始标签不是一个结束标签(unary为true，如：<img>,如果本身是截止标签，那么直接处理完即可)，则将起始标签入栈，等待找到下一个匹配的截止标签。<br>起始标签除了标签名称外的属性内容，我们将 dataset 内容放在dataset字段，其他属性放在attrs   </p>\n<p>我们接下来看下处理截止标签   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseEndTag</span> (<span class=\"params\">tag, tagName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pos = bufArray.length - <span class=\"number\">1</span>; pos &gt;= <span class=\"number\">0</span>; pos--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bufArray[pos].tag == tagName)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pushChild(bufArray.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>记录还未匹配到的起始标签的bufArray数组，从最后的数组位置开始查找，找到最近匹配的标签。<br>比如：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"One\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"Two\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>class One的标签先入栈，class Two的再入栈，然后遇到第一个&lt;/div&gt;，匹配的则是class Two的起始标签，然后再匹配的是class One的起始标签。</p>\n<p>到此，一个简单的 AST解析器已经完成了。  </p>\n<p>当然，本文是实现一个简单的 AST解析器，基本主逻辑已经包含，完整版参考如下：  </p>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/compiler/parser/html-parser.js\" target=\"_blank\" rel=\"noopener\">完整解析参考：vue-html-parse</a></p>\n<p>本文的 AST解析器的完整代码如下：  </p>\n<p><a href=\"https://github.com/antiter/blogs/tree/master/code-mark/easy-ast.js\" target=\"_blank\" rel=\"noopener\">easy-ast</a></p>"},{"title":"你应该知道的折叠屏收集适配","date":"2019-11-08T01:47:23.000Z","cover":"https://img13.360buyimg.com/jdphoto/jfs/t1/67236/16/13910/50040/5db6935aE52080499/58fcd00de646750c.jpg","thumbnail":"https://img13.360buyimg.com/jdphoto/jfs/t1/67236/16/13910/50040/5db6935aE52080499/58fcd00de646750c.jpg","_content":"\n> 作者：龙朝忠\n\n> 随着三星Galaxy Fold和华为Mate X的发布，前端同学将面临一个新的任务：折叠屏的适。折叠屏虽距离普及可能还有很长一段路，大多数公司还未将折叠屏列入适配的范围，但是提前研究下折叠屏的适配还是极好的。\n\n## 折叠屏手机概况\n\n#### 华为Mate X\n\n![华为mate x](https://img11.360buyimg.com/jdphoto/jfs/t1/62800/15/13810/1427381/5db26de7E6d2a021d/c5d94e65daf376b9.gif)\n<!--more-->\n技术参数：（**由于手机还未正式上市，这里数据可能有出入**）\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/51962/12/15208/107474/5dc14886Eaf5f4872/26fc71c083d2e890.png)\n\n#### 三星Galaxy Fold\n\n<img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/53552/20/14274/403806/5db26f78Ea608c602/201f4291130487d0.gif\" alt=\"s\" style=\"zoom:150%;\" />\n\n技术参数\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/76691/39/14648/179277/5dc148c1E380361d2/35f3ece249bcb9b3.png)\n\n#### 柔派-FlexPai\n\n> 小厂手机，没啥知名都，资料较少\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/90005/16/708/430292/5db2738aE5b9ac3bb/ddb1b328a746e925.png)\n\n#### 微软 Surfaceduo\n\n> 最近新出，实际是双屏手机，暂无详细资料\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/58779/38/14194/1432612/5db26fefEd885816f/112b5caa81b0ab92.gif)\n\n从目前推出的这几款折叠手机可以看出：折叠手机从折叠到展开，屏幕的变化类似于iphone到ipad。\n\n<img src=\"https://img10.360buyimg.com/jdphoto/jfs/t1/105759/38/709/1251161/5db2b4e1E43ced5a5/2207ef9326d56876.png\" style=\"zoom:50%;\" />\n\n\n\n## 折叠屏适配的本质\n\n 当老板下令说：“我们的产品要适配折叠屏”，不同的人会有不同的反应：\n\n##### 产品和设计\n\n- 如何更好的利用空间？\n- 如何展示才不会使页面显得空洞？\n- 展开和折叠时分别怎么展示？\n- 展开后如何过渡？\n- ……\n\n##### 开发同学\n\n- 页面是否显示正常？\n- 是否按产品和设计的预期显示？\n- ……\n\n**因此对于我们开发同学来说，对折叠屏的适配首先要确定一个预期，即要先确定好交互和设计，才能评估工作。因此“折叠屏的适配先是一个设计问题，然后才是一个适配问题”。**\n\n\n\n目前情况下，产品和设计可能还不会考虑适配折叠屏的问题，那是否表示开发同学暂时无事可做呢？不尽然。\n\n从以上折叠屏手机的情况来看，折叠屏手机的适配其实就是一个响应式设计的问题，而响应式设计有一个比较公认9条的基本原则，折叠屏手机的适配至少要满足这9项基本原则。\n\n## 响应式设计9项基本原则\n\n### 1.**响应式设计** **vs** 适应式设计\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/84361/34/13783/96383/5db2c625E65da5ebb/8b66fa8296ca8165.gif)\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/61831/29/13810/317882/5db2dba5Ebf35e448/67f9af0171fcdb70.png)\n\n响应式:响应式是流布局，它会自动适应屏幕大小，不管是什么设备。尺寸按比例设置，自动随浏览器尺寸变化而变化；简单只有一套代码；\n\n适应式：自适应则采取多个不同的布局设计，多个屏幕的尺寸，使用哪个布局取决于屏幕类型。自适应作品用屏幕尺寸来决定用哪套布局。复杂，要根据市面上设备区分；\n\n这两种设计方式彼此相辅相成，所以说也没有对错之分。具体情况要依内容而定。\n\n\n\n### 2.内容流\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/99034/18/697/32512/5db2c63eE2fae7f81/50a6b34ccf5446af.gif)\n\n随着屏幕尺寸越来越小，内容所占的垂直空间也越来越多，也就是说，内容会向下方延伸，这就叫做内容流。\n\n这点对前端指导意义是：对于内容不固定情况，高度不要固定写死，写死高度就要考虑溢出情况，文本溢出、图片按比例缩放。\n\n\n\n### 3.相对单位\n\n![](https://img20.360buyimg.com/jdphoto/jfs/t1/74519/18/13944/117800/5db2c796E2a2c85e4/ab723c859b31d729.gif)\n\n为了适应不同屏幕尺寸和不同使用场景，使用绝对单位容易出现问题 。常见的相对单位有em、rem、ch、ex、vw、vh、vmax、vmin。\n\n### 4.断点\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/82878/19/13760/149378/5db2c67bE936b32b9/a2d015ac3bca17bc.gif)断点可以看做是临界点，比如屏幕宽度小于这个宽度时显示一个样式，大于这个宽度时显示另一样式。常见的断点落地方案就是媒体查询，如：\n\n~~~  css\n@media (min-width:800px) and (max-width:1800px)\n~~~\n\n### 5.最大和最小值\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/62790/28/13962/112310/5db2c693Ea776ff93/eb7808659bde85c8.gif)\n\n有时候内容占满整个屏幕宽度（例如在移动设备上）是好事，但如果相同的内容在电视屏幕上也撑得满满的，就不太合理了。因为强行铺满，根据前面的内容流原则，可能会导致页面显示异常的大。这就是为什么要有最大/最小值。例如，如果宽度为100%，最大宽度1000px，那么内容就会以不超过1000px的宽度填充屏幕。\n\n注意：Max-width和min-widht要设置合理，不能太大也不能太小。\n\n如京东首页和优酷首页就遵循了这个原则：\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/69445/31/13836/704824/5db64736E2c13260a/e2723708f84ad716.png)\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/89286/22/925/851310/5db647a3Eb72b3d3d/82788db6dea0cf0c.png)\n\n### 6.嵌套对象\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/98399/9/736/103793/5db2c6aaEe0f66e8a/3dd4871fc6056bd6.gif)\n\n这是一种化零为整的思想，当多个元素位置是相对的时候，对每个元素采取响应式布局处理或许比较麻烦，这时候可以将这些元素用一个元素包裹起来，这样实现会更加明了和整洁。 \n\n\n\n### 7.移动优先还是台式桌面优先\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/80418/21/13781/259959/5db2c82dEd6fa7323/6e13a286387a6ada.gif)\n\n这表示适配的起点，是先按手机做然后适配台式机？还是先按台式机做然后适配手机？\n\n使用哪种根据实际情况决定，无所谓好坏，对于折叠屏适配来说肯定是手机优先。\n\n### 8.web字体vs系统字体\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/57624/12/14206/21435/5db2c6beE23a6d498/54df6e0d093c8782.gif)\n\n想让自己的网站拥有炫酷的Futura或Didot效果吗？那就是用web字体吧。尽管web字体看起来很炫酷，但你要记住，这些字体都需要用户下载，字越多，用户加载页面的时间也就越长。另一方面，系统字体加载速度则快得多（前提是用户本机就有），但太过普通。\n\n### 9.位图vs矢量图\n\n![](https://img13.360buyimg.com/jdphoto/jfs/t1/92120/39/724/77151/5db2c6d7Ebb4e8b04/9fb03cbc7f47054f.gif)\n\n你的图标是否有很多细节，并且应用了很多华丽的效果？如果是，那就用位图。如果不是，考虑使用矢量图。如果是位图，使用jpg、png或gif。矢量图则最好使用SVG或图标字体。其各有利弊。但你要时刻牢记图标尺寸——未经过优化的图片不能传到网上。另一方面，矢量图通常比较小，不过部分比较老的浏览器可能不支持矢量图。还有，如果图标有很多曲线，那有可能会比位图还大，所以要明智取舍。\n\n## 折叠屏常见适配问题\n\n前面讲到折叠屏的适配，首先是一个设计问题，然后才是一个适配问题。这里我们这里讨论的是违背以上9项基本原则的情况。以下案例基于三星Galaxy Fold测试。\n\n####  违背“最大值和最小值“原则\n\n- 未设置合适的max-width\n\n  ![](https://img13.360buyimg.com/jdphoto/jfs/t1/48423/3/14389/810162/5db65213E8f0806ec/c7a7dcb03435aba7.png)\n\n  由于设置的max-width较小，在Galaxy Fold展开态下，页面两侧有空隙。\n\n- 子元素超出max-width规定范围\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/45707/35/14259/1510549/5db65702Eb40972ec/187e7f15fbdb2cb6.png)\n\n#### 违背”相对单位“原则\n\n![](https://img10.360buyimg.com/jdphoto/jfs/t1/57868/24/14545/979921/5db6581fE731c8b3f/f84b5fd026f70127.png)\n\n这里”看相似“按钮使用px设置尺寸，在一般手机上看上去正常，但是在折叠屏手机上就会显的很小。采用rem设置尺寸后就显示正常了。\n\n##  对折叠屏的一些畅想\n\n- 折叠的方式会越来越多，屏幕会越来越宽\n\n  如LG最新申请的一项专利显示，其可能正在研发一款三折手机，将来手机的尺寸可能会更加接近笔记本电脑显示器尺寸。或许像热门美剧《西部世界》中展示的手持折叠电脑在不远的将来就会实现。\n\n  ![](https://img20.360buyimg.com/jdphoto/jfs/t1/104402/19/873/719933/5db65a41Edfc1e3fb/1358938433b7611b.png)\n\n  \n\n- 前端交互的方式会更加丰富\n\n   如：“折”手机这个动作可以算作一个事件（需系统支持提供），如果权限设置合理，可以用来区分人机，不用再看花眼选图片了；半折”分屏，实现双屏联动。\n\n  目前来说”折“这个事件虽然没有，然是要识别用户是有有做折叠和展开动作，可以通过监听resize事件来代替。\n\n- 屏幕变宽带来的新的体验  \n\n  比如说，在折叠屏展开状态的模式下，你将可以一边看直播，一遍看相关产品，二者相互不影响。\n\n  ![](https://img20.360buyimg.com/jdphoto/jfs/t1/46339/39/14413/1733848/5db65ec4Ea3f0a1f8/34159b2a5d12bd7b.gif)\n\n  图片类应用一是可以放的更大，看的细节更多，二是能实现在折叠屏展开状态下一侧看预览，一侧显示完整图片，跟方便我们浏览图片。\n\n  ![](https://img13.360buyimg.com/jdphoto/jfs/t1/95492/28/910/1187212/5db66071Eaf66e62c/dddf1f8c73ff2ff5.png)\n\n  随着屏幕的变大，一个窗口下可能放下多个任务，同时运行多个APP。\n\n   ![](https://img12.360buyimg.com/jdphoto/jfs/t1/45620/5/14431/664558/5db66144E3b7b7533/afccbe055f4f5d59.png)\n\n参考：\n\n> https://blog.froont.com/9-basic-principles-of-responsive-web-design/","source":"_posts/2019-11/你应该知道的折叠屏收集适配.md","raw":"---\ntitle: 你应该知道的折叠屏收集适配\ndate: 2019-11-08 09:47:23\ntags:\n\t- 折叠屏适配\n\t- 设计原则\ncover:  https://img13.360buyimg.com/jdphoto/jfs/t1/67236/16/13910/50040/5db6935aE52080499/58fcd00de646750c.jpg\nthumbnail: https://img13.360buyimg.com/jdphoto/jfs/t1/67236/16/13910/50040/5db6935aE52080499/58fcd00de646750c.jpg\ncategories: Web前端\n---\n\n> 作者：龙朝忠\n\n> 随着三星Galaxy Fold和华为Mate X的发布，前端同学将面临一个新的任务：折叠屏的适。折叠屏虽距离普及可能还有很长一段路，大多数公司还未将折叠屏列入适配的范围，但是提前研究下折叠屏的适配还是极好的。\n\n## 折叠屏手机概况\n\n#### 华为Mate X\n\n![华为mate x](https://img11.360buyimg.com/jdphoto/jfs/t1/62800/15/13810/1427381/5db26de7E6d2a021d/c5d94e65daf376b9.gif)\n<!--more-->\n技术参数：（**由于手机还未正式上市，这里数据可能有出入**）\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/51962/12/15208/107474/5dc14886Eaf5f4872/26fc71c083d2e890.png)\n\n#### 三星Galaxy Fold\n\n<img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/53552/20/14274/403806/5db26f78Ea608c602/201f4291130487d0.gif\" alt=\"s\" style=\"zoom:150%;\" />\n\n技术参数\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/76691/39/14648/179277/5dc148c1E380361d2/35f3ece249bcb9b3.png)\n\n#### 柔派-FlexPai\n\n> 小厂手机，没啥知名都，资料较少\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/90005/16/708/430292/5db2738aE5b9ac3bb/ddb1b328a746e925.png)\n\n#### 微软 Surfaceduo\n\n> 最近新出，实际是双屏手机，暂无详细资料\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/58779/38/14194/1432612/5db26fefEd885816f/112b5caa81b0ab92.gif)\n\n从目前推出的这几款折叠手机可以看出：折叠手机从折叠到展开，屏幕的变化类似于iphone到ipad。\n\n<img src=\"https://img10.360buyimg.com/jdphoto/jfs/t1/105759/38/709/1251161/5db2b4e1E43ced5a5/2207ef9326d56876.png\" style=\"zoom:50%;\" />\n\n\n\n## 折叠屏适配的本质\n\n 当老板下令说：“我们的产品要适配折叠屏”，不同的人会有不同的反应：\n\n##### 产品和设计\n\n- 如何更好的利用空间？\n- 如何展示才不会使页面显得空洞？\n- 展开和折叠时分别怎么展示？\n- 展开后如何过渡？\n- ……\n\n##### 开发同学\n\n- 页面是否显示正常？\n- 是否按产品和设计的预期显示？\n- ……\n\n**因此对于我们开发同学来说，对折叠屏的适配首先要确定一个预期，即要先确定好交互和设计，才能评估工作。因此“折叠屏的适配先是一个设计问题，然后才是一个适配问题”。**\n\n\n\n目前情况下，产品和设计可能还不会考虑适配折叠屏的问题，那是否表示开发同学暂时无事可做呢？不尽然。\n\n从以上折叠屏手机的情况来看，折叠屏手机的适配其实就是一个响应式设计的问题，而响应式设计有一个比较公认9条的基本原则，折叠屏手机的适配至少要满足这9项基本原则。\n\n## 响应式设计9项基本原则\n\n### 1.**响应式设计** **vs** 适应式设计\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/84361/34/13783/96383/5db2c625E65da5ebb/8b66fa8296ca8165.gif)\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/61831/29/13810/317882/5db2dba5Ebf35e448/67f9af0171fcdb70.png)\n\n响应式:响应式是流布局，它会自动适应屏幕大小，不管是什么设备。尺寸按比例设置，自动随浏览器尺寸变化而变化；简单只有一套代码；\n\n适应式：自适应则采取多个不同的布局设计，多个屏幕的尺寸，使用哪个布局取决于屏幕类型。自适应作品用屏幕尺寸来决定用哪套布局。复杂，要根据市面上设备区分；\n\n这两种设计方式彼此相辅相成，所以说也没有对错之分。具体情况要依内容而定。\n\n\n\n### 2.内容流\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/99034/18/697/32512/5db2c63eE2fae7f81/50a6b34ccf5446af.gif)\n\n随着屏幕尺寸越来越小，内容所占的垂直空间也越来越多，也就是说，内容会向下方延伸，这就叫做内容流。\n\n这点对前端指导意义是：对于内容不固定情况，高度不要固定写死，写死高度就要考虑溢出情况，文本溢出、图片按比例缩放。\n\n\n\n### 3.相对单位\n\n![](https://img20.360buyimg.com/jdphoto/jfs/t1/74519/18/13944/117800/5db2c796E2a2c85e4/ab723c859b31d729.gif)\n\n为了适应不同屏幕尺寸和不同使用场景，使用绝对单位容易出现问题 。常见的相对单位有em、rem、ch、ex、vw、vh、vmax、vmin。\n\n### 4.断点\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/82878/19/13760/149378/5db2c67bE936b32b9/a2d015ac3bca17bc.gif)断点可以看做是临界点，比如屏幕宽度小于这个宽度时显示一个样式，大于这个宽度时显示另一样式。常见的断点落地方案就是媒体查询，如：\n\n~~~  css\n@media (min-width:800px) and (max-width:1800px)\n~~~\n\n### 5.最大和最小值\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/62790/28/13962/112310/5db2c693Ea776ff93/eb7808659bde85c8.gif)\n\n有时候内容占满整个屏幕宽度（例如在移动设备上）是好事，但如果相同的内容在电视屏幕上也撑得满满的，就不太合理了。因为强行铺满，根据前面的内容流原则，可能会导致页面显示异常的大。这就是为什么要有最大/最小值。例如，如果宽度为100%，最大宽度1000px，那么内容就会以不超过1000px的宽度填充屏幕。\n\n注意：Max-width和min-widht要设置合理，不能太大也不能太小。\n\n如京东首页和优酷首页就遵循了这个原则：\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/69445/31/13836/704824/5db64736E2c13260a/e2723708f84ad716.png)\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/89286/22/925/851310/5db647a3Eb72b3d3d/82788db6dea0cf0c.png)\n\n### 6.嵌套对象\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/98399/9/736/103793/5db2c6aaEe0f66e8a/3dd4871fc6056bd6.gif)\n\n这是一种化零为整的思想，当多个元素位置是相对的时候，对每个元素采取响应式布局处理或许比较麻烦，这时候可以将这些元素用一个元素包裹起来，这样实现会更加明了和整洁。 \n\n\n\n### 7.移动优先还是台式桌面优先\n\n![](https://img30.360buyimg.com/jdphoto/jfs/t1/80418/21/13781/259959/5db2c82dEd6fa7323/6e13a286387a6ada.gif)\n\n这表示适配的起点，是先按手机做然后适配台式机？还是先按台式机做然后适配手机？\n\n使用哪种根据实际情况决定，无所谓好坏，对于折叠屏适配来说肯定是手机优先。\n\n### 8.web字体vs系统字体\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/57624/12/14206/21435/5db2c6beE23a6d498/54df6e0d093c8782.gif)\n\n想让自己的网站拥有炫酷的Futura或Didot效果吗？那就是用web字体吧。尽管web字体看起来很炫酷，但你要记住，这些字体都需要用户下载，字越多，用户加载页面的时间也就越长。另一方面，系统字体加载速度则快得多（前提是用户本机就有），但太过普通。\n\n### 9.位图vs矢量图\n\n![](https://img13.360buyimg.com/jdphoto/jfs/t1/92120/39/724/77151/5db2c6d7Ebb4e8b04/9fb03cbc7f47054f.gif)\n\n你的图标是否有很多细节，并且应用了很多华丽的效果？如果是，那就用位图。如果不是，考虑使用矢量图。如果是位图，使用jpg、png或gif。矢量图则最好使用SVG或图标字体。其各有利弊。但你要时刻牢记图标尺寸——未经过优化的图片不能传到网上。另一方面，矢量图通常比较小，不过部分比较老的浏览器可能不支持矢量图。还有，如果图标有很多曲线，那有可能会比位图还大，所以要明智取舍。\n\n## 折叠屏常见适配问题\n\n前面讲到折叠屏的适配，首先是一个设计问题，然后才是一个适配问题。这里我们这里讨论的是违背以上9项基本原则的情况。以下案例基于三星Galaxy Fold测试。\n\n####  违背“最大值和最小值“原则\n\n- 未设置合适的max-width\n\n  ![](https://img13.360buyimg.com/jdphoto/jfs/t1/48423/3/14389/810162/5db65213E8f0806ec/c7a7dcb03435aba7.png)\n\n  由于设置的max-width较小，在Galaxy Fold展开态下，页面两侧有空隙。\n\n- 子元素超出max-width规定范围\n\n![](https://img11.360buyimg.com/jdphoto/jfs/t1/45707/35/14259/1510549/5db65702Eb40972ec/187e7f15fbdb2cb6.png)\n\n#### 违背”相对单位“原则\n\n![](https://img10.360buyimg.com/jdphoto/jfs/t1/57868/24/14545/979921/5db6581fE731c8b3f/f84b5fd026f70127.png)\n\n这里”看相似“按钮使用px设置尺寸，在一般手机上看上去正常，但是在折叠屏手机上就会显的很小。采用rem设置尺寸后就显示正常了。\n\n##  对折叠屏的一些畅想\n\n- 折叠的方式会越来越多，屏幕会越来越宽\n\n  如LG最新申请的一项专利显示，其可能正在研发一款三折手机，将来手机的尺寸可能会更加接近笔记本电脑显示器尺寸。或许像热门美剧《西部世界》中展示的手持折叠电脑在不远的将来就会实现。\n\n  ![](https://img20.360buyimg.com/jdphoto/jfs/t1/104402/19/873/719933/5db65a41Edfc1e3fb/1358938433b7611b.png)\n\n  \n\n- 前端交互的方式会更加丰富\n\n   如：“折”手机这个动作可以算作一个事件（需系统支持提供），如果权限设置合理，可以用来区分人机，不用再看花眼选图片了；半折”分屏，实现双屏联动。\n\n  目前来说”折“这个事件虽然没有，然是要识别用户是有有做折叠和展开动作，可以通过监听resize事件来代替。\n\n- 屏幕变宽带来的新的体验  \n\n  比如说，在折叠屏展开状态的模式下，你将可以一边看直播，一遍看相关产品，二者相互不影响。\n\n  ![](https://img20.360buyimg.com/jdphoto/jfs/t1/46339/39/14413/1733848/5db65ec4Ea3f0a1f8/34159b2a5d12bd7b.gif)\n\n  图片类应用一是可以放的更大，看的细节更多，二是能实现在折叠屏展开状态下一侧看预览，一侧显示完整图片，跟方便我们浏览图片。\n\n  ![](https://img13.360buyimg.com/jdphoto/jfs/t1/95492/28/910/1187212/5db66071Eaf66e62c/dddf1f8c73ff2ff5.png)\n\n  随着屏幕的变大，一个窗口下可能放下多个任务，同时运行多个APP。\n\n   ![](https://img12.360buyimg.com/jdphoto/jfs/t1/45620/5/14431/664558/5db66144E3b7b7533/afccbe055f4f5d59.png)\n\n参考：\n\n> https://blog.froont.com/9-basic-principles-of-responsive-web-design/","slug":"你应该知道的折叠屏收集适配","published":1,"updated":"2019-11-20T05:46:19.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflq0000isoyx7pk6fu8m","content":"<blockquote>\n<p>作者：龙朝忠</p>\n</blockquote>\n<blockquote>\n<p>随着三星Galaxy Fold和华为Mate X的发布，前端同学将面临一个新的任务：折叠屏的适。折叠屏虽距离普及可能还有很长一段路，大多数公司还未将折叠屏列入适配的范围，但是提前研究下折叠屏的适配还是极好的。</p>\n</blockquote>\n<h2 id=\"折叠屏手机概况\"><a href=\"#折叠屏手机概况\" class=\"headerlink\" title=\"折叠屏手机概况\"></a>折叠屏手机概况</h2><h4 id=\"华为Mate-X\"><a href=\"#华为Mate-X\" class=\"headerlink\" title=\"华为Mate X\"></a>华为Mate X</h4><p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/62800/15/13810/1427381/5db26de7E6d2a021d/c5d94e65daf376b9.gif\" alt=\"华为mate x\"></p>\n<a id=\"more\"></a>\n<p>技术参数：（<strong>由于手机还未正式上市，这里数据可能有出入</strong>）</p>\n<p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/51962/12/15208/107474/5dc14886Eaf5f4872/26fc71c083d2e890.png\" alt></p>\n<h4 id=\"三星Galaxy-Fold\"><a href=\"#三星Galaxy-Fold\" class=\"headerlink\" title=\"三星Galaxy Fold\"></a>三星Galaxy Fold</h4><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/53552/20/14274/403806/5db26f78Ea608c602/201f4291130487d0.gif\" alt=\"s\" style=\"zoom:150%;\">\n\n<p>技术参数</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/76691/39/14648/179277/5dc148c1E380361d2/35f3ece249bcb9b3.png\" alt></p>\n<h4 id=\"柔派-FlexPai\"><a href=\"#柔派-FlexPai\" class=\"headerlink\" title=\"柔派-FlexPai\"></a>柔派-FlexPai</h4><blockquote>\n<p>小厂手机，没啥知名都，资料较少</p>\n</blockquote>\n<p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/90005/16/708/430292/5db2738aE5b9ac3bb/ddb1b328a746e925.png\" alt></p>\n<h4 id=\"微软-Surfaceduo\"><a href=\"#微软-Surfaceduo\" class=\"headerlink\" title=\"微软 Surfaceduo\"></a>微软 Surfaceduo</h4><blockquote>\n<p>最近新出，实际是双屏手机，暂无详细资料</p>\n</blockquote>\n<p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/58779/38/14194/1432612/5db26fefEd885816f/112b5caa81b0ab92.gif\" alt></p>\n<p>从目前推出的这几款折叠手机可以看出：折叠手机从折叠到展开，屏幕的变化类似于iphone到ipad。</p>\n<img src=\"https://img10.360buyimg.com/jdphoto/jfs/t1/105759/38/709/1251161/5db2b4e1E43ced5a5/2207ef9326d56876.png\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"折叠屏适配的本质\"><a href=\"#折叠屏适配的本质\" class=\"headerlink\" title=\"折叠屏适配的本质\"></a>折叠屏适配的本质</h2><p> 当老板下令说：“我们的产品要适配折叠屏”，不同的人会有不同的反应：</p>\n<h5 id=\"产品和设计\"><a href=\"#产品和设计\" class=\"headerlink\" title=\"产品和设计\"></a>产品和设计</h5><ul>\n<li>如何更好的利用空间？</li>\n<li>如何展示才不会使页面显得空洞？</li>\n<li>展开和折叠时分别怎么展示？</li>\n<li>展开后如何过渡？</li>\n<li>……</li>\n</ul>\n<h5 id=\"开发同学\"><a href=\"#开发同学\" class=\"headerlink\" title=\"开发同学\"></a>开发同学</h5><ul>\n<li>页面是否显示正常？</li>\n<li>是否按产品和设计的预期显示？</li>\n<li>……</li>\n</ul>\n<p><strong>因此对于我们开发同学来说，对折叠屏的适配首先要确定一个预期，即要先确定好交互和设计，才能评估工作。因此“折叠屏的适配先是一个设计问题，然后才是一个适配问题”。</strong></p>\n<p>目前情况下，产品和设计可能还不会考虑适配折叠屏的问题，那是否表示开发同学暂时无事可做呢？不尽然。</p>\n<p>从以上折叠屏手机的情况来看，折叠屏手机的适配其实就是一个响应式设计的问题，而响应式设计有一个比较公认9条的基本原则，折叠屏手机的适配至少要满足这9项基本原则。</p>\n<h2 id=\"响应式设计9项基本原则\"><a href=\"#响应式设计9项基本原则\" class=\"headerlink\" title=\"响应式设计9项基本原则\"></a>响应式设计9项基本原则</h2><h3 id=\"1-响应式设计-vs-适应式设计\"><a href=\"#1-响应式设计-vs-适应式设计\" class=\"headerlink\" title=\"1.响应式设计 vs 适应式设计\"></a>1.<strong>响应式设计</strong> <strong>vs</strong> 适应式设计</h3><p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/84361/34/13783/96383/5db2c625E65da5ebb/8b66fa8296ca8165.gif\" alt></p>\n<p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/61831/29/13810/317882/5db2dba5Ebf35e448/67f9af0171fcdb70.png\" alt></p>\n<p>响应式:响应式是流布局，它会自动适应屏幕大小，不管是什么设备。尺寸按比例设置，自动随浏览器尺寸变化而变化；简单只有一套代码；</p>\n<p>适应式：自适应则采取多个不同的布局设计，多个屏幕的尺寸，使用哪个布局取决于屏幕类型。自适应作品用屏幕尺寸来决定用哪套布局。复杂，要根据市面上设备区分；</p>\n<p>这两种设计方式彼此相辅相成，所以说也没有对错之分。具体情况要依内容而定。</p>\n<h3 id=\"2-内容流\"><a href=\"#2-内容流\" class=\"headerlink\" title=\"2.内容流\"></a>2.内容流</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/99034/18/697/32512/5db2c63eE2fae7f81/50a6b34ccf5446af.gif\" alt></p>\n<p>随着屏幕尺寸越来越小，内容所占的垂直空间也越来越多，也就是说，内容会向下方延伸，这就叫做内容流。</p>\n<p>这点对前端指导意义是：对于内容不固定情况，高度不要固定写死，写死高度就要考虑溢出情况，文本溢出、图片按比例缩放。</p>\n<h3 id=\"3-相对单位\"><a href=\"#3-相对单位\" class=\"headerlink\" title=\"3.相对单位\"></a>3.相对单位</h3><p><img src=\"https://img20.360buyimg.com/jdphoto/jfs/t1/74519/18/13944/117800/5db2c796E2a2c85e4/ab723c859b31d729.gif\" alt></p>\n<p>为了适应不同屏幕尺寸和不同使用场景，使用绝对单位容易出现问题 。常见的相对单位有em、rem、ch、ex、vw、vh、vmax、vmin。</p>\n<h3 id=\"4-断点\"><a href=\"#4-断点\" class=\"headerlink\" title=\"4.断点\"></a>4.断点</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/82878/19/13760/149378/5db2c67bE936b32b9/a2d015ac3bca17bc.gif\" alt>断点可以看做是临界点，比如屏幕宽度小于这个宽度时显示一个样式，大于这个宽度时显示另一样式。常见的断点落地方案就是媒体查询，如：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"hljs-keyword\">media</span> (min-width:<span class=\"hljs-number\">800px</span>) and (max-width:<span class=\"hljs-number\">1800px</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-最大和最小值\"><a href=\"#5-最大和最小值\" class=\"headerlink\" title=\"5.最大和最小值\"></a>5.最大和最小值</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/62790/28/13962/112310/5db2c693Ea776ff93/eb7808659bde85c8.gif\" alt></p>\n<p>有时候内容占满整个屏幕宽度（例如在移动设备上）是好事，但如果相同的内容在电视屏幕上也撑得满满的，就不太合理了。因为强行铺满，根据前面的内容流原则，可能会导致页面显示异常的大。这就是为什么要有最大/最小值。例如，如果宽度为100%，最大宽度1000px，那么内容就会以不超过1000px的宽度填充屏幕。</p>\n<p>注意：Max-width和min-widht要设置合理，不能太大也不能太小。</p>\n<p>如京东首页和优酷首页就遵循了这个原则：</p>\n<p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/69445/31/13836/704824/5db64736E2c13260a/e2723708f84ad716.png\" alt></p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/89286/22/925/851310/5db647a3Eb72b3d3d/82788db6dea0cf0c.png\" alt></p>\n<h3 id=\"6-嵌套对象\"><a href=\"#6-嵌套对象\" class=\"headerlink\" title=\"6.嵌套对象\"></a>6.嵌套对象</h3><p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/98399/9/736/103793/5db2c6aaEe0f66e8a/3dd4871fc6056bd6.gif\" alt></p>\n<p>这是一种化零为整的思想，当多个元素位置是相对的时候，对每个元素采取响应式布局处理或许比较麻烦，这时候可以将这些元素用一个元素包裹起来，这样实现会更加明了和整洁。 </p>\n<h3 id=\"7-移动优先还是台式桌面优先\"><a href=\"#7-移动优先还是台式桌面优先\" class=\"headerlink\" title=\"7.移动优先还是台式桌面优先\"></a>7.移动优先还是台式桌面优先</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/80418/21/13781/259959/5db2c82dEd6fa7323/6e13a286387a6ada.gif\" alt></p>\n<p>这表示适配的起点，是先按手机做然后适配台式机？还是先按台式机做然后适配手机？</p>\n<p>使用哪种根据实际情况决定，无所谓好坏，对于折叠屏适配来说肯定是手机优先。</p>\n<h3 id=\"8-web字体vs系统字体\"><a href=\"#8-web字体vs系统字体\" class=\"headerlink\" title=\"8.web字体vs系统字体\"></a>8.web字体vs系统字体</h3><p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/57624/12/14206/21435/5db2c6beE23a6d498/54df6e0d093c8782.gif\" alt></p>\n<p>想让自己的网站拥有炫酷的Futura或Didot效果吗？那就是用web字体吧。尽管web字体看起来很炫酷，但你要记住，这些字体都需要用户下载，字越多，用户加载页面的时间也就越长。另一方面，系统字体加载速度则快得多（前提是用户本机就有），但太过普通。</p>\n<h3 id=\"9-位图vs矢量图\"><a href=\"#9-位图vs矢量图\" class=\"headerlink\" title=\"9.位图vs矢量图\"></a>9.位图vs矢量图</h3><p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/92120/39/724/77151/5db2c6d7Ebb4e8b04/9fb03cbc7f47054f.gif\" alt></p>\n<p>你的图标是否有很多细节，并且应用了很多华丽的效果？如果是，那就用位图。如果不是，考虑使用矢量图。如果是位图，使用jpg、png或gif。矢量图则最好使用SVG或图标字体。其各有利弊。但你要时刻牢记图标尺寸——未经过优化的图片不能传到网上。另一方面，矢量图通常比较小，不过部分比较老的浏览器可能不支持矢量图。还有，如果图标有很多曲线，那有可能会比位图还大，所以要明智取舍。</p>\n<h2 id=\"折叠屏常见适配问题\"><a href=\"#折叠屏常见适配问题\" class=\"headerlink\" title=\"折叠屏常见适配问题\"></a>折叠屏常见适配问题</h2><p>前面讲到折叠屏的适配，首先是一个设计问题，然后才是一个适配问题。这里我们这里讨论的是违背以上9项基本原则的情况。以下案例基于三星Galaxy Fold测试。</p>\n<h4 id=\"违背“最大值和最小值“原则\"><a href=\"#违背“最大值和最小值“原则\" class=\"headerlink\" title=\"违背“最大值和最小值“原则\"></a>违背“最大值和最小值“原则</h4><ul>\n<li><p>未设置合适的max-width</p>\n<p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/48423/3/14389/810162/5db65213E8f0806ec/c7a7dcb03435aba7.png\" alt></p>\n<p>由于设置的max-width较小，在Galaxy Fold展开态下，页面两侧有空隙。</p>\n</li>\n<li><p>子元素超出max-width规定范围</p>\n</li>\n</ul>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/45707/35/14259/1510549/5db65702Eb40972ec/187e7f15fbdb2cb6.png\" alt></p>\n<h4 id=\"违背”相对单位“原则\"><a href=\"#违背”相对单位“原则\" class=\"headerlink\" title=\"违背”相对单位“原则\"></a>违背”相对单位“原则</h4><p><img src=\"https://img10.360buyimg.com/jdphoto/jfs/t1/57868/24/14545/979921/5db6581fE731c8b3f/f84b5fd026f70127.png\" alt></p>\n<p>这里”看相似“按钮使用px设置尺寸，在一般手机上看上去正常，但是在折叠屏手机上就会显的很小。采用rem设置尺寸后就显示正常了。</p>\n<h2 id=\"对折叠屏的一些畅想\"><a href=\"#对折叠屏的一些畅想\" class=\"headerlink\" title=\"对折叠屏的一些畅想\"></a>对折叠屏的一些畅想</h2><ul>\n<li><p>折叠的方式会越来越多，屏幕会越来越宽</p>\n<p>如LG最新申请的一项专利显示，其可能正在研发一款三折手机，将来手机的尺寸可能会更加接近笔记本电脑显示器尺寸。或许像热门美剧《西部世界》中展示的手持折叠电脑在不远的将来就会实现。</p>\n<p><img src=\"https://img20.360buyimg.com/jdphoto/jfs/t1/104402/19/873/719933/5db65a41Edfc1e3fb/1358938433b7611b.png\" alt></p>\n</li>\n</ul>\n<ul>\n<li><p>前端交互的方式会更加丰富</p>\n<p> 如：“折”手机这个动作可以算作一个事件（需系统支持提供），如果权限设置合理，可以用来区分人机，不用再看花眼选图片了；半折”分屏，实现双屏联动。</p>\n<p>目前来说”折“这个事件虽然没有，然是要识别用户是有有做折叠和展开动作，可以通过监听resize事件来代替。</p>\n</li>\n<li><p>屏幕变宽带来的新的体验  </p>\n<p>比如说，在折叠屏展开状态的模式下，你将可以一边看直播，一遍看相关产品，二者相互不影响。</p>\n<p><img src=\"https://img20.360buyimg.com/jdphoto/jfs/t1/46339/39/14413/1733848/5db65ec4Ea3f0a1f8/34159b2a5d12bd7b.gif\" alt></p>\n<p>图片类应用一是可以放的更大，看的细节更多，二是能实现在折叠屏展开状态下一侧看预览，一侧显示完整图片，跟方便我们浏览图片。</p>\n<p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/95492/28/910/1187212/5db66071Eaf66e62c/dddf1f8c73ff2ff5.png\" alt></p>\n<p>随着屏幕的变大，一个窗口下可能放下多个任务，同时运行多个APP。</p>\n<p> <img src=\"https://img12.360buyimg.com/jdphoto/jfs/t1/45620/5/14431/664558/5db66144E3b7b7533/afccbe055f4f5d59.png\" alt></p>\n</li>\n</ul>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://blog.froont.com/9-basic-principles-of-responsive-web-design/\" target=\"_blank\" rel=\"noopener\">https://blog.froont.com/9-basic-principles-of-responsive-web-design/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：龙朝忠</p>\n</blockquote>\n<blockquote>\n<p>随着三星Galaxy Fold和华为Mate X的发布，前端同学将面临一个新的任务：折叠屏的适。折叠屏虽距离普及可能还有很长一段路，大多数公司还未将折叠屏列入适配的范围，但是提前研究下折叠屏的适配还是极好的。</p>\n</blockquote>\n<h2 id=\"折叠屏手机概况\"><a href=\"#折叠屏手机概况\" class=\"headerlink\" title=\"折叠屏手机概况\"></a>折叠屏手机概况</h2><h4 id=\"华为Mate-X\"><a href=\"#华为Mate-X\" class=\"headerlink\" title=\"华为Mate X\"></a>华为Mate X</h4><p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/62800/15/13810/1427381/5db26de7E6d2a021d/c5d94e65daf376b9.gif\" alt=\"华为mate x\"></p>","more":"<p>技术参数：（<strong>由于手机还未正式上市，这里数据可能有出入</strong>）</p>\n<p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/51962/12/15208/107474/5dc14886Eaf5f4872/26fc71c083d2e890.png\" alt></p>\n<h4 id=\"三星Galaxy-Fold\"><a href=\"#三星Galaxy-Fold\" class=\"headerlink\" title=\"三星Galaxy Fold\"></a>三星Galaxy Fold</h4><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/53552/20/14274/403806/5db26f78Ea608c602/201f4291130487d0.gif\" alt=\"s\" style=\"zoom:150%;\">\n\n<p>技术参数</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/76691/39/14648/179277/5dc148c1E380361d2/35f3ece249bcb9b3.png\" alt></p>\n<h4 id=\"柔派-FlexPai\"><a href=\"#柔派-FlexPai\" class=\"headerlink\" title=\"柔派-FlexPai\"></a>柔派-FlexPai</h4><blockquote>\n<p>小厂手机，没啥知名都，资料较少</p>\n</blockquote>\n<p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/90005/16/708/430292/5db2738aE5b9ac3bb/ddb1b328a746e925.png\" alt></p>\n<h4 id=\"微软-Surfaceduo\"><a href=\"#微软-Surfaceduo\" class=\"headerlink\" title=\"微软 Surfaceduo\"></a>微软 Surfaceduo</h4><blockquote>\n<p>最近新出，实际是双屏手机，暂无详细资料</p>\n</blockquote>\n<p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/58779/38/14194/1432612/5db26fefEd885816f/112b5caa81b0ab92.gif\" alt></p>\n<p>从目前推出的这几款折叠手机可以看出：折叠手机从折叠到展开，屏幕的变化类似于iphone到ipad。</p>\n<img src=\"https://img10.360buyimg.com/jdphoto/jfs/t1/105759/38/709/1251161/5db2b4e1E43ced5a5/2207ef9326d56876.png\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"折叠屏适配的本质\"><a href=\"#折叠屏适配的本质\" class=\"headerlink\" title=\"折叠屏适配的本质\"></a>折叠屏适配的本质</h2><p> 当老板下令说：“我们的产品要适配折叠屏”，不同的人会有不同的反应：</p>\n<h5 id=\"产品和设计\"><a href=\"#产品和设计\" class=\"headerlink\" title=\"产品和设计\"></a>产品和设计</h5><ul>\n<li>如何更好的利用空间？</li>\n<li>如何展示才不会使页面显得空洞？</li>\n<li>展开和折叠时分别怎么展示？</li>\n<li>展开后如何过渡？</li>\n<li>……</li>\n</ul>\n<h5 id=\"开发同学\"><a href=\"#开发同学\" class=\"headerlink\" title=\"开发同学\"></a>开发同学</h5><ul>\n<li>页面是否显示正常？</li>\n<li>是否按产品和设计的预期显示？</li>\n<li>……</li>\n</ul>\n<p><strong>因此对于我们开发同学来说，对折叠屏的适配首先要确定一个预期，即要先确定好交互和设计，才能评估工作。因此“折叠屏的适配先是一个设计问题，然后才是一个适配问题”。</strong></p>\n<p>目前情况下，产品和设计可能还不会考虑适配折叠屏的问题，那是否表示开发同学暂时无事可做呢？不尽然。</p>\n<p>从以上折叠屏手机的情况来看，折叠屏手机的适配其实就是一个响应式设计的问题，而响应式设计有一个比较公认9条的基本原则，折叠屏手机的适配至少要满足这9项基本原则。</p>\n<h2 id=\"响应式设计9项基本原则\"><a href=\"#响应式设计9项基本原则\" class=\"headerlink\" title=\"响应式设计9项基本原则\"></a>响应式设计9项基本原则</h2><h3 id=\"1-响应式设计-vs-适应式设计\"><a href=\"#1-响应式设计-vs-适应式设计\" class=\"headerlink\" title=\"1.响应式设计 vs 适应式设计\"></a>1.<strong>响应式设计</strong> <strong>vs</strong> 适应式设计</h3><p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/84361/34/13783/96383/5db2c625E65da5ebb/8b66fa8296ca8165.gif\" alt></p>\n<p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/61831/29/13810/317882/5db2dba5Ebf35e448/67f9af0171fcdb70.png\" alt></p>\n<p>响应式:响应式是流布局，它会自动适应屏幕大小，不管是什么设备。尺寸按比例设置，自动随浏览器尺寸变化而变化；简单只有一套代码；</p>\n<p>适应式：自适应则采取多个不同的布局设计，多个屏幕的尺寸，使用哪个布局取决于屏幕类型。自适应作品用屏幕尺寸来决定用哪套布局。复杂，要根据市面上设备区分；</p>\n<p>这两种设计方式彼此相辅相成，所以说也没有对错之分。具体情况要依内容而定。</p>\n<h3 id=\"2-内容流\"><a href=\"#2-内容流\" class=\"headerlink\" title=\"2.内容流\"></a>2.内容流</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/99034/18/697/32512/5db2c63eE2fae7f81/50a6b34ccf5446af.gif\" alt></p>\n<p>随着屏幕尺寸越来越小，内容所占的垂直空间也越来越多，也就是说，内容会向下方延伸，这就叫做内容流。</p>\n<p>这点对前端指导意义是：对于内容不固定情况，高度不要固定写死，写死高度就要考虑溢出情况，文本溢出、图片按比例缩放。</p>\n<h3 id=\"3-相对单位\"><a href=\"#3-相对单位\" class=\"headerlink\" title=\"3.相对单位\"></a>3.相对单位</h3><p><img src=\"https://img20.360buyimg.com/jdphoto/jfs/t1/74519/18/13944/117800/5db2c796E2a2c85e4/ab723c859b31d729.gif\" alt></p>\n<p>为了适应不同屏幕尺寸和不同使用场景，使用绝对单位容易出现问题 。常见的相对单位有em、rem、ch、ex、vw、vh、vmax、vmin。</p>\n<h3 id=\"4-断点\"><a href=\"#4-断点\" class=\"headerlink\" title=\"4.断点\"></a>4.断点</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/82878/19/13760/149378/5db2c67bE936b32b9/a2d015ac3bca17bc.gif\" alt>断点可以看做是临界点，比如屏幕宽度小于这个宽度时显示一个样式，大于这个宽度时显示另一样式。常见的断点落地方案就是媒体查询，如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-width:<span class=\"number\">800px</span>) and (max-width:<span class=\"number\">1800px</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-最大和最小值\"><a href=\"#5-最大和最小值\" class=\"headerlink\" title=\"5.最大和最小值\"></a>5.最大和最小值</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/62790/28/13962/112310/5db2c693Ea776ff93/eb7808659bde85c8.gif\" alt></p>\n<p>有时候内容占满整个屏幕宽度（例如在移动设备上）是好事，但如果相同的内容在电视屏幕上也撑得满满的，就不太合理了。因为强行铺满，根据前面的内容流原则，可能会导致页面显示异常的大。这就是为什么要有最大/最小值。例如，如果宽度为100%，最大宽度1000px，那么内容就会以不超过1000px的宽度填充屏幕。</p>\n<p>注意：Max-width和min-widht要设置合理，不能太大也不能太小。</p>\n<p>如京东首页和优酷首页就遵循了这个原则：</p>\n<p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/69445/31/13836/704824/5db64736E2c13260a/e2723708f84ad716.png\" alt></p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/89286/22/925/851310/5db647a3Eb72b3d3d/82788db6dea0cf0c.png\" alt></p>\n<h3 id=\"6-嵌套对象\"><a href=\"#6-嵌套对象\" class=\"headerlink\" title=\"6.嵌套对象\"></a>6.嵌套对象</h3><p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/98399/9/736/103793/5db2c6aaEe0f66e8a/3dd4871fc6056bd6.gif\" alt></p>\n<p>这是一种化零为整的思想，当多个元素位置是相对的时候，对每个元素采取响应式布局处理或许比较麻烦，这时候可以将这些元素用一个元素包裹起来，这样实现会更加明了和整洁。 </p>\n<h3 id=\"7-移动优先还是台式桌面优先\"><a href=\"#7-移动优先还是台式桌面优先\" class=\"headerlink\" title=\"7.移动优先还是台式桌面优先\"></a>7.移动优先还是台式桌面优先</h3><p><img src=\"https://img30.360buyimg.com/jdphoto/jfs/t1/80418/21/13781/259959/5db2c82dEd6fa7323/6e13a286387a6ada.gif\" alt></p>\n<p>这表示适配的起点，是先按手机做然后适配台式机？还是先按台式机做然后适配手机？</p>\n<p>使用哪种根据实际情况决定，无所谓好坏，对于折叠屏适配来说肯定是手机优先。</p>\n<h3 id=\"8-web字体vs系统字体\"><a href=\"#8-web字体vs系统字体\" class=\"headerlink\" title=\"8.web字体vs系统字体\"></a>8.web字体vs系统字体</h3><p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/57624/12/14206/21435/5db2c6beE23a6d498/54df6e0d093c8782.gif\" alt></p>\n<p>想让自己的网站拥有炫酷的Futura或Didot效果吗？那就是用web字体吧。尽管web字体看起来很炫酷，但你要记住，这些字体都需要用户下载，字越多，用户加载页面的时间也就越长。另一方面，系统字体加载速度则快得多（前提是用户本机就有），但太过普通。</p>\n<h3 id=\"9-位图vs矢量图\"><a href=\"#9-位图vs矢量图\" class=\"headerlink\" title=\"9.位图vs矢量图\"></a>9.位图vs矢量图</h3><p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/92120/39/724/77151/5db2c6d7Ebb4e8b04/9fb03cbc7f47054f.gif\" alt></p>\n<p>你的图标是否有很多细节，并且应用了很多华丽的效果？如果是，那就用位图。如果不是，考虑使用矢量图。如果是位图，使用jpg、png或gif。矢量图则最好使用SVG或图标字体。其各有利弊。但你要时刻牢记图标尺寸——未经过优化的图片不能传到网上。另一方面，矢量图通常比较小，不过部分比较老的浏览器可能不支持矢量图。还有，如果图标有很多曲线，那有可能会比位图还大，所以要明智取舍。</p>\n<h2 id=\"折叠屏常见适配问题\"><a href=\"#折叠屏常见适配问题\" class=\"headerlink\" title=\"折叠屏常见适配问题\"></a>折叠屏常见适配问题</h2><p>前面讲到折叠屏的适配，首先是一个设计问题，然后才是一个适配问题。这里我们这里讨论的是违背以上9项基本原则的情况。以下案例基于三星Galaxy Fold测试。</p>\n<h4 id=\"违背“最大值和最小值“原则\"><a href=\"#违背“最大值和最小值“原则\" class=\"headerlink\" title=\"违背“最大值和最小值“原则\"></a>违背“最大值和最小值“原则</h4><ul>\n<li><p>未设置合适的max-width</p>\n<p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/48423/3/14389/810162/5db65213E8f0806ec/c7a7dcb03435aba7.png\" alt></p>\n<p>由于设置的max-width较小，在Galaxy Fold展开态下，页面两侧有空隙。</p>\n</li>\n<li><p>子元素超出max-width规定范围</p>\n</li>\n</ul>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/jfs/t1/45707/35/14259/1510549/5db65702Eb40972ec/187e7f15fbdb2cb6.png\" alt></p>\n<h4 id=\"违背”相对单位“原则\"><a href=\"#违背”相对单位“原则\" class=\"headerlink\" title=\"违背”相对单位“原则\"></a>违背”相对单位“原则</h4><p><img src=\"https://img10.360buyimg.com/jdphoto/jfs/t1/57868/24/14545/979921/5db6581fE731c8b3f/f84b5fd026f70127.png\" alt></p>\n<p>这里”看相似“按钮使用px设置尺寸，在一般手机上看上去正常，但是在折叠屏手机上就会显的很小。采用rem设置尺寸后就显示正常了。</p>\n<h2 id=\"对折叠屏的一些畅想\"><a href=\"#对折叠屏的一些畅想\" class=\"headerlink\" title=\"对折叠屏的一些畅想\"></a>对折叠屏的一些畅想</h2><ul>\n<li><p>折叠的方式会越来越多，屏幕会越来越宽</p>\n<p>如LG最新申请的一项专利显示，其可能正在研发一款三折手机，将来手机的尺寸可能会更加接近笔记本电脑显示器尺寸。或许像热门美剧《西部世界》中展示的手持折叠电脑在不远的将来就会实现。</p>\n<p><img src=\"https://img20.360buyimg.com/jdphoto/jfs/t1/104402/19/873/719933/5db65a41Edfc1e3fb/1358938433b7611b.png\" alt></p>\n</li>\n</ul>\n<ul>\n<li><p>前端交互的方式会更加丰富</p>\n<p> 如：“折”手机这个动作可以算作一个事件（需系统支持提供），如果权限设置合理，可以用来区分人机，不用再看花眼选图片了；半折”分屏，实现双屏联动。</p>\n<p>目前来说”折“这个事件虽然没有，然是要识别用户是有有做折叠和展开动作，可以通过监听resize事件来代替。</p>\n</li>\n<li><p>屏幕变宽带来的新的体验  </p>\n<p>比如说，在折叠屏展开状态的模式下，你将可以一边看直播，一遍看相关产品，二者相互不影响。</p>\n<p><img src=\"https://img20.360buyimg.com/jdphoto/jfs/t1/46339/39/14413/1733848/5db65ec4Ea3f0a1f8/34159b2a5d12bd7b.gif\" alt></p>\n<p>图片类应用一是可以放的更大，看的细节更多，二是能实现在折叠屏展开状态下一侧看预览，一侧显示完整图片，跟方便我们浏览图片。</p>\n<p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/95492/28/910/1187212/5db66071Eaf66e62c/dddf1f8c73ff2ff5.png\" alt></p>\n<p>随着屏幕的变大，一个窗口下可能放下多个任务，同时运行多个APP。</p>\n<p> <img src=\"https://img12.360buyimg.com/jdphoto/jfs/t1/45620/5/14431/664558/5db66144E3b7b7533/afccbe055f4f5d59.png\" alt></p>\n</li>\n</ul>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://blog.froont.com/9-basic-principles-of-responsive-web-design/\" target=\"_blank\" rel=\"noopener\">https://blog.froont.com/9-basic-principles-of-responsive-web-design/</a></p>\n</blockquote>"},{"title":"网页设计和开发中，关于字体的常识","date":"2019-10-23T09:07:46.000Z","cover":"https://storage.jd.com/blogimages/20191016_2030.png","thumbnail":"https://storage.jd.com/blogimages/20191016_2030.png","_content":"\n> 本文作者@千古壹号。\n\n## 前言\n\n我周围的码农当中，有很多是技术大神，却常常被字体这种简单的东西所困扰。\n\n这篇文章，我们来讲一讲关于字体的常识。这些常识所涉及到的问题，有很强的可操作性，都是在实际业务中真实遇到的，都是需要开发同学和产品经理、设计师不断重复沟通的。\n\n字体真的只是“**系统默认，无从解释**”这么简单吗？是产品被忽悠？还是开发在敷衍？二者之间的博弈究竟谁能胜出？学会本文，你就能胜出。\n<!--more-->\n## 字体分类\n\n常见的字体可以分为两类：**衬线体、无衬线体**。\n\n![](http://img.smyhvae.com/20191004_1101.png)\n\n**1、serif（衬线体）**：在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同。\n\n常见的衬线体有：\n\n- 宋体、楷体\n\n- Times New Roman\n\n**2、sans-serif（无衬线体）**：笔划粗细基本一致，只剩下主干，造型简明有力，起源也很晚。适用于标题、广告等，识别性高。\n\n常见的无衬线体有：\n\n- 黑体\n- Windows 平台默认的中文字体：微软雅黑（Microsoft Yahei）\n- Windows 平台默认的英文字体：Arial\n- Mac & iOS 平台默认的中文字体：苹方（PingFang SC）\n- Mac & iOS 平台默认的英文字体：San Francisco\n- Android 平台默认字体：Droid Sans\n\n\n**补充**：\n\n衬线体如今已经很少使用了，你所熟悉的“宋体”，也基本只能在纸质出版物中见到。而**非衬线体更符合现代审美**。\n\n所以，在这里温馨提示各位：**做PPT不要用宋体**。如果你不知道用什么字体，那就用系统的默认字体就好：Win 平台用微软雅黑、Mac 平台用苹方字体。\n\n如果你发现一名设计师，在做海报设计、或者制图的时候，使用了宋体，说明她一定是个外行。\n\n## 字体族\n\nCSS 中的字体族可以理解成是某一类字体。常见的字体族可以分为五类：\n\n- serif：衬线体。\n- sans-serif：无衬线体。\n- monospace：等宽字体。每一个字母所占的宽度是相同的。写代码的字体尽量用等宽字体。\n- cursive：手写字体。比如徐静蕾手写体。\n- fantasy：梦幻字体。比如一些艺术字。\n\n这五类字体族不代表某一个具体的字体，而是当你在 CSS 中指定字体族的时候，系统就有可能在字体族中找出一种字体来显示。\n\n![](http://img.smyhvae.com/20191004_1130.png)\n\n参考链接：[serif，sans-serif，monospace，cursive和fantasy](http://www.ayqy.net/blog/serif%EF%BC%8Csans-serif%EF%BC%8Cmonospace%EF%BC%8Ccursive%E5%92%8Cfantasy/)\n\n## 多字体 fallback 机制\n\n多字体 fallback 机制：当指定的字体找不到（或者某些文字不支持这个字体）时，那就接着往后找。比如：\n\n```css\n.div1{\n    font-family: \"PingFang SC\", \"Microsoft Yahei\", monospace;\n}\n\n```\n\n上方 CSS 代码的意思是：让指定标签元素中的文字，在 Mac & iOS 平台用苹方字体，在 Win 平台用微软雅黑字体，如果这两个字体都没有，就随便找一个等宽的字体进行渲染。\n\n**注意**：\n\n（1）写 CSS 代码时，字体族不需要带引号。\n\n（2）有些 Mac 用户会安装 Office 等软件，安装这些软件后，系统会顺带安装微软雅黑字体。此时，写 CSS 代码时，如果写成 `\"Microsoft Yahei\", \"PingFang SC\"`这种顺序，可能导致有些 Mac 用户用微软雅黑来显示字体。这么好看的苹方字体，你忍心割舍吗？\n\n## font-weight：字体的加粗属性\n\nfont-weight 字体加粗属性，是让前端同学最迷茫的属性。当你把做好的网页拿给产品经理验收时，网页一打开，产品经理首先关注到的就是字体的加粗问题，你信不信？下面这些话都是产品经理的口头禅，想必早已让你产生了幻听：\n\n- “这个字体怎么没有加粗？”\n\n- “这个字体是不是太粗了点？”\n\n- “为什么 iPhone 和 Android 手机上的文字粗细不一致？”\n\n想要明白这些疑惑，我们先来看看 `font-weight` 有哪些属性值。\n\n**font-weight 属性**：在设置字体是否加粗时，属性值既可以直接填写 100 至 900 这样的数字，也可以填写`normal`、`bold`这样的单词。`normal`的值相当于 400，`bold`的值相当于 700。如下：\n\n\n```css\nfont-weight: 100;\nfont-weight: 200;\nfont-weight: 300;\nfont-weight: 400;\nfont-weight: 500;\nfont-weight: 600;\nfont-weight: 700;\nfont-weight: 800;\nfont-weight: 900;\n\nfont-weight: normal; // 相当于 400\nfont-weight: bold;   // 相当于 700\n```\n\n\n关键问题来了。很多人会发现，在 Windows 平台的浏览器中， font-weight 无论是设置300、400，还是500，文字的粗细都没有任何变化，只有到600的时候才会加粗一下，感觉浏览器好像不支持这些数值，那搞这么多档位不就是多余的吗？\n\n这个时候，大家就开始吐槽 Windows 电脑太挫、Windows 浏览器太挫；同时还会感叹 Mac 真香，支持字体的各种粗细。\n\n**实际上，所有这些数值关键字浏览器都是支持的，之所以没有看到任何粗细的变化，是因为你所使用的字体不支持**。\n\n就拿“微软雅黑”来举例，它只支持 400 和 700 这两种粗细，所以当你在代码里写成500的时候，也会被认为是400。但是 Mac 上的“苹方”字体，就支持从100到900之间的各种粗细。\n\n再比如，前段时间，阿里巴巴开源的普惠字体，也是支持多种粗细的：\n\n![](http://img.smyhvae.com/20191013_1100.png)\n\n## 各大平台的默认字体加粗效果\n\n一张图，胜过千言万语。解释了这么多，我们来看看各大平台的字体加粗效果是什么样的。\n\n以下截图，都是我亲测的结果，如果你打算让别人看效果，直接把下面的图丢给他即可。像我这样贴心的前端，不多见了。\n\n**1、Mac 平台的默认字体加粗效果**：（苹方字体）\n\n![](http://img.smyhvae.com/20191016_1205_mac.png)\n\n**2、Windows 平台的默认字体加粗效果**：（微软雅黑字体）\n\n![](http://img.smyhvae.com/20191016_1205_windows2.png)\n\n**3、iOS 平台的默认字体加粗效果**：（苹方字体）\n\n![](http://img.smyhvae.com/20191016_1205_ios.png)\n\n**4、Android 平台（华为 P30 Pro）的默认字体加粗效果**：（Droid Sans 字体）\n\n![](http://img.smyhvae.com/20191016_1205_huawei_p30_pro.jpeg)\n\n**总结**：（各大平台的默认字体加粗效果）\n\n- Mac & iOS 平台的“苹方”字体：500 和600，加粗效果是不同的；`>=600`的加粗效果是相同的。\n\n- Windows 平台的“微软雅黑”字体：只有 `>=600` 才会加粗，而且加粗效果相同。\n\n- Android 平台的 Droid Sans 字体，只有 `>=700`才会加粗；而且加粗效果相同。\n\n\n## 大部分字体不是免费的\n\n有一点你需要知道：你所见到的大部分字体，都不是免费的。换句话说，如果你想用第三方字体从事商业活动，要先交钱，获得授权后才可以使用。你在给公司做网页的时候，就是一种商业行为。\n\n免费字体当然有，比如[思源黑体](https://baike.baidu.com/item/%E6%80%9D%E6%BA%90%E9%BB%91%E4%BD%93/14919098)（Adobe 和 Google 在2014年7月联合推出的一款开源字体）、阿里巴巴普惠体等。但这些免费字体，我们平时基本用不到。\n\n这也就是为什么，很多公司会专门购买一套商用字体库、甚至是自己开发一套字体出来，避免未来潜在的纠纷和麻烦。\n\n给大家列举一个常见的场景。很多时候，前端同学拿到的视觉稿是 psd 稿，需要用 PS 软件打开源文件，才能看到里面的文字是什么字体。在 PS 软件里，当我们用光标选中字体的时候，出现了下面这种场景：\n\n![](http://img.smyhvae.com/20191010_1121.png)\n\n看到上面的`FZLTZCHK`，不要慌，马上去 Google 查一下，发现这个字体的全称是`方正兰亭`字体系列。恩，基本可以肯定， 这个字体也是要收费的。\n\n这个时候，前端同学要马上告诉产品或者设计师，不要用这个字体，因为它是商用字体，是要收费的，小心吃官司。那我们该用什么字体呢？接着往下看。\n\n## 网页一般用什么字体\n\n大多数情况下，网页使用系统默认的字体就足够了。如果要使用特殊字体，顶多只是让**阿拉伯数字**使用特殊字体。中文和英文，使用默认字体，完全足够。\n\n如果确实要使用特殊字体，只有这几种办法：\n\n- 使用开源的免费字体（比如思源黑体、阿里巴巴普惠体等）。但这类字体，种类很少，而且不是很好看。网页开发中，基本没人用。\n\n- 单独购买商用字体，获得授权。\n\n- 自己公司开发一套字体，给自己人用。\n\n比如我所在的 JD 公司就自主开发了一套商用字体`JDZH`（只允许 JD 公司自己用，别家公司不允许用），支持三种粗细。如下：\n\n```css\n/**\n * JD正黑体，提供三种字重，请严格按设计稿选择字体\n */\n @font-face {\n    font-family: 'JDZH-Light';\n    src: url('xxx.com/data/ppms/others/JDZH_Light.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'JDZH-Regular';\n    src: url('xxx.com/data/ppms/others/JDZH_Regular.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'JDZH-Bold';\n    src: url('xxx.com/data/ppms/others/JDZH_Bold.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'JDZhengHT-EN-Bold';\n    src: url('xxx.com/data/ppms/others/JDZhengHei_01_Bold.ttf') format('truetype');\n}\n\n```\n\n为了使用这个`JDZH`字体， JD公司在实际开发网页时，是这样做的：\n\n- 步骤1：在公共的 CSS 文件中引入上方的字体库代码。这样的话，当页面加载时，用户的终端就会去下载这个字体库。\n\n- 步骤2：在业务代码中，针对目标样式，直接使用 `font-family: 'JDZH-Regular';`这样的代码，即可生效。\n\n这个`JDZH`，我们一般也只使用在阿拉伯数字中；中文和英文，建议使用系统默认字体就行。\n\n## 最后一段\n\n所谓「见微知著」，一个再不起眼的知识点，也是有很多学问的。光是“字体”这一点，就足够成为一门学科。\n\n2005年，苹果公司创始人乔布斯（Steve Jobs）在斯坦福大学的毕业典礼演讲上，有过这样一段话：\n\n> 当时的我从来没有期盼过我所学的这些东西，能够在我的生活中有什么实际的用处。\n\n> 但是到了十年之后，当我们在设计第一台 Macintosh 电脑时，这些所学都涌进了我的头脑。于是，我把这些设计融入到了 Mac 电脑之中，这也使这台 Mac 成为了第一台拥有漂亮字体的电脑。\n\n> 可以说，如果我当时没有退学，就不会有机会去参加我感兴趣的美术字课程，Mac 也就不会拥有那些美妙的排版和字体。而当 Windows 系统借鉴了Mac之后，似乎所有的电脑都应该是这个样子。\n\n> 当时的我没有办法把这些点点滴滴连接起来，但是，**当我十年后回顾的时候，一切都变得豁然开朗**。\n\n\n### 推荐阅读\n\n- 常见的免费字体：<http://zenozeng.github.io/Free-Chinese-Fonts/>\n\n- 如何优雅的选择字体(font-family)：<https://segmentfault.com/a/1190000006110417>\n\n- iconfont：<https://www.iconfont.cn/>\n\n- 阿里巴巴官方发布免费商用字体：阿里巴巴普惠体：<https://mp.weixin.qq.com/s/daKUNnF_Ste-O1l0sR89sQ>\n\n- 得到 | 从甲骨文至得到今楷，造字的人都是神：<https://mp.weixin.qq.com/s/ZnMxrhoH9piLf9EaSIwiGA>","source":"_posts/2019-10/网页设计和开发中，关于字体的常识.md","raw":"---\ntitle: 网页设计和开发中，关于字体的常识\ndate: 2019-10-23 17:07:46\ncover:  https://storage.jd.com/blogimages/20191016_2030.png\nthumbnail:  https://storage.jd.com/blogimages/20191016_2030.png\ntags:\n\t- 字体\ncategories: Web前端\n---\n\n> 本文作者@千古壹号。\n\n## 前言\n\n我周围的码农当中，有很多是技术大神，却常常被字体这种简单的东西所困扰。\n\n这篇文章，我们来讲一讲关于字体的常识。这些常识所涉及到的问题，有很强的可操作性，都是在实际业务中真实遇到的，都是需要开发同学和产品经理、设计师不断重复沟通的。\n\n字体真的只是“**系统默认，无从解释**”这么简单吗？是产品被忽悠？还是开发在敷衍？二者之间的博弈究竟谁能胜出？学会本文，你就能胜出。\n<!--more-->\n## 字体分类\n\n常见的字体可以分为两类：**衬线体、无衬线体**。\n\n![](http://img.smyhvae.com/20191004_1101.png)\n\n**1、serif（衬线体）**：在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同。\n\n常见的衬线体有：\n\n- 宋体、楷体\n\n- Times New Roman\n\n**2、sans-serif（无衬线体）**：笔划粗细基本一致，只剩下主干，造型简明有力，起源也很晚。适用于标题、广告等，识别性高。\n\n常见的无衬线体有：\n\n- 黑体\n- Windows 平台默认的中文字体：微软雅黑（Microsoft Yahei）\n- Windows 平台默认的英文字体：Arial\n- Mac & iOS 平台默认的中文字体：苹方（PingFang SC）\n- Mac & iOS 平台默认的英文字体：San Francisco\n- Android 平台默认字体：Droid Sans\n\n\n**补充**：\n\n衬线体如今已经很少使用了，你所熟悉的“宋体”，也基本只能在纸质出版物中见到。而**非衬线体更符合现代审美**。\n\n所以，在这里温馨提示各位：**做PPT不要用宋体**。如果你不知道用什么字体，那就用系统的默认字体就好：Win 平台用微软雅黑、Mac 平台用苹方字体。\n\n如果你发现一名设计师，在做海报设计、或者制图的时候，使用了宋体，说明她一定是个外行。\n\n## 字体族\n\nCSS 中的字体族可以理解成是某一类字体。常见的字体族可以分为五类：\n\n- serif：衬线体。\n- sans-serif：无衬线体。\n- monospace：等宽字体。每一个字母所占的宽度是相同的。写代码的字体尽量用等宽字体。\n- cursive：手写字体。比如徐静蕾手写体。\n- fantasy：梦幻字体。比如一些艺术字。\n\n这五类字体族不代表某一个具体的字体，而是当你在 CSS 中指定字体族的时候，系统就有可能在字体族中找出一种字体来显示。\n\n![](http://img.smyhvae.com/20191004_1130.png)\n\n参考链接：[serif，sans-serif，monospace，cursive和fantasy](http://www.ayqy.net/blog/serif%EF%BC%8Csans-serif%EF%BC%8Cmonospace%EF%BC%8Ccursive%E5%92%8Cfantasy/)\n\n## 多字体 fallback 机制\n\n多字体 fallback 机制：当指定的字体找不到（或者某些文字不支持这个字体）时，那就接着往后找。比如：\n\n```css\n.div1{\n    font-family: \"PingFang SC\", \"Microsoft Yahei\", monospace;\n}\n\n```\n\n上方 CSS 代码的意思是：让指定标签元素中的文字，在 Mac & iOS 平台用苹方字体，在 Win 平台用微软雅黑字体，如果这两个字体都没有，就随便找一个等宽的字体进行渲染。\n\n**注意**：\n\n（1）写 CSS 代码时，字体族不需要带引号。\n\n（2）有些 Mac 用户会安装 Office 等软件，安装这些软件后，系统会顺带安装微软雅黑字体。此时，写 CSS 代码时，如果写成 `\"Microsoft Yahei\", \"PingFang SC\"`这种顺序，可能导致有些 Mac 用户用微软雅黑来显示字体。这么好看的苹方字体，你忍心割舍吗？\n\n## font-weight：字体的加粗属性\n\nfont-weight 字体加粗属性，是让前端同学最迷茫的属性。当你把做好的网页拿给产品经理验收时，网页一打开，产品经理首先关注到的就是字体的加粗问题，你信不信？下面这些话都是产品经理的口头禅，想必早已让你产生了幻听：\n\n- “这个字体怎么没有加粗？”\n\n- “这个字体是不是太粗了点？”\n\n- “为什么 iPhone 和 Android 手机上的文字粗细不一致？”\n\n想要明白这些疑惑，我们先来看看 `font-weight` 有哪些属性值。\n\n**font-weight 属性**：在设置字体是否加粗时，属性值既可以直接填写 100 至 900 这样的数字，也可以填写`normal`、`bold`这样的单词。`normal`的值相当于 400，`bold`的值相当于 700。如下：\n\n\n```css\nfont-weight: 100;\nfont-weight: 200;\nfont-weight: 300;\nfont-weight: 400;\nfont-weight: 500;\nfont-weight: 600;\nfont-weight: 700;\nfont-weight: 800;\nfont-weight: 900;\n\nfont-weight: normal; // 相当于 400\nfont-weight: bold;   // 相当于 700\n```\n\n\n关键问题来了。很多人会发现，在 Windows 平台的浏览器中， font-weight 无论是设置300、400，还是500，文字的粗细都没有任何变化，只有到600的时候才会加粗一下，感觉浏览器好像不支持这些数值，那搞这么多档位不就是多余的吗？\n\n这个时候，大家就开始吐槽 Windows 电脑太挫、Windows 浏览器太挫；同时还会感叹 Mac 真香，支持字体的各种粗细。\n\n**实际上，所有这些数值关键字浏览器都是支持的，之所以没有看到任何粗细的变化，是因为你所使用的字体不支持**。\n\n就拿“微软雅黑”来举例，它只支持 400 和 700 这两种粗细，所以当你在代码里写成500的时候，也会被认为是400。但是 Mac 上的“苹方”字体，就支持从100到900之间的各种粗细。\n\n再比如，前段时间，阿里巴巴开源的普惠字体，也是支持多种粗细的：\n\n![](http://img.smyhvae.com/20191013_1100.png)\n\n## 各大平台的默认字体加粗效果\n\n一张图，胜过千言万语。解释了这么多，我们来看看各大平台的字体加粗效果是什么样的。\n\n以下截图，都是我亲测的结果，如果你打算让别人看效果，直接把下面的图丢给他即可。像我这样贴心的前端，不多见了。\n\n**1、Mac 平台的默认字体加粗效果**：（苹方字体）\n\n![](http://img.smyhvae.com/20191016_1205_mac.png)\n\n**2、Windows 平台的默认字体加粗效果**：（微软雅黑字体）\n\n![](http://img.smyhvae.com/20191016_1205_windows2.png)\n\n**3、iOS 平台的默认字体加粗效果**：（苹方字体）\n\n![](http://img.smyhvae.com/20191016_1205_ios.png)\n\n**4、Android 平台（华为 P30 Pro）的默认字体加粗效果**：（Droid Sans 字体）\n\n![](http://img.smyhvae.com/20191016_1205_huawei_p30_pro.jpeg)\n\n**总结**：（各大平台的默认字体加粗效果）\n\n- Mac & iOS 平台的“苹方”字体：500 和600，加粗效果是不同的；`>=600`的加粗效果是相同的。\n\n- Windows 平台的“微软雅黑”字体：只有 `>=600` 才会加粗，而且加粗效果相同。\n\n- Android 平台的 Droid Sans 字体，只有 `>=700`才会加粗；而且加粗效果相同。\n\n\n## 大部分字体不是免费的\n\n有一点你需要知道：你所见到的大部分字体，都不是免费的。换句话说，如果你想用第三方字体从事商业活动，要先交钱，获得授权后才可以使用。你在给公司做网页的时候，就是一种商业行为。\n\n免费字体当然有，比如[思源黑体](https://baike.baidu.com/item/%E6%80%9D%E6%BA%90%E9%BB%91%E4%BD%93/14919098)（Adobe 和 Google 在2014年7月联合推出的一款开源字体）、阿里巴巴普惠体等。但这些免费字体，我们平时基本用不到。\n\n这也就是为什么，很多公司会专门购买一套商用字体库、甚至是自己开发一套字体出来，避免未来潜在的纠纷和麻烦。\n\n给大家列举一个常见的场景。很多时候，前端同学拿到的视觉稿是 psd 稿，需要用 PS 软件打开源文件，才能看到里面的文字是什么字体。在 PS 软件里，当我们用光标选中字体的时候，出现了下面这种场景：\n\n![](http://img.smyhvae.com/20191010_1121.png)\n\n看到上面的`FZLTZCHK`，不要慌，马上去 Google 查一下，发现这个字体的全称是`方正兰亭`字体系列。恩，基本可以肯定， 这个字体也是要收费的。\n\n这个时候，前端同学要马上告诉产品或者设计师，不要用这个字体，因为它是商用字体，是要收费的，小心吃官司。那我们该用什么字体呢？接着往下看。\n\n## 网页一般用什么字体\n\n大多数情况下，网页使用系统默认的字体就足够了。如果要使用特殊字体，顶多只是让**阿拉伯数字**使用特殊字体。中文和英文，使用默认字体，完全足够。\n\n如果确实要使用特殊字体，只有这几种办法：\n\n- 使用开源的免费字体（比如思源黑体、阿里巴巴普惠体等）。但这类字体，种类很少，而且不是很好看。网页开发中，基本没人用。\n\n- 单独购买商用字体，获得授权。\n\n- 自己公司开发一套字体，给自己人用。\n\n比如我所在的 JD 公司就自主开发了一套商用字体`JDZH`（只允许 JD 公司自己用，别家公司不允许用），支持三种粗细。如下：\n\n```css\n/**\n * JD正黑体，提供三种字重，请严格按设计稿选择字体\n */\n @font-face {\n    font-family: 'JDZH-Light';\n    src: url('xxx.com/data/ppms/others/JDZH_Light.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'JDZH-Regular';\n    src: url('xxx.com/data/ppms/others/JDZH_Regular.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'JDZH-Bold';\n    src: url('xxx.com/data/ppms/others/JDZH_Bold.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'JDZhengHT-EN-Bold';\n    src: url('xxx.com/data/ppms/others/JDZhengHei_01_Bold.ttf') format('truetype');\n}\n\n```\n\n为了使用这个`JDZH`字体， JD公司在实际开发网页时，是这样做的：\n\n- 步骤1：在公共的 CSS 文件中引入上方的字体库代码。这样的话，当页面加载时，用户的终端就会去下载这个字体库。\n\n- 步骤2：在业务代码中，针对目标样式，直接使用 `font-family: 'JDZH-Regular';`这样的代码，即可生效。\n\n这个`JDZH`，我们一般也只使用在阿拉伯数字中；中文和英文，建议使用系统默认字体就行。\n\n## 最后一段\n\n所谓「见微知著」，一个再不起眼的知识点，也是有很多学问的。光是“字体”这一点，就足够成为一门学科。\n\n2005年，苹果公司创始人乔布斯（Steve Jobs）在斯坦福大学的毕业典礼演讲上，有过这样一段话：\n\n> 当时的我从来没有期盼过我所学的这些东西，能够在我的生活中有什么实际的用处。\n\n> 但是到了十年之后，当我们在设计第一台 Macintosh 电脑时，这些所学都涌进了我的头脑。于是，我把这些设计融入到了 Mac 电脑之中，这也使这台 Mac 成为了第一台拥有漂亮字体的电脑。\n\n> 可以说，如果我当时没有退学，就不会有机会去参加我感兴趣的美术字课程，Mac 也就不会拥有那些美妙的排版和字体。而当 Windows 系统借鉴了Mac之后，似乎所有的电脑都应该是这个样子。\n\n> 当时的我没有办法把这些点点滴滴连接起来，但是，**当我十年后回顾的时候，一切都变得豁然开朗**。\n\n\n### 推荐阅读\n\n- 常见的免费字体：<http://zenozeng.github.io/Free-Chinese-Fonts/>\n\n- 如何优雅的选择字体(font-family)：<https://segmentfault.com/a/1190000006110417>\n\n- iconfont：<https://www.iconfont.cn/>\n\n- 阿里巴巴官方发布免费商用字体：阿里巴巴普惠体：<https://mp.weixin.qq.com/s/daKUNnF_Ste-O1l0sR89sQ>\n\n- 得到 | 从甲骨文至得到今楷，造字的人都是神：<https://mp.weixin.qq.com/s/ZnMxrhoH9piLf9EaSIwiGA>","slug":"网页设计和开发中，关于字体的常识","published":1,"updated":"2019-11-20T05:44:29.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflq5000nsoyxl3eo0lbs","content":"<blockquote>\n<p>本文作者@千古壹号。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我周围的码农当中，有很多是技术大神，却常常被字体这种简单的东西所困扰。</p>\n<p>这篇文章，我们来讲一讲关于字体的常识。这些常识所涉及到的问题，有很强的可操作性，都是在实际业务中真实遇到的，都是需要开发同学和产品经理、设计师不断重复沟通的。</p>\n<p>字体真的只是“<strong>系统默认，无从解释</strong>”这么简单吗？是产品被忽悠？还是开发在敷衍？二者之间的博弈究竟谁能胜出？学会本文，你就能胜出。</p>\n<a id=\"more\"></a>\n<h2 id=\"字体分类\"><a href=\"#字体分类\" class=\"headerlink\" title=\"字体分类\"></a>字体分类</h2><p>常见的字体可以分为两类：<strong>衬线体、无衬线体</strong>。</p>\n<p><img src=\"http://img.smyhvae.com/20191004_1101.png\" alt></p>\n<p><strong>1、serif（衬线体）</strong>：在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同。</p>\n<p>常见的衬线体有：</p>\n<ul>\n<li><p>宋体、楷体</p>\n</li>\n<li><p>Times New Roman</p>\n</li>\n</ul>\n<p><strong>2、sans-serif（无衬线体）</strong>：笔划粗细基本一致，只剩下主干，造型简明有力，起源也很晚。适用于标题、广告等，识别性高。</p>\n<p>常见的无衬线体有：</p>\n<ul>\n<li>黑体</li>\n<li>Windows 平台默认的中文字体：微软雅黑（Microsoft Yahei）</li>\n<li>Windows 平台默认的英文字体：Arial</li>\n<li>Mac &amp; iOS 平台默认的中文字体：苹方（PingFang SC）</li>\n<li>Mac &amp; iOS 平台默认的英文字体：San Francisco</li>\n<li>Android 平台默认字体：Droid Sans</li>\n</ul>\n<p><strong>补充</strong>：</p>\n<p>衬线体如今已经很少使用了，你所熟悉的“宋体”，也基本只能在纸质出版物中见到。而<strong>非衬线体更符合现代审美</strong>。</p>\n<p>所以，在这里温馨提示各位：<strong>做PPT不要用宋体</strong>。如果你不知道用什么字体，那就用系统的默认字体就好：Win 平台用微软雅黑、Mac 平台用苹方字体。</p>\n<p>如果你发现一名设计师，在做海报设计、或者制图的时候，使用了宋体，说明她一定是个外行。</p>\n<h2 id=\"字体族\"><a href=\"#字体族\" class=\"headerlink\" title=\"字体族\"></a>字体族</h2><p>CSS 中的字体族可以理解成是某一类字体。常见的字体族可以分为五类：</p>\n<ul>\n<li>serif：衬线体。</li>\n<li>sans-serif：无衬线体。</li>\n<li>monospace：等宽字体。每一个字母所占的宽度是相同的。写代码的字体尽量用等宽字体。</li>\n<li>cursive：手写字体。比如徐静蕾手写体。</li>\n<li>fantasy：梦幻字体。比如一些艺术字。</li>\n</ul>\n<p>这五类字体族不代表某一个具体的字体，而是当你在 CSS 中指定字体族的时候，系统就有可能在字体族中找出一种字体来显示。</p>\n<p><img src=\"http://img.smyhvae.com/20191004_1130.png\" alt></p>\n<p>参考链接：<a href=\"http://www.ayqy.net/blog/serif%EF%BC%8Csans-serif%EF%BC%8Cmonospace%EF%BC%8Ccursive%E5%92%8Cfantasy/\" target=\"_blank\" rel=\"noopener\">serif，sans-serif，monospace，cursive和fantasy</a></p>\n<h2 id=\"多字体-fallback-机制\"><a href=\"#多字体-fallback-机制\" class=\"headerlink\" title=\"多字体 fallback 机制\"></a>多字体 fallback 机制</h2><p>多字体 fallback 机制：当指定的字体找不到（或者某些文字不支持这个字体）时，那就接着往后找。比如：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.div1</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"PingFang SC\"</span>, <span class=\"hljs-string\">\"Microsoft Yahei\"</span>, monospace;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方 CSS 代码的意思是：让指定标签元素中的文字，在 Mac &amp; iOS 平台用苹方字体，在 Win 平台用微软雅黑字体，如果这两个字体都没有，就随便找一个等宽的字体进行渲染。</p>\n<p><strong>注意</strong>：</p>\n<p>（1）写 CSS 代码时，字体族不需要带引号。</p>\n<p>（2）有些 Mac 用户会安装 Office 等软件，安装这些软件后，系统会顺带安装微软雅黑字体。此时，写 CSS 代码时，如果写成 <code>&quot;Microsoft Yahei&quot;, &quot;PingFang SC&quot;</code>这种顺序，可能导致有些 Mac 用户用微软雅黑来显示字体。这么好看的苹方字体，你忍心割舍吗？</p>\n<h2 id=\"font-weight：字体的加粗属性\"><a href=\"#font-weight：字体的加粗属性\" class=\"headerlink\" title=\"font-weight：字体的加粗属性\"></a>font-weight：字体的加粗属性</h2><p>font-weight 字体加粗属性，是让前端同学最迷茫的属性。当你把做好的网页拿给产品经理验收时，网页一打开，产品经理首先关注到的就是字体的加粗问题，你信不信？下面这些话都是产品经理的口头禅，想必早已让你产生了幻听：</p>\n<ul>\n<li><p>“这个字体怎么没有加粗？”</p>\n</li>\n<li><p>“这个字体是不是太粗了点？”</p>\n</li>\n<li><p>“为什么 iPhone 和 Android 手机上的文字粗细不一致？”</p>\n</li>\n</ul>\n<p>想要明白这些疑惑，我们先来看看 <code>font-weight</code> 有哪些属性值。</p>\n<p><strong>font-weight 属性</strong>：在设置字体是否加粗时，属性值既可以直接填写 100 至 900 这样的数字，也可以填写<code>normal</code>、<code>bold</code>这样的单词。<code>normal</code>的值相当于 400，<code>bold</code>的值相当于 700。如下：</p>\n<figure class=\"highlight hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 100;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 200;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 300;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 400;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 500;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 600;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 700;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 800;</span><br><span class=\"line\"><span class=\"hljs-selector-tag\">font-weight</span>: 900;</span><br><span class=\"line\"></span><br><span class=\"line\">font-weight: normal; // 相当于 400</span><br><span class=\"line\">font-weight: bold;   // 相当于 700</span><br></pre></td></tr></table></figure>\n\n<p>关键问题来了。很多人会发现，在 Windows 平台的浏览器中， font-weight 无论是设置300、400，还是500，文字的粗细都没有任何变化，只有到600的时候才会加粗一下，感觉浏览器好像不支持这些数值，那搞这么多档位不就是多余的吗？</p>\n<p>这个时候，大家就开始吐槽 Windows 电脑太挫、Windows 浏览器太挫；同时还会感叹 Mac 真香，支持字体的各种粗细。</p>\n<p><strong>实际上，所有这些数值关键字浏览器都是支持的，之所以没有看到任何粗细的变化，是因为你所使用的字体不支持</strong>。</p>\n<p>就拿“微软雅黑”来举例，它只支持 400 和 700 这两种粗细，所以当你在代码里写成500的时候，也会被认为是400。但是 Mac 上的“苹方”字体，就支持从100到900之间的各种粗细。</p>\n<p>再比如，前段时间，阿里巴巴开源的普惠字体，也是支持多种粗细的：</p>\n<p><img src=\"http://img.smyhvae.com/20191013_1100.png\" alt></p>\n<h2 id=\"各大平台的默认字体加粗效果\"><a href=\"#各大平台的默认字体加粗效果\" class=\"headerlink\" title=\"各大平台的默认字体加粗效果\"></a>各大平台的默认字体加粗效果</h2><p>一张图，胜过千言万语。解释了这么多，我们来看看各大平台的字体加粗效果是什么样的。</p>\n<p>以下截图，都是我亲测的结果，如果你打算让别人看效果，直接把下面的图丢给他即可。像我这样贴心的前端，不多见了。</p>\n<p><strong>1、Mac 平台的默认字体加粗效果</strong>：（苹方字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_mac.png\" alt></p>\n<p><strong>2、Windows 平台的默认字体加粗效果</strong>：（微软雅黑字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_windows2.png\" alt></p>\n<p><strong>3、iOS 平台的默认字体加粗效果</strong>：（苹方字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_ios.png\" alt></p>\n<p><strong>4、Android 平台（华为 P30 Pro）的默认字体加粗效果</strong>：（Droid Sans 字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_huawei_p30_pro.jpeg\" alt></p>\n<p><strong>总结</strong>：（各大平台的默认字体加粗效果）</p>\n<ul>\n<li><p>Mac &amp; iOS 平台的“苹方”字体：500 和600，加粗效果是不同的；<code>&gt;=600</code>的加粗效果是相同的。</p>\n</li>\n<li><p>Windows 平台的“微软雅黑”字体：只有 <code>&gt;=600</code> 才会加粗，而且加粗效果相同。</p>\n</li>\n<li><p>Android 平台的 Droid Sans 字体，只有 <code>&gt;=700</code>才会加粗；而且加粗效果相同。</p>\n</li>\n</ul>\n<h2 id=\"大部分字体不是免费的\"><a href=\"#大部分字体不是免费的\" class=\"headerlink\" title=\"大部分字体不是免费的\"></a>大部分字体不是免费的</h2><p>有一点你需要知道：你所见到的大部分字体，都不是免费的。换句话说，如果你想用第三方字体从事商业活动，要先交钱，获得授权后才可以使用。你在给公司做网页的时候，就是一种商业行为。</p>\n<p>免费字体当然有，比如<a href=\"https://baike.baidu.com/item/%E6%80%9D%E6%BA%90%E9%BB%91%E4%BD%93/14919098\" target=\"_blank\" rel=\"noopener\">思源黑体</a>（Adobe 和 Google 在2014年7月联合推出的一款开源字体）、阿里巴巴普惠体等。但这些免费字体，我们平时基本用不到。</p>\n<p>这也就是为什么，很多公司会专门购买一套商用字体库、甚至是自己开发一套字体出来，避免未来潜在的纠纷和麻烦。</p>\n<p>给大家列举一个常见的场景。很多时候，前端同学拿到的视觉稿是 psd 稿，需要用 PS 软件打开源文件，才能看到里面的文字是什么字体。在 PS 软件里，当我们用光标选中字体的时候，出现了下面这种场景：</p>\n<p><img src=\"http://img.smyhvae.com/20191010_1121.png\" alt></p>\n<p>看到上面的<code>FZLTZCHK</code>，不要慌，马上去 Google 查一下，发现这个字体的全称是<code>方正兰亭</code>字体系列。恩，基本可以肯定， 这个字体也是要收费的。</p>\n<p>这个时候，前端同学要马上告诉产品或者设计师，不要用这个字体，因为它是商用字体，是要收费的，小心吃官司。那我们该用什么字体呢？接着往下看。</p>\n<h2 id=\"网页一般用什么字体\"><a href=\"#网页一般用什么字体\" class=\"headerlink\" title=\"网页一般用什么字体\"></a>网页一般用什么字体</h2><p>大多数情况下，网页使用系统默认的字体就足够了。如果要使用特殊字体，顶多只是让<strong>阿拉伯数字</strong>使用特殊字体。中文和英文，使用默认字体，完全足够。</p>\n<p>如果确实要使用特殊字体，只有这几种办法：</p>\n<ul>\n<li><p>使用开源的免费字体（比如思源黑体、阿里巴巴普惠体等）。但这类字体，种类很少，而且不是很好看。网页开发中，基本没人用。</p>\n</li>\n<li><p>单独购买商用字体，获得授权。</p>\n</li>\n<li><p>自己公司开发一套字体，给自己人用。</p>\n</li>\n</ul>\n<p>比如我所在的 JD 公司就自主开发了一套商用字体<code>JDZH</code>（只允许 JD 公司自己用，别家公司不允许用），支持三种粗细。如下：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * JD正黑体，提供三种字重，请严格按设计稿选择字体</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> */</span></span><br><span class=\"line\"> @<span class=\"hljs-keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">'JDZH-Light'</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">src</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'xxx.com/data/ppms/others/JDZH_Light.ttf'</span>) <span class=\"hljs-built_in\">format</span>(<span class=\"hljs-string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"hljs-keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">'JDZH-Regular'</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">src</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'xxx.com/data/ppms/others/JDZH_Regular.ttf'</span>) <span class=\"hljs-built_in\">format</span>(<span class=\"hljs-string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"hljs-keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">'JDZH-Bold'</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">src</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'xxx.com/data/ppms/others/JDZH_Bold.ttf'</span>) <span class=\"hljs-built_in\">format</span>(<span class=\"hljs-string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"hljs-keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">'JDZhengHT-EN-Bold'</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">src</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'xxx.com/data/ppms/others/JDZhengHei_01_Bold.ttf'</span>) <span class=\"hljs-built_in\">format</span>(<span class=\"hljs-string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了使用这个<code>JDZH</code>字体， JD公司在实际开发网页时，是这样做的：</p>\n<ul>\n<li><p>步骤1：在公共的 CSS 文件中引入上方的字体库代码。这样的话，当页面加载时，用户的终端就会去下载这个字体库。</p>\n</li>\n<li><p>步骤2：在业务代码中，针对目标样式，直接使用 <code>font-family: &#39;JDZH-Regular&#39;;</code>这样的代码，即可生效。</p>\n</li>\n</ul>\n<p>这个<code>JDZH</code>，我们一般也只使用在阿拉伯数字中；中文和英文，建议使用系统默认字体就行。</p>\n<h2 id=\"最后一段\"><a href=\"#最后一段\" class=\"headerlink\" title=\"最后一段\"></a>最后一段</h2><p>所谓「见微知著」，一个再不起眼的知识点，也是有很多学问的。光是“字体”这一点，就足够成为一门学科。</p>\n<p>2005年，苹果公司创始人乔布斯（Steve Jobs）在斯坦福大学的毕业典礼演讲上，有过这样一段话：</p>\n<blockquote>\n<p>当时的我从来没有期盼过我所学的这些东西，能够在我的生活中有什么实际的用处。</p>\n</blockquote>\n<blockquote>\n<p>但是到了十年之后，当我们在设计第一台 Macintosh 电脑时，这些所学都涌进了我的头脑。于是，我把这些设计融入到了 Mac 电脑之中，这也使这台 Mac 成为了第一台拥有漂亮字体的电脑。</p>\n</blockquote>\n<blockquote>\n<p>可以说，如果我当时没有退学，就不会有机会去参加我感兴趣的美术字课程，Mac 也就不会拥有那些美妙的排版和字体。而当 Windows 系统借鉴了Mac之后，似乎所有的电脑都应该是这个样子。</p>\n</blockquote>\n<blockquote>\n<p>当时的我没有办法把这些点点滴滴连接起来，但是，<strong>当我十年后回顾的时候，一切都变得豁然开朗</strong>。</p>\n</blockquote>\n<h3 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h3><ul>\n<li><p>常见的免费字体：<a href=\"http://zenozeng.github.io/Free-Chinese-Fonts/\" target=\"_blank\" rel=\"noopener\">http://zenozeng.github.io/Free-Chinese-Fonts/</a></p>\n</li>\n<li><p>如何优雅的选择字体(font-family)：<a href=\"https://segmentfault.com/a/1190000006110417\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006110417</a></p>\n</li>\n<li><p>iconfont：<a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">https://www.iconfont.cn/</a></p>\n</li>\n<li><p>阿里巴巴官方发布免费商用字体：阿里巴巴普惠体：<a href=\"https://mp.weixin.qq.com/s/daKUNnF_Ste-O1l0sR89sQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/daKUNnF_Ste-O1l0sR89sQ</a></p>\n</li>\n<li><p>得到 | 从甲骨文至得到今楷，造字的人都是神：<a href=\"https://mp.weixin.qq.com/s/ZnMxrhoH9piLf9EaSIwiGA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/ZnMxrhoH9piLf9EaSIwiGA</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文作者@千古壹号。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我周围的码农当中，有很多是技术大神，却常常被字体这种简单的东西所困扰。</p>\n<p>这篇文章，我们来讲一讲关于字体的常识。这些常识所涉及到的问题，有很强的可操作性，都是在实际业务中真实遇到的，都是需要开发同学和产品经理、设计师不断重复沟通的。</p>\n<p>字体真的只是“<strong>系统默认，无从解释</strong>”这么简单吗？是产品被忽悠？还是开发在敷衍？二者之间的博弈究竟谁能胜出？学会本文，你就能胜出。</p>","more":"<h2 id=\"字体分类\"><a href=\"#字体分类\" class=\"headerlink\" title=\"字体分类\"></a>字体分类</h2><p>常见的字体可以分为两类：<strong>衬线体、无衬线体</strong>。</p>\n<p><img src=\"http://img.smyhvae.com/20191004_1101.png\" alt></p>\n<p><strong>1、serif（衬线体）</strong>：在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同。</p>\n<p>常见的衬线体有：</p>\n<ul>\n<li><p>宋体、楷体</p>\n</li>\n<li><p>Times New Roman</p>\n</li>\n</ul>\n<p><strong>2、sans-serif（无衬线体）</strong>：笔划粗细基本一致，只剩下主干，造型简明有力，起源也很晚。适用于标题、广告等，识别性高。</p>\n<p>常见的无衬线体有：</p>\n<ul>\n<li>黑体</li>\n<li>Windows 平台默认的中文字体：微软雅黑（Microsoft Yahei）</li>\n<li>Windows 平台默认的英文字体：Arial</li>\n<li>Mac &amp; iOS 平台默认的中文字体：苹方（PingFang SC）</li>\n<li>Mac &amp; iOS 平台默认的英文字体：San Francisco</li>\n<li>Android 平台默认字体：Droid Sans</li>\n</ul>\n<p><strong>补充</strong>：</p>\n<p>衬线体如今已经很少使用了，你所熟悉的“宋体”，也基本只能在纸质出版物中见到。而<strong>非衬线体更符合现代审美</strong>。</p>\n<p>所以，在这里温馨提示各位：<strong>做PPT不要用宋体</strong>。如果你不知道用什么字体，那就用系统的默认字体就好：Win 平台用微软雅黑、Mac 平台用苹方字体。</p>\n<p>如果你发现一名设计师，在做海报设计、或者制图的时候，使用了宋体，说明她一定是个外行。</p>\n<h2 id=\"字体族\"><a href=\"#字体族\" class=\"headerlink\" title=\"字体族\"></a>字体族</h2><p>CSS 中的字体族可以理解成是某一类字体。常见的字体族可以分为五类：</p>\n<ul>\n<li>serif：衬线体。</li>\n<li>sans-serif：无衬线体。</li>\n<li>monospace：等宽字体。每一个字母所占的宽度是相同的。写代码的字体尽量用等宽字体。</li>\n<li>cursive：手写字体。比如徐静蕾手写体。</li>\n<li>fantasy：梦幻字体。比如一些艺术字。</li>\n</ul>\n<p>这五类字体族不代表某一个具体的字体，而是当你在 CSS 中指定字体族的时候，系统就有可能在字体族中找出一种字体来显示。</p>\n<p><img src=\"http://img.smyhvae.com/20191004_1130.png\" alt></p>\n<p>参考链接：<a href=\"http://www.ayqy.net/blog/serif%EF%BC%8Csans-serif%EF%BC%8Cmonospace%EF%BC%8Ccursive%E5%92%8Cfantasy/\" target=\"_blank\" rel=\"noopener\">serif，sans-serif，monospace，cursive和fantasy</a></p>\n<h2 id=\"多字体-fallback-机制\"><a href=\"#多字体-fallback-机制\" class=\"headerlink\" title=\"多字体 fallback 机制\"></a>多字体 fallback 机制</h2><p>多字体 fallback 机制：当指定的字体找不到（或者某些文字不支持这个字体）时，那就接着往后找。比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">\"PingFang SC\"</span>, <span class=\"string\">\"Microsoft Yahei\"</span>, monospace;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方 CSS 代码的意思是：让指定标签元素中的文字，在 Mac &amp; iOS 平台用苹方字体，在 Win 平台用微软雅黑字体，如果这两个字体都没有，就随便找一个等宽的字体进行渲染。</p>\n<p><strong>注意</strong>：</p>\n<p>（1）写 CSS 代码时，字体族不需要带引号。</p>\n<p>（2）有些 Mac 用户会安装 Office 等软件，安装这些软件后，系统会顺带安装微软雅黑字体。此时，写 CSS 代码时，如果写成 <code>&quot;Microsoft Yahei&quot;, &quot;PingFang SC&quot;</code>这种顺序，可能导致有些 Mac 用户用微软雅黑来显示字体。这么好看的苹方字体，你忍心割舍吗？</p>\n<h2 id=\"font-weight：字体的加粗属性\"><a href=\"#font-weight：字体的加粗属性\" class=\"headerlink\" title=\"font-weight：字体的加粗属性\"></a>font-weight：字体的加粗属性</h2><p>font-weight 字体加粗属性，是让前端同学最迷茫的属性。当你把做好的网页拿给产品经理验收时，网页一打开，产品经理首先关注到的就是字体的加粗问题，你信不信？下面这些话都是产品经理的口头禅，想必早已让你产生了幻听：</p>\n<ul>\n<li><p>“这个字体怎么没有加粗？”</p>\n</li>\n<li><p>“这个字体是不是太粗了点？”</p>\n</li>\n<li><p>“为什么 iPhone 和 Android 手机上的文字粗细不一致？”</p>\n</li>\n</ul>\n<p>想要明白这些疑惑，我们先来看看 <code>font-weight</code> 有哪些属性值。</p>\n<p><strong>font-weight 属性</strong>：在设置字体是否加粗时，属性值既可以直接填写 100 至 900 这样的数字，也可以填写<code>normal</code>、<code>bold</code>这样的单词。<code>normal</code>的值相当于 400，<code>bold</code>的值相当于 700。如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 100;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 200;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 300;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 400;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 500;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 600;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 700;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 800;</span><br><span class=\"line\"><span class=\"selector-tag\">font-weight</span>: 900;</span><br><span class=\"line\"></span><br><span class=\"line\">font-weight: normal; // 相当于 400</span><br><span class=\"line\">font-weight: bold;   // 相当于 700</span><br></pre></td></tr></table></figure>\n\n<p>关键问题来了。很多人会发现，在 Windows 平台的浏览器中， font-weight 无论是设置300、400，还是500，文字的粗细都没有任何变化，只有到600的时候才会加粗一下，感觉浏览器好像不支持这些数值，那搞这么多档位不就是多余的吗？</p>\n<p>这个时候，大家就开始吐槽 Windows 电脑太挫、Windows 浏览器太挫；同时还会感叹 Mac 真香，支持字体的各种粗细。</p>\n<p><strong>实际上，所有这些数值关键字浏览器都是支持的，之所以没有看到任何粗细的变化，是因为你所使用的字体不支持</strong>。</p>\n<p>就拿“微软雅黑”来举例，它只支持 400 和 700 这两种粗细，所以当你在代码里写成500的时候，也会被认为是400。但是 Mac 上的“苹方”字体，就支持从100到900之间的各种粗细。</p>\n<p>再比如，前段时间，阿里巴巴开源的普惠字体，也是支持多种粗细的：</p>\n<p><img src=\"http://img.smyhvae.com/20191013_1100.png\" alt></p>\n<h2 id=\"各大平台的默认字体加粗效果\"><a href=\"#各大平台的默认字体加粗效果\" class=\"headerlink\" title=\"各大平台的默认字体加粗效果\"></a>各大平台的默认字体加粗效果</h2><p>一张图，胜过千言万语。解释了这么多，我们来看看各大平台的字体加粗效果是什么样的。</p>\n<p>以下截图，都是我亲测的结果，如果你打算让别人看效果，直接把下面的图丢给他即可。像我这样贴心的前端，不多见了。</p>\n<p><strong>1、Mac 平台的默认字体加粗效果</strong>：（苹方字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_mac.png\" alt></p>\n<p><strong>2、Windows 平台的默认字体加粗效果</strong>：（微软雅黑字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_windows2.png\" alt></p>\n<p><strong>3、iOS 平台的默认字体加粗效果</strong>：（苹方字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_ios.png\" alt></p>\n<p><strong>4、Android 平台（华为 P30 Pro）的默认字体加粗效果</strong>：（Droid Sans 字体）</p>\n<p><img src=\"http://img.smyhvae.com/20191016_1205_huawei_p30_pro.jpeg\" alt></p>\n<p><strong>总结</strong>：（各大平台的默认字体加粗效果）</p>\n<ul>\n<li><p>Mac &amp; iOS 平台的“苹方”字体：500 和600，加粗效果是不同的；<code>&gt;=600</code>的加粗效果是相同的。</p>\n</li>\n<li><p>Windows 平台的“微软雅黑”字体：只有 <code>&gt;=600</code> 才会加粗，而且加粗效果相同。</p>\n</li>\n<li><p>Android 平台的 Droid Sans 字体，只有 <code>&gt;=700</code>才会加粗；而且加粗效果相同。</p>\n</li>\n</ul>\n<h2 id=\"大部分字体不是免费的\"><a href=\"#大部分字体不是免费的\" class=\"headerlink\" title=\"大部分字体不是免费的\"></a>大部分字体不是免费的</h2><p>有一点你需要知道：你所见到的大部分字体，都不是免费的。换句话说，如果你想用第三方字体从事商业活动，要先交钱，获得授权后才可以使用。你在给公司做网页的时候，就是一种商业行为。</p>\n<p>免费字体当然有，比如<a href=\"https://baike.baidu.com/item/%E6%80%9D%E6%BA%90%E9%BB%91%E4%BD%93/14919098\" target=\"_blank\" rel=\"noopener\">思源黑体</a>（Adobe 和 Google 在2014年7月联合推出的一款开源字体）、阿里巴巴普惠体等。但这些免费字体，我们平时基本用不到。</p>\n<p>这也就是为什么，很多公司会专门购买一套商用字体库、甚至是自己开发一套字体出来，避免未来潜在的纠纷和麻烦。</p>\n<p>给大家列举一个常见的场景。很多时候，前端同学拿到的视觉稿是 psd 稿，需要用 PS 软件打开源文件，才能看到里面的文字是什么字体。在 PS 软件里，当我们用光标选中字体的时候，出现了下面这种场景：</p>\n<p><img src=\"http://img.smyhvae.com/20191010_1121.png\" alt></p>\n<p>看到上面的<code>FZLTZCHK</code>，不要慌，马上去 Google 查一下，发现这个字体的全称是<code>方正兰亭</code>字体系列。恩，基本可以肯定， 这个字体也是要收费的。</p>\n<p>这个时候，前端同学要马上告诉产品或者设计师，不要用这个字体，因为它是商用字体，是要收费的，小心吃官司。那我们该用什么字体呢？接着往下看。</p>\n<h2 id=\"网页一般用什么字体\"><a href=\"#网页一般用什么字体\" class=\"headerlink\" title=\"网页一般用什么字体\"></a>网页一般用什么字体</h2><p>大多数情况下，网页使用系统默认的字体就足够了。如果要使用特殊字体，顶多只是让<strong>阿拉伯数字</strong>使用特殊字体。中文和英文，使用默认字体，完全足够。</p>\n<p>如果确实要使用特殊字体，只有这几种办法：</p>\n<ul>\n<li><p>使用开源的免费字体（比如思源黑体、阿里巴巴普惠体等）。但这类字体，种类很少，而且不是很好看。网页开发中，基本没人用。</p>\n</li>\n<li><p>单独购买商用字体，获得授权。</p>\n</li>\n<li><p>自己公司开发一套字体，给自己人用。</p>\n</li>\n</ul>\n<p>比如我所在的 JD 公司就自主开发了一套商用字体<code>JDZH</code>（只允许 JD 公司自己用，别家公司不允许用），支持三种粗细。如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JD正黑体，提供三种字重，请严格按设计稿选择字体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> @<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'JDZH-Light'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'xxx.com/data/ppms/others/JDZH_Light.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'JDZH-Regular'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'xxx.com/data/ppms/others/JDZH_Regular.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'JDZH-Bold'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'xxx.com/data/ppms/others/JDZH_Bold.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">'JDZhengHT-EN-Bold'</span>;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'xxx.com/data/ppms/others/JDZhengHei_01_Bold.ttf'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了使用这个<code>JDZH</code>字体， JD公司在实际开发网页时，是这样做的：</p>\n<ul>\n<li><p>步骤1：在公共的 CSS 文件中引入上方的字体库代码。这样的话，当页面加载时，用户的终端就会去下载这个字体库。</p>\n</li>\n<li><p>步骤2：在业务代码中，针对目标样式，直接使用 <code>font-family: &#39;JDZH-Regular&#39;;</code>这样的代码，即可生效。</p>\n</li>\n</ul>\n<p>这个<code>JDZH</code>，我们一般也只使用在阿拉伯数字中；中文和英文，建议使用系统默认字体就行。</p>\n<h2 id=\"最后一段\"><a href=\"#最后一段\" class=\"headerlink\" title=\"最后一段\"></a>最后一段</h2><p>所谓「见微知著」，一个再不起眼的知识点，也是有很多学问的。光是“字体”这一点，就足够成为一门学科。</p>\n<p>2005年，苹果公司创始人乔布斯（Steve Jobs）在斯坦福大学的毕业典礼演讲上，有过这样一段话：</p>\n<blockquote>\n<p>当时的我从来没有期盼过我所学的这些东西，能够在我的生活中有什么实际的用处。</p>\n</blockquote>\n<blockquote>\n<p>但是到了十年之后，当我们在设计第一台 Macintosh 电脑时，这些所学都涌进了我的头脑。于是，我把这些设计融入到了 Mac 电脑之中，这也使这台 Mac 成为了第一台拥有漂亮字体的电脑。</p>\n</blockquote>\n<blockquote>\n<p>可以说，如果我当时没有退学，就不会有机会去参加我感兴趣的美术字课程，Mac 也就不会拥有那些美妙的排版和字体。而当 Windows 系统借鉴了Mac之后，似乎所有的电脑都应该是这个样子。</p>\n</blockquote>\n<blockquote>\n<p>当时的我没有办法把这些点点滴滴连接起来，但是，<strong>当我十年后回顾的时候，一切都变得豁然开朗</strong>。</p>\n</blockquote>\n<h3 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h3><ul>\n<li><p>常见的免费字体：<a href=\"http://zenozeng.github.io/Free-Chinese-Fonts/\" target=\"_blank\" rel=\"noopener\">http://zenozeng.github.io/Free-Chinese-Fonts/</a></p>\n</li>\n<li><p>如何优雅的选择字体(font-family)：<a href=\"https://segmentfault.com/a/1190000006110417\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006110417</a></p>\n</li>\n<li><p>iconfont：<a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">https://www.iconfont.cn/</a></p>\n</li>\n<li><p>阿里巴巴官方发布免费商用字体：阿里巴巴普惠体：<a href=\"https://mp.weixin.qq.com/s/daKUNnF_Ste-O1l0sR89sQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/daKUNnF_Ste-O1l0sR89sQ</a></p>\n</li>\n<li><p>得到 | 从甲骨文至得到今楷，造字的人都是神：<a href=\"https://mp.weixin.qq.com/s/ZnMxrhoH9piLf9EaSIwiGA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/ZnMxrhoH9piLf9EaSIwiGA</a></p>\n</li>\n</ul>"},{"title":"你还在用图片做引导蒙层？","subtitle":"本文讲述引导蒙层的6种实现方式","date":"2019-09-20T02:43:41.000Z","cover":"https://wq.360buyimg.com/data/ppms/picture/WechatIMG1.jpg","thumbnail":"https://wq.360buyimg.com/data/ppms/picture/WechatIMG1.jpg","_content":"\n> 作者：深山蚂蚁\n\n引导蒙层通常在新业务上线、或者业务有变更时的给新用户的一个操作指引。下图页面即是一个蒙层，会在某个局部位置高亮我们需要重点突出的内容：  \n<!--more-->\n![阴影](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_1.png)    \n\n当前发现很多页面做蒙层引导，还是使用图片形式来做。\n\n# 图片引导蒙层有几大缺点：\n1. 图片大，影响加载\n2. 图片的内容都是假的，和真实的底部内容没对上\n3. 全屏蒙层图片，图片的宽高和屏幕宽高不一致，显示两边留黑，或者有压缩的效果。\n4. 图片的引导位置不能点击。\n5. low ？ not cool ？\n\n# 本文讲述六种思路来实现引导蒙层\n\n- z-index实现蒙层\n- 动态opacity实现\n- border实现\n- box-shadow实现\n- 节点复制实现\n- canvas实现\n\n> 以上六种引导蒙层实现思路，在一定情况下都能满足业务需求，从不同角度来实现了引导蒙层。z-index最简单，canvas最灵活，就个人而言，更加喜欢骨架屏式的动态opacity蒙层实现，更有趣更酷!!!  \n\n## 思路一：使用z-index\n- 新增一个div，设置为半透明区域，大小覆盖整个页面\n- 半透明蒙层区域z-index大于页面元素\n- 引导内容区域大于半透明蒙层区域z-index \n\n这个好理解，页面元素都是有层级的，我们只需要把引导内容区域设置为最顶层的层级，在引导内容区域之下设置一个遮罩层，其他内容元素的z-index都地域这个遮罩层即可。 我们来看一个简单例子。\n```CSS\n.z1{\n  position:absolute;\n  left:50px;\n  top:50px;\n  width:50px;\n  height:50px;\n  background:blue;\n  z-index:1;\n}\n.z2{\n  position:absolute;\n  left:60px;\n  top:60px;\n  width:50px;\n  height:50px;\n  background:red;\n  z-index:2;\n}\n.z3{\n  position:absolute;\n  left:70px;\n  top:70px;\n  width:50px;\n  height:50px;\n  background:yellow;\n  z-index:3;\n}\n```\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_1.png)  \n\n我们修改一下z2的样式。  \n```css\n.z2{\n  position:absolute;\n  left:50px;\n  top:50px;\n  width:50px;\n  height:50px;\n  background:black;\n  opacity:0.5;\n  z-index:2;\n  animation:z_index 2s linear infinite alternate;\n}\n@keyframes z_index {\n    from {\n      left:50px;\n      top:50px;\n      width:50px;\n      height:50px;\n    }\n    to {\n      left:0px;\n      top:0px;\n      width:200px;\n      height:200px;\n    }\n  }\n```\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_2.gif)\n\n只要在布局页面元素的时候，把需要做蒙层的元素确定好，配合js，动态的设置元素的z-index + opacity，就可以很好的做到页面的引导蒙层效果。  \n\n## 思路二：使用opacity将非蒙层元素半透明\n- 引导内容区域无需改动\n- 页面其他节点元素半透明  \n\n我们不再新增蒙层，而是完全操作页面节点，将需要遮罩的节点都设置为半透明，引导蒙层显现内容则完全显示出来。页面的效果和蒙层不太一样，对于空白地方，我们仍然是完全显示，只是将有内容的元素给半透明，类似骨架屏的效果。  \n为了演示效果，我们看如下例子：  \n页面设置6个元素。\n```html\n<div class=\"wrap\">\n    <div class=\"z z1\"></div>\n    <div class=\"z z2\"></div>\n    <div class=\"z z3\"></div>\n    <div class=\"z z4\"></div>\n    <div class=\"z z5\"></div>\n    <div class=\"z z6\"></div>\n  </div>\n```\n将元素内容用flex并排布局。\n```CSS\n.wrap{\n  display:flex;\n  flex-wrap:wrap;\n  width:150px;\n}\n.z{\n  width:50px;\n  height:50px;\n  transition:all 1s;\n}\n.z1{\n  background:blue;\n}\n.z2{\n  background:black;\n}\n.z3{\n  background:yellow;\n}\n.z4{\n  background:red;\n}\n.z5{\n  background:green;\n}\n.z6{\n  background:orange;\n}\n```\n使用js操作，依次半透明其他元素，显示当前元素来模拟蒙层。\n```js\nlet arry = Array.from(document.querySelectorAll(\".z\"));\nlet index = -1;\nlet direct = 1;\nsetInterval(()=>{\n  if(index>=5) direct = -1;\n  else if(index<=0) direct = 1;\n  index = index+direct;\n  arry.forEach((d,i)=>{\n    d.style.opacity = 1;\n  });\n  setTimeout(()=>{\n    arry.forEach((d,i)=>{\n      if(i==index) return;\n      d.style.opacity = 0.1;\n    });\n  },1000);\n},2000)\n```\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_3.gif)\n\n看了这个例子，我们清晰的看到这个引导蒙层的实现过程。这种引导蒙层其实更好玩有趣，有点类似当前流行的骨架屏，其他已有元素需要遮罩的内容就是骨架屏的灰色部分，需要显现的就是重点的蒙层内容。  \n有趣！！！\n\n## 思路三：使用border的方式来实现\n没错，就是普遍不能在普遍的border了，且看如下：  \n```css\ndiv {\n    border:1px solid #red;\n}\n```\n那用border怎么实现引导蒙层呢？  \n### 1、先了解下三角形\n先看一个简单的例子：     \n\n```html\n<div class=\"border_1\"></div>\n```\n```CSS\n.border_1{\n    width: 100px;\n    height: 100px;\n    border-top:50px solid red;\n    border-right: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n    border-left: 50px solid transparent;\n    box-sizing:border-box;\n}\n```\n![border_1](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_1.png)  \n\n实现了一个倒三角,这个应用场景是不是就比较多了，很多tips的指引，标注等都会用到。我就看到过这种倒三角使用一张图片代替的做法。   \n仔细看这段代码，主要有实现了三点：  \n1. 四边都设置了边框\n2. 宽高都为100px,即上下、左右表框之和，其实小于等于这个值都行。\n3. 只有顶部边框是红色，其他边框是透明的。  \n\n为了理解上面的实现，我们来看下如下代码：  \n```CSS\n.border_2{\n    width: 100px;\n    height: 100px;\n    background-color:green;\n    border-style:solid;\n    border-color:red yellow blue black;\n    border-width:50px;\n    animation:border_ani 2s linear infinite alternate;\n    box-sizing:border-box;\n}\n@keyframes border_ani {\n    from {\n        border-width:50px;\n    }\n    to {\n      border-width:0;\n    }\n  }\n```\n![animation](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_2.gif)\n\n从图中我们可以清晰的看到，随着border-width的变化，整个div的绿色背景在跟随变化。 \n- 当border-width=0的时候，整个页面只有绿色背景，即都是内容的大小\n- 当border-width=50的时候，整个div的大小都被border给充满了，上下左右均分1/4，就是四个倒三角。  \n\n这样我们就清晰的能得到:  \n> 当border-right,border-left,border-bottom都transparent透明，border-top是红色的时候，所看到的就是一个倒三角。  \n\n同理我们还可以设置边框的大小不一致，可以实现斜三角： \n```CSS \n.border_3{\n    width: 0;\n    height: 0;\n    border-top:30px solid red;\n    border-right: 10px solid transparent;\n    border-bottom: 20px solid transparent;\n    border-left: 100px solid transparent;\n    box-sizing:border-box;\n}\n```\n![斜三角](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_3.png)\n\n还可以实现工作中经常碰到的梯形：  \n```CSS\n.border_4{\n    width: 150px;\n    height: 150px;\n    border-top:50px solid red;\n    border-right: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n    border-left: 50px solid transparent;\n    box-sizing:border-box;\n}\n```\n![梯形](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_4.png)\n \n好了，这里不累赘了，感兴趣的可以各种尝试。遇到这种简单边线图，就不要动不动使用图片了。  \n\n### 2、再看实现引导蒙层\n\n- 新增一个div，作为蒙层元素 \n- div中间大小和引导内容元素大小完全一致，且位置恰好重叠\n- div的border设置为半透明且无限放大\n\n了解了上面的三角形的实现之后，估计你也能想出怎么做引导蒙层了。一个div有四个边框，如果我们把边框都设置成半透明，然后中间的区域（上面border_2的green）设置成全透明会不就可以实现区域引导蒙层了吗？然后再把边框设置成超过屏幕的大小呢，就是全景引导蒙层了！\n```CSS\n.border_5{\n    width: 150px;\n    height: 150px;\n    border-top:50px solid rgba(0,0,0,.5);\n    border-right: 50px solid rgba(0,0,0,.5);\n    border-bottom: 50px solid rgba(0,0,0,.5);\n    border-left: 50px solid rgba(0,0,0,.5);\n    box-sizing:border-box;\n}\n```\n![蒙层](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_5.png)\n\n这是一个150px的区域蒙层，我们看下如下示例就能很明白了：\n```CSS\n.border_6{\n    width: 20px;\n    height: 20px;\n    border-style:solid;\n    border-color:rgba(0,0,0,.5);\n    border-width:20px;\n    animation:border_ani 2s linear infinite alternate;\n    box-sizing:content-box;\n}\n@keyframes border_ani {\n    from {\n        border-width:20px;\n    }\n    to {\n      border-width:100px;\n    }\n  }\n```\n![蒙层](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_6.gif)\n\n当然，我们还可以设置border-radius来实现圆形的蒙层区域，如下：  \n\n![border-radius](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_7.png)   \n\n当然，这里的边框大小值都是写死的，具体实现需要根据页面内容修改或者动态修改即可。  \n\n如果是椭圆呢？\n\n总结：\n> border可以实现各种边线的形状，可以实现引导蒙层，页面指定区域透明，之外的都半透明来实现即可。\n\n \n## 思路四、使用box-shadow来实现\n- 新增一个div，作为蒙层元素 \n- div大小和内容元素大小完全一致，且位置恰好重叠\n- div的box-shadow的阴影尺寸设置为半透明且设置为比较大的约2000px大小\n\nbox-shadow，大伙都不陌生，就是盒子的阴影，我们先来了解下它的基本用法：  \n```CSS\n.boxshadow_1{\n    width:50px;\n    height:50px;\n    background:blue;\n    box-shadow: 10px 10px 5px 4px #000;\n}\n```\n![阴影](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_1.png)\n\n在宽高为50px的div,它的阴影水平和垂直都是10px，阴影模糊距离是5px,阴影的尺寸是4px,阴影是#000的颜色(这里给body增加了一个yellow的背景色以便于区分)。  \n\n首先我们把阴影透明：  \n```CSS\n.boxshadow_2{\n    width:50px;\n    height:50px;\n    background:blue;\n    box-shadow: 10px 10px 5px 4px rgba(0,0,0,.5);\n}\n```\n![阴影](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_2.png)  \n\n那怎么让阴影遮盖整个页面呢？  \n- 阴影的水平和垂直距离是指距离原dev的距离，这个调整达不到效果，只会让阴影更多的偏离元素。\n- 阴影的模糊距离指阴影的边缘渐变模糊的距离，距离越长，只会让渐变模糊加长，蒙层大小不会变。\n- 阴影的尺寸，这个是指多大的阴影，那我们将阴影尺寸设置很大呢？是的，就是这个了 \n\n看如下的例子，我们调整阴影的尺寸：  \n```CSS\n.boxshadow_3 {\n  width:50px;\n  height:50px;\n  background:blue;\n  box-shadow: 0px 0px 5px 0px rgba(0,0,0,.5);\n  animation:box_ani 2s linear infinite alternate;\n}\n@keyframes box_ani {\n    from {\n        box-shadow: 10px 10px 5px 0px rgba(0,0,0,.5);\n    }\n    to {\n        box-shadow: 10px 10px 5px 100px rgba(0,0,0,.5);\n    }\n  }\n```\n如上，我们只需要把阴影尺寸加大就可以实现引导蒙层了。  \n如果需要引导蒙层状态下还能响应事件呢？只需要加一个pointer-events属性即可。  \n\n> box-shadow的阴影距离切勿盲目设置过大，经过测试这个值如果过大，比如4000px，在部分手机上阴影无法显示出来。经过实践，设置为2000px为佳。\n\n## 思路五：使用页面节点复制\n- 新增两个div，一个半透明蒙层元素和一个蒙层内容区域\n- 将页面节点引导内容拷贝到蒙层内容区域\n- 将蒙层内容区域的大小和位置与原节点引导内容完全重合\n\n页面内容已经做好了，我们需要引导蒙层来显示某个元素，那么将元素复制到最外层，顶层增加一层蒙层来实现,需要突出的引导内容在蒙层之上即可实现。\n```html\n<div class=\"content one\">我是第一个div，我是第一个div</div>\n<div class=\"content two\">我是第二个div，我是第二个div</div>\n<div class=\"content three\">我是第三个div，我是第三个div</div>\n<div class=\"content four\">我是第四个div，我是第四个div</div>\n<div class=\"mask\"></div>\n<div id=\"maskContent\"></div>\n```\n这里设置了一个固定蒙层，和一个固定的蒙层内容元素，我们只需要填充即可。\n```CSS\n.content{\n    padding:10px;\n    z-index:0;\n}\n.mask{\n    position:fixed;\n    left:0;\n    top:0;\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,.8);\n    z-index:900\n  }\n  #maskContent{\n    position:fixed;\n    z-index:999;\n    display:inline-block;\n    background-color: #fff;\n  }\n```\n这里内容区域都是0，然后mask是900，我们的蒙层元素是999，就是最上层了。\n```js\nfunction renderContent(cls){\n    let targetNode = document.querySelector(`.${cls}`);\n    let maskContent = document.getElementById(\"maskContent\");\n    maskContent.innerHTML = targetNode.outerHTML;\n    let pos = targetNode.getBoundingClientRect();\n    maskContent.style.top=pos.top+\"px\";\n    maskContent.style.left=pos.left+\"px\";\n    maskContent.style.width=pos.width+\"px\";\n    maskContent.style.height=pos.height+\"px\";\n }\nlet i = 0;\nsetInterval(()=>{\n    renderContent(['one','two','three','four'][i]);\n    if(++i>=4) i = 0;\n},1000)\n```\n这里为了演示效果，增加了一个定时器改变不同的遮罩层。易于理解，看下效果：  \n\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_1.gif)\n\n## 思路六：使用canvas实现\n- 新增一个canvas，绘制两次图形\n- 第一次：绘制一个全屏的半透明阴影\n- 第二次：使用xor绘制一个和引导内容区域的大小位置完全重合的区域  \n\n第二次绘制的内容区域和第一次重叠，使用xor，所以会透明，该引导内容区域就会完全显示出来，这就是我们想要的效果了。   \n\n使用canvas的globalCompositeOperation属性来实现,内容参考http://www.tutorialspoint.com/html5/canvas_composition.htm  \n\n重点看xor：Shapes are made transparent where both overlap and drawn normal everywhere else.   \n翻译： canvas绘制的形状在重叠处都会变成透明的，非重叠处的其他任何地方都正常绘制内容。  \n\n所以我们就可以在canvas里面绘制一个canvas蒙层，然后在蒙层中需要显示的内容用xor来绘制重叠，然后重叠内容就会被透明，那么这个透明区域的内容就是我们想要的引导蒙层突出内容区域。具体看实例：  \n\n```html\n <div class=\"content one\">我是第一个div，我是第一个div</div>\n<div class=\"content two\">我是第二个div，我是第二个div</div>\n<div class=\"content three\">我是第三个div，我是第三个div</div>\n<div class=\"conteent four\">我是第四个div，我是第四个div</div>\n<canvas id=\"mask\"></canvas>\n```\n页面增加一个canvas节点。将canvas整体设置成半透明，然后再用xor来实现内容的绘制。   \n\n```js\n function mask(cls){\n    let targetNode = document.querySelector(`.${cls}`);\n    let pos = targetNode.getBoundingClientRect();\n    let canvas = document.getElementById(\"mask\");\n    let width = window.innerWidth;\n    let height = window.innerHeight;;\n    canvas.setAttribute(\"width\", width);\n    canvas.setAttribute(\"height\",height);\n    var ctx = canvas.getContext(\"2d\"); \n    ctx.globalCompositeOperation = 'source-over';\n    ctx.fillStyle ='rgba(255, 255, 255, 0.9)';\n    ctx.fillRect(0, 0, width, height);\n    ctx.fill();\n    ctx.fillStyle ='white';\n    ctx.globalCompositeOperation=\"xor\";\n    ctx.fillRect(pos.left,pos.top,pos.width,pos.height);\n    ctx.fill();\n }\nlet array = ['one','two','three','four'];\nlet i = 0;\nsetInterval(()=>{\n    mask(array[i]);\n    i++;\n    if(i>=4) i = 0;\n},1000)\n```\n\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_2.gif)  \n\n看完以上实现，你最喜欢哪种实现方式呢？\n\n","source":"_posts/2019-09/guid-mask.md","raw":"---\ntitle: 你还在用图片做引导蒙层？\nsubtitle: 本文讲述引导蒙层的6种实现方式\ndate: 2019-09-20 10:43:41\ncover:  https://wq.360buyimg.com/data/ppms/picture/WechatIMG1.jpg\nthumbnail: https://wq.360buyimg.com/data/ppms/picture/WechatIMG1.jpg\ntags: \n  - 引导蒙层\n  - canvas\ncategories: Web开发\n---\n\n> 作者：深山蚂蚁\n\n引导蒙层通常在新业务上线、或者业务有变更时的给新用户的一个操作指引。下图页面即是一个蒙层，会在某个局部位置高亮我们需要重点突出的内容：  \n<!--more-->\n![阴影](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_1.png)    \n\n当前发现很多页面做蒙层引导，还是使用图片形式来做。\n\n# 图片引导蒙层有几大缺点：\n1. 图片大，影响加载\n2. 图片的内容都是假的，和真实的底部内容没对上\n3. 全屏蒙层图片，图片的宽高和屏幕宽高不一致，显示两边留黑，或者有压缩的效果。\n4. 图片的引导位置不能点击。\n5. low ？ not cool ？\n\n# 本文讲述六种思路来实现引导蒙层\n\n- z-index实现蒙层\n- 动态opacity实现\n- border实现\n- box-shadow实现\n- 节点复制实现\n- canvas实现\n\n> 以上六种引导蒙层实现思路，在一定情况下都能满足业务需求，从不同角度来实现了引导蒙层。z-index最简单，canvas最灵活，就个人而言，更加喜欢骨架屏式的动态opacity蒙层实现，更有趣更酷!!!  \n\n## 思路一：使用z-index\n- 新增一个div，设置为半透明区域，大小覆盖整个页面\n- 半透明蒙层区域z-index大于页面元素\n- 引导内容区域大于半透明蒙层区域z-index \n\n这个好理解，页面元素都是有层级的，我们只需要把引导内容区域设置为最顶层的层级，在引导内容区域之下设置一个遮罩层，其他内容元素的z-index都地域这个遮罩层即可。 我们来看一个简单例子。\n```CSS\n.z1{\n  position:absolute;\n  left:50px;\n  top:50px;\n  width:50px;\n  height:50px;\n  background:blue;\n  z-index:1;\n}\n.z2{\n  position:absolute;\n  left:60px;\n  top:60px;\n  width:50px;\n  height:50px;\n  background:red;\n  z-index:2;\n}\n.z3{\n  position:absolute;\n  left:70px;\n  top:70px;\n  width:50px;\n  height:50px;\n  background:yellow;\n  z-index:3;\n}\n```\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_1.png)  \n\n我们修改一下z2的样式。  \n```css\n.z2{\n  position:absolute;\n  left:50px;\n  top:50px;\n  width:50px;\n  height:50px;\n  background:black;\n  opacity:0.5;\n  z-index:2;\n  animation:z_index 2s linear infinite alternate;\n}\n@keyframes z_index {\n    from {\n      left:50px;\n      top:50px;\n      width:50px;\n      height:50px;\n    }\n    to {\n      left:0px;\n      top:0px;\n      width:200px;\n      height:200px;\n    }\n  }\n```\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_2.gif)\n\n只要在布局页面元素的时候，把需要做蒙层的元素确定好，配合js，动态的设置元素的z-index + opacity，就可以很好的做到页面的引导蒙层效果。  \n\n## 思路二：使用opacity将非蒙层元素半透明\n- 引导内容区域无需改动\n- 页面其他节点元素半透明  \n\n我们不再新增蒙层，而是完全操作页面节点，将需要遮罩的节点都设置为半透明，引导蒙层显现内容则完全显示出来。页面的效果和蒙层不太一样，对于空白地方，我们仍然是完全显示，只是将有内容的元素给半透明，类似骨架屏的效果。  \n为了演示效果，我们看如下例子：  \n页面设置6个元素。\n```html\n<div class=\"wrap\">\n    <div class=\"z z1\"></div>\n    <div class=\"z z2\"></div>\n    <div class=\"z z3\"></div>\n    <div class=\"z z4\"></div>\n    <div class=\"z z5\"></div>\n    <div class=\"z z6\"></div>\n  </div>\n```\n将元素内容用flex并排布局。\n```CSS\n.wrap{\n  display:flex;\n  flex-wrap:wrap;\n  width:150px;\n}\n.z{\n  width:50px;\n  height:50px;\n  transition:all 1s;\n}\n.z1{\n  background:blue;\n}\n.z2{\n  background:black;\n}\n.z3{\n  background:yellow;\n}\n.z4{\n  background:red;\n}\n.z5{\n  background:green;\n}\n.z6{\n  background:orange;\n}\n```\n使用js操作，依次半透明其他元素，显示当前元素来模拟蒙层。\n```js\nlet arry = Array.from(document.querySelectorAll(\".z\"));\nlet index = -1;\nlet direct = 1;\nsetInterval(()=>{\n  if(index>=5) direct = -1;\n  else if(index<=0) direct = 1;\n  index = index+direct;\n  arry.forEach((d,i)=>{\n    d.style.opacity = 1;\n  });\n  setTimeout(()=>{\n    arry.forEach((d,i)=>{\n      if(i==index) return;\n      d.style.opacity = 0.1;\n    });\n  },1000);\n},2000)\n```\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_3.gif)\n\n看了这个例子，我们清晰的看到这个引导蒙层的实现过程。这种引导蒙层其实更好玩有趣，有点类似当前流行的骨架屏，其他已有元素需要遮罩的内容就是骨架屏的灰色部分，需要显现的就是重点的蒙层内容。  \n有趣！！！\n\n## 思路三：使用border的方式来实现\n没错，就是普遍不能在普遍的border了，且看如下：  \n```css\ndiv {\n    border:1px solid #red;\n}\n```\n那用border怎么实现引导蒙层呢？  \n### 1、先了解下三角形\n先看一个简单的例子：     \n\n```html\n<div class=\"border_1\"></div>\n```\n```CSS\n.border_1{\n    width: 100px;\n    height: 100px;\n    border-top:50px solid red;\n    border-right: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n    border-left: 50px solid transparent;\n    box-sizing:border-box;\n}\n```\n![border_1](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_1.png)  \n\n实现了一个倒三角,这个应用场景是不是就比较多了，很多tips的指引，标注等都会用到。我就看到过这种倒三角使用一张图片代替的做法。   \n仔细看这段代码，主要有实现了三点：  \n1. 四边都设置了边框\n2. 宽高都为100px,即上下、左右表框之和，其实小于等于这个值都行。\n3. 只有顶部边框是红色，其他边框是透明的。  \n\n为了理解上面的实现，我们来看下如下代码：  \n```CSS\n.border_2{\n    width: 100px;\n    height: 100px;\n    background-color:green;\n    border-style:solid;\n    border-color:red yellow blue black;\n    border-width:50px;\n    animation:border_ani 2s linear infinite alternate;\n    box-sizing:border-box;\n}\n@keyframes border_ani {\n    from {\n        border-width:50px;\n    }\n    to {\n      border-width:0;\n    }\n  }\n```\n![animation](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_2.gif)\n\n从图中我们可以清晰的看到，随着border-width的变化，整个div的绿色背景在跟随变化。 \n- 当border-width=0的时候，整个页面只有绿色背景，即都是内容的大小\n- 当border-width=50的时候，整个div的大小都被border给充满了，上下左右均分1/4，就是四个倒三角。  \n\n这样我们就清晰的能得到:  \n> 当border-right,border-left,border-bottom都transparent透明，border-top是红色的时候，所看到的就是一个倒三角。  \n\n同理我们还可以设置边框的大小不一致，可以实现斜三角： \n```CSS \n.border_3{\n    width: 0;\n    height: 0;\n    border-top:30px solid red;\n    border-right: 10px solid transparent;\n    border-bottom: 20px solid transparent;\n    border-left: 100px solid transparent;\n    box-sizing:border-box;\n}\n```\n![斜三角](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_3.png)\n\n还可以实现工作中经常碰到的梯形：  \n```CSS\n.border_4{\n    width: 150px;\n    height: 150px;\n    border-top:50px solid red;\n    border-right: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n    border-left: 50px solid transparent;\n    box-sizing:border-box;\n}\n```\n![梯形](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_4.png)\n \n好了，这里不累赘了，感兴趣的可以各种尝试。遇到这种简单边线图，就不要动不动使用图片了。  \n\n### 2、再看实现引导蒙层\n\n- 新增一个div，作为蒙层元素 \n- div中间大小和引导内容元素大小完全一致，且位置恰好重叠\n- div的border设置为半透明且无限放大\n\n了解了上面的三角形的实现之后，估计你也能想出怎么做引导蒙层了。一个div有四个边框，如果我们把边框都设置成半透明，然后中间的区域（上面border_2的green）设置成全透明会不就可以实现区域引导蒙层了吗？然后再把边框设置成超过屏幕的大小呢，就是全景引导蒙层了！\n```CSS\n.border_5{\n    width: 150px;\n    height: 150px;\n    border-top:50px solid rgba(0,0,0,.5);\n    border-right: 50px solid rgba(0,0,0,.5);\n    border-bottom: 50px solid rgba(0,0,0,.5);\n    border-left: 50px solid rgba(0,0,0,.5);\n    box-sizing:border-box;\n}\n```\n![蒙层](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_5.png)\n\n这是一个150px的区域蒙层，我们看下如下示例就能很明白了：\n```CSS\n.border_6{\n    width: 20px;\n    height: 20px;\n    border-style:solid;\n    border-color:rgba(0,0,0,.5);\n    border-width:20px;\n    animation:border_ani 2s linear infinite alternate;\n    box-sizing:content-box;\n}\n@keyframes border_ani {\n    from {\n        border-width:20px;\n    }\n    to {\n      border-width:100px;\n    }\n  }\n```\n![蒙层](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_6.gif)\n\n当然，我们还可以设置border-radius来实现圆形的蒙层区域，如下：  \n\n![border-radius](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_7.png)   \n\n当然，这里的边框大小值都是写死的，具体实现需要根据页面内容修改或者动态修改即可。  \n\n如果是椭圆呢？\n\n总结：\n> border可以实现各种边线的形状，可以实现引导蒙层，页面指定区域透明，之外的都半透明来实现即可。\n\n \n## 思路四、使用box-shadow来实现\n- 新增一个div，作为蒙层元素 \n- div大小和内容元素大小完全一致，且位置恰好重叠\n- div的box-shadow的阴影尺寸设置为半透明且设置为比较大的约2000px大小\n\nbox-shadow，大伙都不陌生，就是盒子的阴影，我们先来了解下它的基本用法：  \n```CSS\n.boxshadow_1{\n    width:50px;\n    height:50px;\n    background:blue;\n    box-shadow: 10px 10px 5px 4px #000;\n}\n```\n![阴影](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_1.png)\n\n在宽高为50px的div,它的阴影水平和垂直都是10px，阴影模糊距离是5px,阴影的尺寸是4px,阴影是#000的颜色(这里给body增加了一个yellow的背景色以便于区分)。  \n\n首先我们把阴影透明：  \n```CSS\n.boxshadow_2{\n    width:50px;\n    height:50px;\n    background:blue;\n    box-shadow: 10px 10px 5px 4px rgba(0,0,0,.5);\n}\n```\n![阴影](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_2.png)  \n\n那怎么让阴影遮盖整个页面呢？  \n- 阴影的水平和垂直距离是指距离原dev的距离，这个调整达不到效果，只会让阴影更多的偏离元素。\n- 阴影的模糊距离指阴影的边缘渐变模糊的距离，距离越长，只会让渐变模糊加长，蒙层大小不会变。\n- 阴影的尺寸，这个是指多大的阴影，那我们将阴影尺寸设置很大呢？是的，就是这个了 \n\n看如下的例子，我们调整阴影的尺寸：  \n```CSS\n.boxshadow_3 {\n  width:50px;\n  height:50px;\n  background:blue;\n  box-shadow: 0px 0px 5px 0px rgba(0,0,0,.5);\n  animation:box_ani 2s linear infinite alternate;\n}\n@keyframes box_ani {\n    from {\n        box-shadow: 10px 10px 5px 0px rgba(0,0,0,.5);\n    }\n    to {\n        box-shadow: 10px 10px 5px 100px rgba(0,0,0,.5);\n    }\n  }\n```\n如上，我们只需要把阴影尺寸加大就可以实现引导蒙层了。  \n如果需要引导蒙层状态下还能响应事件呢？只需要加一个pointer-events属性即可。  \n\n> box-shadow的阴影距离切勿盲目设置过大，经过测试这个值如果过大，比如4000px，在部分手机上阴影无法显示出来。经过实践，设置为2000px为佳。\n\n## 思路五：使用页面节点复制\n- 新增两个div，一个半透明蒙层元素和一个蒙层内容区域\n- 将页面节点引导内容拷贝到蒙层内容区域\n- 将蒙层内容区域的大小和位置与原节点引导内容完全重合\n\n页面内容已经做好了，我们需要引导蒙层来显示某个元素，那么将元素复制到最外层，顶层增加一层蒙层来实现,需要突出的引导内容在蒙层之上即可实现。\n```html\n<div class=\"content one\">我是第一个div，我是第一个div</div>\n<div class=\"content two\">我是第二个div，我是第二个div</div>\n<div class=\"content three\">我是第三个div，我是第三个div</div>\n<div class=\"content four\">我是第四个div，我是第四个div</div>\n<div class=\"mask\"></div>\n<div id=\"maskContent\"></div>\n```\n这里设置了一个固定蒙层，和一个固定的蒙层内容元素，我们只需要填充即可。\n```CSS\n.content{\n    padding:10px;\n    z-index:0;\n}\n.mask{\n    position:fixed;\n    left:0;\n    top:0;\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,.8);\n    z-index:900\n  }\n  #maskContent{\n    position:fixed;\n    z-index:999;\n    display:inline-block;\n    background-color: #fff;\n  }\n```\n这里内容区域都是0，然后mask是900，我们的蒙层元素是999，就是最上层了。\n```js\nfunction renderContent(cls){\n    let targetNode = document.querySelector(`.${cls}`);\n    let maskContent = document.getElementById(\"maskContent\");\n    maskContent.innerHTML = targetNode.outerHTML;\n    let pos = targetNode.getBoundingClientRect();\n    maskContent.style.top=pos.top+\"px\";\n    maskContent.style.left=pos.left+\"px\";\n    maskContent.style.width=pos.width+\"px\";\n    maskContent.style.height=pos.height+\"px\";\n }\nlet i = 0;\nsetInterval(()=>{\n    renderContent(['one','two','three','four'][i]);\n    if(++i>=4) i = 0;\n},1000)\n```\n这里为了演示效果，增加了一个定时器改变不同的遮罩层。易于理解，看下效果：  \n\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_1.gif)\n\n## 思路六：使用canvas实现\n- 新增一个canvas，绘制两次图形\n- 第一次：绘制一个全屏的半透明阴影\n- 第二次：使用xor绘制一个和引导内容区域的大小位置完全重合的区域  \n\n第二次绘制的内容区域和第一次重叠，使用xor，所以会透明，该引导内容区域就会完全显示出来，这就是我们想要的效果了。   \n\n使用canvas的globalCompositeOperation属性来实现,内容参考http://www.tutorialspoint.com/html5/canvas_composition.htm  \n\n重点看xor：Shapes are made transparent where both overlap and drawn normal everywhere else.   \n翻译： canvas绘制的形状在重叠处都会变成透明的，非重叠处的其他任何地方都正常绘制内容。  \n\n所以我们就可以在canvas里面绘制一个canvas蒙层，然后在蒙层中需要显示的内容用xor来绘制重叠，然后重叠内容就会被透明，那么这个透明区域的内容就是我们想要的引导蒙层突出内容区域。具体看实例：  \n\n```html\n <div class=\"content one\">我是第一个div，我是第一个div</div>\n<div class=\"content two\">我是第二个div，我是第二个div</div>\n<div class=\"content three\">我是第三个div，我是第三个div</div>\n<div class=\"conteent four\">我是第四个div，我是第四个div</div>\n<canvas id=\"mask\"></canvas>\n```\n页面增加一个canvas节点。将canvas整体设置成半透明，然后再用xor来实现内容的绘制。   \n\n```js\n function mask(cls){\n    let targetNode = document.querySelector(`.${cls}`);\n    let pos = targetNode.getBoundingClientRect();\n    let canvas = document.getElementById(\"mask\");\n    let width = window.innerWidth;\n    let height = window.innerHeight;;\n    canvas.setAttribute(\"width\", width);\n    canvas.setAttribute(\"height\",height);\n    var ctx = canvas.getContext(\"2d\"); \n    ctx.globalCompositeOperation = 'source-over';\n    ctx.fillStyle ='rgba(255, 255, 255, 0.9)';\n    ctx.fillRect(0, 0, width, height);\n    ctx.fill();\n    ctx.fillStyle ='white';\n    ctx.globalCompositeOperation=\"xor\";\n    ctx.fillRect(pos.left,pos.top,pos.width,pos.height);\n    ctx.fill();\n }\nlet array = ['one','two','three','four'];\nlet i = 0;\nsetInterval(()=>{\n    mask(array[i]);\n    i++;\n    if(i>=4) i = 0;\n},1000)\n```\n\n![z-index](https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_2.gif)  \n\n看完以上实现，你最喜欢哪种实现方式呢？\n\n","slug":"guid-mask","published":1,"updated":"2019-11-20T05:52:52.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflr7001msoyxe8x2k9f3","content":"<blockquote>\n<p>作者：深山蚂蚁</p>\n</blockquote>\n<p>引导蒙层通常在新业务上线、或者业务有变更时的给新用户的一个操作指引。下图页面即是一个蒙层，会在某个局部位置高亮我们需要重点突出的内容：  </p>\n<a id=\"more\"></a>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_1.png\" alt=\"阴影\">    </p>\n<p>当前发现很多页面做蒙层引导，还是使用图片形式来做。</p>\n<h1 id=\"图片引导蒙层有几大缺点：\"><a href=\"#图片引导蒙层有几大缺点：\" class=\"headerlink\" title=\"图片引导蒙层有几大缺点：\"></a>图片引导蒙层有几大缺点：</h1><ol>\n<li>图片大，影响加载</li>\n<li>图片的内容都是假的，和真实的底部内容没对上</li>\n<li>全屏蒙层图片，图片的宽高和屏幕宽高不一致，显示两边留黑，或者有压缩的效果。</li>\n<li>图片的引导位置不能点击。</li>\n<li>low ？ not cool ？</li>\n</ol>\n<h1 id=\"本文讲述六种思路来实现引导蒙层\"><a href=\"#本文讲述六种思路来实现引导蒙层\" class=\"headerlink\" title=\"本文讲述六种思路来实现引导蒙层\"></a>本文讲述六种思路来实现引导蒙层</h1><ul>\n<li>z-index实现蒙层</li>\n<li>动态opacity实现</li>\n<li>border实现</li>\n<li>box-shadow实现</li>\n<li>节点复制实现</li>\n<li>canvas实现</li>\n</ul>\n<blockquote>\n<p>以上六种引导蒙层实现思路，在一定情况下都能满足业务需求，从不同角度来实现了引导蒙层。z-index最简单，canvas最灵活，就个人而言，更加喜欢骨架屏式的动态opacity蒙层实现，更有趣更酷!!!  </p>\n</blockquote>\n<h2 id=\"思路一：使用z-index\"><a href=\"#思路一：使用z-index\" class=\"headerlink\" title=\"思路一：使用z-index\"></a>思路一：使用z-index</h2><ul>\n<li>新增一个div，设置为半透明区域，大小覆盖整个页面</li>\n<li>半透明蒙层区域z-index大于页面元素</li>\n<li>引导内容区域大于半透明蒙层区域z-index </li>\n</ul>\n<p>这个好理解，页面元素都是有层级的，我们只需要把引导内容区域设置为最顶层的层级，在引导内容区域之下设置一个遮罩层，其他内容元素的z-index都地域这个遮罩层即可。 我们来看一个简单例子。</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.z1</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:blue;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z2</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">60px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">60px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z3</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">70px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">70px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:yellow;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_1.png\" alt=\"z-index\">  </p>\n<p>我们修改一下z2的样式。  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.z2</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:black;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">opacity</span>:<span class=\"hljs-number\">0.5</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">2</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">animation</span>:z_index <span class=\"hljs-number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"hljs-keyword\">keyframes</span> z_index &#123;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">from</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">to</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0px</span>;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0px</span>;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_2.gif\" alt=\"z-index\"></p>\n<p>只要在布局页面元素的时候，把需要做蒙层的元素确定好，配合js，动态的设置元素的z-index + opacity，就可以很好的做到页面的引导蒙层效果。  </p>\n<h2 id=\"思路二：使用opacity将非蒙层元素半透明\"><a href=\"#思路二：使用opacity将非蒙层元素半透明\" class=\"headerlink\" title=\"思路二：使用opacity将非蒙层元素半透明\"></a>思路二：使用opacity将非蒙层元素半透明</h2><ul>\n<li>引导内容区域无需改动</li>\n<li>页面其他节点元素半透明  </li>\n</ul>\n<p>我们不再新增蒙层，而是完全操作页面节点，将需要遮罩的节点都设置为半透明，引导蒙层显现内容则完全显示出来。页面的效果和蒙层不太一样，对于空白地方，我们仍然是完全显示，只是将有内容的元素给半透明，类似骨架屏的效果。<br>为了演示效果，我们看如下例子：<br>页面设置6个元素。</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"z z1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"z z2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"z z3\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"z z4\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"z z5\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"z z6\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将元素内容用flex并排布局。</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">flex-wrap</span>:wrap;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transition</span>:all <span class=\"hljs-number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z1</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z2</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z3</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z4</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z5</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.z6</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用js操作，依次半透明其他元素，显示当前元素来模拟蒙层。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> arry = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">\".z\"</span>));</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">-1</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> direct = <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(index&gt;=<span class=\"hljs-number\">5</span>) direct = <span class=\"hljs-number\">-1</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(index&lt;=<span class=\"hljs-number\">0</span>) direct = <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">  index = index+direct;</span><br><span class=\"line\">  arry.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">d,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    d.style.opacity = <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    arry.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">d,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span>(i==index) <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"line\">      d.style.opacity = <span class=\"hljs-number\">0.1</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"line\">&#125;,<span class=\"hljs-number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_3.gif\" alt=\"z-index\"></p>\n<p>看了这个例子，我们清晰的看到这个引导蒙层的实现过程。这种引导蒙层其实更好玩有趣，有点类似当前流行的骨架屏，其他已有元素需要遮罩的内容就是骨架屏的灰色部分，需要显现的就是重点的蒙层内容。<br>有趣！！！</p>\n<h2 id=\"思路三：使用border的方式来实现\"><a href=\"#思路三：使用border的方式来实现\" class=\"headerlink\" title=\"思路三：使用border的方式来实现\"></a>思路三：使用border的方式来实现</h2><p>没错，就是普遍不能在普遍的border了，且看如下：  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid #red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那用border怎么实现引导蒙层呢？  </p>\n<h3 id=\"1、先了解下三角形\"><a href=\"#1、先了解下三角形\" class=\"headerlink\" title=\"1、先了解下三角形\"></a>1、先了解下三角形</h3><p>先看一个简单的例子：     </p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"border_1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.border_1</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-top</span>:<span class=\"hljs-number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_1.png\" alt=\"border_1\">  </p>\n<p>实现了一个倒三角,这个应用场景是不是就比较多了，很多tips的指引，标注等都会用到。我就看到过这种倒三角使用一张图片代替的做法。<br>仔细看这段代码，主要有实现了三点：  </p>\n<ol>\n<li>四边都设置了边框</li>\n<li>宽高都为100px,即上下、左右表框之和，其实小于等于这个值都行。</li>\n<li>只有顶部边框是红色，其他边框是透明的。  </li>\n</ol>\n<p>为了理解上面的实现，我们来看下如下代码：  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.border_2</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>:green;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-style</span>:solid;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-color</span>:red yellow blue black;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">animation</span>:border_ani <span class=\"hljs-number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"hljs-keyword\">keyframes</span> border_ani &#123;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">to</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_2.gif\" alt=\"animation\"></p>\n<p>从图中我们可以清晰的看到，随着border-width的变化，整个div的绿色背景在跟随变化。 </p>\n<ul>\n<li>当border-width=0的时候，整个页面只有绿色背景，即都是内容的大小</li>\n<li>当border-width=50的时候，整个div的大小都被border给充满了，上下左右均分1/4，就是四个倒三角。  </li>\n</ul>\n<p>这样我们就清晰的能得到:  </p>\n<blockquote>\n<p>当border-right,border-left,border-bottom都transparent透明，border-top是红色的时候，所看到的就是一个倒三角。  </p>\n</blockquote>\n<p>同理我们还可以设置边框的大小不一致，可以实现斜三角： </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.border_3</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-top</span>:<span class=\"hljs-number\">30px</span> solid red;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">10px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">20px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">100px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_3.png\" alt=\"斜三角\"></p>\n<p>还可以实现工作中经常碰到的梯形：  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.border_4</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-top</span>:<span class=\"hljs-number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_4.png\" alt=\"梯形\"></p>\n<p>好了，这里不累赘了，感兴趣的可以各种尝试。遇到这种简单边线图，就不要动不动使用图片了。  </p>\n<h3 id=\"2、再看实现引导蒙层\"><a href=\"#2、再看实现引导蒙层\" class=\"headerlink\" title=\"2、再看实现引导蒙层\"></a>2、再看实现引导蒙层</h3><ul>\n<li>新增一个div，作为蒙层元素 </li>\n<li>div中间大小和引导内容元素大小完全一致，且位置恰好重叠</li>\n<li>div的border设置为半透明且无限放大</li>\n</ul>\n<p>了解了上面的三角形的实现之后，估计你也能想出怎么做引导蒙层了。一个div有四个边框，如果我们把边框都设置成半透明，然后中间的区域（上面border_2的green）设置成全透明会不就可以实现区域引导蒙层了吗？然后再把边框设置成超过屏幕的大小呢，就是全景引导蒙层了！</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.border_5</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-top</span>:<span class=\"hljs-number\">50px</span> solid <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">50px</span> solid <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">50px</span> solid <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-left</span>: <span class=\"hljs-number\">50px</span> solid <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_5.png\" alt=\"蒙层\"></p>\n<p>这是一个150px的区域蒙层，我们看下如下示例就能很明白了：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.border_6</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-style</span>:solid;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-color</span>:<span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">animation</span>:border_ani <span class=\"hljs-number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-sizing</span>:content-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"hljs-keyword\">keyframes</span> border_ani &#123;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">to</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_6.gif\" alt=\"蒙层\"></p>\n<p>当然，我们还可以设置border-radius来实现圆形的蒙层区域，如下：  </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_7.png\" alt=\"border-radius\">   </p>\n<p>当然，这里的边框大小值都是写死的，具体实现需要根据页面内容修改或者动态修改即可。  </p>\n<p>如果是椭圆呢？</p>\n<p>总结：</p>\n<blockquote>\n<p>border可以实现各种边线的形状，可以实现引导蒙层，页面指定区域透明，之外的都半透明来实现即可。</p>\n</blockquote>\n<h2 id=\"思路四、使用box-shadow来实现\"><a href=\"#思路四、使用box-shadow来实现\" class=\"headerlink\" title=\"思路四、使用box-shadow来实现\"></a>思路四、使用box-shadow来实现</h2><ul>\n<li>新增一个div，作为蒙层元素 </li>\n<li>div大小和内容元素大小完全一致，且位置恰好重叠</li>\n<li>div的box-shadow的阴影尺寸设置为半透明且设置为比较大的约2000px大小</li>\n</ul>\n<p>box-shadow，大伙都不陌生，就是盒子的阴影，我们先来了解下它的基本用法：  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.boxshadow_1</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_1.png\" alt=\"阴影\"></p>\n<p>在宽高为50px的div,它的阴影水平和垂直都是10px，阴影模糊距离是5px,阴影的尺寸是4px,阴影是#000的颜色(这里给body增加了一个yellow的背景色以便于区分)。  </p>\n<p>首先我们把阴影透明：  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.boxshadow_2</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">4px</span> <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_2.png\" alt=\"阴影\">  </p>\n<p>那怎么让阴影遮盖整个页面呢？  </p>\n<ul>\n<li>阴影的水平和垂直距离是指距离原dev的距离，这个调整达不到效果，只会让阴影更多的偏离元素。</li>\n<li>阴影的模糊距离指阴影的边缘渐变模糊的距离，距离越长，只会让渐变模糊加长，蒙层大小不会变。</li>\n<li>阴影的尺寸，这个是指多大的阴影，那我们将阴影尺寸设置很大呢？是的，就是这个了 </li>\n</ul>\n<p>看如下的例子，我们调整阴影的尺寸：  </p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.boxshadow_3</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background</span>:blue;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">animation</span>:box_ani <span class=\"hljs-number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"hljs-keyword\">keyframes</span> box_ani &#123;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们只需要把阴影尺寸加大就可以实现引导蒙层了。<br>如果需要引导蒙层状态下还能响应事件呢？只需要加一个pointer-events属性即可。  </p>\n<blockquote>\n<p>box-shadow的阴影距离切勿盲目设置过大，经过测试这个值如果过大，比如4000px，在部分手机上阴影无法显示出来。经过实践，设置为2000px为佳。</p>\n</blockquote>\n<h2 id=\"思路五：使用页面节点复制\"><a href=\"#思路五：使用页面节点复制\" class=\"headerlink\" title=\"思路五：使用页面节点复制\"></a>思路五：使用页面节点复制</h2><ul>\n<li>新增两个div，一个半透明蒙层元素和一个蒙层内容区域</li>\n<li>将页面节点引导内容拷贝到蒙层内容区域</li>\n<li>将蒙层内容区域的大小和位置与原节点引导内容完全重合</li>\n</ul>\n<p>页面内容已经做好了，我们需要引导蒙层来显示某个元素，那么将元素复制到最外层，顶层增加一层蒙层来实现,需要突出的引导内容在蒙层之上即可实现。</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content one\"</span>&gt;</span>我是第一个div，我是第一个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content two\"</span>&gt;</span>我是第二个div，我是第二个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content three\"</span>&gt;</span>我是第三个div，我是第三个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content four\"</span>&gt;</span>我是第四个div，我是第四个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"mask\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"maskContent\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里设置了一个固定蒙层，和一个固定的蒙层内容元素，我们只需要填充即可。</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">padding</span>:<span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.mask</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100%</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-built_in\">rgba</span>(0,0,0,.8);</span><br><span class=\"line\">    <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">900</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-selector-id\">#maskContent</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">z-index</span>:<span class=\"hljs-number\">999</span>;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">display</span>:inline-block;</span><br><span class=\"line\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里内容区域都是0，然后mask是900，我们的蒙层元素是999，就是最上层了。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">renderContent</span>(<span class=\"hljs-params\">cls</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> targetNode = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">`.<span class=\"hljs-subst\">$&#123;cls&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> maskContent = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"maskContent\"</span>);</span><br><span class=\"line\">    maskContent.innerHTML = targetNode.outerHTML;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> pos = targetNode.getBoundingClientRect();</span><br><span class=\"line\">    maskContent.style.top=pos.top+<span class=\"hljs-string\">\"px\"</span>;</span><br><span class=\"line\">    maskContent.style.left=pos.left+<span class=\"hljs-string\">\"px\"</span>;</span><br><span class=\"line\">    maskContent.style.width=pos.width+<span class=\"hljs-string\">\"px\"</span>;</span><br><span class=\"line\">    maskContent.style.height=pos.height+<span class=\"hljs-string\">\"px\"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    renderContent([<span class=\"hljs-string\">'one'</span>,<span class=\"hljs-string\">'two'</span>,<span class=\"hljs-string\">'three'</span>,<span class=\"hljs-string\">'four'</span>][i]);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(++i&gt;=<span class=\"hljs-number\">4</span>) i = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">&#125;,<span class=\"hljs-number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里为了演示效果，增加了一个定时器改变不同的遮罩层。易于理解，看下效果：  </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_1.gif\" alt=\"z-index\"></p>\n<h2 id=\"思路六：使用canvas实现\"><a href=\"#思路六：使用canvas实现\" class=\"headerlink\" title=\"思路六：使用canvas实现\"></a>思路六：使用canvas实现</h2><ul>\n<li>新增一个canvas，绘制两次图形</li>\n<li>第一次：绘制一个全屏的半透明阴影</li>\n<li>第二次：使用xor绘制一个和引导内容区域的大小位置完全重合的区域  </li>\n</ul>\n<p>第二次绘制的内容区域和第一次重叠，使用xor，所以会透明，该引导内容区域就会完全显示出来，这就是我们想要的效果了。   </p>\n<p>使用canvas的globalCompositeOperation属性来实现,内容参考<a href=\"http://www.tutorialspoint.com/html5/canvas_composition.htm\" target=\"_blank\" rel=\"noopener\">http://www.tutorialspoint.com/html5/canvas_composition.htm</a>  </p>\n<p>重点看xor：Shapes are made transparent where both overlap and drawn normal everywhere else.<br>翻译： canvas绘制的形状在重叠处都会变成透明的，非重叠处的其他任何地方都正常绘制内容。  </p>\n<p>所以我们就可以在canvas里面绘制一个canvas蒙层，然后在蒙层中需要显示的内容用xor来绘制重叠，然后重叠内容就会被透明，那么这个透明区域的内容就是我们想要的引导蒙层突出内容区域。具体看实例：  </p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content one\"</span>&gt;</span>我是第一个div，我是第一个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content two\"</span>&gt;</span>我是第二个div，我是第二个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content three\"</span>&gt;</span>我是第三个div，我是第三个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"conteent four\"</span>&gt;</span>我是第四个div，我是第四个div<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mask\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面增加一个canvas节点。将canvas整体设置成半透明，然后再用xor来实现内容的绘制。   </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mask</span>(<span class=\"hljs-params\">cls</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> targetNode = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">`.<span class=\"hljs-subst\">$&#123;cls&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> pos = targetNode.getBoundingClientRect();</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"mask\"</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> width = <span class=\"hljs-built_in\">window</span>.innerWidth;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> height = <span class=\"hljs-built_in\">window</span>.innerHeight;;</span><br><span class=\"line\">    canvas.setAttribute(<span class=\"hljs-string\">\"width\"</span>, width);</span><br><span class=\"line\">    canvas.setAttribute(<span class=\"hljs-string\">\"height\"</span>,height);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> ctx = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>); </span><br><span class=\"line\">    ctx.globalCompositeOperation = <span class=\"hljs-string\">'source-over'</span>;</span><br><span class=\"line\">    ctx.fillStyle =<span class=\"hljs-string\">'rgba(255, 255, 255, 0.9)'</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, width, height);</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">    ctx.fillStyle =<span class=\"hljs-string\">'white'</span>;</span><br><span class=\"line\">    ctx.globalCompositeOperation=<span class=\"hljs-string\">\"xor\"</span>;</span><br><span class=\"line\">    ctx.fillRect(pos.left,pos.top,pos.width,pos.height);</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> array = [<span class=\"hljs-string\">'one'</span>,<span class=\"hljs-string\">'two'</span>,<span class=\"hljs-string\">'three'</span>,<span class=\"hljs-string\">'four'</span>];</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    mask(array[i]);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(i&gt;=<span class=\"hljs-number\">4</span>) i = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">&#125;,<span class=\"hljs-number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_2.gif\" alt=\"z-index\">  </p>\n<p>看完以上实现，你最喜欢哪种实现方式呢？</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：深山蚂蚁</p>\n</blockquote>\n<p>引导蒙层通常在新业务上线、或者业务有变更时的给新用户的一个操作指引。下图页面即是一个蒙层，会在某个局部位置高亮我们需要重点突出的内容：  </p>","more":"<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_1.png\" alt=\"阴影\">    </p>\n<p>当前发现很多页面做蒙层引导，还是使用图片形式来做。</p>\n<h1 id=\"图片引导蒙层有几大缺点：\"><a href=\"#图片引导蒙层有几大缺点：\" class=\"headerlink\" title=\"图片引导蒙层有几大缺点：\"></a>图片引导蒙层有几大缺点：</h1><ol>\n<li>图片大，影响加载</li>\n<li>图片的内容都是假的，和真实的底部内容没对上</li>\n<li>全屏蒙层图片，图片的宽高和屏幕宽高不一致，显示两边留黑，或者有压缩的效果。</li>\n<li>图片的引导位置不能点击。</li>\n<li>low ？ not cool ？</li>\n</ol>\n<h1 id=\"本文讲述六种思路来实现引导蒙层\"><a href=\"#本文讲述六种思路来实现引导蒙层\" class=\"headerlink\" title=\"本文讲述六种思路来实现引导蒙层\"></a>本文讲述六种思路来实现引导蒙层</h1><ul>\n<li>z-index实现蒙层</li>\n<li>动态opacity实现</li>\n<li>border实现</li>\n<li>box-shadow实现</li>\n<li>节点复制实现</li>\n<li>canvas实现</li>\n</ul>\n<blockquote>\n<p>以上六种引导蒙层实现思路，在一定情况下都能满足业务需求，从不同角度来实现了引导蒙层。z-index最简单，canvas最灵活，就个人而言，更加喜欢骨架屏式的动态opacity蒙层实现，更有趣更酷!!!  </p>\n</blockquote>\n<h2 id=\"思路一：使用z-index\"><a href=\"#思路一：使用z-index\" class=\"headerlink\" title=\"思路一：使用z-index\"></a>思路一：使用z-index</h2><ul>\n<li>新增一个div，设置为半透明区域，大小覆盖整个页面</li>\n<li>半透明蒙层区域z-index大于页面元素</li>\n<li>引导内容区域大于半透明蒙层区域z-index </li>\n</ul>\n<p>这个好理解，页面元素都是有层级的，我们只需要把引导内容区域设置为最顶层的层级，在引导内容区域之下设置一个遮罩层，其他内容元素的z-index都地域这个遮罩层即可。 我们来看一个简单例子。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.z1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z3</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">70px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:yellow;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_1.png\" alt=\"z-index\">  </p>\n<p>我们修改一下z2的样式。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.z2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:black;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>:<span class=\"number\">0.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>:<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>:z_index <span class=\"number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> z_index &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_2.gif\" alt=\"z-index\"></p>\n<p>只要在布局页面元素的时候，把需要做蒙层的元素确定好，配合js，动态的设置元素的z-index + opacity，就可以很好的做到页面的引导蒙层效果。  </p>\n<h2 id=\"思路二：使用opacity将非蒙层元素半透明\"><a href=\"#思路二：使用opacity将非蒙层元素半透明\" class=\"headerlink\" title=\"思路二：使用opacity将非蒙层元素半透明\"></a>思路二：使用opacity将非蒙层元素半透明</h2><ul>\n<li>引导内容区域无需改动</li>\n<li>页面其他节点元素半透明  </li>\n</ul>\n<p>我们不再新增蒙层，而是完全操作页面节点，将需要遮罩的节点都设置为半透明，引导蒙层显现内容则完全显示出来。页面的效果和蒙层不太一样，对于空白地方，我们仍然是完全显示，只是将有内容的元素给半透明，类似骨架屏的效果。<br>为了演示效果，我们看如下例子：<br>页面设置6个元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"z z1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"z z2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"z z3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"z z4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"z z5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"z z6\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将元素内容用flex并排布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>:wrap;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">150px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>:all <span class=\"number\">1s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z2</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z3</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z4</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z5</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.z6</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用js操作，依次半透明其他元素，显示当前元素来模拟蒙层。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arry = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\".z\"</span>));</span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> direct = <span class=\"number\">1</span>;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&gt;=<span class=\"number\">5</span>) direct = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>) direct = <span class=\"number\">1</span>;</span><br><span class=\"line\">  index = index+direct;</span><br><span class=\"line\">  arry.forEach(<span class=\"function\">(<span class=\"params\">d,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    d.style.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    arry.forEach(<span class=\"function\">(<span class=\"params\">d,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i==index) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      d.style.opacity = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_z-index_3.gif\" alt=\"z-index\"></p>\n<p>看了这个例子，我们清晰的看到这个引导蒙层的实现过程。这种引导蒙层其实更好玩有趣，有点类似当前流行的骨架屏，其他已有元素需要遮罩的内容就是骨架屏的灰色部分，需要显现的就是重点的蒙层内容。<br>有趣！！！</p>\n<h2 id=\"思路三：使用border的方式来实现\"><a href=\"#思路三：使用border的方式来实现\" class=\"headerlink\" title=\"思路三：使用border的方式来实现\"></a>思路三：使用border的方式来实现</h2><p>没错，就是普遍不能在普遍的border了，且看如下：  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid #red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那用border怎么实现引导蒙层呢？  </p>\n<h3 id=\"1、先了解下三角形\"><a href=\"#1、先了解下三角形\" class=\"headerlink\" title=\"1、先了解下三角形\"></a>1、先了解下三角形</h3><p>先看一个简单的例子：     </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"border_1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border_1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_1.png\" alt=\"border_1\">  </p>\n<p>实现了一个倒三角,这个应用场景是不是就比较多了，很多tips的指引，标注等都会用到。我就看到过这种倒三角使用一张图片代替的做法。<br>仔细看这段代码，主要有实现了三点：  </p>\n<ol>\n<li>四边都设置了边框</li>\n<li>宽高都为100px,即上下、左右表框之和，其实小于等于这个值都行。</li>\n<li>只有顶部边框是红色，其他边框是透明的。  </li>\n</ol>\n<p>为了理解上面的实现，我们来看下如下代码：  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border_2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:green;</span><br><span class=\"line\">    <span class=\"attribute\">border-style</span>:solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>:red yellow blue black;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:border_ani <span class=\"number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> border_ani &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border-width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-width</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_2.gif\" alt=\"animation\"></p>\n<p>从图中我们可以清晰的看到，随着border-width的变化，整个div的绿色背景在跟随变化。 </p>\n<ul>\n<li>当border-width=0的时候，整个页面只有绿色背景，即都是内容的大小</li>\n<li>当border-width=50的时候，整个div的大小都被border给充满了，上下左右均分1/4，就是四个倒三角。  </li>\n</ul>\n<p>这样我们就清晰的能得到:  </p>\n<blockquote>\n<p>当border-right,border-left,border-bottom都transparent透明，border-top是红色的时候，所看到的就是一个倒三角。  </p>\n</blockquote>\n<p>同理我们还可以设置边框的大小不一致，可以实现斜三角： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border_3</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">30px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_3.png\" alt=\"斜三角\"></p>\n<p>还可以实现工作中经常碰到的梯形：  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border_4</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_4.png\" alt=\"梯形\"></p>\n<p>好了，这里不累赘了，感兴趣的可以各种尝试。遇到这种简单边线图，就不要动不动使用图片了。  </p>\n<h3 id=\"2、再看实现引导蒙层\"><a href=\"#2、再看实现引导蒙层\" class=\"headerlink\" title=\"2、再看实现引导蒙层\"></a>2、再看实现引导蒙层</h3><ul>\n<li>新增一个div，作为蒙层元素 </li>\n<li>div中间大小和引导内容元素大小完全一致，且位置恰好重叠</li>\n<li>div的border设置为半透明且无限放大</li>\n</ul>\n<p>了解了上面的三角形的实现之后，估计你也能想出怎么做引导蒙层了。一个div有四个边框，如果我们把边框都设置成半透明，然后中间的区域（上面border_2的green）设置成全透明会不就可以实现区域引导蒙层了吗？然后再把边框设置成超过屏幕的大小呢，就是全景引导蒙层了！</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border_5</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">50px</span> solid <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_5.png\" alt=\"蒙层\"></p>\n<p>这是一个150px的区域蒙层，我们看下如下示例就能很明白了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.border_6</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-style</span>:solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>:<span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:border_ani <span class=\"number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:content-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> border_ani &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">border-width</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_6.gif\" alt=\"蒙层\"></p>\n<p>当然，我们还可以设置border-radius来实现圆形的蒙层区域，如下：  </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_border_7.png\" alt=\"border-radius\">   </p>\n<p>当然，这里的边框大小值都是写死的，具体实现需要根据页面内容修改或者动态修改即可。  </p>\n<p>如果是椭圆呢？</p>\n<p>总结：</p>\n<blockquote>\n<p>border可以实现各种边线的形状，可以实现引导蒙层，页面指定区域透明，之外的都半透明来实现即可。</p>\n</blockquote>\n<h2 id=\"思路四、使用box-shadow来实现\"><a href=\"#思路四、使用box-shadow来实现\" class=\"headerlink\" title=\"思路四、使用box-shadow来实现\"></a>思路四、使用box-shadow来实现</h2><ul>\n<li>新增一个div，作为蒙层元素 </li>\n<li>div大小和内容元素大小完全一致，且位置恰好重叠</li>\n<li>div的box-shadow的阴影尺寸设置为半透明且设置为比较大的约2000px大小</li>\n</ul>\n<p>box-shadow，大伙都不陌生，就是盒子的阴影，我们先来了解下它的基本用法：  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.boxshadow_1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">5px</span> <span class=\"number\">4px</span> <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_1.png\" alt=\"阴影\"></p>\n<p>在宽高为50px的div,它的阴影水平和垂直都是10px，阴影模糊距离是5px,阴影的尺寸是4px,阴影是#000的颜色(这里给body增加了一个yellow的背景色以便于区分)。  </p>\n<p>首先我们把阴影透明：  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.boxshadow_2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">5px</span> <span class=\"number\">4px</span> <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_boxshadow_2.png\" alt=\"阴影\">  </p>\n<p>那怎么让阴影遮盖整个页面呢？  </p>\n<ul>\n<li>阴影的水平和垂直距离是指距离原dev的距离，这个调整达不到效果，只会让阴影更多的偏离元素。</li>\n<li>阴影的模糊距离指阴影的边缘渐变模糊的距离，距离越长，只会让渐变模糊加长，蒙层大小不会变。</li>\n<li>阴影的尺寸，这个是指多大的阴影，那我们将阴影尺寸设置很大呢？是的，就是这个了 </li>\n</ul>\n<p>看如下的例子，我们调整阴影的尺寸：  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.boxshadow_3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:blue;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">5px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>:box_ani <span class=\"number\">2s</span> linear infinite alternate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> box_ani &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">5px</span> <span class=\"number\">0px</span> <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">box-shadow</span>: <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">5px</span> <span class=\"number\">100px</span> <span class=\"built_in\">rgba</span>(0,0,0,.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们只需要把阴影尺寸加大就可以实现引导蒙层了。<br>如果需要引导蒙层状态下还能响应事件呢？只需要加一个pointer-events属性即可。  </p>\n<blockquote>\n<p>box-shadow的阴影距离切勿盲目设置过大，经过测试这个值如果过大，比如4000px，在部分手机上阴影无法显示出来。经过实践，设置为2000px为佳。</p>\n</blockquote>\n<h2 id=\"思路五：使用页面节点复制\"><a href=\"#思路五：使用页面节点复制\" class=\"headerlink\" title=\"思路五：使用页面节点复制\"></a>思路五：使用页面节点复制</h2><ul>\n<li>新增两个div，一个半透明蒙层元素和一个蒙层内容区域</li>\n<li>将页面节点引导内容拷贝到蒙层内容区域</li>\n<li>将蒙层内容区域的大小和位置与原节点引导内容完全重合</li>\n</ul>\n<p>页面内容已经做好了，我们需要引导蒙层来显示某个元素，那么将元素复制到最外层，顶层增加一层蒙层来实现,需要突出的引导内容在蒙层之上即可实现。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content one\"</span>&gt;</span>我是第一个div，我是第一个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content two\"</span>&gt;</span>我是第二个div，我是第二个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content three\"</span>&gt;</span>我是第三个div，我是第三个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content four\"</span>&gt;</span>我是第四个div，我是第四个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mask\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"maskContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里设置了一个固定蒙层，和一个固定的蒙层内容元素，我们只需要填充即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.mask</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">rgba</span>(0,0,0,.8);</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">900</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#maskContent</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>:<span class=\"number\">999</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里内容区域都是0，然后mask是900，我们的蒙层元素是999，就是最上层了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContent</span>(<span class=\"params\">cls</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> targetNode = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`.<span class=\"subst\">$&#123;cls&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maskContent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"maskContent\"</span>);</span><br><span class=\"line\">    maskContent.innerHTML = targetNode.outerHTML;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = targetNode.getBoundingClientRect();</span><br><span class=\"line\">    maskContent.style.top=pos.top+<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">    maskContent.style.left=pos.left+<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">    maskContent.style.width=pos.width+<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">    maskContent.style.height=pos.height+<span class=\"string\">\"px\"</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    renderContent([<span class=\"string\">'one'</span>,<span class=\"string\">'two'</span>,<span class=\"string\">'three'</span>,<span class=\"string\">'four'</span>][i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(++i&gt;=<span class=\"number\">4</span>) i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里为了演示效果，增加了一个定时器改变不同的遮罩层。易于理解，看下效果：  </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_1.gif\" alt=\"z-index\"></p>\n<h2 id=\"思路六：使用canvas实现\"><a href=\"#思路六：使用canvas实现\" class=\"headerlink\" title=\"思路六：使用canvas实现\"></a>思路六：使用canvas实现</h2><ul>\n<li>新增一个canvas，绘制两次图形</li>\n<li>第一次：绘制一个全屏的半透明阴影</li>\n<li>第二次：使用xor绘制一个和引导内容区域的大小位置完全重合的区域  </li>\n</ul>\n<p>第二次绘制的内容区域和第一次重叠，使用xor，所以会透明，该引导内容区域就会完全显示出来，这就是我们想要的效果了。   </p>\n<p>使用canvas的globalCompositeOperation属性来实现,内容参考<a href=\"http://www.tutorialspoint.com/html5/canvas_composition.htm\" target=\"_blank\" rel=\"noopener\">http://www.tutorialspoint.com/html5/canvas_composition.htm</a>  </p>\n<p>重点看xor：Shapes are made transparent where both overlap and drawn normal everywhere else.<br>翻译： canvas绘制的形状在重叠处都会变成透明的，非重叠处的其他任何地方都正常绘制内容。  </p>\n<p>所以我们就可以在canvas里面绘制一个canvas蒙层，然后在蒙层中需要显示的内容用xor来绘制重叠，然后重叠内容就会被透明，那么这个透明区域的内容就是我们想要的引导蒙层突出内容区域。具体看实例：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content one\"</span>&gt;</span>我是第一个div，我是第一个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content two\"</span>&gt;</span>我是第二个div，我是第二个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content three\"</span>&gt;</span>我是第三个div，我是第三个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"conteent four\"</span>&gt;</span>我是第四个div，我是第四个div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面增加一个canvas节点。将canvas整体设置成半透明，然后再用xor来实现内容的绘制。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mask</span>(<span class=\"params\">cls</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> targetNode = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`.<span class=\"subst\">$&#123;cls&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pos = targetNode.getBoundingClientRect();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mask\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> height = <span class=\"built_in\">window</span>.innerHeight;;</span><br><span class=\"line\">    canvas.setAttribute(<span class=\"string\">\"width\"</span>, width);</span><br><span class=\"line\">    canvas.setAttribute(<span class=\"string\">\"height\"</span>,height);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>); </span><br><span class=\"line\">    ctx.globalCompositeOperation = <span class=\"string\">'source-over'</span>;</span><br><span class=\"line\">    ctx.fillStyle =<span class=\"string\">'rgba(255, 255, 255, 0.9)'</span>;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">    ctx.fillStyle =<span class=\"string\">'white'</span>;</span><br><span class=\"line\">    ctx.globalCompositeOperation=<span class=\"string\">\"xor\"</span>;</span><br><span class=\"line\">    ctx.fillRect(pos.left,pos.top,pos.width,pos.height);</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"string\">'one'</span>,<span class=\"string\">'two'</span>,<span class=\"string\">'three'</span>,<span class=\"string\">'four'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    mask(array[i]);</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">4</span>) i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master/images/image-guide_content_2.gif\" alt=\"z-index\">  </p>\n<p>看完以上实现，你最喜欢哪种实现方式呢？</p>"},{"title":"碰撞检测的向量实现","subtitle":"1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现","cover":"https://img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg","date":"2019-06-26T16:00:00.000Z","ckey":15,"author":{"nick":"吴冠禧","github_name":"wuguanxi"},"_content":"\n> 作者： 吴冠禧\n\n***\n\n*注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现*\n\n## 前言\n\n2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。\n<!--more-->\n![rect_circle](//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg)\n\n如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。\n\n## 向量\n\n向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。\n\n### 向量的代数表示\n\n向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。\n\n```javascript\n// 二维平面向量\nclass Vector2d{\n  constructor(vx=1,vy=1){\n    this.vx = vx;\n    this.vy = vy;\n  }\n}\nconst vecA = new Vector2d(1,2);\nconst vecB = new Vector2d(3,1);\n```\n![act1](//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg)\n\n### 向量运算\n\n加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。\n\n![act2](//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png)\n\n```javascript\n// 向量的加法运算\nstatic add(vec,vec2){\n  const vx = vec.vx + vec2.vx;\n  const vy = vec.vy + vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：\n\n![act3](//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png)\n\n```javascript\n// 向量的减法运算\nstatic sub(vec,vec2){\n  const vx = vec.vx - vec2.vx;\n  const vy = vec.vy - vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n大小：向量的大小，是其各个分量的平方和开方。\n\n```javascript\n// 获取向量长度\nlength(){\n  return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n}\n```\n\n点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。\n\n```javascript\n// 向量的数量积\nstatic dot(vec,vec2){\n  return vec.vx * vec2.vx + vec.vy * vec2.vy;\n}\n```\n\n旋转：向量的旋转可以用旋转矩阵求解\n\n![act4](//wq.360buyimg.com/data/ppms/movie/act4.svg)\n\n![act5](//wq.360buyimg.com/data/ppms/picture/act5.svg)\n\n![act6](//wq.360buyimg.com/data/ppms/picture/act6.svg)\n\n```javascript\n//向量的旋转 \nstatic rotate(vec,angle){\n  const cosVal = Math.cos(angle);\n  const sinVal = Math.sin(angle);\n  const vx = vec.vx * cosVal - vec.vy * sinVal;\n  const vy = vec.vx * sinVal + vec.vy * cosVal;\n  return new Vector2d(vx,vy);\n}\n```\n\n## 圆\n\n圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。\n\n```javascript\nclass Circle{\n  // x,y是圆的圆心 r是半径\n  constructor(x=0,y=0,r=1){\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n  get P(){ return new Vector2d(this.x,this.y) } // 圆心向量\n}\n```\n\n## 矩形\n\n矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation\n\n```javascript\nexport class Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n}\n```\n\n## 两圆相交\n\n![cb1](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg)\n\n两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。\n\n两圆心距离可以用圆心向量相减，然后求相减向量的长度。\n\n![act7](//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg)\n\n```javascript\ncircleCircleIntersect(circle1,circle2){\n  const P1 = circle1.P;\n  const P2 = circle2.P;\n  const r1 = circle1.r;\n  const r2 = circle2.r;\n  const u = Vector2d.sub(P1,P2);\n  return u.length() <= r1  + r2 ;\n}\n```\n\n## 圆和矩形相交\n\n涉及到矩形的相交问题都先要判断是否轴对称。\n\n### 矩形轴对称\n\n![cb2](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg)\n\n先看轴对称的情况，下面是来自知乎问题[怎样判断平面上一个矩形和一个圆形是否有重叠？](https://www.zhihu.com/question/24251545)「Milo Yip」的回答搬运：\n\n设c为矩形中心，h为矩形半長，p为圆心，r为半径。\n\n![act8](//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg)\n\n方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。\n\n1. 首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：\n\n![act9](//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg)\n\n2. 然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。\n\n![act10](//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg)\n\n3. 最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。\n\n\n下面我用js实现一下：\n\n其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n}\n\nrectCircleIntersect(rect,circle){\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = circle.P;\n  const h = Vector2d.sub(A3,C); // 矩形半长\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n### 矩形非轴对称\n\n![cb3](//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg)\n\n这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。\n\n![act11](//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg)\n\n矩形中心到圆心向量为是CP\n\n反向旋转θ度得向量CP'\n\n然后根据向量得三角形定律得OP' = OC + CP'\n\n后面就代入矩形是轴对称的公式进行计算\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\np(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  let P;\n  if (rotation % 360 === 0) {\n    P = circle.P; // 轴对称直接输出P\n  } else {\n    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*-1)); // 非轴对称，计算P‘\n  }\n  return P;\n}\n\nrectCircleIntersect(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = p(rect,circle);\n  const h = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n查看Demo1 [https://rococolate.github.io/blog/gom/test1.html](//rococolate.github.io/blog/gom/test1.html)\n\n![demo1](//wq.360buyimg.com/data/ppms/picture/demo1.gif)\n\n## 两矩形相交\n\n### 两矩形都轴对称AABB\n\n![cb4](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg)\n\n想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。\n\n![act12](//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg)\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\nAABBrectRectIntersect(rect1,rect2){\n  const P = rect2.C;\n  const w2 = rect2.w; \n  const h2 = rect2.h; \n  const {w,h,x,y} = rect1;\n  const C = rect1.C;\n  const A3 = new Vector2d(x+w/2+w2/2,y+h/2+h2/2); // 新矩形的半长\n  const H = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - H.vx,0),Math.max(v.vy - H.vy,0));\n  return u.lengthSquared() === 0; // 点可以看成是半径为0的圆\n} \n```\n\n### 两矩形相交非轴对称OBB\n\n![cb5](//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg)\n\n两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）\n\n分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。\n\n因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。\n\n![act13](//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg)\n\n如何投影？这里补充一下向量点积的几何意义。\n\n![act15](//wq.360buyimg.com/data/ppms/picture/act15.gif)\n\n在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影\n\n回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。\n\n![act14](//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg)\n\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); }\n  get _A1(){ return new Vector2d(this.x-this.w/2,this.y-this.h/2); }  // 4角顶点\n  get _A2(){ return new Vector2d(this.x+this.w/2,this.y-this.h/2); }\n  get _A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); }\n  get _A4(){ return new Vector2d(this.x-this.w/2,this.y+this.h/2); }\n  get _axisX(){ return new Vector2d(1,0); } // 未旋转时的对称轴X\n  get _axisY(){ return new Vector2d(0,1); } // 未旋转时的对称轴Y\n  get _CA1(){ return Vector2d.sub(this._A1,this.C); }\n  get _CA2(){ return Vector2d.sub(this._A2,this.C); }\n  get _CA3(){ return Vector2d.sub(this._A3,this.C); }\n  get _CA4(){ return Vector2d.sub(this._A4,this.C); }\n  get _rotation(){ return this.rotation / 180 * Math.PI; }\n  get A1(){ return this.rotation % 360 === 0 ?  this._A1 :  Vector2d.add(this.C,Vector2d.rotate(this._CA1,this._rotation)); } // 计算上旋转后4角顶点\n  get A2(){ return this.rotation % 360 === 0 ?  this._A2 :  Vector2d.add(this.C,Vector2d.rotate(this._CA2,this._rotation)); }\n  get A3(){ return this.rotation % 360 === 0 ?  this._A3 :  Vector2d.add(this.C,Vector2d.rotate(this._CA3,this._rotation)); }\n  get A4(){ return this.rotation % 360 === 0 ?  this._A4 :  Vector2d.add(this.C,Vector2d.rotate(this._CA4,this._rotation)); }\n  get axisX(){ return this.rotation % 360 === 0 ?  this._axisX :  Vector2d.rotate(this._axisX,this._rotation); } // 计算上旋转后的对称轴X\n  get axisY(){ return this.rotation % 360 === 0 ?  this._axisY :  Vector2d.rotate(this._axisY,this._rotation); } // 计算上旋转后的对称轴Y\n  get _vertexs(){ return [this._A1,this._A2,this._A3,this._A4]; } \n  get vertexs(){ return [this.A1,this.A2,this.A3,this.A4]; } // 4角顶点数组\n}\n\nOBBrectRectIntersect(rect1,rect2){\n  const rect1AxisX = rect1.axisX;\n  const rect1AxisY = rect1.axisY;\n  const rect2AxisX = rect2.axisX;\n  const rect2AxisY = rect2.axisY;\n  if (!cross(rect1,rect2,rect1AxisX)) return false;  // 一旦有不相交的轴就可以return false\n  if (!cross(rect1,rect2,rect1AxisY)) return false;\n  if (!cross(rect1,rect2,rect2AxisX)) return false;\n  if (!cross(rect1,rect2,rect2AxisY)) return false;\n  return true;  // 4轴投影都相交 return true\n}\ncross(rect1,rect2,axis){\n  const vertexs1ScalarProjection = rect1.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形1的4个顶点投影并排序\n  const vertexs2ScalarProjection = rect2.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形2的4个顶点投影并排序\n  const rect1Min = vertexs1ScalarProjection[0]; // 矩形1最小长度\n  const rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形1最大长度\n  const rect2Min = vertexs2ScalarProjection[0]; // 矩形2最小长度\n  const rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形2最大长度\n  return rect1Max >= rect2Min && rect2Max >= rect1Min;  // 相交判断 \n}\n```\n\n最后放上一个相交的应用Demo [https://rococolate.github.io/blog/gom/test2.html](//rococolate.github.io/blog/gom/test2.html),Demo里的形状都可以拖拽，当碰到其他形状时会变透明。\n\n![demo2](//wq.360buyimg.com/data/ppms/movie/demo2.gif)\n\n### 参考文章\n\n[第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/](http://blog.jmecn.net/chapter-15-collision-detection/)\n\n[方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397](http://daily.zhihu.com/story/4761397)\n\n[怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545](https://www.zhihu.com/question/24251545)\n\n[“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html](https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html)\n\n[码农干货系列【1】--方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html](https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html)\n\n[Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix](https://en.wikipedia.org/wiki/Rotation_matrix)\n\n[数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF](https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF)\n\n[向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F](https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F)\n\n","source":"_posts/2019-08/collision-detection.md","raw":"---\ntitle: 碰撞检测的向量实现\nsubtitle: 1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现\ncover: https://img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg\ndate: 2019-06-27 00:00:00\ntags: \n    - 碰撞检测\n    - 向量\ncategories: Web开发\nckey: 15\nauthor:\n    nick: 吴冠禧\n    github_name: wuguanxi\n---\n\n> 作者： 吴冠禧\n\n***\n\n*注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现*\n\n## 前言\n\n2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。\n<!--more-->\n![rect_circle](//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg)\n\n如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。\n\n## 向量\n\n向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。\n\n### 向量的代数表示\n\n向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。\n\n```javascript\n// 二维平面向量\nclass Vector2d{\n  constructor(vx=1,vy=1){\n    this.vx = vx;\n    this.vy = vy;\n  }\n}\nconst vecA = new Vector2d(1,2);\nconst vecB = new Vector2d(3,1);\n```\n![act1](//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg)\n\n### 向量运算\n\n加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。\n\n![act2](//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png)\n\n```javascript\n// 向量的加法运算\nstatic add(vec,vec2){\n  const vx = vec.vx + vec2.vx;\n  const vy = vec.vy + vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：\n\n![act3](//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png)\n\n```javascript\n// 向量的减法运算\nstatic sub(vec,vec2){\n  const vx = vec.vx - vec2.vx;\n  const vy = vec.vy - vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n大小：向量的大小，是其各个分量的平方和开方。\n\n```javascript\n// 获取向量长度\nlength(){\n  return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n}\n```\n\n点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。\n\n```javascript\n// 向量的数量积\nstatic dot(vec,vec2){\n  return vec.vx * vec2.vx + vec.vy * vec2.vy;\n}\n```\n\n旋转：向量的旋转可以用旋转矩阵求解\n\n![act4](//wq.360buyimg.com/data/ppms/movie/act4.svg)\n\n![act5](//wq.360buyimg.com/data/ppms/picture/act5.svg)\n\n![act6](//wq.360buyimg.com/data/ppms/picture/act6.svg)\n\n```javascript\n//向量的旋转 \nstatic rotate(vec,angle){\n  const cosVal = Math.cos(angle);\n  const sinVal = Math.sin(angle);\n  const vx = vec.vx * cosVal - vec.vy * sinVal;\n  const vy = vec.vx * sinVal + vec.vy * cosVal;\n  return new Vector2d(vx,vy);\n}\n```\n\n## 圆\n\n圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。\n\n```javascript\nclass Circle{\n  // x,y是圆的圆心 r是半径\n  constructor(x=0,y=0,r=1){\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n  get P(){ return new Vector2d(this.x,this.y) } // 圆心向量\n}\n```\n\n## 矩形\n\n矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation\n\n```javascript\nexport class Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n}\n```\n\n## 两圆相交\n\n![cb1](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg)\n\n两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。\n\n两圆心距离可以用圆心向量相减，然后求相减向量的长度。\n\n![act7](//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg)\n\n```javascript\ncircleCircleIntersect(circle1,circle2){\n  const P1 = circle1.P;\n  const P2 = circle2.P;\n  const r1 = circle1.r;\n  const r2 = circle2.r;\n  const u = Vector2d.sub(P1,P2);\n  return u.length() <= r1  + r2 ;\n}\n```\n\n## 圆和矩形相交\n\n涉及到矩形的相交问题都先要判断是否轴对称。\n\n### 矩形轴对称\n\n![cb2](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg)\n\n先看轴对称的情况，下面是来自知乎问题[怎样判断平面上一个矩形和一个圆形是否有重叠？](https://www.zhihu.com/question/24251545)「Milo Yip」的回答搬运：\n\n设c为矩形中心，h为矩形半長，p为圆心，r为半径。\n\n![act8](//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg)\n\n方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。\n\n1. 首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：\n\n![act9](//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg)\n\n2. 然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。\n\n![act10](//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg)\n\n3. 最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。\n\n\n下面我用js实现一下：\n\n其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n}\n\nrectCircleIntersect(rect,circle){\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = circle.P;\n  const h = Vector2d.sub(A3,C); // 矩形半长\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n### 矩形非轴对称\n\n![cb3](//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg)\n\n这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。\n\n![act11](//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg)\n\n矩形中心到圆心向量为是CP\n\n反向旋转θ度得向量CP'\n\n然后根据向量得三角形定律得OP' = OC + CP'\n\n后面就代入矩形是轴对称的公式进行计算\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\np(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  let P;\n  if (rotation % 360 === 0) {\n    P = circle.P; // 轴对称直接输出P\n  } else {\n    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*-1)); // 非轴对称，计算P‘\n  }\n  return P;\n}\n\nrectCircleIntersect(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = p(rect,circle);\n  const h = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n查看Demo1 [https://rococolate.github.io/blog/gom/test1.html](//rococolate.github.io/blog/gom/test1.html)\n\n![demo1](//wq.360buyimg.com/data/ppms/picture/demo1.gif)\n\n## 两矩形相交\n\n### 两矩形都轴对称AABB\n\n![cb4](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg)\n\n想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。\n\n![act12](//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg)\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\nAABBrectRectIntersect(rect1,rect2){\n  const P = rect2.C;\n  const w2 = rect2.w; \n  const h2 = rect2.h; \n  const {w,h,x,y} = rect1;\n  const C = rect1.C;\n  const A3 = new Vector2d(x+w/2+w2/2,y+h/2+h2/2); // 新矩形的半长\n  const H = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - H.vx,0),Math.max(v.vy - H.vy,0));\n  return u.lengthSquared() === 0; // 点可以看成是半径为0的圆\n} \n```\n\n### 两矩形相交非轴对称OBB\n\n![cb5](//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg)\n\n两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）\n\n分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。\n\n因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。\n\n![act13](//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg)\n\n如何投影？这里补充一下向量点积的几何意义。\n\n![act15](//wq.360buyimg.com/data/ppms/picture/act15.gif)\n\n在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影\n\n回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。\n\n![act14](//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg)\n\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); }\n  get _A1(){ return new Vector2d(this.x-this.w/2,this.y-this.h/2); }  // 4角顶点\n  get _A2(){ return new Vector2d(this.x+this.w/2,this.y-this.h/2); }\n  get _A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); }\n  get _A4(){ return new Vector2d(this.x-this.w/2,this.y+this.h/2); }\n  get _axisX(){ return new Vector2d(1,0); } // 未旋转时的对称轴X\n  get _axisY(){ return new Vector2d(0,1); } // 未旋转时的对称轴Y\n  get _CA1(){ return Vector2d.sub(this._A1,this.C); }\n  get _CA2(){ return Vector2d.sub(this._A2,this.C); }\n  get _CA3(){ return Vector2d.sub(this._A3,this.C); }\n  get _CA4(){ return Vector2d.sub(this._A4,this.C); }\n  get _rotation(){ return this.rotation / 180 * Math.PI; }\n  get A1(){ return this.rotation % 360 === 0 ?  this._A1 :  Vector2d.add(this.C,Vector2d.rotate(this._CA1,this._rotation)); } // 计算上旋转后4角顶点\n  get A2(){ return this.rotation % 360 === 0 ?  this._A2 :  Vector2d.add(this.C,Vector2d.rotate(this._CA2,this._rotation)); }\n  get A3(){ return this.rotation % 360 === 0 ?  this._A3 :  Vector2d.add(this.C,Vector2d.rotate(this._CA3,this._rotation)); }\n  get A4(){ return this.rotation % 360 === 0 ?  this._A4 :  Vector2d.add(this.C,Vector2d.rotate(this._CA4,this._rotation)); }\n  get axisX(){ return this.rotation % 360 === 0 ?  this._axisX :  Vector2d.rotate(this._axisX,this._rotation); } // 计算上旋转后的对称轴X\n  get axisY(){ return this.rotation % 360 === 0 ?  this._axisY :  Vector2d.rotate(this._axisY,this._rotation); } // 计算上旋转后的对称轴Y\n  get _vertexs(){ return [this._A1,this._A2,this._A3,this._A4]; } \n  get vertexs(){ return [this.A1,this.A2,this.A3,this.A4]; } // 4角顶点数组\n}\n\nOBBrectRectIntersect(rect1,rect2){\n  const rect1AxisX = rect1.axisX;\n  const rect1AxisY = rect1.axisY;\n  const rect2AxisX = rect2.axisX;\n  const rect2AxisY = rect2.axisY;\n  if (!cross(rect1,rect2,rect1AxisX)) return false;  // 一旦有不相交的轴就可以return false\n  if (!cross(rect1,rect2,rect1AxisY)) return false;\n  if (!cross(rect1,rect2,rect2AxisX)) return false;\n  if (!cross(rect1,rect2,rect2AxisY)) return false;\n  return true;  // 4轴投影都相交 return true\n}\ncross(rect1,rect2,axis){\n  const vertexs1ScalarProjection = rect1.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形1的4个顶点投影并排序\n  const vertexs2ScalarProjection = rect2.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形2的4个顶点投影并排序\n  const rect1Min = vertexs1ScalarProjection[0]; // 矩形1最小长度\n  const rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形1最大长度\n  const rect2Min = vertexs2ScalarProjection[0]; // 矩形2最小长度\n  const rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形2最大长度\n  return rect1Max >= rect2Min && rect2Max >= rect1Min;  // 相交判断 \n}\n```\n\n最后放上一个相交的应用Demo [https://rococolate.github.io/blog/gom/test2.html](//rococolate.github.io/blog/gom/test2.html),Demo里的形状都可以拖拽，当碰到其他形状时会变透明。\n\n![demo2](//wq.360buyimg.com/data/ppms/movie/demo2.gif)\n\n### 参考文章\n\n[第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/](http://blog.jmecn.net/chapter-15-collision-detection/)\n\n[方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397](http://daily.zhihu.com/story/4761397)\n\n[怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545](https://www.zhihu.com/question/24251545)\n\n[“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html](https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html)\n\n[码农干货系列【1】--方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html](https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html)\n\n[Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix](https://en.wikipedia.org/wiki/Rotation_matrix)\n\n[数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF](https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF)\n\n[向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F](https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F)\n\n","slug":"collision-detection","published":1,"updated":"2019-11-20T05:13:20.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflr9001nsoyxh10ie37e","content":"<blockquote>\n<p>作者： 吴冠禧</p>\n</blockquote>\n<hr>\n<p><em>注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现</em></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。</p>\n<a id=\"more\"></a>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg\" alt=\"rect_circle\"></p>\n<p>如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。</p>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><p>向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。</p>\n<h3 id=\"向量的代数表示\"><a href=\"#向量的代数表示\" class=\"headerlink\" title=\"向量的代数表示\"></a>向量的代数表示</h3><p>向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 二维平面向量</span></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vector2d</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(vx=1,vy=1)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.vx = vx;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.vy = vy;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vecA = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vecB = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg\" alt=\"act1\"></p>\n<h3 id=\"向量运算\"><a href=\"#向量运算\" class=\"headerlink\" title=\"向量运算\"></a>向量运算</h3><p>加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png\" alt=\"act2\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 向量的加法运算</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> add(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vx = vec.vx + vec2.vx;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vy = vec.vy + vec2.vy;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png\" alt=\"act3\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 向量的减法运算</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> sub(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vx = vec.vx - vec2.vx;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vy = vec.vy - vec2.vy;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大小：向量的大小，是其各个分量的平方和开方。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 获取向量长度</span></span><br><span class=\"line\">length()&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.sqrt(<span class=\"hljs-keyword\">this</span>.vx * <span class=\"hljs-keyword\">this</span>.vx + <span class=\"hljs-keyword\">this</span>.vy * <span class=\"hljs-keyword\">this</span>.vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 向量的数量积</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> dot(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> vec.vx * vec2.vx + vec.vy * vec2.vy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>旋转：向量的旋转可以用旋转矩阵求解</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/act4.svg\" alt=\"act4\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act5.svg\" alt=\"act5\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act6.svg\" alt=\"act6\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//向量的旋转 </span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> rotate(vec,angle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> cosVal = <span class=\"hljs-built_in\">Math</span>.cos(angle);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> sinVal = <span class=\"hljs-built_in\">Math</span>.sin(angle);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vx = vec.vx * cosVal - vec.vy * sinVal;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vy = vec.vx * sinVal + vec.vy * cosVal;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆\"><a href=\"#圆\" class=\"headerlink\" title=\"圆\"></a>圆</h2><p>圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Circle</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是圆的圆心 r是半径</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,r=1)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.r = r;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> P()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y) &#125; <span class=\"hljs-comment\">// 圆心向量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h2><p>矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两圆相交\"><a href=\"#两圆相交\" class=\"headerlink\" title=\"两圆相交\"></a>两圆相交</h2><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg\" alt=\"cb1\"></p>\n<p>两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。</p>\n<p>两圆心距离可以用圆心向量相减，然后求相减向量的长度。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg\" alt=\"act7\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circleCircleIntersect(circle1,circle2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P1 = circle1.P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P2 = circle2.P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r1 = circle1.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r2 = circle2.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = Vector2d.sub(P1,P2);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.length() &lt;= r1  + r2 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆和矩形相交\"><a href=\"#圆和矩形相交\" class=\"headerlink\" title=\"圆和矩形相交\"></a>圆和矩形相交</h2><p>涉及到矩形的相交问题都先要判断是否轴对称。</p>\n<h3 id=\"矩形轴对称\"><a href=\"#矩形轴对称\" class=\"headerlink\" title=\"矩形轴对称\"></a>矩形轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg\" alt=\"cb2\"></p>\n<p>先看轴对称的情况，下面是来自知乎问题<a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？</a>「Milo Yip」的回答搬运：</p>\n<p>设c为矩形中心，h为矩形半長，p为圆心，r为半径。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg\" alt=\"act8\"></p>\n<p>方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。</p>\n<ol>\n<li>首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg\" alt=\"act9\"></p>\n<ol start=\"2\">\n<li>然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg\" alt=\"act10\"></p>\n<ol start=\"3\">\n<li>最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。</li>\n</ol>\n<p>下面我用js实现一下：</p>\n<p>其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125; <span class=\"hljs-comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125; <span class=\"hljs-comment\">// 顶点A3向量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P = circle.P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> h = Vector2d.sub(A3,C); <span class=\"hljs-comment\">// 矩形半长</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"hljs-built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.max(v.vx - h.vx,<span class=\"hljs-number\">0</span>),<span class=\"hljs-built_in\">Math</span>.max(v.vy - h.vy,<span class=\"hljs-number\">0</span>));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩形非轴对称\"><a href=\"#矩形非轴对称\" class=\"headerlink\" title=\"矩形非轴对称\"></a>矩形非轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg\" alt=\"cb3\"></p>\n<p>这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg\" alt=\"act11\"></p>\n<p>矩形中心到圆心向量为是CP</p>\n<p>反向旋转θ度得向量CP’</p>\n<p>然后根据向量得三角形定律得OP’ = OC + CP’</p>\n<p>后面就代入矩形是轴对称的公式进行计算</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125; <span class=\"hljs-comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125; <span class=\"hljs-comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _rotation()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI; &#125;  <span class=\"hljs-comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">    P = circle.P; <span class=\"hljs-comment\">// 轴对称直接输出P</span></span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">// 非轴对称，计算P‘</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P = p(rect,circle);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> h = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"hljs-built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.max(v.vx - h.vx,<span class=\"hljs-number\">0</span>),<span class=\"hljs-built_in\">Math</span>.max(v.vy - h.vy,<span class=\"hljs-number\">0</span>));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看Demo1 <a href=\"//rococolate.github.io/blog/gom/test1.html\">https://rococolate.github.io/blog/gom/test1.html</a></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/demo1.gif\" alt=\"demo1\"></p>\n<h2 id=\"两矩形相交\"><a href=\"#两矩形相交\" class=\"headerlink\" title=\"两矩形相交\"></a>两矩形相交</h2><h3 id=\"两矩形都轴对称AABB\"><a href=\"#两矩形都轴对称AABB\" class=\"headerlink\" title=\"两矩形都轴对称AABB\"></a>两矩形都轴对称AABB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg\" alt=\"cb4\"></p>\n<p>想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg\" alt=\"act12\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125; <span class=\"hljs-comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125; <span class=\"hljs-comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _rotation()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI; &#125;  <span class=\"hljs-comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AABBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P = rect2.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> w2 = rect2.w; </span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> h2 = rect2.h; </span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> &#123;w,h,x,y&#125; = rect1;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect1.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> A3 = <span class=\"hljs-keyword\">new</span> Vector2d(x+w/<span class=\"hljs-number\">2</span>+w2/<span class=\"hljs-number\">2</span>,y+h/<span class=\"hljs-number\">2</span>+h2/<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 新矩形的半长</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> H = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"hljs-built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.max(v.vx - H.vx,<span class=\"hljs-number\">0</span>),<span class=\"hljs-built_in\">Math</span>.max(v.vy - H.vy,<span class=\"hljs-number\">0</span>));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.lengthSquared() === <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 点可以看成是半径为0的圆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两矩形相交非轴对称OBB\"><a href=\"#两矩形相交非轴对称OBB\" class=\"headerlink\" title=\"两矩形相交非轴对称OBB\"></a>两矩形相交非轴对称OBB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg\" alt=\"cb5\"></p>\n<p>两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）</p>\n<p>分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。</p>\n<p>因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg\" alt=\"act13\"></p>\n<p>如何投影？这里补充一下向量点积的几何意义。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act15.gif\" alt=\"act15\"></p>\n<p>在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影</p>\n<p>回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg\" alt=\"act14\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A1()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x-<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y-<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;  <span class=\"hljs-comment\">// 4角顶点</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A2()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y-<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A4()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x-<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _axisX()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>); &#125; <span class=\"hljs-comment\">// 未旋转时的对称轴X</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _axisY()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>); &#125; <span class=\"hljs-comment\">// 未旋转时的对称轴Y</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA1()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A1,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA2()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A2,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA3()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A3,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA4()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A4,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _rotation()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI; &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A1()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A1 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA1,<span class=\"hljs-keyword\">this</span>._rotation)); &#125; <span class=\"hljs-comment\">// 计算上旋转后4角顶点</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A2()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A2 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA2,<span class=\"hljs-keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A3 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA3,<span class=\"hljs-keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A4()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A4 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA4,<span class=\"hljs-keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> axisX()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._axisX :  Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._axisX,<span class=\"hljs-keyword\">this</span>._rotation); &#125; <span class=\"hljs-comment\">// 计算上旋转后的对称轴X</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> axisY()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._axisY :  Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._axisY,<span class=\"hljs-keyword\">this</span>._rotation); &#125; <span class=\"hljs-comment\">// 计算上旋转后的对称轴Y</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _vertexs()&#123; <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>._A1,<span class=\"hljs-keyword\">this</span>._A2,<span class=\"hljs-keyword\">this</span>._A3,<span class=\"hljs-keyword\">this</span>._A4]; &#125; </span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> vertexs()&#123; <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>.A1,<span class=\"hljs-keyword\">this</span>.A2,<span class=\"hljs-keyword\">this</span>.A3,<span class=\"hljs-keyword\">this</span>.A4]; &#125; <span class=\"hljs-comment\">// 4角顶点数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">OBBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1AxisX = rect1.axisX;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1AxisY = rect1.axisY;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2AxisX = rect2.axisX;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2AxisY = rect2.axisY;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect1AxisX)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">// 一旦有不相交的轴就可以return false</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect1AxisY)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect2AxisX)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect2AxisY)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// 4轴投影都相交 return true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cross(rect1,rect2,axis)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vertexs1ScalarProjection = rect1.vertexs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b); <span class=\"hljs-comment\">// 矩形1的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vertexs2ScalarProjection = rect2.vertexs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b); <span class=\"hljs-comment\">// 矩形2的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1Min = vertexs1ScalarProjection[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 矩形1最小长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 矩形1最大长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2Min = vertexs2ScalarProjection[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 矩形2最小长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 矩形2最大长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> rect1Max &gt;= rect2Min &amp;&amp; rect2Max &gt;= rect1Min;  <span class=\"hljs-comment\">// 相交判断 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后放上一个相交的应用Demo <a href=\"//rococolate.github.io/blog/gom/test2.html\">https://rococolate.github.io/blog/gom/test2.html</a>,Demo里的形状都可以拖拽，当碰到其他形状时会变透明。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/demo2.gif\" alt=\"demo2\"></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"http://blog.jmecn.net/chapter-15-collision-detection/\" target=\"_blank\" rel=\"noopener\">第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/</a></p>\n<p><a href=\"http://daily.zhihu.com/story/4761397\" target=\"_blank\" rel=\"noopener\">方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397</a></p>\n<p><a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545</a></p>\n<p><a href=\"https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html\" target=\"_blank\" rel=\"noopener\">“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html</a></p>\n<p><a href=\"https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html\" target=\"_blank\" rel=\"noopener\">码农干货系列【1】–方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\" target=\"_blank\" rel=\"noopener\">Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF\" target=\"_blank\" rel=\"noopener\">数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F\" target=\"_blank\" rel=\"noopener\">向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者： 吴冠禧</p>\n</blockquote>\n<hr>\n<p><em>注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现</em></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。</p>","more":"<p><img src=\"//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg\" alt=\"rect_circle\"></p>\n<p>如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。</p>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><p>向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。</p>\n<h3 id=\"向量的代数表示\"><a href=\"#向量的代数表示\" class=\"headerlink\" title=\"向量的代数表示\"></a>向量的代数表示</h3><p>向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二维平面向量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(vx=1,vy=1)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vx = vx;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vy = vy;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> vecA = <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vecB = <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">3</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg\" alt=\"act1\"></p>\n<h3 id=\"向量运算\"><a href=\"#向量运算\" class=\"headerlink\" title=\"向量运算\"></a>向量运算</h3><p>加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png\" alt=\"act2\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向量的加法运算</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> add(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vx = vec.vx + vec2.vx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vy = vec.vy + vec2.vy;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png\" alt=\"act3\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向量的减法运算</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> sub(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vx = vec.vx - vec2.vx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vy = vec.vy - vec2.vy;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大小：向量的大小，是其各个分量的平方和开方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取向量长度</span></span><br><span class=\"line\">length()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"keyword\">this</span>.vx * <span class=\"keyword\">this</span>.vx + <span class=\"keyword\">this</span>.vy * <span class=\"keyword\">this</span>.vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向量的数量积</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> dot(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vec.vx * vec2.vx + vec.vy * vec2.vy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>旋转：向量的旋转可以用旋转矩阵求解</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/act4.svg\" alt=\"act4\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act5.svg\" alt=\"act5\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act6.svg\" alt=\"act6\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向量的旋转 </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> rotate(vec,angle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cosVal = <span class=\"built_in\">Math</span>.cos(angle);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sinVal = <span class=\"built_in\">Math</span>.sin(angle);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vx = vec.vx * cosVal - vec.vy * sinVal;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vy = vec.vx * sinVal + vec.vy * cosVal;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆\"><a href=\"#圆\" class=\"headerlink\" title=\"圆\"></a>圆</h2><p>圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是圆的圆心 r是半径</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,r=1)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> P()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y) &#125; <span class=\"comment\">// 圆心向量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h2><p>矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两圆相交\"><a href=\"#两圆相交\" class=\"headerlink\" title=\"两圆相交\"></a>两圆相交</h2><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg\" alt=\"cb1\"></p>\n<p>两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。</p>\n<p>两圆心距离可以用圆心向量相减，然后求相减向量的长度。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg\" alt=\"act7\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circleCircleIntersect(circle1,circle2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P1 = circle1.P;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P2 = circle2.P;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r1 = circle1.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r2 = circle2.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = Vector2d.sub(P1,P2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.length() &lt;= r1  + r2 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆和矩形相交\"><a href=\"#圆和矩形相交\" class=\"headerlink\" title=\"圆和矩形相交\"></a>圆和矩形相交</h2><p>涉及到矩形的相交问题都先要判断是否轴对称。</p>\n<h3 id=\"矩形轴对称\"><a href=\"#矩形轴对称\" class=\"headerlink\" title=\"矩形轴对称\"></a>矩形轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg\" alt=\"cb2\"></p>\n<p>先看轴对称的情况，下面是来自知乎问题<a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？</a>「Milo Yip」的回答搬运：</p>\n<p>设c为矩形中心，h为矩形半長，p为圆心，r为半径。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg\" alt=\"act8\"></p>\n<p>方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。</p>\n<ol>\n<li>首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg\" alt=\"act9\"></p>\n<ol start=\"2\">\n<li>然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg\" alt=\"act10\"></p>\n<ol start=\"3\">\n<li>最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。</li>\n</ol>\n<p>下面我用js实现一下：</p>\n<p>其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125; <span class=\"comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125; <span class=\"comment\">// 顶点A3向量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = circle.P;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> h = Vector2d.sub(A3,C); <span class=\"comment\">// 矩形半长</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.max(v.vx - h.vx,<span class=\"number\">0</span>),<span class=\"built_in\">Math</span>.max(v.vy - h.vy,<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩形非轴对称\"><a href=\"#矩形非轴对称\" class=\"headerlink\" title=\"矩形非轴对称\"></a>矩形非轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg\" alt=\"cb3\"></p>\n<p>这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg\" alt=\"act11\"></p>\n<p>矩形中心到圆心向量为是CP</p>\n<p>反向旋转θ度得向量CP’</p>\n<p>然后根据向量得三角形定律得OP’ = OC + CP’</p>\n<p>后面就代入矩形是轴对称的公式进行计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125; <span class=\"comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125; <span class=\"comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _rotation()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI; &#125;  <span class=\"comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> P;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    P = circle.P; <span class=\"comment\">// 轴对称直接输出P</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*<span class=\"number\">-1</span>)); <span class=\"comment\">// 非轴对称，计算P‘</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = p(rect,circle);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> h = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.max(v.vx - h.vx,<span class=\"number\">0</span>),<span class=\"built_in\">Math</span>.max(v.vy - h.vy,<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看Demo1 <a href=\"//rococolate.github.io/blog/gom/test1.html\">https://rococolate.github.io/blog/gom/test1.html</a></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/demo1.gif\" alt=\"demo1\"></p>\n<h2 id=\"两矩形相交\"><a href=\"#两矩形相交\" class=\"headerlink\" title=\"两矩形相交\"></a>两矩形相交</h2><h3 id=\"两矩形都轴对称AABB\"><a href=\"#两矩形都轴对称AABB\" class=\"headerlink\" title=\"两矩形都轴对称AABB\"></a>两矩形都轴对称AABB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg\" alt=\"cb4\"></p>\n<p>想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg\" alt=\"act12\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125; <span class=\"comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125; <span class=\"comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _rotation()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI; &#125;  <span class=\"comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AABBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = rect2.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> w2 = rect2.w; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> h2 = rect2.h; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;w,h,x,y&#125; = rect1;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect1.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> A3 = <span class=\"keyword\">new</span> Vector2d(x+w/<span class=\"number\">2</span>+w2/<span class=\"number\">2</span>,y+h/<span class=\"number\">2</span>+h2/<span class=\"number\">2</span>); <span class=\"comment\">// 新矩形的半长</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> H = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.max(v.vx - H.vx,<span class=\"number\">0</span>),<span class=\"built_in\">Math</span>.max(v.vy - H.vy,<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.lengthSquared() === <span class=\"number\">0</span>; <span class=\"comment\">// 点可以看成是半径为0的圆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两矩形相交非轴对称OBB\"><a href=\"#两矩形相交非轴对称OBB\" class=\"headerlink\" title=\"两矩形相交非轴对称OBB\"></a>两矩形相交非轴对称OBB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg\" alt=\"cb5\"></p>\n<p>两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）</p>\n<p>分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。</p>\n<p>因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg\" alt=\"act13\"></p>\n<p>如何投影？这里补充一下向量点积的几何意义。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act15.gif\" alt=\"act15\"></p>\n<p>在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影</p>\n<p>回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg\" alt=\"act14\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A1()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x-<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y-<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;  <span class=\"comment\">// 4角顶点</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A2()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y-<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A4()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x-<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _axisX()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">1</span>,<span class=\"number\">0</span>); &#125; <span class=\"comment\">// 未旋转时的对称轴X</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _axisY()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">0</span>,<span class=\"number\">1</span>); &#125; <span class=\"comment\">// 未旋转时的对称轴Y</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA1()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A1,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA2()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A2,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA3()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A3,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA4()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A4,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _rotation()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> A1()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A1 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA1,<span class=\"keyword\">this</span>._rotation)); &#125; <span class=\"comment\">// 计算上旋转后4角顶点</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A2()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A2 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA2,<span class=\"keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A3 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA3,<span class=\"keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> A4()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A4 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA4,<span class=\"keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> axisX()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._axisX :  Vector2d.rotate(<span class=\"keyword\">this</span>._axisX,<span class=\"keyword\">this</span>._rotation); &#125; <span class=\"comment\">// 计算上旋转后的对称轴X</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> axisY()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._axisY :  Vector2d.rotate(<span class=\"keyword\">this</span>._axisY,<span class=\"keyword\">this</span>._rotation); &#125; <span class=\"comment\">// 计算上旋转后的对称轴Y</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _vertexs()&#123; <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>._A1,<span class=\"keyword\">this</span>._A2,<span class=\"keyword\">this</span>._A3,<span class=\"keyword\">this</span>._A4]; &#125; </span><br><span class=\"line\">  <span class=\"keyword\">get</span> vertexs()&#123; <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>.A1,<span class=\"keyword\">this</span>.A2,<span class=\"keyword\">this</span>.A3,<span class=\"keyword\">this</span>.A4]; &#125; <span class=\"comment\">// 4角顶点数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">OBBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1AxisX = rect1.axisX;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1AxisY = rect1.axisY;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2AxisX = rect2.axisX;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2AxisY = rect2.axisY;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect1AxisX)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 一旦有不相交的轴就可以return false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect1AxisY)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect2AxisX)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect2AxisY)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">// 4轴投影都相交 return true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cross(rect1,rect2,axis)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vertexs1ScalarProjection = rect1.vertexs.map(<span class=\"function\"><span class=\"params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b); <span class=\"comment\">// 矩形1的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> vertexs2ScalarProjection = rect2.vertexs.map(<span class=\"function\"><span class=\"params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b); <span class=\"comment\">// 矩形2的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1Min = vertexs1ScalarProjection[<span class=\"number\">0</span>]; <span class=\"comment\">// 矩形1最小长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 矩形1最大长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2Min = vertexs2ScalarProjection[<span class=\"number\">0</span>]; <span class=\"comment\">// 矩形2最小长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 矩形2最大长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rect1Max &gt;= rect2Min &amp;&amp; rect2Max &gt;= rect1Min;  <span class=\"comment\">// 相交判断 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后放上一个相交的应用Demo <a href=\"//rococolate.github.io/blog/gom/test2.html\">https://rococolate.github.io/blog/gom/test2.html</a>,Demo里的形状都可以拖拽，当碰到其他形状时会变透明。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/demo2.gif\" alt=\"demo2\"></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"http://blog.jmecn.net/chapter-15-collision-detection/\" target=\"_blank\" rel=\"noopener\">第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/</a></p>\n<p><a href=\"http://daily.zhihu.com/story/4761397\" target=\"_blank\" rel=\"noopener\">方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397</a></p>\n<p><a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545</a></p>\n<p><a href=\"https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html\" target=\"_blank\" rel=\"noopener\">“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html</a></p>\n<p><a href=\"https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html\" target=\"_blank\" rel=\"noopener\">码农干货系列【1】–方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\" target=\"_blank\" rel=\"noopener\">Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF\" target=\"_blank\" rel=\"noopener\">数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F\" target=\"_blank\" rel=\"noopener\">向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F</a></p>"},{"title":"TypeScript安利指南","date":"2019-10-08T15:35:07.000Z","cover":"https://img11.360buyimg.com/jdphoto/s730x365_jfs/t1/50551/4/13032/13279/5d9f1c13E4cf58cdb/ce413415dfbb4521.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s730x365_jfs/t1/50551/4/13032/13279/5d9f1c13E4cf58cdb/ce413415dfbb4521.jpg","_content":"\n> 作者：李逸君\n\n骚年，你感受过debug一年找不到问题，最后发现是变量名写错时的绝望吗？\n骚年，你感受过生产线上代码出现`Uncaught TypeError`时的恐惧吗？\n骚年，你感受过写代码找一万个文件还找不到方法定义时委屈吗？\n\n拿起键盘，让我们对谋害生命的代码拖进垃圾箱！(划掉)\n\n## 前言\n\n据了解，目前有相当一部分同学不想去学习ts，毕竟没(xue)时(bu)间(dong)。很不幸两个月前我也是其中的一员。在看到尤大大都用ts写vue3了，蠢蠢欲动的我小心翼翼的踏入了这个深坑。在经历了长达一天的摸爬滚打之后，领悟到了真谛\n<!--more-->\n![真香](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshbg55jj30gq0fqwqq.jpg)\n\n经过了一段时间的理解之后，写了这篇文章，旨在给犹豫是否学习或者还在观望TypeScript的同学做个使用ts的收益分析，希望能够打动屏幕面前的你。\n\n## 安利\n\n\nts难写吗？不难。最简单的做法三步就搞定。\n\n1. 找一个js文件\n2. 按下重命名\n3. 把.js改成.ts\n\n大功告成！\n\n\n![打脸](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshckta9j30ec0bswhb.jpg)\n\n（打人别打脸，还要靠它吃饭的…）\n\n⬇️ ts初体验\n![gif0](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshef2scg30ps0f77o6.gif)\n\n#### <font color=green>-ts是什么</font>\n\nts是js的超集，意味着js本身的语法在ts里面也能跑的通。ts一方面是对js加上了很多条条框框的限制，另一方面是拓展了js的一些能力，就像es6提供了那么多神奇的语法糖一样。只要按照一定的规则去书写js，就能享受到ts带来的好处。\n\n当然因为现在的ts足够强大，并且有自家的vscode保驾护航，才方便了我们这些过去想都不(lan)敢(de)想的苦逼程序员。\n\njs改造成ts的工作量很大程度取决于你想对自己的代码限制的有多细致，描述的有多完善。最简单的就像上面说的，改个拓展名就行了(当然很大程度上可能会通过不了各种静态检查)。如果你写的越多，用你代码的同志就越大可能喜欢你写的东西。\n\n下面先**简单**介绍一下ts语法，便于后面的理解。\n\n#### <font color=green>-ts语法简介</font>\n\n```ts\n// 'xxx: number' 表示声明一个number类型\nconst num: number = 123\n\n// 声明一个函数的参数类型(number以及any)和返回值(void)\nfunction fn (arg1: number, arg2: any): void {\n    // todo\n}\nfn(num, [1,2,3,4])\n\n// 声明一个接口\ninterface IPerson {\n    name: string // IPerson需要包含一个name属性，类型是string\n    age: number // IPerson需要包含一个age属性，类型是number\n    family: Array<string> // IPerson需要包含一个family属性，类型是数组，数组里面都是string类型的数据\n    sex?: '男' | '女' // IPerson可选一个sex属性，值为'男'或者'女'或者undefined\n}\n// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错\nconst person: IPerson = {\n    name: '小王',\n    age: 12,\n    family: ['爹', '娘'],\n}\n\n// type类似interface，以下写法等同用interface声明IPerson\ntype IPerson2 = {\n    name: string\n    age: number\n    family: Array<string>\n    sex?: '男' | '女'\n}\n// 因此可以直接定义过来\nconst person2: IPerson2 = person\n```\n\n可能有的同学看了上面的介绍，会说：\n\n**\"要写这么多其他代码，还增加了文件体积，搞个啥子咧\"**\n\n一般情况下，ts需要编译成js才能运行。编译后长这样：\n\n```js\n// 'xxx: number' 表示声明一个number类型\nvar num = 123;\n// 声明一个函数的参数类型(number以及any)和返回值(void)\nfunction fn(arg1, arg2) {\n    // todo\n}\nfn(num, [1, 2, 3, 4]);\n// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错\nvar person = {\n    name: '小王',\n    age: 12,\n    family: ['爹', '娘'],\n};\n// 因此可以直接定义过来\nvar person2 = person;\n```\n\n通过人肉diff，发现编译后的去掉了ts的所有代码。\n\n可能就又有同学想问了：\n\n**\"学这些有啥好处?\"**\n\n别急，接着往下看🤓\n\n## 应用场景\n\n这块介绍ts的几个应用场景，给点启发~\n\n#### <font color=green>-用我的代码就要听我的</font>\n\n平时为了代码的健壮性，不得不对代码做很多容错的操作。\n\n~~假如成功避免了因为自己年龄大了而眼睛花了，使用自己写的方法时这里漏了一个参数，那里传错了参数类型。~~\n经常会有些不靠谱的使用者，不看你辛辛苦苦耕耘的api文档，瞎jb传参。最后出了问题还怪你没有做好兼容处理，领导群里一顿数落。\n\n我们就得像孩子他妈一样，考虑熊孩子会传些什么乱七八糟的东西进来，然后在代码里面加上各种分支。\n\n现在用ts，就可以在传参的时候友好的提示出来“你写了个什么玩意”的意思。\n\n![-w149](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsheua6aj308a09aac5.jpg)\n\n首先用ts定义一个函数\n\n```ts\ninterface IArgs {\n    name: string\n    age: string\n}\n\nfunction youFoo (arg1: string, arg2: 'a'|'b', arg3: IArgs) {\n    // 这里啥都不干，你传参吧\n}\n```\n\n假如同事小明这么写\n```ts\nyouFoo('sss', 'c', {\n    name: 'xiaoming',\n    age: 18\n})\n```\n\n他就会发现哪里好像不太对\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfbakyj30k703x3za.jpg)\n\n第二个参数要求'a'或者'b'，于是小明默默的改过来了，但是又发现\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfth3aj30ll058abg.jpg)\n\n原来`age`是要求传`string`类型。\n\n于是小明一边心里mmp一边改了过来。\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshgtgj7j3054030glt.jpg)\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshhsfhmj305e04q3z1.jpg)\n\n#### <font color=green>-找文档</font>\n\n平时在干活的时候，我们一般喜欢多一个屏幕，可以开个chrome，查查问题找找文档等。不过经常还得看网速，用搜索去搜api啥的，遇到在乡下写代码，分分钟有想shi的心。\n\n有了ts，我们就完(da)美(gai)的决掉了这个问题:\n\n首先按照这样的结构去写方法：\n\n```ts\n/**\n * 一个方法：生成错误提示信息\n * \n * @param {string} message 提示信息，比如`you have a error`\n * @param {number | string} code 错误码，数字和字符都行\n * @param {string} type 类型，请写`demo1`或者`demo2`\n * \n * [还不懂？点这里吧](https://www.google.com)\n * \n * // demo\n * genErrMsg('demo', 10086)\n * \n */\nexport function genErrMsg (message: string, code: number | string, type?: ('demo1' | 'demo2')): string {\n    return (message || `网络繁忙，请稍候再试`) + (code ? `(${code})` : ``)\n}\n```\n\n然后在使用过程中的体验如下：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshinpuxg30l409wth2.gif)\n\n在更完善的lib当中，体验更佳，除了开头的`jquery`外，还比如：\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshjpvt1g30mq0n5wp4.gif)\n\n#### <font color=green>-粗心大意</font>\n\n阅读以下js代码，\n提问：**分割线以下的代码有几处bug？**\n```js\n// careless.js\nlet foooo = 1\nlet fooo = 1\nlet fooooooo = 1\nlet foo = 1\nlet foooooo = 1\nlet test = 12\nconst obj = {\n    fn1 () {},\n    fn2 () {},\n    fn4 () {},\n}\n\n/*************** 分割线以下的代码有哪些地方有bug？ **************** */\n\nobj.fn3()\n\nconsole.leg(fooooo)\n\nfunction test () {\n    alert(tast)\n}\n```\n\n/*\n\n**\n\n**\n\n***** 答案分界线 *****\n\n**\n\n**\n\n*/\n\n是不是觉得眼睛有点要瞎了？\n\n试试把.js改成.ts\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshkgb9oj30en0b2q5w.jpg)\n\n#### <font color=green>-隐藏的问题</font>\n\n如果说之前的js代码还能凭眼神立刻看出哪里不对，那么下面这些就没那么简单了\n\n阅读以下js代码，\n提问：**代码有几处bug？**\n\n```js\nimport * as utils from './utils'\n\nutils.genErrMsg(10086, 'this is error') // 上面提到的genErrMsg函数\n\nlet dom = window.document.getElementById('foo')\ndom.className = 'add'\n```\n\n/*\n\n**\n\n**\n\n***** 答案分界线 *****\n\n**\n\n**\n\n*/\n\n试试把.js改成.ts\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshlfaz9j30bn04jjss.jpg)\n\n可知问题如下：\n\n1.`genErrMsg`的第一个参数应该是`string`\n\n2.`getElementById`返回值还可能是`null`\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmbxiaj30b704adh5.jpg)\n\n\n#### <font color=green>-接口数据不知道</font>\n\n在维护代码的过程中，可能经常遇到某个接口不知道有啥数据，通常这个时候我们需要去查接口文档。然而当次数一多，或者后台大佬一坑起来，改了字段，可能会查到怀疑人生。\n\n如果使用ts，可能手里的剧本就不一样了\n\n假如有个接口如下所示\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmuhsvj30id06o3zq.jpg)\n\n我们针对这个接口写出了如下ts代码：\n\n```ts\ninterface IPriceData {\n    /** 标识 */\n    cbf: string\n    /** id */\n    id: string\n    /** 市场价格 */\n    m: string\n    /** 后台价 */\n    op: string\n    /** 前台价 */\n    p: string\n}\n\n// 将IPriceData塞进数组里\ntype IPriceDataArray = Array<IPriceData>\n\nfunction getPrice () {\n    // Promise的泛型参数使用了IPriceDataArray类型，then里面返回的数据就是IPriceDataArray类型\n    return new Promise<IPriceDataArray>((resolve, reject) => {\n        $.get('https://xxxxxxx/prices/pgets?ids=P_100012&area=&source=', data => {\n            resolve(data)\n        })\n    })\n}\n```\n\n当调用`getPrice`函数时，体验如下：\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshn9s8gg30mq0bm0vj.gif)\n\n以后每次维护这段函数的时候都不需要去看文档啦。如果后台突然改了字段，在检查的过程中我们可以马上发现问题，然后拿着数据去质问：你tm改了东西让我来背锅...(此处省略1万个字)\n\n#### <font color=green>-增强后的class和enum</font>\n\n众所周知，js里面的class就是个语法糖，想学强类型语言，写法又是个半吊子。\n\n但是在ts当中，class被增强了(当然还是个语法糖，只不过更甜了)\n\n咱们看图说话：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshnr93cj30gt0huq6w.jpg)\n\nvscode中对ts下的共有属性、私有属性、保护属性和静态属性开了小灶，实例下只有公有属性才会被允许使用和提示出来。\n\n另外ts还提供了enum语法糖：\n\n```ts\nenum HttpCode {\n    /** 成功 */\n    '200_OK' = 200,\n    /** 已生成了新的资源 */\n    '201_Created' = 201,\n    /** 请求稍后会被处理 */\n    '202_Accepted' = 202,\n    /** 资源已经不存在 */\n    '204_NoContent' = 204,\n    /** 被请求的资源有一系列可供选择的回馈信息 */\n    '300_MultipleChoices' = 300,\n    /** 永久性转移 */\n    '301_MovedPermanently' = 301,\n    /** 暂时性转移 */\n    '302_MoveTemporarily' = 302,\n}\n\nHttpCode['200_OK']\nHttpCode[200]\n```\n\n相比简单对象定义的key-value，只能通过key去访问value，不能通过value访问key。但是在enum当中，正反都可以当做key来用。\n\n编译后的代码有兴趣的同学可以了解下~\n\n```js\n\"use strict\";\nvar HttpCode;\n(function (HttpCode) {\n    /** 成功 */\n    HttpCode[HttpCode[\"200_OK\"] = 200] = \"200_OK\";\n    /** 已生成了新的资源 */\n    HttpCode[HttpCode[\"201_Created\"] = 201] = \"201_Created\";\n    /** 请求稍后会被处理 */\n    HttpCode[HttpCode[\"202_Accepted\"] = 202] = \"202_Accepted\";\n    /** 资源已经不存在 */\n    HttpCode[HttpCode[\"204_NoContent\"] = 204] = \"204_NoContent\";\n    /** 被请求的资源有一系列可供选择的回馈信息 */\n    HttpCode[HttpCode[\"300_MultipleChoices\"] = 300] = \"300_MultipleChoices\";\n    /** 永久性转移 */\n    HttpCode[HttpCode[\"301_MovedPermanently\"] = 301] = \"301_MovedPermanently\";\n    /** 暂时性转移 */\n    HttpCode[HttpCode[\"302_MoveTemporarily\"] = 302] = \"302_MoveTemporarily\";\n})(HttpCode || (HttpCode = {}));\nHttpCode['200_OK'];\nHttpCode[200];\n```\n\n## 优点以及不足\n\n通过上面的几个栗子，大概可以看出使用了ts后，可以获得以下技能点：\n\n- 清晰的函数参数/接口属性，增加了代码可读性和可维护性\n- 静态检查\n- 生成API文档\n- 配合现代编辑器，各种提示\n- 活跃的社区\n\n以及对应的技术成本\n\n|  | 维护者(包的作者) | 使用者 |\n| --- | --- | --- |\n| 收益 | 清晰的函数参数/接口属性 </br> 静态检查 </br> 生成api文档  | 清晰的函数参数/接口属性 </br> 配合现代编辑器，各种提示 |\n| 代价 | 标记类型 </br> 声明(interface/type) | 和某些库结合的不是很完美(没错，说的就是vue 2.x) |\n\n这里提到的vue2.x由于ts先天能力的不足，导致vue的ts语法需要使用class风格(运行时会被转换回原本的vue构造函数的语法)，和我们平时熟悉的vue风格有些差异\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsho98utj30is0icqa9.jpg)\n\n这里是因为vue的this下的环境比较复杂，对于ide来说需要在运行时才能确定，因此在编写ts的时候需要手动去设置属性(比如props,data,methods等)到this下面，非常麻烦。早期ts并不支持手动编写this的作用域，后来专门为其设计了一个`ThisType`的方法。\n\n在上面的代码里用了`class`的写法，本身所有需要的属性就在this下，规避了运行时才能确定this下需要的作用域的问题。\n\n另一方面，由于ts提示能力比较局限，比如在函数场景中，如果数据来源是独立的对象，体验就会比较糟糕。\n\n请阅读以下栗子(这一块稍微超纲了标题'安利'的范畴，不太理解的新同学可以入坑以后再消化~)\n\n```ts\ninterface IOptions {\n    name: string\n    age: number\n    extra: {\n        data: Object\n        methods: Object\n    }\n}\n\n// 参数options要求符合IOptions定义的规则\nfunction sthConstructor (options: IOptions) {}\n\n// options对象当中并没有任何ts的静态检查和提示\nconst options = {\n    name: 'peter',\n    age: '13', // error: age应该为数字\n    extra: {\n        data: [],\n        methods: {}\n    }\n}\n// options飘红报错，然而提示内容废话太多，关键信息藏得太深\nsthConstructor(options)\n```\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshpnx95j31420naqe6.jpg)\n\n在上面的场景，我们希望在options当中能够获得完整的ts检查能力。达成这个目的有三种方法：\n\n1.将options里面的东西挪进函数当中\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshqpfvpj30d2092mz4.jpg)\n\n2.将`options`用IObject定义\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrnhupj30e607y76i.jpg)\n\n3.提供一个helper方法\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrynz2j30gq0dijvy.jpg)\n\n这三种方式当中：\n\n方法1是最简单的方式，但是在大型项目当中，这样的写法反而很少见到。\n\n方法2是维护者常用的方式，但是对于使用者而言，成本较高。因为使用者需要去lib里翻到方法对应的type类型，将它import进来。\n\n方法3是个人觉得相对比较好的方式，只要维护者提供一个类似`helper`的函数包装一下，就可以获得对应的提示。是不是很像vue ts的装饰器?\n\n但上述三种解决方式我觉得都不优雅，这就是ts当前的不足之一。\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshsz0uyj30ie0g2n6g.jpg)\n\n## ts在js中的玩法\n\nTypeScript是和vscode都是微软的亲儿子，他们兄弟俩相互协作肯定会有更多小花样，甚至你用的只是js文件，也可以享受到。\n\n这里抛砖引玉列出两条：\n\n#### <font color=green>-配置文件自动提示</font>\n\n只要有types文件，所有配置都可以自动提示：\n\n```\n/**\n * webpack配置自动提示\n * \n * 先安装对应的types包： `npm i @types/webpack -D`\n * \n * @type {import('webpack').Configuration}\n */\nconst config = {\n    \n}\n```\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshu44dog30nl0d1dkw.gif)\n\n#### <font color=green>-js语法检查</font>\n\n在js中也可以获得自动提示和静态检查。只要在vscode的setting当中勾上`Check JS`即可。虽然你的js代码可能会被各种飘红🤪\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshvit6ij30oy0a741k.jpg)\n\n⬇️ 之前的例子在js中也可以提示出一些bug了\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshwi2eij30io0eaadl.jpg)\n\n## 写在最后\n\n有的同学会问：我才学js，可以学ts吗？可以，并且建议，因为会对js基础知识加深理解。有用法问题在stackoverflow上搜搜就解决了。\n\n那么这么有用的工具，去哪可以学到呢？或许你可以参考下我学习的轨迹：\n\n[传送门--TypeScript 入门教程 (墙裂推荐)](https://github.com/xcatliu/typescript-tutorial/blob/master/README.md)\n\n[传送门--为 Vue3 学点 TypeScript , 体验 TypeScript](https://juejin.im/entry/5d19adb3f265da1b7b31a28b)\n\n[传送门--一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比](https://juejin.im/post/5d53a8895188257fad671cbc)\n\n[传送门--stack overflow (墙裂推荐)](https://stackoverflow.com/)\n\n[传送门--google](https://www.google.com/)\n\n今年ts突然遍地开花，似乎成为了潮流。各种ts改造、学习教程、心得出现在了各大学习、交友网站上。\n有的同学可能也发现了：这不就就是java这类语言玩剩了的东西了吗？\n\n那年轻的时候谁不都想自由嘛，然而随着年龄大了都被管的服服帖帖的\n\n![](https://user-gold-cdn.xitu.io/2019/9/28/16d769e2fca9b963?w=380&h=584&f=png&s=160807)\n","source":"_posts/2019-10/TypeScript安利指南.md","raw":"---\ntitle: TypeScript安利指南\ndate: 2019-10-08 23:35:07\ncover: https://img11.360buyimg.com/jdphoto/s730x365_jfs/t1/50551/4/13032/13279/5d9f1c13E4cf58cdb/ce413415dfbb4521.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s730x365_jfs/t1/50551/4/13032/13279/5d9f1c13E4cf58cdb/ce413415dfbb4521.jpg\ntags: \n  - TypeScript\ncategories: Web前端\n---\n\n> 作者：李逸君\n\n骚年，你感受过debug一年找不到问题，最后发现是变量名写错时的绝望吗？\n骚年，你感受过生产线上代码出现`Uncaught TypeError`时的恐惧吗？\n骚年，你感受过写代码找一万个文件还找不到方法定义时委屈吗？\n\n拿起键盘，让我们对谋害生命的代码拖进垃圾箱！(划掉)\n\n## 前言\n\n据了解，目前有相当一部分同学不想去学习ts，毕竟没(xue)时(bu)间(dong)。很不幸两个月前我也是其中的一员。在看到尤大大都用ts写vue3了，蠢蠢欲动的我小心翼翼的踏入了这个深坑。在经历了长达一天的摸爬滚打之后，领悟到了真谛\n<!--more-->\n![真香](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshbg55jj30gq0fqwqq.jpg)\n\n经过了一段时间的理解之后，写了这篇文章，旨在给犹豫是否学习或者还在观望TypeScript的同学做个使用ts的收益分析，希望能够打动屏幕面前的你。\n\n## 安利\n\n\nts难写吗？不难。最简单的做法三步就搞定。\n\n1. 找一个js文件\n2. 按下重命名\n3. 把.js改成.ts\n\n大功告成！\n\n\n![打脸](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshckta9j30ec0bswhb.jpg)\n\n（打人别打脸，还要靠它吃饭的…）\n\n⬇️ ts初体验\n![gif0](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshef2scg30ps0f77o6.gif)\n\n#### <font color=green>-ts是什么</font>\n\nts是js的超集，意味着js本身的语法在ts里面也能跑的通。ts一方面是对js加上了很多条条框框的限制，另一方面是拓展了js的一些能力，就像es6提供了那么多神奇的语法糖一样。只要按照一定的规则去书写js，就能享受到ts带来的好处。\n\n当然因为现在的ts足够强大，并且有自家的vscode保驾护航，才方便了我们这些过去想都不(lan)敢(de)想的苦逼程序员。\n\njs改造成ts的工作量很大程度取决于你想对自己的代码限制的有多细致，描述的有多完善。最简单的就像上面说的，改个拓展名就行了(当然很大程度上可能会通过不了各种静态检查)。如果你写的越多，用你代码的同志就越大可能喜欢你写的东西。\n\n下面先**简单**介绍一下ts语法，便于后面的理解。\n\n#### <font color=green>-ts语法简介</font>\n\n```ts\n// 'xxx: number' 表示声明一个number类型\nconst num: number = 123\n\n// 声明一个函数的参数类型(number以及any)和返回值(void)\nfunction fn (arg1: number, arg2: any): void {\n    // todo\n}\nfn(num, [1,2,3,4])\n\n// 声明一个接口\ninterface IPerson {\n    name: string // IPerson需要包含一个name属性，类型是string\n    age: number // IPerson需要包含一个age属性，类型是number\n    family: Array<string> // IPerson需要包含一个family属性，类型是数组，数组里面都是string类型的数据\n    sex?: '男' | '女' // IPerson可选一个sex属性，值为'男'或者'女'或者undefined\n}\n// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错\nconst person: IPerson = {\n    name: '小王',\n    age: 12,\n    family: ['爹', '娘'],\n}\n\n// type类似interface，以下写法等同用interface声明IPerson\ntype IPerson2 = {\n    name: string\n    age: number\n    family: Array<string>\n    sex?: '男' | '女'\n}\n// 因此可以直接定义过来\nconst person2: IPerson2 = person\n```\n\n可能有的同学看了上面的介绍，会说：\n\n**\"要写这么多其他代码，还增加了文件体积，搞个啥子咧\"**\n\n一般情况下，ts需要编译成js才能运行。编译后长这样：\n\n```js\n// 'xxx: number' 表示声明一个number类型\nvar num = 123;\n// 声明一个函数的参数类型(number以及any)和返回值(void)\nfunction fn(arg1, arg2) {\n    // todo\n}\nfn(num, [1, 2, 3, 4]);\n// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错\nvar person = {\n    name: '小王',\n    age: 12,\n    family: ['爹', '娘'],\n};\n// 因此可以直接定义过来\nvar person2 = person;\n```\n\n通过人肉diff，发现编译后的去掉了ts的所有代码。\n\n可能就又有同学想问了：\n\n**\"学这些有啥好处?\"**\n\n别急，接着往下看🤓\n\n## 应用场景\n\n这块介绍ts的几个应用场景，给点启发~\n\n#### <font color=green>-用我的代码就要听我的</font>\n\n平时为了代码的健壮性，不得不对代码做很多容错的操作。\n\n~~假如成功避免了因为自己年龄大了而眼睛花了，使用自己写的方法时这里漏了一个参数，那里传错了参数类型。~~\n经常会有些不靠谱的使用者，不看你辛辛苦苦耕耘的api文档，瞎jb传参。最后出了问题还怪你没有做好兼容处理，领导群里一顿数落。\n\n我们就得像孩子他妈一样，考虑熊孩子会传些什么乱七八糟的东西进来，然后在代码里面加上各种分支。\n\n现在用ts，就可以在传参的时候友好的提示出来“你写了个什么玩意”的意思。\n\n![-w149](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsheua6aj308a09aac5.jpg)\n\n首先用ts定义一个函数\n\n```ts\ninterface IArgs {\n    name: string\n    age: string\n}\n\nfunction youFoo (arg1: string, arg2: 'a'|'b', arg3: IArgs) {\n    // 这里啥都不干，你传参吧\n}\n```\n\n假如同事小明这么写\n```ts\nyouFoo('sss', 'c', {\n    name: 'xiaoming',\n    age: 18\n})\n```\n\n他就会发现哪里好像不太对\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfbakyj30k703x3za.jpg)\n\n第二个参数要求'a'或者'b'，于是小明默默的改过来了，但是又发现\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfth3aj30ll058abg.jpg)\n\n原来`age`是要求传`string`类型。\n\n于是小明一边心里mmp一边改了过来。\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshgtgj7j3054030glt.jpg)\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshhsfhmj305e04q3z1.jpg)\n\n#### <font color=green>-找文档</font>\n\n平时在干活的时候，我们一般喜欢多一个屏幕，可以开个chrome，查查问题找找文档等。不过经常还得看网速，用搜索去搜api啥的，遇到在乡下写代码，分分钟有想shi的心。\n\n有了ts，我们就完(da)美(gai)的决掉了这个问题:\n\n首先按照这样的结构去写方法：\n\n```ts\n/**\n * 一个方法：生成错误提示信息\n * \n * @param {string} message 提示信息，比如`you have a error`\n * @param {number | string} code 错误码，数字和字符都行\n * @param {string} type 类型，请写`demo1`或者`demo2`\n * \n * [还不懂？点这里吧](https://www.google.com)\n * \n * // demo\n * genErrMsg('demo', 10086)\n * \n */\nexport function genErrMsg (message: string, code: number | string, type?: ('demo1' | 'demo2')): string {\n    return (message || `网络繁忙，请稍候再试`) + (code ? `(${code})` : ``)\n}\n```\n\n然后在使用过程中的体验如下：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshinpuxg30l409wth2.gif)\n\n在更完善的lib当中，体验更佳，除了开头的`jquery`外，还比如：\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshjpvt1g30mq0n5wp4.gif)\n\n#### <font color=green>-粗心大意</font>\n\n阅读以下js代码，\n提问：**分割线以下的代码有几处bug？**\n```js\n// careless.js\nlet foooo = 1\nlet fooo = 1\nlet fooooooo = 1\nlet foo = 1\nlet foooooo = 1\nlet test = 12\nconst obj = {\n    fn1 () {},\n    fn2 () {},\n    fn4 () {},\n}\n\n/*************** 分割线以下的代码有哪些地方有bug？ **************** */\n\nobj.fn3()\n\nconsole.leg(fooooo)\n\nfunction test () {\n    alert(tast)\n}\n```\n\n/*\n\n**\n\n**\n\n***** 答案分界线 *****\n\n**\n\n**\n\n*/\n\n是不是觉得眼睛有点要瞎了？\n\n试试把.js改成.ts\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshkgb9oj30en0b2q5w.jpg)\n\n#### <font color=green>-隐藏的问题</font>\n\n如果说之前的js代码还能凭眼神立刻看出哪里不对，那么下面这些就没那么简单了\n\n阅读以下js代码，\n提问：**代码有几处bug？**\n\n```js\nimport * as utils from './utils'\n\nutils.genErrMsg(10086, 'this is error') // 上面提到的genErrMsg函数\n\nlet dom = window.document.getElementById('foo')\ndom.className = 'add'\n```\n\n/*\n\n**\n\n**\n\n***** 答案分界线 *****\n\n**\n\n**\n\n*/\n\n试试把.js改成.ts\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshlfaz9j30bn04jjss.jpg)\n\n可知问题如下：\n\n1.`genErrMsg`的第一个参数应该是`string`\n\n2.`getElementById`返回值还可能是`null`\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmbxiaj30b704adh5.jpg)\n\n\n#### <font color=green>-接口数据不知道</font>\n\n在维护代码的过程中，可能经常遇到某个接口不知道有啥数据，通常这个时候我们需要去查接口文档。然而当次数一多，或者后台大佬一坑起来，改了字段，可能会查到怀疑人生。\n\n如果使用ts，可能手里的剧本就不一样了\n\n假如有个接口如下所示\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmuhsvj30id06o3zq.jpg)\n\n我们针对这个接口写出了如下ts代码：\n\n```ts\ninterface IPriceData {\n    /** 标识 */\n    cbf: string\n    /** id */\n    id: string\n    /** 市场价格 */\n    m: string\n    /** 后台价 */\n    op: string\n    /** 前台价 */\n    p: string\n}\n\n// 将IPriceData塞进数组里\ntype IPriceDataArray = Array<IPriceData>\n\nfunction getPrice () {\n    // Promise的泛型参数使用了IPriceDataArray类型，then里面返回的数据就是IPriceDataArray类型\n    return new Promise<IPriceDataArray>((resolve, reject) => {\n        $.get('https://xxxxxxx/prices/pgets?ids=P_100012&area=&source=', data => {\n            resolve(data)\n        })\n    })\n}\n```\n\n当调用`getPrice`函数时，体验如下：\n\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshn9s8gg30mq0bm0vj.gif)\n\n以后每次维护这段函数的时候都不需要去看文档啦。如果后台突然改了字段，在检查的过程中我们可以马上发现问题，然后拿着数据去质问：你tm改了东西让我来背锅...(此处省略1万个字)\n\n#### <font color=green>-增强后的class和enum</font>\n\n众所周知，js里面的class就是个语法糖，想学强类型语言，写法又是个半吊子。\n\n但是在ts当中，class被增强了(当然还是个语法糖，只不过更甜了)\n\n咱们看图说话：\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshnr93cj30gt0huq6w.jpg)\n\nvscode中对ts下的共有属性、私有属性、保护属性和静态属性开了小灶，实例下只有公有属性才会被允许使用和提示出来。\n\n另外ts还提供了enum语法糖：\n\n```ts\nenum HttpCode {\n    /** 成功 */\n    '200_OK' = 200,\n    /** 已生成了新的资源 */\n    '201_Created' = 201,\n    /** 请求稍后会被处理 */\n    '202_Accepted' = 202,\n    /** 资源已经不存在 */\n    '204_NoContent' = 204,\n    /** 被请求的资源有一系列可供选择的回馈信息 */\n    '300_MultipleChoices' = 300,\n    /** 永久性转移 */\n    '301_MovedPermanently' = 301,\n    /** 暂时性转移 */\n    '302_MoveTemporarily' = 302,\n}\n\nHttpCode['200_OK']\nHttpCode[200]\n```\n\n相比简单对象定义的key-value，只能通过key去访问value，不能通过value访问key。但是在enum当中，正反都可以当做key来用。\n\n编译后的代码有兴趣的同学可以了解下~\n\n```js\n\"use strict\";\nvar HttpCode;\n(function (HttpCode) {\n    /** 成功 */\n    HttpCode[HttpCode[\"200_OK\"] = 200] = \"200_OK\";\n    /** 已生成了新的资源 */\n    HttpCode[HttpCode[\"201_Created\"] = 201] = \"201_Created\";\n    /** 请求稍后会被处理 */\n    HttpCode[HttpCode[\"202_Accepted\"] = 202] = \"202_Accepted\";\n    /** 资源已经不存在 */\n    HttpCode[HttpCode[\"204_NoContent\"] = 204] = \"204_NoContent\";\n    /** 被请求的资源有一系列可供选择的回馈信息 */\n    HttpCode[HttpCode[\"300_MultipleChoices\"] = 300] = \"300_MultipleChoices\";\n    /** 永久性转移 */\n    HttpCode[HttpCode[\"301_MovedPermanently\"] = 301] = \"301_MovedPermanently\";\n    /** 暂时性转移 */\n    HttpCode[HttpCode[\"302_MoveTemporarily\"] = 302] = \"302_MoveTemporarily\";\n})(HttpCode || (HttpCode = {}));\nHttpCode['200_OK'];\nHttpCode[200];\n```\n\n## 优点以及不足\n\n通过上面的几个栗子，大概可以看出使用了ts后，可以获得以下技能点：\n\n- 清晰的函数参数/接口属性，增加了代码可读性和可维护性\n- 静态检查\n- 生成API文档\n- 配合现代编辑器，各种提示\n- 活跃的社区\n\n以及对应的技术成本\n\n|  | 维护者(包的作者) | 使用者 |\n| --- | --- | --- |\n| 收益 | 清晰的函数参数/接口属性 </br> 静态检查 </br> 生成api文档  | 清晰的函数参数/接口属性 </br> 配合现代编辑器，各种提示 |\n| 代价 | 标记类型 </br> 声明(interface/type) | 和某些库结合的不是很完美(没错，说的就是vue 2.x) |\n\n这里提到的vue2.x由于ts先天能力的不足，导致vue的ts语法需要使用class风格(运行时会被转换回原本的vue构造函数的语法)，和我们平时熟悉的vue风格有些差异\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsho98utj30is0icqa9.jpg)\n\n这里是因为vue的this下的环境比较复杂，对于ide来说需要在运行时才能确定，因此在编写ts的时候需要手动去设置属性(比如props,data,methods等)到this下面，非常麻烦。早期ts并不支持手动编写this的作用域，后来专门为其设计了一个`ThisType`的方法。\n\n在上面的代码里用了`class`的写法，本身所有需要的属性就在this下，规避了运行时才能确定this下需要的作用域的问题。\n\n另一方面，由于ts提示能力比较局限，比如在函数场景中，如果数据来源是独立的对象，体验就会比较糟糕。\n\n请阅读以下栗子(这一块稍微超纲了标题'安利'的范畴，不太理解的新同学可以入坑以后再消化~)\n\n```ts\ninterface IOptions {\n    name: string\n    age: number\n    extra: {\n        data: Object\n        methods: Object\n    }\n}\n\n// 参数options要求符合IOptions定义的规则\nfunction sthConstructor (options: IOptions) {}\n\n// options对象当中并没有任何ts的静态检查和提示\nconst options = {\n    name: 'peter',\n    age: '13', // error: age应该为数字\n    extra: {\n        data: [],\n        methods: {}\n    }\n}\n// options飘红报错，然而提示内容废话太多，关键信息藏得太深\nsthConstructor(options)\n```\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshpnx95j31420naqe6.jpg)\n\n在上面的场景，我们希望在options当中能够获得完整的ts检查能力。达成这个目的有三种方法：\n\n1.将options里面的东西挪进函数当中\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshqpfvpj30d2092mz4.jpg)\n\n2.将`options`用IObject定义\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrnhupj30e607y76i.jpg)\n\n3.提供一个helper方法\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrynz2j30gq0dijvy.jpg)\n\n这三种方式当中：\n\n方法1是最简单的方式，但是在大型项目当中，这样的写法反而很少见到。\n\n方法2是维护者常用的方式，但是对于使用者而言，成本较高。因为使用者需要去lib里翻到方法对应的type类型，将它import进来。\n\n方法3是个人觉得相对比较好的方式，只要维护者提供一个类似`helper`的函数包装一下，就可以获得对应的提示。是不是很像vue ts的装饰器?\n\n但上述三种解决方式我觉得都不优雅，这就是ts当前的不足之一。\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshsz0uyj30ie0g2n6g.jpg)\n\n## ts在js中的玩法\n\nTypeScript是和vscode都是微软的亲儿子，他们兄弟俩相互协作肯定会有更多小花样，甚至你用的只是js文件，也可以享受到。\n\n这里抛砖引玉列出两条：\n\n#### <font color=green>-配置文件自动提示</font>\n\n只要有types文件，所有配置都可以自动提示：\n\n```\n/**\n * webpack配置自动提示\n * \n * 先安装对应的types包： `npm i @types/webpack -D`\n * \n * @type {import('webpack').Configuration}\n */\nconst config = {\n    \n}\n```\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshu44dog30nl0d1dkw.gif)\n\n#### <font color=green>-js语法检查</font>\n\n在js中也可以获得自动提示和静态检查。只要在vscode的setting当中勾上`Check JS`即可。虽然你的js代码可能会被各种飘红🤪\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshvit6ij30oy0a741k.jpg)\n\n⬇️ 之前的例子在js中也可以提示出一些bug了\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshwi2eij30io0eaadl.jpg)\n\n## 写在最后\n\n有的同学会问：我才学js，可以学ts吗？可以，并且建议，因为会对js基础知识加深理解。有用法问题在stackoverflow上搜搜就解决了。\n\n那么这么有用的工具，去哪可以学到呢？或许你可以参考下我学习的轨迹：\n\n[传送门--TypeScript 入门教程 (墙裂推荐)](https://github.com/xcatliu/typescript-tutorial/blob/master/README.md)\n\n[传送门--为 Vue3 学点 TypeScript , 体验 TypeScript](https://juejin.im/entry/5d19adb3f265da1b7b31a28b)\n\n[传送门--一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比](https://juejin.im/post/5d53a8895188257fad671cbc)\n\n[传送门--stack overflow (墙裂推荐)](https://stackoverflow.com/)\n\n[传送门--google](https://www.google.com/)\n\n今年ts突然遍地开花，似乎成为了潮流。各种ts改造、学习教程、心得出现在了各大学习、交友网站上。\n有的同学可能也发现了：这不就就是java这类语言玩剩了的东西了吗？\n\n那年轻的时候谁不都想自由嘛，然而随着年龄大了都被管的服服帖帖的\n\n![](https://user-gold-cdn.xitu.io/2019/9/28/16d769e2fca9b963?w=380&h=584&f=png&s=160807)\n","slug":"TypeScript安利指南","published":1,"updated":"2019-11-20T05:13:20.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflrb001psoyxho6zqvuf","content":"<blockquote>\n<p>作者：李逸君</p>\n</blockquote>\n<p>骚年，你感受过debug一年找不到问题，最后发现是变量名写错时的绝望吗？<br>骚年，你感受过生产线上代码出现<code>Uncaught TypeError</code>时的恐惧吗？<br>骚年，你感受过写代码找一万个文件还找不到方法定义时委屈吗？</p>\n<p>拿起键盘，让我们对谋害生命的代码拖进垃圾箱！(划掉)</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>据了解，目前有相当一部分同学不想去学习ts，毕竟没(xue)时(bu)间(dong)。很不幸两个月前我也是其中的一员。在看到尤大大都用ts写vue3了，蠢蠢欲动的我小心翼翼的踏入了这个深坑。在经历了长达一天的摸爬滚打之后，领悟到了真谛</p>\n<a id=\"more\"></a>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshbg55jj30gq0fqwqq.jpg\" alt=\"真香\"></p>\n<p>经过了一段时间的理解之后，写了这篇文章，旨在给犹豫是否学习或者还在观望TypeScript的同学做个使用ts的收益分析，希望能够打动屏幕面前的你。</p>\n<h2 id=\"安利\"><a href=\"#安利\" class=\"headerlink\" title=\"安利\"></a>安利</h2><p>ts难写吗？不难。最简单的做法三步就搞定。</p>\n<ol>\n<li>找一个js文件</li>\n<li>按下重命名</li>\n<li>把.js改成.ts</li>\n</ol>\n<p>大功告成！</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshckta9j30ec0bswhb.jpg\" alt=\"打脸\"></p>\n<p>（打人别打脸，还要靠它吃饭的…）</p>\n<p>⬇️ ts初体验<br><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshef2scg30ps0f77o6.gif\" alt=\"gif0\"></p>\n<h4 id=\"ts是什么\"><a href=\"#ts是什么\" class=\"headerlink\" title=\"-ts是什么\"></a><font color=\"green\">-ts是什么</font></h4><p>ts是js的超集，意味着js本身的语法在ts里面也能跑的通。ts一方面是对js加上了很多条条框框的限制，另一方面是拓展了js的一些能力，就像es6提供了那么多神奇的语法糖一样。只要按照一定的规则去书写js，就能享受到ts带来的好处。</p>\n<p>当然因为现在的ts足够强大，并且有自家的vscode保驾护航，才方便了我们这些过去想都不(lan)敢(de)想的苦逼程序员。</p>\n<p>js改造成ts的工作量很大程度取决于你想对自己的代码限制的有多细致，描述的有多完善。最简单的就像上面说的，改个拓展名就行了(当然很大程度上可能会通过不了各种静态检查)。如果你写的越多，用你代码的同志就越大可能喜欢你写的东西。</p>\n<p>下面先<strong>简单</strong>介绍一下ts语法，便于后面的理解。</p>\n<h4 id=\"ts语法简介\"><a href=\"#ts语法简介\" class=\"headerlink\" title=\"-ts语法简介\"></a><font color=\"green\">-ts语法简介</font></h4><figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 'xxx: number' 表示声明一个number类型</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> num: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 声明一个函数的参数类型(number以及any)和返回值(void)</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span> (<span class=\"hljs-params\">arg1: <span class=\"hljs-built_in\">number</span>, arg2: <span class=\"hljs-built_in\">any</span></span>): <span class=\"hljs-title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(num, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 声明一个接口</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">interface</span> IPerson &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-built_in\">string</span> <span class=\"hljs-comment\">// IPerson需要包含一个name属性，类型是string</span></span><br><span class=\"line\">    age: <span class=\"hljs-built_in\">number</span> <span class=\"hljs-comment\">// IPerson需要包含一个age属性，类型是number</span></span><br><span class=\"line\">    family: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; <span class=\"hljs-comment\">// IPerson需要包含一个family属性，类型是数组，数组里面都是string类型的数据</span></span><br><span class=\"line\">    sex?: <span class=\"hljs-string\">'男'</span> | <span class=\"hljs-string\">'女'</span> <span class=\"hljs-comment\">// IPerson可选一个sex属性，值为'男'或者'女'或者undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> person: IPerson = &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-string\">'小王'</span>,</span><br><span class=\"line\">    age: <span class=\"hljs-number\">12</span>,</span><br><span class=\"line\">    family: [<span class=\"hljs-string\">'爹'</span>, <span class=\"hljs-string\">'娘'</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// type类似interface，以下写法等同用interface声明IPerson</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> IPerson2 = &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    age: <span class=\"hljs-built_in\">number</span></span><br><span class=\"line\">    family: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;</span><br><span class=\"line\">    sex?: <span class=\"hljs-string\">'男'</span> | <span class=\"hljs-string\">'女'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">// 因此可以直接定义过来</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> person2: IPerson2 = person</span><br></pre></td></tr></table></figure>\n\n<p>可能有的同学看了上面的介绍，会说：</p>\n<p><strong>“要写这么多其他代码，还增加了文件体积，搞个啥子咧”</strong></p>\n<p>一般情况下，ts需要编译成js才能运行。编译后长这样：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 'xxx: number' 表示声明一个number类型</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">123</span>;</span><br><span class=\"line\"><span class=\"hljs-comment\">// 声明一个函数的参数类型(number以及any)和返回值(void)</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(num, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);</span><br><span class=\"line\"><span class=\"hljs-comment\">// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-string\">'小王'</span>,</span><br><span class=\"line\">    age: <span class=\"hljs-number\">12</span>,</span><br><span class=\"line\">    family: [<span class=\"hljs-string\">'爹'</span>, <span class=\"hljs-string\">'娘'</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"hljs-comment\">// 因此可以直接定义过来</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> person2 = person;</span><br></pre></td></tr></table></figure>\n\n<p>通过人肉diff，发现编译后的去掉了ts的所有代码。</p>\n<p>可能就又有同学想问了：</p>\n<p><strong>“学这些有啥好处?”</strong></p>\n<p>别急，接着往下看🤓</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>这块介绍ts的几个应用场景，给点启发~</p>\n<h4 id=\"用我的代码就要听我的\"><a href=\"#用我的代码就要听我的\" class=\"headerlink\" title=\"-用我的代码就要听我的\"></a><font color=\"green\">-用我的代码就要听我的</font></h4><p>平时为了代码的健壮性，不得不对代码做很多容错的操作。</p>\n<p><del>假如成功避免了因为自己年龄大了而眼睛花了，使用自己写的方法时这里漏了一个参数，那里传错了参数类型。</del><br>经常会有些不靠谱的使用者，不看你辛辛苦苦耕耘的api文档，瞎jb传参。最后出了问题还怪你没有做好兼容处理，领导群里一顿数落。</p>\n<p>我们就得像孩子他妈一样，考虑熊孩子会传些什么乱七八糟的东西进来，然后在代码里面加上各种分支。</p>\n<p>现在用ts，就可以在传参的时候友好的提示出来“你写了个什么玩意”的意思。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsheua6aj308a09aac5.jpg\" alt=\"-w149\"></p>\n<p>首先用ts定义一个函数</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">interface</span> IArgs &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    age: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">youFoo</span> (<span class=\"hljs-params\">arg1: <span class=\"hljs-built_in\">string</span>, arg2: 'a'|'b', arg3: IArgs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 这里啥都不干，你传参吧</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如同事小明这么写</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youFoo(<span class=\"hljs-string\">'sss'</span>, <span class=\"hljs-string\">'c'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-string\">'xiaoming'</span>,</span><br><span class=\"line\">    age: <span class=\"hljs-number\">18</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>他就会发现哪里好像不太对</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfbakyj30k703x3za.jpg\" alt></p>\n<p>第二个参数要求’a’或者’b’，于是小明默默的改过来了，但是又发现</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfth3aj30ll058abg.jpg\" alt></p>\n<p>原来<code>age</code>是要求传<code>string</code>类型。</p>\n<p>于是小明一边心里mmp一边改了过来。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshgtgj7j3054030glt.jpg\" alt></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshhsfhmj305e04q3z1.jpg\" alt></p>\n<h4 id=\"找文档\"><a href=\"#找文档\" class=\"headerlink\" title=\"-找文档\"></a><font color=\"green\">-找文档</font></h4><p>平时在干活的时候，我们一般喜欢多一个屏幕，可以开个chrome，查查问题找找文档等。不过经常还得看网速，用搜索去搜api啥的，遇到在乡下写代码，分分钟有想shi的心。</p>\n<p>有了ts，我们就完(da)美(gai)的决掉了这个问题:</p>\n<p>首先按照这样的结构去写方法：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * 一个方法：生成错误提示信息</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * </span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;string&#125; message 提示信息，比如`you have a error`</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;number | string&#125; code 错误码，数字和字符都行</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * @param &#123;string&#125; type 类型，请写`demo1`或者`demo2`</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * </span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * [还不懂？点这里吧](https://www.google.com)</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * </span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * // demo</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * genErrMsg('demo', 10086)</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * </span></span><br><span class=\"line\"><span class=\"hljs-comment\"> */</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genErrMsg</span> (<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">string</span>, code: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">type</span>?: (<span class=\"hljs-string\">'demo1'</span> | <span class=\"hljs-string\">'demo2'</span>)</span>): <span class=\"hljs-title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> (message || <span class=\"hljs-string\">`网络繁忙，请稍候再试`</span>) + (code ? <span class=\"hljs-string\">`(<span class=\"hljs-subst\">$&#123;code&#125;</span>)`</span> : <span class=\"hljs-string\">``</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在使用过程中的体验如下：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshinpuxg30l409wth2.gif\" alt></p>\n<p>在更完善的lib当中，体验更佳，除了开头的<code>jquery</code>外，还比如：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshjpvt1g30mq0n5wp4.gif\" alt></p>\n<h4 id=\"粗心大意\"><a href=\"#粗心大意\" class=\"headerlink\" title=\"-粗心大意\"></a><font color=\"green\">-粗心大意</font></h4><p>阅读以下js代码，<br>提问：<strong>分割线以下的代码有几处bug？</strong></p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// careless.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> foooo = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> fooo = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> fooooooo = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> foooooo = <span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-number\">12</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    fn1 () &#123;&#125;,</span><br><span class=\"line\">    fn2 () &#123;&#125;,</span><br><span class=\"line\">    fn4 () &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">/*************** 分割线以下的代码有哪些地方有bug？ **************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.fn3()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.leg(fooooo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(tast)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>/*</p>\n<p>**</p>\n<p>**</p>\n<p><strong><strong>* 答案分界线 *</strong></strong></p>\n<p>**</p>\n<p>**</p>\n<p>*/</p>\n<p>是不是觉得眼睛有点要瞎了？</p>\n<p>试试把.js改成.ts</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshkgb9oj30en0b2q5w.jpg\" alt></p>\n<h4 id=\"隐藏的问题\"><a href=\"#隐藏的问题\" class=\"headerlink\" title=\"-隐藏的问题\"></a><font color=\"green\">-隐藏的问题</font></h4><p>如果说之前的js代码还能凭眼神立刻看出哪里不对，那么下面这些就没那么简单了</p>\n<p>阅读以下js代码，<br>提问：<strong>代码有几处bug？</strong></p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> utils <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\">utils.genErrMsg(<span class=\"hljs-number\">10086</span>, <span class=\"hljs-string\">'this is error'</span>) <span class=\"hljs-comment\">// 上面提到的genErrMsg函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> dom = <span class=\"hljs-built_in\">window</span>.document.getElementById(<span class=\"hljs-string\">'foo'</span>)</span><br><span class=\"line\">dom.className = <span class=\"hljs-string\">'add'</span></span><br></pre></td></tr></table></figure>\n\n<p>/*</p>\n<p>**</p>\n<p>**</p>\n<p><strong><strong>* 答案分界线 *</strong></strong></p>\n<p>**</p>\n<p>**</p>\n<p>*/</p>\n<p>试试把.js改成.ts</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshlfaz9j30bn04jjss.jpg\" alt></p>\n<p>可知问题如下：</p>\n<p>1.<code>genErrMsg</code>的第一个参数应该是<code>string</code></p>\n<p>2.<code>getElementById</code>返回值还可能是<code>null</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmbxiaj30b704adh5.jpg\" alt></p>\n<h4 id=\"接口数据不知道\"><a href=\"#接口数据不知道\" class=\"headerlink\" title=\"-接口数据不知道\"></a><font color=\"green\">-接口数据不知道</font></h4><p>在维护代码的过程中，可能经常遇到某个接口不知道有啥数据，通常这个时候我们需要去查接口文档。然而当次数一多，或者后台大佬一坑起来，改了字段，可能会查到怀疑人生。</p>\n<p>如果使用ts，可能手里的剧本就不一样了</p>\n<p>假如有个接口如下所示</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmuhsvj30id06o3zq.jpg\" alt></p>\n<p>我们针对这个接口写出了如下ts代码：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">interface</span> IPriceData &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 标识 */</span></span><br><span class=\"line\">    cbf: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">/** id */</span></span><br><span class=\"line\">    id: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 市场价格 */</span></span><br><span class=\"line\">    m: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 后台价 */</span></span><br><span class=\"line\">    op: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 前台价 */</span></span><br><span class=\"line\">    p: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 将IPriceData塞进数组里</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> IPriceDataArray = <span class=\"hljs-built_in\">Array</span>&lt;IPriceData&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPrice</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// Promise的泛型参数使用了IPriceDataArray类型，then里面返回的数据就是IPriceDataArray类型</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>&lt;IPriceDataArray&gt;<span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">        $.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-params\">'https:<span class=\"hljs-comment\">//xxxxxxx/prices/pgets?ids=P_100012&amp;area=&amp;source=', data =&gt; &#123;</span></span></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-params\">            resolve(<span class=\"hljs-params\">data</span>)</span></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-params\">        &#125;</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">    &#125;</span>)</span></span><br><span class=\"line\"><span class=\"hljs-function\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当调用<code>getPrice</code>函数时，体验如下：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshn9s8gg30mq0bm0vj.gif\" alt></p>\n<p>以后每次维护这段函数的时候都不需要去看文档啦。如果后台突然改了字段，在检查的过程中我们可以马上发现问题，然后拿着数据去质问：你tm改了东西让我来背锅…(此处省略1万个字)</p>\n<h4 id=\"增强后的class和enum\"><a href=\"#增强后的class和enum\" class=\"headerlink\" title=\"-增强后的class和enum\"></a><font color=\"green\">-增强后的class和enum</font></h4><p>众所周知，js里面的class就是个语法糖，想学强类型语言，写法又是个半吊子。</p>\n<p>但是在ts当中，class被增强了(当然还是个语法糖，只不过更甜了)</p>\n<p>咱们看图说话：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshnr93cj30gt0huq6w.jpg\" alt></p>\n<p>vscode中对ts下的共有属性、私有属性、保护属性和静态属性开了小灶，实例下只有公有属性才会被允许使用和提示出来。</p>\n<p>另外ts还提供了enum语法糖：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">enum</span> HttpCode &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 成功 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'200_OK'</span> = <span class=\"hljs-number\">200</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 已生成了新的资源 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'201_Created'</span> = <span class=\"hljs-number\">201</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 请求稍后会被处理 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'202_Accepted'</span> = <span class=\"hljs-number\">202</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 资源已经不存在 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'204_NoContent'</span> = <span class=\"hljs-number\">204</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 被请求的资源有一系列可供选择的回馈信息 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'300_MultipleChoices'</span> = <span class=\"hljs-number\">300</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 永久性转移 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'301_MovedPermanently'</span> = <span class=\"hljs-number\">301</span>,</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 暂时性转移 */</span></span><br><span class=\"line\">    <span class=\"hljs-string\">'302_MoveTemporarily'</span> = <span class=\"hljs-number\">302</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HttpCode[<span class=\"hljs-string\">'200_OK'</span>]</span><br><span class=\"line\">HttpCode[<span class=\"hljs-number\">200</span>]</span><br></pre></td></tr></table></figure>\n\n<p>相比简单对象定义的key-value，只能通过key去访问value，不能通过value访问key。但是在enum当中，正反都可以当做key来用。</p>\n<p>编译后的代码有兴趣的同学可以了解下~</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">var</span> HttpCode;</span><br><span class=\"line\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">HttpCode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 成功 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"200_OK\"</span>] = <span class=\"hljs-number\">200</span>] = <span class=\"hljs-string\">\"200_OK\"</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 已生成了新的资源 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"201_Created\"</span>] = <span class=\"hljs-number\">201</span>] = <span class=\"hljs-string\">\"201_Created\"</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 请求稍后会被处理 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"202_Accepted\"</span>] = <span class=\"hljs-number\">202</span>] = <span class=\"hljs-string\">\"202_Accepted\"</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 资源已经不存在 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"204_NoContent\"</span>] = <span class=\"hljs-number\">204</span>] = <span class=\"hljs-string\">\"204_NoContent\"</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 被请求的资源有一系列可供选择的回馈信息 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"300_MultipleChoices\"</span>] = <span class=\"hljs-number\">300</span>] = <span class=\"hljs-string\">\"300_MultipleChoices\"</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 永久性转移 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"301_MovedPermanently\"</span>] = <span class=\"hljs-number\">301</span>] = <span class=\"hljs-string\">\"301_MovedPermanently\"</span>;</span><br><span class=\"line\">    <span class=\"hljs-comment\">/** 暂时性转移 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"hljs-string\">\"302_MoveTemporarily\"</span>] = <span class=\"hljs-number\">302</span>] = <span class=\"hljs-string\">\"302_MoveTemporarily\"</span>;</span><br><span class=\"line\">&#125;)(HttpCode || (HttpCode = &#123;&#125;));</span><br><span class=\"line\">HttpCode[<span class=\"hljs-string\">'200_OK'</span>];</span><br><span class=\"line\">HttpCode[<span class=\"hljs-number\">200</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优点以及不足\"><a href=\"#优点以及不足\" class=\"headerlink\" title=\"优点以及不足\"></a>优点以及不足</h2><p>通过上面的几个栗子，大概可以看出使用了ts后，可以获得以下技能点：</p>\n<ul>\n<li>清晰的函数参数/接口属性，增加了代码可读性和可维护性</li>\n<li>静态检查</li>\n<li>生成API文档</li>\n<li>配合现代编辑器，各种提示</li>\n<li>活跃的社区</li>\n</ul>\n<p>以及对应的技术成本</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>维护者(包的作者)</th>\n<th>使用者</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>收益</td>\n<td>清晰的函数参数/接口属性 <br> 静态检查 <br> 生成api文档</td>\n<td>清晰的函数参数/接口属性 <br> 配合现代编辑器，各种提示</td>\n</tr>\n<tr>\n<td>代价</td>\n<td>标记类型 <br> 声明(interface/type)</td>\n<td>和某些库结合的不是很完美(没错，说的就是vue 2.x)</td>\n</tr>\n</tbody></table>\n<p>这里提到的vue2.x由于ts先天能力的不足，导致vue的ts语法需要使用class风格(运行时会被转换回原本的vue构造函数的语法)，和我们平时熟悉的vue风格有些差异</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsho98utj30is0icqa9.jpg\" alt></p>\n<p>这里是因为vue的this下的环境比较复杂，对于ide来说需要在运行时才能确定，因此在编写ts的时候需要手动去设置属性(比如props,data,methods等)到this下面，非常麻烦。早期ts并不支持手动编写this的作用域，后来专门为其设计了一个<code>ThisType</code>的方法。</p>\n<p>在上面的代码里用了<code>class</code>的写法，本身所有需要的属性就在this下，规避了运行时才能确定this下需要的作用域的问题。</p>\n<p>另一方面，由于ts提示能力比较局限，比如在函数场景中，如果数据来源是独立的对象，体验就会比较糟糕。</p>\n<p>请阅读以下栗子(这一块稍微超纲了标题’安利’的范畴，不太理解的新同学可以入坑以后再消化~)</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">interface</span> IOptions &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-built_in\">string</span></span><br><span class=\"line\">    age: <span class=\"hljs-built_in\">number</span></span><br><span class=\"line\">    extra: &#123;</span><br><span class=\"line\">        data: <span class=\"hljs-built_in\">Object</span></span><br><span class=\"line\">        methods: <span class=\"hljs-built_in\">Object</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 参数options要求符合IOptions定义的规则</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sthConstructor</span> (<span class=\"hljs-params\">options: IOptions</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// options对象当中并没有任何ts的静态检查和提示</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> options = &#123;</span><br><span class=\"line\">    name: <span class=\"hljs-string\">'peter'</span>,</span><br><span class=\"line\">    age: <span class=\"hljs-string\">'13'</span>, <span class=\"hljs-comment\">// error: age应该为数字</span></span><br><span class=\"line\">    extra: &#123;</span><br><span class=\"line\">        data: [],</span><br><span class=\"line\">        methods: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">// options飘红报错，然而提示内容废话太多，关键信息藏得太深</span></span><br><span class=\"line\">sthConstructor(options)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshpnx95j31420naqe6.jpg\" alt></p>\n<p>在上面的场景，我们希望在options当中能够获得完整的ts检查能力。达成这个目的有三种方法：</p>\n<p>1.将options里面的东西挪进函数当中</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshqpfvpj30d2092mz4.jpg\" alt></p>\n<p>2.将<code>options</code>用IObject定义</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrnhupj30e607y76i.jpg\" alt></p>\n<p>3.提供一个helper方法</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrynz2j30gq0dijvy.jpg\" alt></p>\n<p>这三种方式当中：</p>\n<p>方法1是最简单的方式，但是在大型项目当中，这样的写法反而很少见到。</p>\n<p>方法2是维护者常用的方式，但是对于使用者而言，成本较高。因为使用者需要去lib里翻到方法对应的type类型，将它import进来。</p>\n<p>方法3是个人觉得相对比较好的方式，只要维护者提供一个类似<code>helper</code>的函数包装一下，就可以获得对应的提示。是不是很像vue ts的装饰器?</p>\n<p>但上述三种解决方式我觉得都不优雅，这就是ts当前的不足之一。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshsz0uyj30ie0g2n6g.jpg\" alt></p>\n<h2 id=\"ts在js中的玩法\"><a href=\"#ts在js中的玩法\" class=\"headerlink\" title=\"ts在js中的玩法\"></a>ts在js中的玩法</h2><p>TypeScript是和vscode都是微软的亲儿子，他们兄弟俩相互协作肯定会有更多小花样，甚至你用的只是js文件，也可以享受到。</p>\n<p>这里抛砖引玉列出两条：</p>\n<h4 id=\"配置文件自动提示\"><a href=\"#配置文件自动提示\" class=\"headerlink\" title=\"-配置文件自动提示\"></a><font color=\"green\">-配置文件自动提示</font></h4><p>只要有types文件，所有配置都可以自动提示：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * webpack配置自动提示</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 先安装对应的types包： `npm i @types/webpack -D`</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @type &#123;import(&apos;webpack&apos;).Configuration&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshu44dog30nl0d1dkw.gif\" alt></p>\n<h4 id=\"js语法检查\"><a href=\"#js语法检查\" class=\"headerlink\" title=\"-js语法检查\"></a><font color=\"green\">-js语法检查</font></h4><p>在js中也可以获得自动提示和静态检查。只要在vscode的setting当中勾上<code>Check JS</code>即可。虽然你的js代码可能会被各种飘红🤪</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshvit6ij30oy0a741k.jpg\" alt></p>\n<p>⬇️ 之前的例子在js中也可以提示出一些bug了</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshwi2eij30io0eaadl.jpg\" alt></p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>有的同学会问：我才学js，可以学ts吗？可以，并且建议，因为会对js基础知识加深理解。有用法问题在stackoverflow上搜搜就解决了。</p>\n<p>那么这么有用的工具，去哪可以学到呢？或许你可以参考下我学习的轨迹：</p>\n<p><a href=\"https://github.com/xcatliu/typescript-tutorial/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">传送门–TypeScript 入门教程 (墙裂推荐)</a></p>\n<p><a href=\"https://juejin.im/entry/5d19adb3f265da1b7b31a28b\" target=\"_blank\" rel=\"noopener\">传送门–为 Vue3 学点 TypeScript , 体验 TypeScript</a></p>\n<p><a href=\"https://juejin.im/post/5d53a8895188257fad671cbc\" target=\"_blank\" rel=\"noopener\">传送门–一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比</a></p>\n<p><a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">传送门–stack overflow (墙裂推荐)</a></p>\n<p><a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener\">传送门–google</a></p>\n<p>今年ts突然遍地开花，似乎成为了潮流。各种ts改造、学习教程、心得出现在了各大学习、交友网站上。<br>有的同学可能也发现了：这不就就是java这类语言玩剩了的东西了吗？</p>\n<p>那年轻的时候谁不都想自由嘛，然而随着年龄大了都被管的服服帖帖的</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/28/16d769e2fca9b963?w=380&h=584&f=png&s=160807\" alt></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：李逸君</p>\n</blockquote>\n<p>骚年，你感受过debug一年找不到问题，最后发现是变量名写错时的绝望吗？<br>骚年，你感受过生产线上代码出现<code>Uncaught TypeError</code>时的恐惧吗？<br>骚年，你感受过写代码找一万个文件还找不到方法定义时委屈吗？</p>\n<p>拿起键盘，让我们对谋害生命的代码拖进垃圾箱！(划掉)</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>据了解，目前有相当一部分同学不想去学习ts，毕竟没(xue)时(bu)间(dong)。很不幸两个月前我也是其中的一员。在看到尤大大都用ts写vue3了，蠢蠢欲动的我小心翼翼的踏入了这个深坑。在经历了长达一天的摸爬滚打之后，领悟到了真谛</p>","more":"<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshbg55jj30gq0fqwqq.jpg\" alt=\"真香\"></p>\n<p>经过了一段时间的理解之后，写了这篇文章，旨在给犹豫是否学习或者还在观望TypeScript的同学做个使用ts的收益分析，希望能够打动屏幕面前的你。</p>\n<h2 id=\"安利\"><a href=\"#安利\" class=\"headerlink\" title=\"安利\"></a>安利</h2><p>ts难写吗？不难。最简单的做法三步就搞定。</p>\n<ol>\n<li>找一个js文件</li>\n<li>按下重命名</li>\n<li>把.js改成.ts</li>\n</ol>\n<p>大功告成！</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshckta9j30ec0bswhb.jpg\" alt=\"打脸\"></p>\n<p>（打人别打脸，还要靠它吃饭的…）</p>\n<p>⬇️ ts初体验<br><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshef2scg30ps0f77o6.gif\" alt=\"gif0\"></p>\n<h4 id=\"ts是什么\"><a href=\"#ts是什么\" class=\"headerlink\" title=\"-ts是什么\"></a><font color=\"green\">-ts是什么</font></h4><p>ts是js的超集，意味着js本身的语法在ts里面也能跑的通。ts一方面是对js加上了很多条条框框的限制，另一方面是拓展了js的一些能力，就像es6提供了那么多神奇的语法糖一样。只要按照一定的规则去书写js，就能享受到ts带来的好处。</p>\n<p>当然因为现在的ts足够强大，并且有自家的vscode保驾护航，才方便了我们这些过去想都不(lan)敢(de)想的苦逼程序员。</p>\n<p>js改造成ts的工作量很大程度取决于你想对自己的代码限制的有多细致，描述的有多完善。最简单的就像上面说的，改个拓展名就行了(当然很大程度上可能会通过不了各种静态检查)。如果你写的越多，用你代码的同志就越大可能喜欢你写的东西。</p>\n<p>下面先<strong>简单</strong>介绍一下ts语法，便于后面的理解。</p>\n<h4 id=\"ts语法简介\"><a href=\"#ts语法简介\" class=\"headerlink\" title=\"-ts语法简介\"></a><font color=\"green\">-ts语法简介</font></h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 'xxx: number' 表示声明一个number类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> num: <span class=\"built_in\">number</span> = <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个函数的参数类型(number以及any)和返回值(void)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">arg1: <span class=\"built_in\">number</span>, arg2: <span class=\"built_in\">any</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(num, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> IPerson &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span> <span class=\"comment\">// IPerson需要包含一个name属性，类型是string</span></span><br><span class=\"line\">    age: <span class=\"built_in\">number</span> <span class=\"comment\">// IPerson需要包含一个age属性，类型是number</span></span><br><span class=\"line\">    family: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"comment\">// IPerson需要包含一个family属性，类型是数组，数组里面都是string类型的数据</span></span><br><span class=\"line\">    sex?: <span class=\"string\">'男'</span> | <span class=\"string\">'女'</span> <span class=\"comment\">// IPerson可选一个sex属性，值为'男'或者'女'或者undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person: IPerson = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小王'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span>,</span><br><span class=\"line\">    family: [<span class=\"string\">'爹'</span>, <span class=\"string\">'娘'</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// type类似interface，以下写法等同用interface声明IPerson</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPerson2 = &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span></span><br><span class=\"line\">    age: <span class=\"built_in\">number</span></span><br><span class=\"line\">    family: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\">    sex?: <span class=\"string\">'男'</span> | <span class=\"string\">'女'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 因此可以直接定义过来</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2: IPerson2 = person</span><br></pre></td></tr></table></figure>\n\n<p>可能有的同学看了上面的介绍，会说：</p>\n<p><strong>“要写这么多其他代码，还增加了文件体积，搞个啥子咧”</strong></p>\n<p>一般情况下，ts需要编译成js才能运行。编译后长这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 'xxx: number' 表示声明一个number类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// 声明一个函数的参数类型(number以及any)和返回值(void)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(num, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 使用IPerson接口定义一个对象，如果对象不符合IPerson的定义，编译器会飘红报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小王'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">12</span>,</span><br><span class=\"line\">    family: [<span class=\"string\">'爹'</span>, <span class=\"string\">'娘'</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 因此可以直接定义过来</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = person;</span><br></pre></td></tr></table></figure>\n\n<p>通过人肉diff，发现编译后的去掉了ts的所有代码。</p>\n<p>可能就又有同学想问了：</p>\n<p><strong>“学这些有啥好处?”</strong></p>\n<p>别急，接着往下看🤓</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>这块介绍ts的几个应用场景，给点启发~</p>\n<h4 id=\"用我的代码就要听我的\"><a href=\"#用我的代码就要听我的\" class=\"headerlink\" title=\"-用我的代码就要听我的\"></a><font color=\"green\">-用我的代码就要听我的</font></h4><p>平时为了代码的健壮性，不得不对代码做很多容错的操作。</p>\n<p><del>假如成功避免了因为自己年龄大了而眼睛花了，使用自己写的方法时这里漏了一个参数，那里传错了参数类型。</del><br>经常会有些不靠谱的使用者，不看你辛辛苦苦耕耘的api文档，瞎jb传参。最后出了问题还怪你没有做好兼容处理，领导群里一顿数落。</p>\n<p>我们就得像孩子他妈一样，考虑熊孩子会传些什么乱七八糟的东西进来，然后在代码里面加上各种分支。</p>\n<p>现在用ts，就可以在传参的时候友好的提示出来“你写了个什么玩意”的意思。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsheua6aj308a09aac5.jpg\" alt=\"-w149\"></p>\n<p>首先用ts定义一个函数</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> IArgs &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span></span><br><span class=\"line\">    age: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">youFoo</span> (<span class=\"params\">arg1: <span class=\"built_in\">string</span>, arg2: 'a'|'b', arg3: IArgs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里啥都不干，你传参吧</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如同事小明这么写</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">youFoo(<span class=\"string\">'sss'</span>, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'xiaoming'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>他就会发现哪里好像不太对</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfbakyj30k703x3za.jpg\" alt></p>\n<p>第二个参数要求’a’或者’b’，于是小明默默的改过来了，但是又发现</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshfth3aj30ll058abg.jpg\" alt></p>\n<p>原来<code>age</code>是要求传<code>string</code>类型。</p>\n<p>于是小明一边心里mmp一边改了过来。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshgtgj7j3054030glt.jpg\" alt></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshhsfhmj305e04q3z1.jpg\" alt></p>\n<h4 id=\"找文档\"><a href=\"#找文档\" class=\"headerlink\" title=\"-找文档\"></a><font color=\"green\">-找文档</font></h4><p>平时在干活的时候，我们一般喜欢多一个屏幕，可以开个chrome，查查问题找找文档等。不过经常还得看网速，用搜索去搜api啥的，遇到在乡下写代码，分分钟有想shi的心。</p>\n<p>有了ts，我们就完(da)美(gai)的决掉了这个问题:</p>\n<p>首先按照这样的结构去写方法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个方法：生成错误提示信息</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; message 提示信息，比如`you have a error`</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number | string&#125; code 错误码，数字和字符都行</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; type 类型，请写`demo1`或者`demo2`</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * [还不懂？点这里吧](https://www.google.com)</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * // demo</span></span><br><span class=\"line\"><span class=\"comment\"> * genErrMsg('demo', 10086)</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genErrMsg</span> (<span class=\"params\">message: <span class=\"built_in\">string</span>, code: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>, <span class=\"keyword\">type</span>?: (<span class=\"string\">'demo1'</span> | <span class=\"string\">'demo2'</span>)</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (message || <span class=\"string\">`网络繁忙，请稍候再试`</span>) + (code ? <span class=\"string\">`(<span class=\"subst\">$&#123;code&#125;</span>)`</span> : <span class=\"string\">``</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在使用过程中的体验如下：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshinpuxg30l409wth2.gif\" alt></p>\n<p>在更完善的lib当中，体验更佳，除了开头的<code>jquery</code>外，还比如：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshjpvt1g30mq0n5wp4.gif\" alt></p>\n<h4 id=\"粗心大意\"><a href=\"#粗心大意\" class=\"headerlink\" title=\"-粗心大意\"></a><font color=\"green\">-粗心大意</font></h4><p>阅读以下js代码，<br>提问：<strong>分割线以下的代码有几处bug？</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// careless.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foooo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fooo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fooooooo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foooooo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    fn1 () &#123;&#125;,</span><br><span class=\"line\">    fn2 () &#123;&#125;,</span><br><span class=\"line\">    fn4 () &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************** 分割线以下的代码有哪些地方有bug？ **************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.fn3()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.leg(fooooo)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(tast)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>/*</p>\n<p>**</p>\n<p>**</p>\n<p><strong><strong>* 答案分界线 *</strong></strong></p>\n<p>**</p>\n<p>**</p>\n<p>*/</p>\n<p>是不是觉得眼睛有点要瞎了？</p>\n<p>试试把.js改成.ts</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshkgb9oj30en0b2q5w.jpg\" alt></p>\n<h4 id=\"隐藏的问题\"><a href=\"#隐藏的问题\" class=\"headerlink\" title=\"-隐藏的问题\"></a><font color=\"green\">-隐藏的问题</font></h4><p>如果说之前的js代码还能凭眼神立刻看出哪里不对，那么下面这些就没那么简单了</p>\n<p>阅读以下js代码，<br>提问：<strong>代码有几处bug？</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> utils <span class=\"keyword\">from</span> <span class=\"string\">'./utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\">utils.genErrMsg(<span class=\"number\">10086</span>, <span class=\"string\">'this is error'</span>) <span class=\"comment\">// 上面提到的genErrMsg函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dom = <span class=\"built_in\">window</span>.document.getElementById(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\">dom.className = <span class=\"string\">'add'</span></span><br></pre></td></tr></table></figure>\n\n<p>/*</p>\n<p>**</p>\n<p>**</p>\n<p><strong><strong>* 答案分界线 *</strong></strong></p>\n<p>**</p>\n<p>**</p>\n<p>*/</p>\n<p>试试把.js改成.ts</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshlfaz9j30bn04jjss.jpg\" alt></p>\n<p>可知问题如下：</p>\n<p>1.<code>genErrMsg</code>的第一个参数应该是<code>string</code></p>\n<p>2.<code>getElementById</code>返回值还可能是<code>null</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmbxiaj30b704adh5.jpg\" alt></p>\n<h4 id=\"接口数据不知道\"><a href=\"#接口数据不知道\" class=\"headerlink\" title=\"-接口数据不知道\"></a><font color=\"green\">-接口数据不知道</font></h4><p>在维护代码的过程中，可能经常遇到某个接口不知道有啥数据，通常这个时候我们需要去查接口文档。然而当次数一多，或者后台大佬一坑起来，改了字段，可能会查到怀疑人生。</p>\n<p>如果使用ts，可能手里的剧本就不一样了</p>\n<p>假如有个接口如下所示</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshmuhsvj30id06o3zq.jpg\" alt></p>\n<p>我们针对这个接口写出了如下ts代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> IPriceData &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 标识 */</span></span><br><span class=\"line\">    cbf: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"comment\">/** id */</span></span><br><span class=\"line\">    id: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"comment\">/** 市场价格 */</span></span><br><span class=\"line\">    m: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"comment\">/** 后台价 */</span></span><br><span class=\"line\">    op: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"comment\">/** 前台价 */</span></span><br><span class=\"line\">    p: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将IPriceData塞进数组里</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPriceDataArray = <span class=\"built_in\">Array</span>&lt;IPriceData&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Promise的泛型参数使用了IPriceDataArray类型，then里面返回的数据就是IPriceDataArray类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>&lt;IPriceDataArray&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        $.<span class=\"keyword\">get</span>(<span class=\"params\">'https:<span class=\"comment\">//xxxxxxx/prices/pgets?ids=P_100012&amp;area=&amp;source=', data =&gt; &#123;</span></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">            resolve(<span class=\"params\">data</span>)</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        &#125;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span>)</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当调用<code>getPrice</code>函数时，体验如下：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshn9s8gg30mq0bm0vj.gif\" alt></p>\n<p>以后每次维护这段函数的时候都不需要去看文档啦。如果后台突然改了字段，在检查的过程中我们可以马上发现问题，然后拿着数据去质问：你tm改了东西让我来背锅…(此处省略1万个字)</p>\n<h4 id=\"增强后的class和enum\"><a href=\"#增强后的class和enum\" class=\"headerlink\" title=\"-增强后的class和enum\"></a><font color=\"green\">-增强后的class和enum</font></h4><p>众所周知，js里面的class就是个语法糖，想学强类型语言，写法又是个半吊子。</p>\n<p>但是在ts当中，class被增强了(当然还是个语法糖，只不过更甜了)</p>\n<p>咱们看图说话：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshnr93cj30gt0huq6w.jpg\" alt></p>\n<p>vscode中对ts下的共有属性、私有属性、保护属性和静态属性开了小灶，实例下只有公有属性才会被允许使用和提示出来。</p>\n<p>另外ts还提供了enum语法糖：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> HttpCode &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 成功 */</span></span><br><span class=\"line\">    <span class=\"string\">'200_OK'</span> = <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** 已生成了新的资源 */</span></span><br><span class=\"line\">    <span class=\"string\">'201_Created'</span> = <span class=\"number\">201</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** 请求稍后会被处理 */</span></span><br><span class=\"line\">    <span class=\"string\">'202_Accepted'</span> = <span class=\"number\">202</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** 资源已经不存在 */</span></span><br><span class=\"line\">    <span class=\"string\">'204_NoContent'</span> = <span class=\"number\">204</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** 被请求的资源有一系列可供选择的回馈信息 */</span></span><br><span class=\"line\">    <span class=\"string\">'300_MultipleChoices'</span> = <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** 永久性转移 */</span></span><br><span class=\"line\">    <span class=\"string\">'301_MovedPermanently'</span> = <span class=\"number\">301</span>,</span><br><span class=\"line\">    <span class=\"comment\">/** 暂时性转移 */</span></span><br><span class=\"line\">    <span class=\"string\">'302_MoveTemporarily'</span> = <span class=\"number\">302</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HttpCode[<span class=\"string\">'200_OK'</span>]</span><br><span class=\"line\">HttpCode[<span class=\"number\">200</span>]</span><br></pre></td></tr></table></figure>\n\n<p>相比简单对象定义的key-value，只能通过key去访问value，不能通过value访问key。但是在enum当中，正反都可以当做key来用。</p>\n<p>编译后的代码有兴趣的同学可以了解下~</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> HttpCode;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">HttpCode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 成功 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"200_OK\"</span>] = <span class=\"number\">200</span>] = <span class=\"string\">\"200_OK\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 已生成了新的资源 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"201_Created\"</span>] = <span class=\"number\">201</span>] = <span class=\"string\">\"201_Created\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 请求稍后会被处理 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"202_Accepted\"</span>] = <span class=\"number\">202</span>] = <span class=\"string\">\"202_Accepted\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 资源已经不存在 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"204_NoContent\"</span>] = <span class=\"number\">204</span>] = <span class=\"string\">\"204_NoContent\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 被请求的资源有一系列可供选择的回馈信息 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"300_MultipleChoices\"</span>] = <span class=\"number\">300</span>] = <span class=\"string\">\"300_MultipleChoices\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 永久性转移 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"301_MovedPermanently\"</span>] = <span class=\"number\">301</span>] = <span class=\"string\">\"301_MovedPermanently\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 暂时性转移 */</span></span><br><span class=\"line\">    HttpCode[HttpCode[<span class=\"string\">\"302_MoveTemporarily\"</span>] = <span class=\"number\">302</span>] = <span class=\"string\">\"302_MoveTemporarily\"</span>;</span><br><span class=\"line\">&#125;)(HttpCode || (HttpCode = &#123;&#125;));</span><br><span class=\"line\">HttpCode[<span class=\"string\">'200_OK'</span>];</span><br><span class=\"line\">HttpCode[<span class=\"number\">200</span>];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优点以及不足\"><a href=\"#优点以及不足\" class=\"headerlink\" title=\"优点以及不足\"></a>优点以及不足</h2><p>通过上面的几个栗子，大概可以看出使用了ts后，可以获得以下技能点：</p>\n<ul>\n<li>清晰的函数参数/接口属性，增加了代码可读性和可维护性</li>\n<li>静态检查</li>\n<li>生成API文档</li>\n<li>配合现代编辑器，各种提示</li>\n<li>活跃的社区</li>\n</ul>\n<p>以及对应的技术成本</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>维护者(包的作者)</th>\n<th>使用者</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>收益</td>\n<td>清晰的函数参数/接口属性 <br> 静态检查 <br> 生成api文档</td>\n<td>清晰的函数参数/接口属性 <br> 配合现代编辑器，各种提示</td>\n</tr>\n<tr>\n<td>代价</td>\n<td>标记类型 <br> 声明(interface/type)</td>\n<td>和某些库结合的不是很完美(没错，说的就是vue 2.x)</td>\n</tr>\n</tbody></table>\n<p>这里提到的vue2.x由于ts先天能力的不足，导致vue的ts语法需要使用class风格(运行时会被转换回原本的vue构造函数的语法)，和我们平时熟悉的vue风格有些差异</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rsho98utj30is0icqa9.jpg\" alt></p>\n<p>这里是因为vue的this下的环境比较复杂，对于ide来说需要在运行时才能确定，因此在编写ts的时候需要手动去设置属性(比如props,data,methods等)到this下面，非常麻烦。早期ts并不支持手动编写this的作用域，后来专门为其设计了一个<code>ThisType</code>的方法。</p>\n<p>在上面的代码里用了<code>class</code>的写法，本身所有需要的属性就在this下，规避了运行时才能确定this下需要的作用域的问题。</p>\n<p>另一方面，由于ts提示能力比较局限，比如在函数场景中，如果数据来源是独立的对象，体验就会比较糟糕。</p>\n<p>请阅读以下栗子(这一块稍微超纲了标题’安利’的范畴，不太理解的新同学可以入坑以后再消化~)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> IOptions &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span></span><br><span class=\"line\">    age: <span class=\"built_in\">number</span></span><br><span class=\"line\">    extra: &#123;</span><br><span class=\"line\">        data: <span class=\"built_in\">Object</span></span><br><span class=\"line\">        methods: <span class=\"built_in\">Object</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数options要求符合IOptions定义的规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sthConstructor</span> (<span class=\"params\">options: IOptions</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// options对象当中并没有任何ts的静态检查和提示</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'peter'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'13'</span>, <span class=\"comment\">// error: age应该为数字</span></span><br><span class=\"line\">    extra: &#123;</span><br><span class=\"line\">        data: [],</span><br><span class=\"line\">        methods: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// options飘红报错，然而提示内容废话太多，关键信息藏得太深</span></span><br><span class=\"line\">sthConstructor(options)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshpnx95j31420naqe6.jpg\" alt></p>\n<p>在上面的场景，我们希望在options当中能够获得完整的ts检查能力。达成这个目的有三种方法：</p>\n<p>1.将options里面的东西挪进函数当中</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshqpfvpj30d2092mz4.jpg\" alt></p>\n<p>2.将<code>options</code>用IObject定义</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrnhupj30e607y76i.jpg\" alt></p>\n<p>3.提供一个helper方法</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshrynz2j30gq0dijvy.jpg\" alt></p>\n<p>这三种方式当中：</p>\n<p>方法1是最简单的方式，但是在大型项目当中，这样的写法反而很少见到。</p>\n<p>方法2是维护者常用的方式，但是对于使用者而言，成本较高。因为使用者需要去lib里翻到方法对应的type类型，将它import进来。</p>\n<p>方法3是个人觉得相对比较好的方式，只要维护者提供一个类似<code>helper</code>的函数包装一下，就可以获得对应的提示。是不是很像vue ts的装饰器?</p>\n<p>但上述三种解决方式我觉得都不优雅，这就是ts当前的不足之一。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshsz0uyj30ie0g2n6g.jpg\" alt></p>\n<h2 id=\"ts在js中的玩法\"><a href=\"#ts在js中的玩法\" class=\"headerlink\" title=\"ts在js中的玩法\"></a>ts在js中的玩法</h2><p>TypeScript是和vscode都是微软的亲儿子，他们兄弟俩相互协作肯定会有更多小花样，甚至你用的只是js文件，也可以享受到。</p>\n<p>这里抛砖引玉列出两条：</p>\n<h4 id=\"配置文件自动提示\"><a href=\"#配置文件自动提示\" class=\"headerlink\" title=\"-配置文件自动提示\"></a><font color=\"green\">-配置文件自动提示</font></h4><p>只要有types文件，所有配置都可以自动提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * webpack配置自动提示</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 先安装对应的types包： `npm i @types/webpack -D`</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @type &#123;import(&apos;webpack&apos;).Configuration&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshu44dog30nl0d1dkw.gif\" alt></p>\n<h4 id=\"js语法检查\"><a href=\"#js语法检查\" class=\"headerlink\" title=\"-js语法检查\"></a><font color=\"green\">-js语法检查</font></h4><p>在js中也可以获得自动提示和静态检查。只要在vscode的setting当中勾上<code>Check JS</code>即可。虽然你的js代码可能会被各种飘红🤪</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshvit6ij30oy0a741k.jpg\" alt></p>\n<p>⬇️ 之前的例子在js中也可以提示出一些bug了</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7rshwi2eij30io0eaadl.jpg\" alt></p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>有的同学会问：我才学js，可以学ts吗？可以，并且建议，因为会对js基础知识加深理解。有用法问题在stackoverflow上搜搜就解决了。</p>\n<p>那么这么有用的工具，去哪可以学到呢？或许你可以参考下我学习的轨迹：</p>\n<p><a href=\"https://github.com/xcatliu/typescript-tutorial/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">传送门–TypeScript 入门教程 (墙裂推荐)</a></p>\n<p><a href=\"https://juejin.im/entry/5d19adb3f265da1b7b31a28b\" target=\"_blank\" rel=\"noopener\">传送门–为 Vue3 学点 TypeScript , 体验 TypeScript</a></p>\n<p><a href=\"https://juejin.im/post/5d53a8895188257fad671cbc\" target=\"_blank\" rel=\"noopener\">传送门–一篇朴实的文章带你30分钟捋完TypeScript,方法是正反对比</a></p>\n<p><a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">传送门–stack overflow (墙裂推荐)</a></p>\n<p><a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener\">传送门–google</a></p>\n<p>今年ts突然遍地开花，似乎成为了潮流。各种ts改造、学习教程、心得出现在了各大学习、交友网站上。<br>有的同学可能也发现了：这不就就是java这类语言玩剩了的东西了吗？</p>\n<p>那年轻的时候谁不都想自由嘛，然而随着年龄大了都被管的服服帖帖的</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/9/28/16d769e2fca9b963?w=380&h=584&f=png&s=160807\" alt></p>"},{"title":"Vue.js 3.0编译器compiler-core源码解析","date":"2019-10-09T11:34:30.000Z","cover":"https://cn.vuejs.org/images/logo.png","thumbnail":"https://cn.vuejs.org/images/logo.png","_content":"\n> 作者：深山蚂蚁\n\nVue.js 3.0的源代码正在国庆假期就这么突然放出来了，假期还没结束，陆陆续续看到努力的码农就在各种分析了。   \n\n目前还是 pre Alpha，乐观估计还有 Alpha，Beta版本，最后才是正式版。   \n\n话不多说，看 [Pre-Alpha](https://github.com/vuejs/vue-next)。  瞧 [compiler-core](https://github.com/vuejs/vue-next/tree/master/packages/compiler-core)   \n\n热门的 reactivity 被大佬翻来覆去再研究了，我就和大伙一起来解读一下 ”冷门“ 的 compiler 吧！😄😄😄😄   \n<!--more-->\n如果你对 AST 还不太熟悉，或者对如何实现一个简单的 AST解析器 还不太熟悉，可以猛戳：[手把手教你写一个 AST 解析器](https://juejin.im/post/5d9c16686fb9a04e320a54c0)  \n\nvue3.0的模板解析和vue2.0差异比较大，但是无论怎样变化，基本原理是一致的，我们写的各种 html 代码，js使用的时候其实就是一个字符串，将非结构化的字符串数据，转换成结构化的 AST，我们都是使用强大的正则表达式和indexOf来判断。  \ncompiler-core 的一个核心作用就是将字符串转换成 抽象对象语法树AST。   \n\nLet's do IT !   \n\n## 目录结构\n- \\__tests\\__ 测试用例\n- src/ast   ts语法的大佬的类型定义，比如type，enum，interface等\n- src/codegen   将生成的ast转换成render字符串\n- src/errors    定义 compiler 错误类型\n- src/index     入口文件，主要有一个 baseCompile ，用来编译模板文件的\n- src/parse     将模板字符串转换成 AST\n- src/runtimeHelper     生成code的时候的定义常量对应关系\n- src/transform     处理 AST 中的 vue 特有语法，比如 v-if ,v-on 的解析\n\n进入 compiler-core 目录下，结构一目了然。这里说下 \\__tests\\__ 目录，是vue的jest测试用例。  \n阅读源码前先看看用例，对阅读源码有很大帮助哦。   \n\n如下，测试一个简单的text，执行parse方法之后，得到 ast，期望 ast 的第一个节点与定义的对象是一致的。   \n同理其他的模块测试用例，在阅读源码前可以先瞄一眼，知道这个模块如何使用，输入输出是啥。   \n```js\ntest('simple text', () => {\n    const ast = parse('some text')\n    const text = ast.children[0] as TextNode\n    expect(text).toStrictEqual({\n        type: NodeTypes.TEXT,\n        content: 'some text',\n        isEmpty: false,\n        loc: {\n            start: { offset: 0, line: 1, column: 1 },\n            end: { offset: 9, line: 1, column: 10 },\n            source: 'some text'\n        }\n    })\n})\n```\n先看一张图，重点是四块：   \n- 起始标签\n- 结束标签\n- 动态内容\n- 普通内容  \n\n其中起始标签会用到递归来处理子节点。   \n\n![alt](https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_2.png)\n\n接下来，我们开始跟着源码来阅读吧!\n\n## parse：将字符串模板转换成 AST 抽象语法树\n\n这个是对外暴露的核心方法，我们先测试下结果：\n```js\nconst source = `\n    <div id=\"test\" :class=\"cls\">\n        <span>{{ name }}</span>\n        <MyCom></MyCom>\n    </div>\n`.trim()\nimport { parse } from './compiler-core.cjs'\nconst result = parse(source)\n```\noutput:  \n\n![output](https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_1.png)   \n\n一个简单的转换结果就呈现出来了，从生成的结构来看，相对于vue2.x有几个比较重要的变化：  \n\n- 新增了 loc 属性\n    每一个节点都记录了该节点在源码当中的 start 和 end，标识了代码的详细位置，column,line,offset。   \n    vu3.0对于开发遇到的问题都要详细的日志输出也基于此，另外支持 source-map\n- 新增了 tagType 属性   \n    tagType 属性标识该节点是什么类型的。我们知道 vue2.x 判断节点类型是运行时才有的，vu3.0将判断提前到编译阶段了，提升了性能。  \n    目前tagType有三种类型：0 element,1 component,2 slot,3 template\n- 新增 isStatic 属性   \n    将模板提前编译好，标识是否为动态变化的，比如动态指令\n- ……    \n\n新版的 AST 明显比 vue2.x 要复杂些，可以看到vue3.0将很多可以在编译阶段就能确定的就在编译阶段确定，标识编译结果，不需要等到运行时再去判断，节省内存和性能。这个也是尤大大重点说了的，优化编译，提升性能。    \n\n接下来我们来看下转换的代码，主要有如下几个方法：  \n\n- parse & parseChildren 主入口\n- parseTag 处理标签\n- parseAttribute 处理标签上的属性\n- parseElement 处理起始标签\n- parseInterpolation 处理动态文本内容\n- parseText 处理静态文本内容\n\n### parse & parseChildren 主入口\nparse 的主入口，这里创建了一个 parseContext，有利于后续直接从 context 上拿到 content，options 等。   \ngetCursor 获取当前处理的指针位置，用户生成 loc,初始都是1。\n```js\nexport function parse(content: string, options: ParserOptions = {}): RootNode {\n  const context = createParserContext(content, options)\n  const start = getCursor(context)\n  return {\n    type: NodeTypes.ROOT,\n    children: parseChildren(context, TextModes.DATA, []),\n    helpers: [],\n    components: [],\n    directives: [],\n    hoists: [],\n    codegenNode: undefined,\n    loc: getSelection(context, start)\n  }\n}\n```\n重点看下 parseChildren ，这是转换的主入口方法。\n```js\nfunction parseChildren(\n  context: ParserContext,\n  mode: TextModes,\n  ancestors: ElementNode[]\n): TemplateChildNode[] {\n  const parent = last(ancestors)\n  const ns = parent ? parent.ns : Namespaces.HTML\n  const nodes: TemplateChildNode[] = []\n  while (!isEnd(context, mode, ancestors)) {\n    const s = context.source\n    let node: TemplateChildNode | TemplateChildNode[] | undefined = undefined\n    if (startsWith(s, context.options.delimiters[0])) {\n      // '{{'\n      node = parseInterpolation(context, mode)\n    } else if (mode === TextModes.DATA && s[0] === '<') {\n      // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\n      if (s.length === 1) {\n        emitError(context, ErrorCodes.EOF_BEFORE_TAG_NAME, 1)\n      } else if (s[1] === '!') {\n          // <!DOCTYPE <![CDATA[ 等非节点元素 暂不讨论\n      } else if (s[1] === '/') {\n        if (s.length === 2) {\n        } else if (s[2] === '>') {\n          advanceBy(context, 3)\n          continue\n        } else if (/[a-z]/i.test(s[2])) {\n          parseTag(context, TagType.End, parent)\n          continue\n        } else {\n        }\n      } else if (/[a-z]/i.test(s[1])) {\n        node = parseElement(context, ancestors)\n      } else if (s[1] === '?') {\n      } else {\n      }\n    }\n    if (!node) {\n      node = parseText(context, mode)\n    }\n    if (Array.isArray(node)) {\n      for (let i = 0; i < node.length; i++) {\n        pushNode(context, nodes, node[i])\n      }\n    } else {\n      pushNode(context, nodes, node)\n    }\n  }\n  return nodes\n}\n```\n\nancestors 用来存储未匹配的起始节点，为后进先出的stack。  \n\n循环处理 source，循环截止条件是 isEnd 方法返回true，即是处理完成了，结束有两个条件:\n1. context.source 为空，即整个模板都处理完成。\n2. 碰到截止节点标签(</)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。这个对应 parseChildren 的子节点处理完成。\n\n\n匹配尚未结束，则进入循环匹配。有三种情况：  \n1. if(startsWith(s,context.options.delimiters[0]))语句， delimiters是分割符合，对于Vue来说就是‘{{’和‘}}’。开始匹配到Vue的文本输出内容，则意味着需要处理文本内容插入。\n2. else if (mode === TextModes.DATA && s[0] === '<') 内容是以<开头，即html标签的标识符号，则开始处理起始标签和截止标签两种情况。\n3. 以上条件都不是，或者匹配未成功,那么就是动态文本内容了。\n\n\n如果是第三种动态文本插入，则执行 parseInterpolation 组装文本节点，其中 isStatic=false 标识是变量，比较简单，方法就不贴了。 \n\n```js\nreturn {\n    type: NodeTypes.INTERPOLATION,\n    content: {\n      type: NodeTypes.SIMPLE_EXPRESSION,\n      isStatic: false,\n      content,\n      loc: getSelection(context, innerStart, innerEnd)\n    },\n    loc: getSelection(context, start)\n  }\n```\n\n再看下这两个处理 source 内容后移的方法：   \n\nadvanceBy(context,number) : 将需要处理的模板source ，后移 number 个字符，重新记录 loc   \nadvanceSpaces() : 后移存在的连续的空格   \n\n回到上面的匹配条件，如果是 < 开头，分两种情况：  \n1. 第二个字符是 \"/\"   \n    对应的就是 </     \n        如果是 </> ，那么认为是一个无效标签，直接 advanceBy 后移 3 个字符即可。    \n        如果是 <\\/a，那么认为是一个截止标签，执行 parseTag 方法处理。    \n2. 第二个字符是字母   \n    对应就是标签的起始文字了，如 <\\div，执行 parseElement 方法处理起始标签。\n\n### parseTag 处理标签\n\n如果是截止标签：parseTag，则直接处理完成。   \n如果是起始标签：parseElement 执行，调用parseTag 处理标签，然后再去递归处理子节点等。  \n\n正则：/^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i 这个就不多说了，匹配 <\\div> <\\/div>这种标签。  \n测试 match ：    \n```js\n/^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(\"<div class='abc'>\")\n(2) [\"<div\", \"div\", index: 0, input: \"<div class='abc'>\", groups: undefined]\n```\n显然，mathch[1] 即匹配到的标签元素。我们看主方法：      \n```js\nfunction parseTag(\n  context: ParserContext,\n  type: TagType,\n  parent: ElementNode | undefined\n): ElementNode {\n  // Tag open.\n  const start = getCursor(context)\n  const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source)!\n  const tag = match[1]\n  const props = []\n  const ns = context.options.getNamespace(tag, parent)\n  let tagType = ElementTypes.ELEMENT\n  if (tag === 'slot') tagType = ElementTypes.SLOT\n  else if (tag === 'template') tagType = ElementTypes.TEMPLATE\n  else if (/[A-Z-]/.test(tag)) tagType = ElementTypes.COMPONENT\n  advanceBy(context, match[0].length)\n  advanceSpaces(context)\n  // Attributes.\n  const attributeNames = new Set<string>()\n  while (\n    context.source.length > 0 &&\n    !startsWith(context.source, '>') &&\n    !startsWith(context.source, '/>')\n  ) {\n    const attr = parseAttribute(context, attributeNames)\n    if (type === TagType.Start) {\n      props.push(attr)\n    }\n    advanceSpaces(context)\n  }\n  // Tag close.\n  let isSelfClosing = false\n  if (context.source.length === 0) {\n  } else {\n    isSelfClosing = startsWith(context.source, '/>')\n    advanceBy(context, isSelfClosing ? 2 : 1)\n  }\n  return {\n    type: NodeTypes.ELEMENT,\n    ns,\n    tag,\n    tagType,\n    props,\n    isSelfClosing,\n    children: [],\n    loc: getSelection(context, start),\n    codegenNode: undefined // to be created during transform phase\n  }\n}\n```\ntagType有四种类型，在这里定义了，分别是: 0 element,1 component,2 slot,3 template   \n\n我们看while 循环，advanceBy 去掉起始 < 和标签名之后:  \n如果跟着是 > 或者 /> ，那么标签处理结束，退出循环。   \n否则是标签的元素，我们执行 parseAttribute 来处理标签属性，该节点上增加props，保存 该起始节点的 attributes;   \n\n> 执行方法后面的！，是ts语法，相当于告诉ts，这里一定会有值，无需做空判断，如   const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source)!\n\n### parseAttribute 处理标签上的属性\n\n正则获取属性上的name\n```js\n/^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec('class='abc'>')\n[\"class\", index: 0, input: \"class='abc'>\", groups: undefined]\n```\n如果不是一个孤立的属性，有value值的话（/^[\\t\\r\\n\\f ]*=/.test(context.source)），那么再获取属性的value。  \n```js\nfunction parseAttribute(\n  context: ParserContext,\n  nameSet: Set<string>\n): AttributeNode | DirectiveNode {\n  // Name.\n  const start = getCursor(context)\n  const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source)!\n  const name = match[0]\n  nameSet.add(name)\n  advanceBy(context, name.length)\n  // Value\n  let value:\n    | {\n        content: string\n        isQuoted: boolean\n        loc: SourceLocation\n      }\n    | undefined = undefined\n  if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\n    advanceSpaces(context)\n    advanceBy(context, 1)\n    advanceSpaces(context)\n    value = parseAttributeValue(context)\n  }\n  const loc = getSelection(context, start)\n  if (/^(v-|:|@|#)/.test(name)) {\n    const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\n      name\n    )!\n    let arg: ExpressionNode | undefined\n    if (match[2]) {\n      const startOffset = name.split(match[2], 2)!.shift()!.length\n      const loc = getSelection(\n        context,\n        getNewPosition(context, start, startOffset),\n        getNewPosition(context, start, startOffset + match[2].length)\n      )\n      let content = match[2]\n      let isStatic = true\n\n      if (content.startsWith('[')) {\n        isStatic = false\n        content = content.substr(1, content.length - 2)\n      }\n      arg = {\n        type: NodeTypes.SIMPLE_EXPRESSION,\n        content,\n        isStatic,\n        loc\n      }\n    }\n    if (value && value.isQuoted) {\n      const valueLoc = value.loc\n      valueLoc.start.offset++\n      valueLoc.start.column++\n      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content)\n      valueLoc.source = valueLoc.source.slice(1, -1)\n    }\n    return {\n      type: NodeTypes.DIRECTIVE,\n      name:\n        match[1] ||\n        (startsWith(name, ':')\n          ? 'bind'\n          : startsWith(name, '@')\n            ? 'on'\n            : 'slot'),\n      exp: value && {\n        type: NodeTypes.SIMPLE_EXPRESSION,\n        content: value.content,\n        isStatic: false,\n        loc: value.loc\n      },\n      arg,\n      modifiers: match[3] ? match[3].substr(1).split('.') : [],\n      loc\n    }\n  }\n  return {\n    type: NodeTypes.ATTRIBUTE,\n    name,\n    value: value && {\n      type: NodeTypes.TEXT,\n      content: value.content,\n      isEmpty: value.content.trim().length === 0,\n      loc: value.loc\n    },\n    loc\n  }\n}\n```\nparseAttributeValue 获取属性值的方法比较容易：  \n\n- 如果value值有引号开始，那么就找到下一个引号未value值结束 （class=\"aaa\" class='aaa'）\n- 如果value没有引号，那么就找到下一个空格为value值结束 （class=aaa）\n\n其中有处理vue的语法特性，如果属性名称是v-,:,@,#开头的，需要特殊处理，看下这个正则：  \n```js\n/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\"v-name\")\n(4) [\"v-name\", \"name\", undefined, undefined, index: 0, input: \"v-name\", groups: undefined]\n\n/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\":name\")\n(4) [\":name\", undefined, \"name\", undefined, index: 0, input: \":name\", groups: undefined]\n```\n\nmathch[2]如果有值，即匹配到了，说明是非 v-name，如果是名称是[\\]包裹的则是 [动态指令](https://vuejs.org/v2/guide/custom-directive.html#Dynamic-Directive-Arguments)，\n将 isStatic 置为 false \n\n#### parseElement 处理起始标签\n\nparseElement 处理起始标签，我们先执行 parseTag 解析标签，获取到起始节点的 标签元素和属性，如果当前也是截止标签(比如<br/>),则直接返回该标签。  \n否则，将起始标签 push 到未匹配的起始 ancestors栈里面。   \n然后继续去处理子元素 parseChildren ,注意，将未匹配的 ancestors 传进去了，parseChildren 的截止条件有两个：  \n1. context.source为空，即处理完成\n2. 碰到截止节点标签(</)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。   \n\n因此，如果是循环碰到匹配的截止标签了，则需要 ancestors.pop()，将节点添加到当前的子节点。   \n\n当然，处理当前起始节点，该节点也可能是截止节点，比如：<\\img src=\"xxx\"/>，则继续去执行处理截止节点即可。   \n方法如下：  \n```js\nfunction parseElement(\n  context: ParserContext,\n  ancestors: ElementNode[]\n): ElementNode | undefined {\n  // Start tag.\n  const parent = last(ancestors)\n  const element = parseTag(context, TagType.Start, parent)\n\n  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\n    return element\n  }\n  // Children.\n  ancestors.push(element)\n  const mode = (context.options.getTextMode(\n    element.tag,\n    element.ns\n  ) as unknown) as TextModes\n  const children = parseChildren(context, mode, ancestors)\n  ancestors.pop()\n  element.children = children\n  // End tag.\n  if (startsWithEndTagOpen(context.source, element.tag)) {\n    parseTag(context, TagType.End, parent)\n  } else {\n  }\n  element.loc = getSelection(context, element.loc.start)\n  return element\n}\n```\n\n至此，vue3.0的 将 模板文件转换成 AST 的主流程已经基本完成。  \n静待下篇，AST 的 transform 处理。","source":"_posts/2019-10/Vue-js-3-0编译器compiler-core源码解析.md","raw":"---\ntitle: Vue.js 3.0编译器compiler-core源码解析\ndate: 2019-10-09 19:34:30\ncover:  https://cn.vuejs.org/images/logo.png\nthumbnail: https://cn.vuejs.org/images/logo.png\ntags: \n  - Mocha\n  - BDD/TDD\n  - 测试框架\ncategories: Web前端\n---\n\n> 作者：深山蚂蚁\n\nVue.js 3.0的源代码正在国庆假期就这么突然放出来了，假期还没结束，陆陆续续看到努力的码农就在各种分析了。   \n\n目前还是 pre Alpha，乐观估计还有 Alpha，Beta版本，最后才是正式版。   \n\n话不多说，看 [Pre-Alpha](https://github.com/vuejs/vue-next)。  瞧 [compiler-core](https://github.com/vuejs/vue-next/tree/master/packages/compiler-core)   \n\n热门的 reactivity 被大佬翻来覆去再研究了，我就和大伙一起来解读一下 ”冷门“ 的 compiler 吧！😄😄😄😄   \n<!--more-->\n如果你对 AST 还不太熟悉，或者对如何实现一个简单的 AST解析器 还不太熟悉，可以猛戳：[手把手教你写一个 AST 解析器](https://juejin.im/post/5d9c16686fb9a04e320a54c0)  \n\nvue3.0的模板解析和vue2.0差异比较大，但是无论怎样变化，基本原理是一致的，我们写的各种 html 代码，js使用的时候其实就是一个字符串，将非结构化的字符串数据，转换成结构化的 AST，我们都是使用强大的正则表达式和indexOf来判断。  \ncompiler-core 的一个核心作用就是将字符串转换成 抽象对象语法树AST。   \n\nLet's do IT !   \n\n## 目录结构\n- \\__tests\\__ 测试用例\n- src/ast   ts语法的大佬的类型定义，比如type，enum，interface等\n- src/codegen   将生成的ast转换成render字符串\n- src/errors    定义 compiler 错误类型\n- src/index     入口文件，主要有一个 baseCompile ，用来编译模板文件的\n- src/parse     将模板字符串转换成 AST\n- src/runtimeHelper     生成code的时候的定义常量对应关系\n- src/transform     处理 AST 中的 vue 特有语法，比如 v-if ,v-on 的解析\n\n进入 compiler-core 目录下，结构一目了然。这里说下 \\__tests\\__ 目录，是vue的jest测试用例。  \n阅读源码前先看看用例，对阅读源码有很大帮助哦。   \n\n如下，测试一个简单的text，执行parse方法之后，得到 ast，期望 ast 的第一个节点与定义的对象是一致的。   \n同理其他的模块测试用例，在阅读源码前可以先瞄一眼，知道这个模块如何使用，输入输出是啥。   \n```js\ntest('simple text', () => {\n    const ast = parse('some text')\n    const text = ast.children[0] as TextNode\n    expect(text).toStrictEqual({\n        type: NodeTypes.TEXT,\n        content: 'some text',\n        isEmpty: false,\n        loc: {\n            start: { offset: 0, line: 1, column: 1 },\n            end: { offset: 9, line: 1, column: 10 },\n            source: 'some text'\n        }\n    })\n})\n```\n先看一张图，重点是四块：   \n- 起始标签\n- 结束标签\n- 动态内容\n- 普通内容  \n\n其中起始标签会用到递归来处理子节点。   \n\n![alt](https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_2.png)\n\n接下来，我们开始跟着源码来阅读吧!\n\n## parse：将字符串模板转换成 AST 抽象语法树\n\n这个是对外暴露的核心方法，我们先测试下结果：\n```js\nconst source = `\n    <div id=\"test\" :class=\"cls\">\n        <span>{{ name }}</span>\n        <MyCom></MyCom>\n    </div>\n`.trim()\nimport { parse } from './compiler-core.cjs'\nconst result = parse(source)\n```\noutput:  \n\n![output](https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_1.png)   \n\n一个简单的转换结果就呈现出来了，从生成的结构来看，相对于vue2.x有几个比较重要的变化：  \n\n- 新增了 loc 属性\n    每一个节点都记录了该节点在源码当中的 start 和 end，标识了代码的详细位置，column,line,offset。   \n    vu3.0对于开发遇到的问题都要详细的日志输出也基于此，另外支持 source-map\n- 新增了 tagType 属性   \n    tagType 属性标识该节点是什么类型的。我们知道 vue2.x 判断节点类型是运行时才有的，vu3.0将判断提前到编译阶段了，提升了性能。  \n    目前tagType有三种类型：0 element,1 component,2 slot,3 template\n- 新增 isStatic 属性   \n    将模板提前编译好，标识是否为动态变化的，比如动态指令\n- ……    \n\n新版的 AST 明显比 vue2.x 要复杂些，可以看到vue3.0将很多可以在编译阶段就能确定的就在编译阶段确定，标识编译结果，不需要等到运行时再去判断，节省内存和性能。这个也是尤大大重点说了的，优化编译，提升性能。    \n\n接下来我们来看下转换的代码，主要有如下几个方法：  \n\n- parse & parseChildren 主入口\n- parseTag 处理标签\n- parseAttribute 处理标签上的属性\n- parseElement 处理起始标签\n- parseInterpolation 处理动态文本内容\n- parseText 处理静态文本内容\n\n### parse & parseChildren 主入口\nparse 的主入口，这里创建了一个 parseContext，有利于后续直接从 context 上拿到 content，options 等。   \ngetCursor 获取当前处理的指针位置，用户生成 loc,初始都是1。\n```js\nexport function parse(content: string, options: ParserOptions = {}): RootNode {\n  const context = createParserContext(content, options)\n  const start = getCursor(context)\n  return {\n    type: NodeTypes.ROOT,\n    children: parseChildren(context, TextModes.DATA, []),\n    helpers: [],\n    components: [],\n    directives: [],\n    hoists: [],\n    codegenNode: undefined,\n    loc: getSelection(context, start)\n  }\n}\n```\n重点看下 parseChildren ，这是转换的主入口方法。\n```js\nfunction parseChildren(\n  context: ParserContext,\n  mode: TextModes,\n  ancestors: ElementNode[]\n): TemplateChildNode[] {\n  const parent = last(ancestors)\n  const ns = parent ? parent.ns : Namespaces.HTML\n  const nodes: TemplateChildNode[] = []\n  while (!isEnd(context, mode, ancestors)) {\n    const s = context.source\n    let node: TemplateChildNode | TemplateChildNode[] | undefined = undefined\n    if (startsWith(s, context.options.delimiters[0])) {\n      // '{{'\n      node = parseInterpolation(context, mode)\n    } else if (mode === TextModes.DATA && s[0] === '<') {\n      // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\n      if (s.length === 1) {\n        emitError(context, ErrorCodes.EOF_BEFORE_TAG_NAME, 1)\n      } else if (s[1] === '!') {\n          // <!DOCTYPE <![CDATA[ 等非节点元素 暂不讨论\n      } else if (s[1] === '/') {\n        if (s.length === 2) {\n        } else if (s[2] === '>') {\n          advanceBy(context, 3)\n          continue\n        } else if (/[a-z]/i.test(s[2])) {\n          parseTag(context, TagType.End, parent)\n          continue\n        } else {\n        }\n      } else if (/[a-z]/i.test(s[1])) {\n        node = parseElement(context, ancestors)\n      } else if (s[1] === '?') {\n      } else {\n      }\n    }\n    if (!node) {\n      node = parseText(context, mode)\n    }\n    if (Array.isArray(node)) {\n      for (let i = 0; i < node.length; i++) {\n        pushNode(context, nodes, node[i])\n      }\n    } else {\n      pushNode(context, nodes, node)\n    }\n  }\n  return nodes\n}\n```\n\nancestors 用来存储未匹配的起始节点，为后进先出的stack。  \n\n循环处理 source，循环截止条件是 isEnd 方法返回true，即是处理完成了，结束有两个条件:\n1. context.source 为空，即整个模板都处理完成。\n2. 碰到截止节点标签(</)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。这个对应 parseChildren 的子节点处理完成。\n\n\n匹配尚未结束，则进入循环匹配。有三种情况：  \n1. if(startsWith(s,context.options.delimiters[0]))语句， delimiters是分割符合，对于Vue来说就是‘{{’和‘}}’。开始匹配到Vue的文本输出内容，则意味着需要处理文本内容插入。\n2. else if (mode === TextModes.DATA && s[0] === '<') 内容是以<开头，即html标签的标识符号，则开始处理起始标签和截止标签两种情况。\n3. 以上条件都不是，或者匹配未成功,那么就是动态文本内容了。\n\n\n如果是第三种动态文本插入，则执行 parseInterpolation 组装文本节点，其中 isStatic=false 标识是变量，比较简单，方法就不贴了。 \n\n```js\nreturn {\n    type: NodeTypes.INTERPOLATION,\n    content: {\n      type: NodeTypes.SIMPLE_EXPRESSION,\n      isStatic: false,\n      content,\n      loc: getSelection(context, innerStart, innerEnd)\n    },\n    loc: getSelection(context, start)\n  }\n```\n\n再看下这两个处理 source 内容后移的方法：   \n\nadvanceBy(context,number) : 将需要处理的模板source ，后移 number 个字符，重新记录 loc   \nadvanceSpaces() : 后移存在的连续的空格   \n\n回到上面的匹配条件，如果是 < 开头，分两种情况：  \n1. 第二个字符是 \"/\"   \n    对应的就是 </     \n        如果是 </> ，那么认为是一个无效标签，直接 advanceBy 后移 3 个字符即可。    \n        如果是 <\\/a，那么认为是一个截止标签，执行 parseTag 方法处理。    \n2. 第二个字符是字母   \n    对应就是标签的起始文字了，如 <\\div，执行 parseElement 方法处理起始标签。\n\n### parseTag 处理标签\n\n如果是截止标签：parseTag，则直接处理完成。   \n如果是起始标签：parseElement 执行，调用parseTag 处理标签，然后再去递归处理子节点等。  \n\n正则：/^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i 这个就不多说了，匹配 <\\div> <\\/div>这种标签。  \n测试 match ：    \n```js\n/^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(\"<div class='abc'>\")\n(2) [\"<div\", \"div\", index: 0, input: \"<div class='abc'>\", groups: undefined]\n```\n显然，mathch[1] 即匹配到的标签元素。我们看主方法：      \n```js\nfunction parseTag(\n  context: ParserContext,\n  type: TagType,\n  parent: ElementNode | undefined\n): ElementNode {\n  // Tag open.\n  const start = getCursor(context)\n  const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source)!\n  const tag = match[1]\n  const props = []\n  const ns = context.options.getNamespace(tag, parent)\n  let tagType = ElementTypes.ELEMENT\n  if (tag === 'slot') tagType = ElementTypes.SLOT\n  else if (tag === 'template') tagType = ElementTypes.TEMPLATE\n  else if (/[A-Z-]/.test(tag)) tagType = ElementTypes.COMPONENT\n  advanceBy(context, match[0].length)\n  advanceSpaces(context)\n  // Attributes.\n  const attributeNames = new Set<string>()\n  while (\n    context.source.length > 0 &&\n    !startsWith(context.source, '>') &&\n    !startsWith(context.source, '/>')\n  ) {\n    const attr = parseAttribute(context, attributeNames)\n    if (type === TagType.Start) {\n      props.push(attr)\n    }\n    advanceSpaces(context)\n  }\n  // Tag close.\n  let isSelfClosing = false\n  if (context.source.length === 0) {\n  } else {\n    isSelfClosing = startsWith(context.source, '/>')\n    advanceBy(context, isSelfClosing ? 2 : 1)\n  }\n  return {\n    type: NodeTypes.ELEMENT,\n    ns,\n    tag,\n    tagType,\n    props,\n    isSelfClosing,\n    children: [],\n    loc: getSelection(context, start),\n    codegenNode: undefined // to be created during transform phase\n  }\n}\n```\ntagType有四种类型，在这里定义了，分别是: 0 element,1 component,2 slot,3 template   \n\n我们看while 循环，advanceBy 去掉起始 < 和标签名之后:  \n如果跟着是 > 或者 /> ，那么标签处理结束，退出循环。   \n否则是标签的元素，我们执行 parseAttribute 来处理标签属性，该节点上增加props，保存 该起始节点的 attributes;   \n\n> 执行方法后面的！，是ts语法，相当于告诉ts，这里一定会有值，无需做空判断，如   const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source)!\n\n### parseAttribute 处理标签上的属性\n\n正则获取属性上的name\n```js\n/^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec('class='abc'>')\n[\"class\", index: 0, input: \"class='abc'>\", groups: undefined]\n```\n如果不是一个孤立的属性，有value值的话（/^[\\t\\r\\n\\f ]*=/.test(context.source)），那么再获取属性的value。  \n```js\nfunction parseAttribute(\n  context: ParserContext,\n  nameSet: Set<string>\n): AttributeNode | DirectiveNode {\n  // Name.\n  const start = getCursor(context)\n  const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source)!\n  const name = match[0]\n  nameSet.add(name)\n  advanceBy(context, name.length)\n  // Value\n  let value:\n    | {\n        content: string\n        isQuoted: boolean\n        loc: SourceLocation\n      }\n    | undefined = undefined\n  if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\n    advanceSpaces(context)\n    advanceBy(context, 1)\n    advanceSpaces(context)\n    value = parseAttributeValue(context)\n  }\n  const loc = getSelection(context, start)\n  if (/^(v-|:|@|#)/.test(name)) {\n    const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\n      name\n    )!\n    let arg: ExpressionNode | undefined\n    if (match[2]) {\n      const startOffset = name.split(match[2], 2)!.shift()!.length\n      const loc = getSelection(\n        context,\n        getNewPosition(context, start, startOffset),\n        getNewPosition(context, start, startOffset + match[2].length)\n      )\n      let content = match[2]\n      let isStatic = true\n\n      if (content.startsWith('[')) {\n        isStatic = false\n        content = content.substr(1, content.length - 2)\n      }\n      arg = {\n        type: NodeTypes.SIMPLE_EXPRESSION,\n        content,\n        isStatic,\n        loc\n      }\n    }\n    if (value && value.isQuoted) {\n      const valueLoc = value.loc\n      valueLoc.start.offset++\n      valueLoc.start.column++\n      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content)\n      valueLoc.source = valueLoc.source.slice(1, -1)\n    }\n    return {\n      type: NodeTypes.DIRECTIVE,\n      name:\n        match[1] ||\n        (startsWith(name, ':')\n          ? 'bind'\n          : startsWith(name, '@')\n            ? 'on'\n            : 'slot'),\n      exp: value && {\n        type: NodeTypes.SIMPLE_EXPRESSION,\n        content: value.content,\n        isStatic: false,\n        loc: value.loc\n      },\n      arg,\n      modifiers: match[3] ? match[3].substr(1).split('.') : [],\n      loc\n    }\n  }\n  return {\n    type: NodeTypes.ATTRIBUTE,\n    name,\n    value: value && {\n      type: NodeTypes.TEXT,\n      content: value.content,\n      isEmpty: value.content.trim().length === 0,\n      loc: value.loc\n    },\n    loc\n  }\n}\n```\nparseAttributeValue 获取属性值的方法比较容易：  \n\n- 如果value值有引号开始，那么就找到下一个引号未value值结束 （class=\"aaa\" class='aaa'）\n- 如果value没有引号，那么就找到下一个空格为value值结束 （class=aaa）\n\n其中有处理vue的语法特性，如果属性名称是v-,:,@,#开头的，需要特殊处理，看下这个正则：  \n```js\n/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\"v-name\")\n(4) [\"v-name\", \"name\", undefined, undefined, index: 0, input: \"v-name\", groups: undefined]\n\n/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\":name\")\n(4) [\":name\", undefined, \"name\", undefined, index: 0, input: \":name\", groups: undefined]\n```\n\nmathch[2]如果有值，即匹配到了，说明是非 v-name，如果是名称是[\\]包裹的则是 [动态指令](https://vuejs.org/v2/guide/custom-directive.html#Dynamic-Directive-Arguments)，\n将 isStatic 置为 false \n\n#### parseElement 处理起始标签\n\nparseElement 处理起始标签，我们先执行 parseTag 解析标签，获取到起始节点的 标签元素和属性，如果当前也是截止标签(比如<br/>),则直接返回该标签。  \n否则，将起始标签 push 到未匹配的起始 ancestors栈里面。   \n然后继续去处理子元素 parseChildren ,注意，将未匹配的 ancestors 传进去了，parseChildren 的截止条件有两个：  \n1. context.source为空，即处理完成\n2. 碰到截止节点标签(</)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。   \n\n因此，如果是循环碰到匹配的截止标签了，则需要 ancestors.pop()，将节点添加到当前的子节点。   \n\n当然，处理当前起始节点，该节点也可能是截止节点，比如：<\\img src=\"xxx\"/>，则继续去执行处理截止节点即可。   \n方法如下：  \n```js\nfunction parseElement(\n  context: ParserContext,\n  ancestors: ElementNode[]\n): ElementNode | undefined {\n  // Start tag.\n  const parent = last(ancestors)\n  const element = parseTag(context, TagType.Start, parent)\n\n  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\n    return element\n  }\n  // Children.\n  ancestors.push(element)\n  const mode = (context.options.getTextMode(\n    element.tag,\n    element.ns\n  ) as unknown) as TextModes\n  const children = parseChildren(context, mode, ancestors)\n  ancestors.pop()\n  element.children = children\n  // End tag.\n  if (startsWithEndTagOpen(context.source, element.tag)) {\n    parseTag(context, TagType.End, parent)\n  } else {\n  }\n  element.loc = getSelection(context, element.loc.start)\n  return element\n}\n```\n\n至此，vue3.0的 将 模板文件转换成 AST 的主流程已经基本完成。  \n静待下篇，AST 的 transform 处理。","slug":"Vue-js-3-0编译器compiler-core源码解析","published":1,"updated":"2019-11-20T05:13:20.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflrc001qsoyxrlypq06u","content":"<blockquote>\n<p>作者：深山蚂蚁</p>\n</blockquote>\n<p>Vue.js 3.0的源代码正在国庆假期就这么突然放出来了，假期还没结束，陆陆续续看到努力的码农就在各种分析了。   </p>\n<p>目前还是 pre Alpha，乐观估计还有 Alpha，Beta版本，最后才是正式版。   </p>\n<p>话不多说，看 <a href=\"https://github.com/vuejs/vue-next\" target=\"_blank\" rel=\"noopener\">Pre-Alpha</a>。  瞧 <a href=\"https://github.com/vuejs/vue-next/tree/master/packages/compiler-core\" target=\"_blank\" rel=\"noopener\">compiler-core</a>   </p>\n<p>热门的 reactivity 被大佬翻来覆去再研究了，我就和大伙一起来解读一下 ”冷门“ 的 compiler 吧！😄😄😄😄   </p>\n<a id=\"more\"></a>\n<p>如果你对 AST 还不太熟悉，或者对如何实现一个简单的 AST解析器 还不太熟悉，可以猛戳：<a href=\"https://juejin.im/post/5d9c16686fb9a04e320a54c0\" target=\"_blank\" rel=\"noopener\">手把手教你写一个 AST 解析器</a>  </p>\n<p>vue3.0的模板解析和vue2.0差异比较大，但是无论怎样变化，基本原理是一致的，我们写的各种 html 代码，js使用的时候其实就是一个字符串，将非结构化的字符串数据，转换成结构化的 AST，我们都是使用强大的正则表达式和indexOf来判断。<br>compiler-core 的一个核心作用就是将字符串转换成 抽象对象语法树AST。   </p>\n<p>Let’s do IT !   </p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><ul>\n<li>_<em>tests_</em> 测试用例</li>\n<li>src/ast   ts语法的大佬的类型定义，比如type，enum，interface等</li>\n<li>src/codegen   将生成的ast转换成render字符串</li>\n<li>src/errors    定义 compiler 错误类型</li>\n<li>src/index     入口文件，主要有一个 baseCompile ，用来编译模板文件的</li>\n<li>src/parse     将模板字符串转换成 AST</li>\n<li>src/runtimeHelper     生成code的时候的定义常量对应关系</li>\n<li>src/transform     处理 AST 中的 vue 特有语法，比如 v-if ,v-on 的解析</li>\n</ul>\n<p>进入 compiler-core 目录下，结构一目了然。这里说下 _<em>tests_</em> 目录，是vue的jest测试用例。<br>阅读源码前先看看用例，对阅读源码有很大帮助哦。   </p>\n<p>如下，测试一个简单的text，执行parse方法之后，得到 ast，期望 ast 的第一个节点与定义的对象是一致的。<br>同理其他的模块测试用例，在阅读源码前可以先瞄一眼，知道这个模块如何使用，输入输出是啥。   </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"hljs-string\">'simple text'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> ast = parse(<span class=\"hljs-string\">'some text'</span>)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> text = ast.children[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> TextNode</span><br><span class=\"line\">    expect(text).toStrictEqual(&#123;</span><br><span class=\"line\">        type: NodeTypes.TEXT,</span><br><span class=\"line\">        content: <span class=\"hljs-string\">'some text'</span>,</span><br><span class=\"line\">        isEmpty: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">        loc: &#123;</span><br><span class=\"line\">            start: &#123; <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">line</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">column</span>: <span class=\"hljs-number\">1</span> &#125;,</span><br><span class=\"line\">            end: &#123; <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">line</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">column</span>: <span class=\"hljs-number\">10</span> &#125;,</span><br><span class=\"line\">            source: <span class=\"hljs-string\">'some text'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>先看一张图，重点是四块：   </p>\n<ul>\n<li>起始标签</li>\n<li>结束标签</li>\n<li>动态内容</li>\n<li>普通内容  </li>\n</ul>\n<p>其中起始标签会用到递归来处理子节点。   </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_2.png\" alt=\"alt\"></p>\n<p>接下来，我们开始跟着源码来阅读吧!</p>\n<h2 id=\"parse：将字符串模板转换成-AST-抽象语法树\"><a href=\"#parse：将字符串模板转换成-AST-抽象语法树\" class=\"headerlink\" title=\"parse：将字符串模板转换成 AST 抽象语法树\"></a>parse：将字符串模板转换成 AST 抽象语法树</h2><p>这个是对外暴露的核心方法，我们先测试下结果：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> source = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;div id=\"test\" :class=\"cls\"&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">        &lt;span&gt;&#123;&#123; name &#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">        &lt;MyCom&gt;&lt;/MyCom&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span>.trim()</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; parse &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./compiler-core.cjs'</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> result = parse(source)</span><br></pre></td></tr></table></figure>\n\n<p>output:  </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_1.png\" alt=\"output\">   </p>\n<p>一个简单的转换结果就呈现出来了，从生成的结构来看，相对于vue2.x有几个比较重要的变化：  </p>\n<ul>\n<li>新增了 loc 属性<br>  每一个节点都记录了该节点在源码当中的 start 和 end，标识了代码的详细位置，column,line,offset。<br>  vu3.0对于开发遇到的问题都要详细的日志输出也基于此，另外支持 source-map</li>\n<li>新增了 tagType 属性<br>  tagType 属性标识该节点是什么类型的。我们知道 vue2.x 判断节点类型是运行时才有的，vu3.0将判断提前到编译阶段了，提升了性能。<br>  目前tagType有三种类型：0 element,1 component,2 slot,3 template</li>\n<li>新增 isStatic 属性<br>  将模板提前编译好，标识是否为动态变化的，比如动态指令</li>\n<li>……    </li>\n</ul>\n<p>新版的 AST 明显比 vue2.x 要复杂些，可以看到vue3.0将很多可以在编译阶段就能确定的就在编译阶段确定，标识编译结果，不需要等到运行时再去判断，节省内存和性能。这个也是尤大大重点说了的，优化编译，提升性能。    </p>\n<p>接下来我们来看下转换的代码，主要有如下几个方法：  </p>\n<ul>\n<li>parse &amp; parseChildren 主入口</li>\n<li>parseTag 处理标签</li>\n<li>parseAttribute 处理标签上的属性</li>\n<li>parseElement 处理起始标签</li>\n<li>parseInterpolation 处理动态文本内容</li>\n<li>parseText 处理静态文本内容</li>\n</ul>\n<h3 id=\"parse-amp-parseChildren-主入口\"><a href=\"#parse-amp-parseChildren-主入口\" class=\"headerlink\" title=\"parse &amp; parseChildren 主入口\"></a>parse &amp; parseChildren 主入口</h3><p>parse 的主入口，这里创建了一个 parseContext，有利于后续直接从 context 上拿到 content，options 等。<br>getCursor 获取当前处理的指针位置，用户生成 loc,初始都是1。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parse</span>(<span class=\"hljs-params\">content: string, options: ParserOptions = &#123;&#125;</span>): <span class=\"hljs-title\">RootNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> context = createParserContext(content, options)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> start = getCursor(context)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.ROOT,</span><br><span class=\"line\">    children: parseChildren(context, TextModes.DATA, []),</span><br><span class=\"line\">    helpers: [],</span><br><span class=\"line\">    components: [],</span><br><span class=\"line\">    directives: [],</span><br><span class=\"line\">    hoists: [],</span><br><span class=\"line\">    codegenNode: <span class=\"hljs-literal\">undefined</span>,</span><br><span class=\"line\">    loc: getSelection(context, start)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点看下 parseChildren ，这是转换的主入口方法。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseChildren</span>(<span class=\"hljs-params\"></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  mode: TextModes,</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  ancestors: ElementNode[]</span></span></span><br><span class=\"line\">): TemplateChildNode[] &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> parent = last(ancestors)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> ns = parent ? parent.ns : Namespaces.HTML</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> nodes: TemplateChildNode[] = []</span><br><span class=\"line\">  <span class=\"hljs-keyword\">while</span> (!isEnd(context, mode, ancestors)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> s = context.source</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> node: TemplateChildNode | TemplateChildNode[] | <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-literal\">undefined</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (startsWith(s, context.options.delimiters[<span class=\"hljs-number\">0</span>])) &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// '&#123;&#123;'</span></span><br><span class=\"line\">      node = parseInterpolation(context, mode)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mode === TextModes.DATA &amp;&amp; s[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">'&lt;'</span>) &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (s.length === <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"line\">        emitError(context, ErrorCodes.EOF_BEFORE_TAG_NAME, <span class=\"hljs-number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">'!'</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-comment\">// &lt;!DOCTYPE &lt;![CDATA[ 等非节点元素 暂不讨论</span></span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">'/'</span>) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (s.length === <span class=\"hljs-number\">2</span>) &#123;</span><br><span class=\"line\">        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">2</span>] === <span class=\"hljs-string\">'&gt;'</span>) &#123;</span><br><span class=\"line\">          advanceBy(context, <span class=\"hljs-number\">3</span>)</span><br><span class=\"line\">          <span class=\"hljs-keyword\">continue</span></span><br><span class=\"line\">        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/[a-z]/i</span>.test(s[<span class=\"hljs-number\">2</span>])) &#123;</span><br><span class=\"line\">          parseTag(context, TagType.End, parent)</span><br><span class=\"line\">          <span class=\"hljs-keyword\">continue</span></span><br><span class=\"line\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/[a-z]/i</span>.test(s[<span class=\"hljs-number\">1</span>])) &#123;</span><br><span class=\"line\">        node = parseElement(context, ancestors)</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">'?'</span>) &#123;</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">      node = parseText(context, mode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(node)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; node.length; i++) &#123;</span><br><span class=\"line\">        pushNode(context, nodes, node[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      pushNode(context, nodes, node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ancestors 用来存储未匹配的起始节点，为后进先出的stack。  </p>\n<p>循环处理 source，循环截止条件是 isEnd 方法返回true，即是处理完成了，结束有两个条件:</p>\n<ol>\n<li>context.source 为空，即整个模板都处理完成。</li>\n<li>碰到截止节点标签(&lt;/)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。这个对应 parseChildren 的子节点处理完成。</li>\n</ol>\n<p>匹配尚未结束，则进入循环匹配。有三种情况：  </p>\n<ol>\n<li>if(startsWith(s,context.options.delimiters[0]))语句， delimiters是分割符合，对于Vue来说就是‘’。开始匹配到Vue的文本输出内容，则意味着需要处理文本内容插入。</li>\n<li>else if (mode === TextModes.DATA &amp;&amp; s[0] === ‘&lt;’) 内容是以&lt;开头，即html标签的标识符号，则开始处理起始标签和截止标签两种情况。</li>\n<li>以上条件都不是，或者匹配未成功,那么就是动态文本内容了。</li>\n</ol>\n<p>如果是第三种动态文本插入，则执行 parseInterpolation 组装文本节点，其中 isStatic=false 标识是变量，比较简单，方法就不贴了。 </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.INTERPOLATION,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">      type: NodeTypes.SIMPLE_EXPRESSION,</span><br><span class=\"line\">      isStatic: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">      content,</span><br><span class=\"line\">      loc: getSelection(context, innerStart, innerEnd)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loc: getSelection(context, start)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看下这两个处理 source 内容后移的方法：   </p>\n<p>advanceBy(context,number) : 将需要处理的模板source ，后移 number 个字符，重新记录 loc<br>advanceSpaces() : 后移存在的连续的空格   </p>\n<p>回到上面的匹配条件，如果是 &lt; 开头，分两种情况：  </p>\n<ol>\n<li>第二个字符是 “/“<br> 对应的就是 &lt;/     <pre><code>如果是 &lt;/&gt; ，那么认为是一个无效标签，直接 advanceBy 后移 3 个字符即可。    \n如果是 &lt;\\/a，那么认为是一个截止标签，执行 parseTag 方法处理。    </code></pre></li>\n<li>第二个字符是字母<br> 对应就是标签的起始文字了，如 &lt;\\div，执行 parseElement 方法处理起始标签。</li>\n</ol>\n<h3 id=\"parseTag-处理标签\"><a href=\"#parseTag-处理标签\" class=\"headerlink\" title=\"parseTag 处理标签\"></a>parseTag 处理标签</h3><p>如果是截止标签：parseTag，则直接处理完成。<br>如果是起始标签：parseElement 执行，调用parseTag 处理标签，然后再去递归处理子节点等。  </p>\n<p>正则：/^&lt;/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i 这个就不多说了，匹配 &lt;\\div&gt; &lt;/div&gt;这种标签。<br>测试 match ：    </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i.exec(\"&lt;div class='abc'&gt;\")</span><br><span class=\"line\">(2) [\"&lt;div\", \"div\", index: 0, input: \"&lt;div class='abc'&gt;\", groups: undefined]</span><br></pre></td></tr></table></figure>\n\n<p>显然，mathch[1] 即匹配到的标签元素。我们看主方法：      </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseTag</span>(<span class=\"hljs-params\"></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  type: TagType,</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  parent: ElementNode | undefined</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\"></span>): <span class=\"hljs-title\">ElementNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Tag open.</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> start = getCursor(context)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> match = <span class=\"hljs-regexp\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i</span>.exec(context.source)!</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> tag = match[<span class=\"hljs-number\">1</span>]</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> props = []</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> ns = context.options.getNamespace(tag, parent)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> tagType = ElementTypes.ELEMENT</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (tag === <span class=\"hljs-string\">'slot'</span>) tagType = ElementTypes.SLOT</span><br><span class=\"line\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (tag === <span class=\"hljs-string\">'template'</span>) tagType = ElementTypes.TEMPLATE</span><br><span class=\"line\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/[A-Z-]/</span>.test(tag)) tagType = ElementTypes.COMPONENT</span><br><span class=\"line\">  advanceBy(context, match[<span class=\"hljs-number\">0</span>].length)</span><br><span class=\"line\">  advanceSpaces(context)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Attributes.</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> attributeNames = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>&lt;string&gt;()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">while</span> (</span><br><span class=\"line\">    context.source.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp;</span><br><span class=\"line\">    !startsWith(context.source, <span class=\"hljs-string\">'&gt;'</span>) &amp;&amp;</span><br><span class=\"line\">    !startsWith(context.source, <span class=\"hljs-string\">'/&gt;'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> attr = parseAttribute(context, attributeNames)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === TagType.Start) &#123;</span><br><span class=\"line\">      props.push(attr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    advanceSpaces(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Tag close.</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> isSelfClosing = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (context.source.length === <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    isSelfClosing = startsWith(context.source, <span class=\"hljs-string\">'/&gt;'</span>)</span><br><span class=\"line\">    advanceBy(context, isSelfClosing ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.ELEMENT,</span><br><span class=\"line\">    ns,</span><br><span class=\"line\">    tag,</span><br><span class=\"line\">    tagType,</span><br><span class=\"line\">    props,</span><br><span class=\"line\">    isSelfClosing,</span><br><span class=\"line\">    children: [],</span><br><span class=\"line\">    loc: getSelection(context, start),</span><br><span class=\"line\">    codegenNode: <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// to be created during transform phase</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tagType有四种类型，在这里定义了，分别是: 0 element,1 component,2 slot,3 template   </p>\n<p>我们看while 循环，advanceBy 去掉起始 &lt; 和标签名之后:<br>如果跟着是 &gt; 或者 /&gt; ，那么标签处理结束，退出循环。<br>否则是标签的元素，我们执行 parseAttribute 来处理标签属性，该节点上增加props，保存 该起始节点的 attributes;   </p>\n<blockquote>\n<p>执行方法后面的！，是ts语法，相当于告诉ts，这里一定会有值，无需做空判断，如   const match = /^&lt;/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i.exec(context.source)!</p>\n</blockquote>\n<h3 id=\"parseAttribute-处理标签上的属性\"><a href=\"#parseAttribute-处理标签上的属性\" class=\"headerlink\" title=\"parseAttribute 处理标签上的属性\"></a>parseAttribute 处理标签上的属性</h3><p>正则获取属性上的name</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^[^\\t\\r\\n\\f /&gt;][^\\t\\r\\n\\f /&gt;=]*<span class=\"hljs-regexp\">/.exec('class='abc'&gt;')</span></span><br><span class=\"line\"><span class=\"hljs-regexp\">[\"class\", index: 0, input: \"class='abc'&gt;\", groups: undefined]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不是一个孤立的属性，有value值的话（/^[\\t\\r\\n\\f ]*=/.test(context.source)），那么再获取属性的value。  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseAttribute</span>(<span class=\"hljs-params\"></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  nameSet: Set&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\"></span>): <span class=\"hljs-title\">AttributeNode</span> | <span class=\"hljs-title\">DirectiveNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Name.</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> start = getCursor(context)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> match = <span class=\"hljs-regexp\">/^[^\\t\\r\\n\\f /&gt;][^\\t\\r\\n\\f /&gt;=]*/</span>.exec(context.source)!</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> name = match[<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">  nameSet.add(name)</span><br><span class=\"line\">  advanceBy(context, name.length)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Value</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> value:</span><br><span class=\"line\">    | &#123;</span><br><span class=\"line\">        content: string</span><br><span class=\"line\">        isQuoted: boolean</span><br><span class=\"line\">        loc: SourceLocation</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    | <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-literal\">undefined</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/^[\\t\\r\\n\\f ]*=/</span>.test(context.source)) &#123;</span><br><span class=\"line\">    advanceSpaces(context)</span><br><span class=\"line\">    advanceBy(context, <span class=\"hljs-number\">1</span>)</span><br><span class=\"line\">    advanceSpaces(context)</span><br><span class=\"line\">    value = parseAttributeValue(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> loc = getSelection(context, start)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/^(v-|:|@|#)/</span>.test(name)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> match = <span class=\"hljs-regexp\">/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i</span>.exec(</span><br><span class=\"line\">      name</span><br><span class=\"line\">    )!</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> arg: ExpressionNode | <span class=\"hljs-literal\">undefined</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (match[<span class=\"hljs-number\">2</span>]) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> startOffset = name.split(match[<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>)!.shift()!.length</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> loc = getSelection(</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        getNewPosition(context, start, startOffset),</span><br><span class=\"line\">        getNewPosition(context, start, startOffset + match[<span class=\"hljs-number\">2</span>].length)</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> content = match[<span class=\"hljs-number\">2</span>]</span><br><span class=\"line\">      <span class=\"hljs-keyword\">let</span> isStatic = <span class=\"hljs-literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (content.startsWith(<span class=\"hljs-string\">'['</span>)) &#123;</span><br><span class=\"line\">        isStatic = <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">        content = content.substr(<span class=\"hljs-number\">1</span>, content.length - <span class=\"hljs-number\">2</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arg = &#123;</span><br><span class=\"line\">        type: NodeTypes.SIMPLE_EXPRESSION,</span><br><span class=\"line\">        content,</span><br><span class=\"line\">        isStatic,</span><br><span class=\"line\">        loc</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (value &amp;&amp; value.isQuoted) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> valueLoc = value.loc</span><br><span class=\"line\">      valueLoc.start.offset++</span><br><span class=\"line\">      valueLoc.start.column++</span><br><span class=\"line\">      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content)</span><br><span class=\"line\">      valueLoc.source = valueLoc.source.slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">      type: NodeTypes.DIRECTIVE,</span><br><span class=\"line\">      name:</span><br><span class=\"line\">        match[<span class=\"hljs-number\">1</span>] ||</span><br><span class=\"line\">        (startsWith(name, <span class=\"hljs-string\">':'</span>)</span><br><span class=\"line\">          ? <span class=\"hljs-string\">'bind'</span></span><br><span class=\"line\">          : startsWith(name, <span class=\"hljs-string\">'@'</span>)</span><br><span class=\"line\">            ? <span class=\"hljs-string\">'on'</span></span><br><span class=\"line\">            : <span class=\"hljs-string\">'slot'</span>),</span><br><span class=\"line\">      exp: value &amp;&amp; &#123;</span><br><span class=\"line\">        type: NodeTypes.SIMPLE_EXPRESSION,</span><br><span class=\"line\">        content: value.content,</span><br><span class=\"line\">        isStatic: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">        loc: value.loc</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      arg,</span><br><span class=\"line\">      modifiers: match[<span class=\"hljs-number\">3</span>] ? match[<span class=\"hljs-number\">3</span>].substr(<span class=\"hljs-number\">1</span>).split(<span class=\"hljs-string\">'.'</span>) : [],</span><br><span class=\"line\">      loc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.ATTRIBUTE,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    value: value &amp;&amp; &#123;</span><br><span class=\"line\">      type: NodeTypes.TEXT,</span><br><span class=\"line\">      content: value.content,</span><br><span class=\"line\">      isEmpty: value.content.trim().length === <span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">      loc: value.loc</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>parseAttributeValue 获取属性值的方法比较容易：  </p>\n<ul>\n<li>如果value值有引号开始，那么就找到下一个引号未value值结束 （class=”aaa” class=’aaa’）</li>\n<li>如果value没有引号，那么就找到下一个空格为value值结束 （class=aaa）</li>\n</ul>\n<p>其中有处理vue的语法特性，如果属性名称是v-,:,@,#开头的，需要特殊处理，看下这个正则：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\"v-name\")</span><br><span class=\"line\">(<span class=\"hljs-number\">4</span>) [<span class=\"hljs-string\">\"v-name\"</span>, <span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">input</span>: <span class=\"hljs-string\">\"v-name\"</span>, <span class=\"hljs-attr\">groups</span>: <span class=\"hljs-literal\">undefined</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\":name\")</span><br><span class=\"line\">(<span class=\"hljs-number\">4</span>) [<span class=\"hljs-string\">\":name\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">input</span>: <span class=\"hljs-string\">\":name\"</span>, <span class=\"hljs-attr\">groups</span>: <span class=\"hljs-literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n\n<p>mathch[2]如果有值，即匹配到了，说明是非 v-name，如果是名称是[]包裹的则是 <a href=\"https://vuejs.org/v2/guide/custom-directive.html#Dynamic-Directive-Arguments\" target=\"_blank\" rel=\"noopener\">动态指令</a>，<br>将 isStatic 置为 false </p>\n<h4 id=\"parseElement-处理起始标签\"><a href=\"#parseElement-处理起始标签\" class=\"headerlink\" title=\"parseElement 处理起始标签\"></a>parseElement 处理起始标签</h4><p>parseElement 处理起始标签，我们先执行 parseTag 解析标签，获取到起始节点的 标签元素和属性，如果当前也是截止标签(比如<br>),则直接返回该标签。<br>否则，将起始标签 push 到未匹配的起始 ancestors栈里面。<br>然后继续去处理子元素 parseChildren ,注意，将未匹配的 ancestors 传进去了，parseChildren 的截止条件有两个：  </p>\n<ol>\n<li>context.source为空，即处理完成</li>\n<li>碰到截止节点标签(&lt;/)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。   </li>\n</ol>\n<p>因此，如果是循环碰到匹配的截止标签了，则需要 ancestors.pop()，将节点添加到当前的子节点。   </p>\n<p>当然，处理当前起始节点，该节点也可能是截止节点，比如：&lt;\\img src=”xxx”/&gt;，则继续去执行处理截止节点即可。<br>方法如下：  </p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseElement</span>(<span class=\"hljs-params\"></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\">  ancestors: ElementNode[]</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\"></span>): <span class=\"hljs-title\">ElementNode</span> | <span class=\"hljs-title\">undefined</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Start tag.</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> parent = last(ancestors)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> element = parseTag(context, TagType.Start, parent)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (element.isSelfClosing || context.options.isVoidTag(element.tag)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> element</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Children.</span></span><br><span class=\"line\">  ancestors.push(element)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> mode = (context.options.getTextMode(</span><br><span class=\"line\">    element.tag,</span><br><span class=\"line\">    element.ns</span><br><span class=\"line\">  ) <span class=\"hljs-keyword\">as</span> unknown) <span class=\"hljs-keyword\">as</span> TextModes</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> children = parseChildren(context, mode, ancestors)</span><br><span class=\"line\">  ancestors.pop()</span><br><span class=\"line\">  element.children = children</span><br><span class=\"line\">  <span class=\"hljs-comment\">// End tag.</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (startsWithEndTagOpen(context.source, element.tag)) &#123;</span><br><span class=\"line\">    parseTag(context, TagType.End, parent)</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  element.loc = getSelection(context, element.loc.start)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> element</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，vue3.0的 将 模板文件转换成 AST 的主流程已经基本完成。<br>静待下篇，AST 的 transform 处理。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：深山蚂蚁</p>\n</blockquote>\n<p>Vue.js 3.0的源代码正在国庆假期就这么突然放出来了，假期还没结束，陆陆续续看到努力的码农就在各种分析了。   </p>\n<p>目前还是 pre Alpha，乐观估计还有 Alpha，Beta版本，最后才是正式版。   </p>\n<p>话不多说，看 <a href=\"https://github.com/vuejs/vue-next\" target=\"_blank\" rel=\"noopener\">Pre-Alpha</a>。  瞧 <a href=\"https://github.com/vuejs/vue-next/tree/master/packages/compiler-core\" target=\"_blank\" rel=\"noopener\">compiler-core</a>   </p>\n<p>热门的 reactivity 被大佬翻来覆去再研究了，我就和大伙一起来解读一下 ”冷门“ 的 compiler 吧！😄😄😄😄   </p>","more":"<p>如果你对 AST 还不太熟悉，或者对如何实现一个简单的 AST解析器 还不太熟悉，可以猛戳：<a href=\"https://juejin.im/post/5d9c16686fb9a04e320a54c0\" target=\"_blank\" rel=\"noopener\">手把手教你写一个 AST 解析器</a>  </p>\n<p>vue3.0的模板解析和vue2.0差异比较大，但是无论怎样变化，基本原理是一致的，我们写的各种 html 代码，js使用的时候其实就是一个字符串，将非结构化的字符串数据，转换成结构化的 AST，我们都是使用强大的正则表达式和indexOf来判断。<br>compiler-core 的一个核心作用就是将字符串转换成 抽象对象语法树AST。   </p>\n<p>Let’s do IT !   </p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><ul>\n<li>_<em>tests_</em> 测试用例</li>\n<li>src/ast   ts语法的大佬的类型定义，比如type，enum，interface等</li>\n<li>src/codegen   将生成的ast转换成render字符串</li>\n<li>src/errors    定义 compiler 错误类型</li>\n<li>src/index     入口文件，主要有一个 baseCompile ，用来编译模板文件的</li>\n<li>src/parse     将模板字符串转换成 AST</li>\n<li>src/runtimeHelper     生成code的时候的定义常量对应关系</li>\n<li>src/transform     处理 AST 中的 vue 特有语法，比如 v-if ,v-on 的解析</li>\n</ul>\n<p>进入 compiler-core 目录下，结构一目了然。这里说下 _<em>tests_</em> 目录，是vue的jest测试用例。<br>阅读源码前先看看用例，对阅读源码有很大帮助哦。   </p>\n<p>如下，测试一个简单的text，执行parse方法之后，得到 ast，期望 ast 的第一个节点与定义的对象是一致的。<br>同理其他的模块测试用例，在阅读源码前可以先瞄一眼，知道这个模块如何使用，输入输出是啥。   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'simple text'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = parse(<span class=\"string\">'some text'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = ast.children[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> TextNode</span><br><span class=\"line\">    expect(text).toStrictEqual(&#123;</span><br><span class=\"line\">        type: NodeTypes.TEXT,</span><br><span class=\"line\">        content: <span class=\"string\">'some text'</span>,</span><br><span class=\"line\">        isEmpty: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        loc: &#123;</span><br><span class=\"line\">            start: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">line</span>: <span class=\"number\">1</span>, <span class=\"attr\">column</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">            end: &#123; <span class=\"attr\">offset</span>: <span class=\"number\">9</span>, <span class=\"attr\">line</span>: <span class=\"number\">1</span>, <span class=\"attr\">column</span>: <span class=\"number\">10</span> &#125;,</span><br><span class=\"line\">            source: <span class=\"string\">'some text'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>先看一张图，重点是四块：   </p>\n<ul>\n<li>起始标签</li>\n<li>结束标签</li>\n<li>动态内容</li>\n<li>普通内容  </li>\n</ul>\n<p>其中起始标签会用到递归来处理子节点。   </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_2.png\" alt=\"alt\"></p>\n<p>接下来，我们开始跟着源码来阅读吧!</p>\n<h2 id=\"parse：将字符串模板转换成-AST-抽象语法树\"><a href=\"#parse：将字符串模板转换成-AST-抽象语法树\" class=\"headerlink\" title=\"parse：将字符串模板转换成 AST 抽象语法树\"></a>parse：将字符串模板转换成 AST 抽象语法树</h2><p>这个是对外暴露的核心方法，我们先测试下结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=\"test\" :class=\"cls\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;&#123;&#123; name &#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;MyCom&gt;&lt;/MyCom&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>.trim()</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; parse &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./compiler-core.cjs'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = parse(source)</span><br></pre></td></tr></table></figure>\n\n<p>output:  </p>\n<p><img src=\"https://raw.githubusercontent.com/antiter/blogs/master//images/compiler-core_1.png\" alt=\"output\">   </p>\n<p>一个简单的转换结果就呈现出来了，从生成的结构来看，相对于vue2.x有几个比较重要的变化：  </p>\n<ul>\n<li>新增了 loc 属性<br>  每一个节点都记录了该节点在源码当中的 start 和 end，标识了代码的详细位置，column,line,offset。<br>  vu3.0对于开发遇到的问题都要详细的日志输出也基于此，另外支持 source-map</li>\n<li>新增了 tagType 属性<br>  tagType 属性标识该节点是什么类型的。我们知道 vue2.x 判断节点类型是运行时才有的，vu3.0将判断提前到编译阶段了，提升了性能。<br>  目前tagType有三种类型：0 element,1 component,2 slot,3 template</li>\n<li>新增 isStatic 属性<br>  将模板提前编译好，标识是否为动态变化的，比如动态指令</li>\n<li>……    </li>\n</ul>\n<p>新版的 AST 明显比 vue2.x 要复杂些，可以看到vue3.0将很多可以在编译阶段就能确定的就在编译阶段确定，标识编译结果，不需要等到运行时再去判断，节省内存和性能。这个也是尤大大重点说了的，优化编译，提升性能。    </p>\n<p>接下来我们来看下转换的代码，主要有如下几个方法：  </p>\n<ul>\n<li>parse &amp; parseChildren 主入口</li>\n<li>parseTag 处理标签</li>\n<li>parseAttribute 处理标签上的属性</li>\n<li>parseElement 处理起始标签</li>\n<li>parseInterpolation 处理动态文本内容</li>\n<li>parseText 处理静态文本内容</li>\n</ul>\n<h3 id=\"parse-amp-parseChildren-主入口\"><a href=\"#parse-amp-parseChildren-主入口\" class=\"headerlink\" title=\"parse &amp; parseChildren 主入口\"></a>parse &amp; parseChildren 主入口</h3><p>parse 的主入口，这里创建了一个 parseContext，有利于后续直接从 context 上拿到 content，options 等。<br>getCursor 获取当前处理的指针位置，用户生成 loc,初始都是1。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">content: string, options: ParserOptions = &#123;&#125;</span>): <span class=\"title\">RootNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = createParserContext(content, options)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = getCursor(context)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.ROOT,</span><br><span class=\"line\">    children: parseChildren(context, TextModes.DATA, []),</span><br><span class=\"line\">    helpers: [],</span><br><span class=\"line\">    components: [],</span><br><span class=\"line\">    directives: [],</span><br><span class=\"line\">    hoists: [],</span><br><span class=\"line\">    codegenNode: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    loc: getSelection(context, start)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点看下 parseChildren ，这是转换的主入口方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseChildren</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  mode: TextModes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  ancestors: ElementNode[]</span></span></span><br><span class=\"line\">): TemplateChildNode[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> parent = last(ancestors)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ns = parent ? parent.ns : Namespaces.HTML</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodes: TemplateChildNode[] = []</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!isEnd(context, mode, ancestors)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = context.source</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node: TemplateChildNode | TemplateChildNode[] | <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startsWith(s, context.options.delimiters[<span class=\"number\">0</span>])) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// '&#123;&#123;'</span></span><br><span class=\"line\">      node = parseInterpolation(context, mode)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mode === TextModes.DATA &amp;&amp; s[<span class=\"number\">0</span>] === <span class=\"string\">'&lt;'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        emitError(context, ErrorCodes.EOF_BEFORE_TAG_NAME, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[<span class=\"number\">1</span>] === <span class=\"string\">'!'</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// &lt;!DOCTYPE &lt;![CDATA[ 等非节点元素 暂不讨论</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[<span class=\"number\">1</span>] === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[<span class=\"number\">2</span>] === <span class=\"string\">'&gt;'</span>) &#123;</span><br><span class=\"line\">          advanceBy(context, <span class=\"number\">3</span>)</span><br><span class=\"line\">          <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/[a-z]/i</span>.test(s[<span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">          parseTag(context, TagType.End, parent)</span><br><span class=\"line\">          <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/[a-z]/i</span>.test(s[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        node = parseElement(context, ancestors)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[<span class=\"number\">1</span>] === <span class=\"string\">'?'</span>) &#123;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">      node = parseText(context, mode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(node)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; node.length; i++) &#123;</span><br><span class=\"line\">        pushNode(context, nodes, node[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      pushNode(context, nodes, node)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ancestors 用来存储未匹配的起始节点，为后进先出的stack。  </p>\n<p>循环处理 source，循环截止条件是 isEnd 方法返回true，即是处理完成了，结束有两个条件:</p>\n<ol>\n<li>context.source 为空，即整个模板都处理完成。</li>\n<li>碰到截止节点标签(&lt;/)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。这个对应 parseChildren 的子节点处理完成。</li>\n</ol>\n<p>匹配尚未结束，则进入循环匹配。有三种情况：  </p>\n<ol>\n<li>if(startsWith(s,context.options.delimiters[0]))语句， delimiters是分割符合，对于Vue来说就是‘’。开始匹配到Vue的文本输出内容，则意味着需要处理文本内容插入。</li>\n<li>else if (mode === TextModes.DATA &amp;&amp; s[0] === ‘&lt;’) 内容是以&lt;开头，即html标签的标识符号，则开始处理起始标签和截止标签两种情况。</li>\n<li>以上条件都不是，或者匹配未成功,那么就是动态文本内容了。</li>\n</ol>\n<p>如果是第三种动态文本插入，则执行 parseInterpolation 组装文本节点，其中 isStatic=false 标识是变量，比较简单，方法就不贴了。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.INTERPOLATION,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">      type: NodeTypes.SIMPLE_EXPRESSION,</span><br><span class=\"line\">      isStatic: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      content,</span><br><span class=\"line\">      loc: getSelection(context, innerStart, innerEnd)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loc: getSelection(context, start)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看下这两个处理 source 内容后移的方法：   </p>\n<p>advanceBy(context,number) : 将需要处理的模板source ，后移 number 个字符，重新记录 loc<br>advanceSpaces() : 后移存在的连续的空格   </p>\n<p>回到上面的匹配条件，如果是 &lt; 开头，分两种情况：  </p>\n<ol>\n<li>第二个字符是 “/“<br> 对应的就是 &lt;/     <pre><code>如果是 &lt;/&gt; ，那么认为是一个无效标签，直接 advanceBy 后移 3 个字符即可。    \n如果是 &lt;\\/a，那么认为是一个截止标签，执行 parseTag 方法处理。    </code></pre></li>\n<li>第二个字符是字母<br> 对应就是标签的起始文字了，如 &lt;\\div，执行 parseElement 方法处理起始标签。</li>\n</ol>\n<h3 id=\"parseTag-处理标签\"><a href=\"#parseTag-处理标签\" class=\"headerlink\" title=\"parseTag 处理标签\"></a>parseTag 处理标签</h3><p>如果是截止标签：parseTag，则直接处理完成。<br>如果是起始标签：parseElement 执行，调用parseTag 处理标签，然后再去递归处理子节点等。  </p>\n<p>正则：/^&lt;/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i 这个就不多说了，匹配 &lt;\\div&gt; &lt;/div&gt;这种标签。<br>测试 match ：    </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i.exec(\"&lt;div class='abc'&gt;\")</span><br><span class=\"line\">(2) [\"&lt;div\", \"div\", index: 0, input: \"&lt;div class='abc'&gt;\", groups: undefined]</span><br></pre></td></tr></table></figure>\n\n<p>显然，mathch[1] 即匹配到的标签元素。我们看主方法：      </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseTag</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  type: TagType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  parent: ElementNode | undefined</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">ElementNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Tag open.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = getCursor(context)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> match = <span class=\"regexp\">/^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i</span>.exec(context.source)!</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tag = match[<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ns = context.options.getNamespace(tag, parent)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tagType = ElementTypes.ELEMENT</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tag === <span class=\"string\">'slot'</span>) tagType = ElementTypes.SLOT</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"string\">'template'</span>) tagType = ElementTypes.TEMPLATE</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/[A-Z-]/</span>.test(tag)) tagType = ElementTypes.COMPONENT</span><br><span class=\"line\">  advanceBy(context, match[<span class=\"number\">0</span>].length)</span><br><span class=\"line\">  advanceSpaces(context)</span><br><span class=\"line\">  <span class=\"comment\">// Attributes.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> attributeNames = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>&lt;string&gt;()</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (</span><br><span class=\"line\">    context.source.length &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">    !startsWith(context.source, <span class=\"string\">'&gt;'</span>) &amp;&amp;</span><br><span class=\"line\">    !startsWith(context.source, <span class=\"string\">'/&gt;'</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> attr = parseAttribute(context, attributeNames)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === TagType.Start) &#123;</span><br><span class=\"line\">      props.push(attr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    advanceSpaces(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Tag close.</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isSelfClosing = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context.source.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    isSelfClosing = startsWith(context.source, <span class=\"string\">'/&gt;'</span>)</span><br><span class=\"line\">    advanceBy(context, isSelfClosing ? <span class=\"number\">2</span> : <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.ELEMENT,</span><br><span class=\"line\">    ns,</span><br><span class=\"line\">    tag,</span><br><span class=\"line\">    tagType,</span><br><span class=\"line\">    props,</span><br><span class=\"line\">    isSelfClosing,</span><br><span class=\"line\">    children: [],</span><br><span class=\"line\">    loc: getSelection(context, start),</span><br><span class=\"line\">    codegenNode: <span class=\"literal\">undefined</span> <span class=\"comment\">// to be created during transform phase</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tagType有四种类型，在这里定义了，分别是: 0 element,1 component,2 slot,3 template   </p>\n<p>我们看while 循环，advanceBy 去掉起始 &lt; 和标签名之后:<br>如果跟着是 &gt; 或者 /&gt; ，那么标签处理结束，退出循环。<br>否则是标签的元素，我们执行 parseAttribute 来处理标签属性，该节点上增加props，保存 该起始节点的 attributes;   </p>\n<blockquote>\n<p>执行方法后面的！，是ts语法，相当于告诉ts，这里一定会有值，无需做空判断，如   const match = /^&lt;/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i.exec(context.source)!</p>\n</blockquote>\n<h3 id=\"parseAttribute-处理标签上的属性\"><a href=\"#parseAttribute-处理标签上的属性\" class=\"headerlink\" title=\"parseAttribute 处理标签上的属性\"></a>parseAttribute 处理标签上的属性</h3><p>正则获取属性上的name</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^[^\\t\\r\\n\\f /&gt;][^\\t\\r\\n\\f /&gt;=]*<span class=\"regexp\">/.exec('class='abc'&gt;')</span></span><br><span class=\"line\"><span class=\"regexp\">[\"class\", index: 0, input: \"class='abc'&gt;\", groups: undefined]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不是一个孤立的属性，有value值的话（/^[\\t\\r\\n\\f ]*=/.test(context.source)），那么再获取属性的value。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseAttribute</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  nameSet: Set&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">AttributeNode</span> | <span class=\"title\">DirectiveNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Name.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = getCursor(context)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> match = <span class=\"regexp\">/^[^\\t\\r\\n\\f /&gt;][^\\t\\r\\n\\f /&gt;=]*/</span>.exec(context.source)!</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = match[<span class=\"number\">0</span>]</span><br><span class=\"line\">  nameSet.add(name)</span><br><span class=\"line\">  advanceBy(context, name.length)</span><br><span class=\"line\">  <span class=\"comment\">// Value</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value:</span><br><span class=\"line\">    | &#123;</span><br><span class=\"line\">        content: string</span><br><span class=\"line\">        isQuoted: boolean</span><br><span class=\"line\">        loc: SourceLocation</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    | <span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/^[\\t\\r\\n\\f ]*=/</span>.test(context.source)) &#123;</span><br><span class=\"line\">    advanceSpaces(context)</span><br><span class=\"line\">    advanceBy(context, <span class=\"number\">1</span>)</span><br><span class=\"line\">    advanceSpaces(context)</span><br><span class=\"line\">    value = parseAttributeValue(context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loc = getSelection(context, start)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/^(v-|:|@|#)/</span>.test(name)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = <span class=\"regexp\">/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i</span>.exec(</span><br><span class=\"line\">      name</span><br><span class=\"line\">    )!</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg: ExpressionNode | <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> startOffset = name.split(match[<span class=\"number\">2</span>], <span class=\"number\">2</span>)!.shift()!.length</span><br><span class=\"line\">      <span class=\"keyword\">const</span> loc = getSelection(</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        getNewPosition(context, start, startOffset),</span><br><span class=\"line\">        getNewPosition(context, start, startOffset + match[<span class=\"number\">2</span>].length)</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">let</span> content = match[<span class=\"number\">2</span>]</span><br><span class=\"line\">      <span class=\"keyword\">let</span> isStatic = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (content.startsWith(<span class=\"string\">'['</span>)) &#123;</span><br><span class=\"line\">        isStatic = <span class=\"literal\">false</span></span><br><span class=\"line\">        content = content.substr(<span class=\"number\">1</span>, content.length - <span class=\"number\">2</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arg = &#123;</span><br><span class=\"line\">        type: NodeTypes.SIMPLE_EXPRESSION,</span><br><span class=\"line\">        content,</span><br><span class=\"line\">        isStatic,</span><br><span class=\"line\">        loc</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &amp;&amp; value.isQuoted) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> valueLoc = value.loc</span><br><span class=\"line\">      valueLoc.start.offset++</span><br><span class=\"line\">      valueLoc.start.column++</span><br><span class=\"line\">      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content)</span><br><span class=\"line\">      valueLoc.source = valueLoc.source.slice(<span class=\"number\">1</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      type: NodeTypes.DIRECTIVE,</span><br><span class=\"line\">      name:</span><br><span class=\"line\">        match[<span class=\"number\">1</span>] ||</span><br><span class=\"line\">        (startsWith(name, <span class=\"string\">':'</span>)</span><br><span class=\"line\">          ? <span class=\"string\">'bind'</span></span><br><span class=\"line\">          : startsWith(name, <span class=\"string\">'@'</span>)</span><br><span class=\"line\">            ? <span class=\"string\">'on'</span></span><br><span class=\"line\">            : <span class=\"string\">'slot'</span>),</span><br><span class=\"line\">      exp: value &amp;&amp; &#123;</span><br><span class=\"line\">        type: NodeTypes.SIMPLE_EXPRESSION,</span><br><span class=\"line\">        content: value.content,</span><br><span class=\"line\">        isStatic: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        loc: value.loc</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      arg,</span><br><span class=\"line\">      modifiers: match[<span class=\"number\">3</span>] ? match[<span class=\"number\">3</span>].substr(<span class=\"number\">1</span>).split(<span class=\"string\">'.'</span>) : [],</span><br><span class=\"line\">      loc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type: NodeTypes.ATTRIBUTE,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    value: value &amp;&amp; &#123;</span><br><span class=\"line\">      type: NodeTypes.TEXT,</span><br><span class=\"line\">      content: value.content,</span><br><span class=\"line\">      isEmpty: value.content.trim().length === <span class=\"number\">0</span>,</span><br><span class=\"line\">      loc: value.loc</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>parseAttributeValue 获取属性值的方法比较容易：  </p>\n<ul>\n<li>如果value值有引号开始，那么就找到下一个引号未value值结束 （class=”aaa” class=’aaa’）</li>\n<li>如果value没有引号，那么就找到下一个空格为value值结束 （class=aaa）</li>\n</ul>\n<p>其中有处理vue的语法特性，如果属性名称是v-,:,@,#开头的，需要特殊处理，看下这个正则：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\"v-name\")</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\"v-name\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">\"v-name\"</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">/(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(\":name\")</span><br><span class=\"line\">(<span class=\"number\">4</span>) [<span class=\"string\">\":name\"</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"name\"</span>, <span class=\"literal\">undefined</span>, <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">input</span>: <span class=\"string\">\":name\"</span>, <span class=\"attr\">groups</span>: <span class=\"literal\">undefined</span>]</span><br></pre></td></tr></table></figure>\n\n<p>mathch[2]如果有值，即匹配到了，说明是非 v-name，如果是名称是[]包裹的则是 <a href=\"https://vuejs.org/v2/guide/custom-directive.html#Dynamic-Directive-Arguments\" target=\"_blank\" rel=\"noopener\">动态指令</a>，<br>将 isStatic 置为 false </p>\n<h4 id=\"parseElement-处理起始标签\"><a href=\"#parseElement-处理起始标签\" class=\"headerlink\" title=\"parseElement 处理起始标签\"></a>parseElement 处理起始标签</h4><p>parseElement 处理起始标签，我们先执行 parseTag 解析标签，获取到起始节点的 标签元素和属性，如果当前也是截止标签(比如<br>),则直接返回该标签。<br>否则，将起始标签 push 到未匹配的起始 ancestors栈里面。<br>然后继续去处理子元素 parseChildren ,注意，将未匹配的 ancestors 传进去了，parseChildren 的截止条件有两个：  </p>\n<ol>\n<li>context.source为空，即处理完成</li>\n<li>碰到截止节点标签(&lt;/)，且能在未匹配的起始标签（ancestors）里面找到对对应的tag。   </li>\n</ol>\n<p>因此，如果是循环碰到匹配的截止标签了，则需要 ancestors.pop()，将节点添加到当前的子节点。   </p>\n<p>当然，处理当前起始节点，该节点也可能是截止节点，比如：&lt;\\img src=”xxx”/&gt;，则继续去执行处理截止节点即可。<br>方法如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseElement</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  context: ParserContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  ancestors: ElementNode[]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">ElementNode</span> | <span class=\"title\">undefined</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Start tag.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parent = last(ancestors)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = parseTag(context, TagType.Start, parent)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element.isSelfClosing || context.options.isVoidTag(element.tag)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Children.</span></span><br><span class=\"line\">  ancestors.push(element)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mode = (context.options.getTextMode(</span><br><span class=\"line\">    element.tag,</span><br><span class=\"line\">    element.ns</span><br><span class=\"line\">  ) <span class=\"keyword\">as</span> unknown) <span class=\"keyword\">as</span> TextModes</span><br><span class=\"line\">  <span class=\"keyword\">const</span> children = parseChildren(context, mode, ancestors)</span><br><span class=\"line\">  ancestors.pop()</span><br><span class=\"line\">  element.children = children</span><br><span class=\"line\">  <span class=\"comment\">// End tag.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (startsWithEndTagOpen(context.source, element.tag)) &#123;</span><br><span class=\"line\">    parseTag(context, TagType.End, parent)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  element.loc = getSelection(context, element.loc.start)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，vue3.0的 将 模板文件转换成 AST 的主流程已经基本完成。<br>静待下篇，AST 的 transform 处理。</p>"},{"title":"浏览器层合成与页面渲染优化","date":"2019-10-15T01:51:26.000Z","cover":"https://img10.360buyimg.com/wq/jfs/t1/73434/3/12238/512302/5d9af503Eb525566d/c178048dc91e8e01.png","thumbnail":"https://img10.360buyimg.com/wq/jfs/t1/73434/3/12238/512302/5d9af503Eb525566d/c178048dc91e8e01.png","_content":"\n> 作者：黄浩群\n\n## 一个 CSS 属性引发的血案\n\nWeb 页面性能是前端开发特别需要关注的重点，评判前端 Web 页面性能的指标有很多，页面的流畅度是其中的一种，如何让页面变得 “柔顺丝滑”，要讨论起来可就是个相当有料的话题了。之前开发移动端 H5 页面的时候，就遇到过一个有趣的性能问题 —— 某个卖场页面在 IOS 手机上出现了严重的卡顿，但在安卓机型下却表现得十分流畅。归纳一下在 iPhoneX 上测试的具体表现：\n\n- 页面加载时存在明显的延迟，但通过代理抓到的网络请求耗时并不比 Android 的高；\n\n- 页面滚动时会出现短暂的局部白屏，即丢帧。\n<!--more-->\n根据这些表征情况不难推断出，应该是有什么东西在疯狂占用 CPU，卡住了渲染进程。\n\n然而具体是什么东西，要问我我也并不知道。对于这种没法通过断点定位到的问题，恐怕只有用上祖师爷亲传的 “代码二分法” 才能制服得了了。一番艰苦排查之后，问题的根源终于聚焦到了下边这行 CSS 代码上：\n\n```css\n  filter: blur(100px);\n```\n\n这行 CSS 代码用于实现一个高斯模糊，来构造一个优惠券模块的底部阴影。由于活动配置了多个优惠券，导致页面里存在多个设置了这个属性的 div 元素，而 IOS 手机的浏览器似乎对这个属性的渲染十分吃力（然而为何吃力的原因不得而知），进而导致渲染进程的 CPU 占用率过高，最终造成卡顿。\n\n哦？CPU 忙不过来了？好办嘛！我给优惠券模块又加了这样一行代码，然后问题迎刃而解 ......\n\n```css\n  will-change: transform;\n```\n\n你没看错，我也没写少，确实就是靠一行代码解决的。\n\n认识它的人可能已经看出来了，大致原理其实很简单，这行代码能够开启 GPU 加速页面渲染，从而大大降低了 CPU 的负载压力，达到优化页面渲染性能的目的，不了解 CSS 硬件加速的可以看看这篇文章 [Increase Your Site’s Performance with Hardware-Accelerated CSS](https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css) 。\n\n问题解决了，但是真的就这么完事了吗？本着 “拔树寻根” 的伟大原则，我把这个东西好好地研究了一番，才发现 GPU 加速其实没那么简单。\n\n## 浏览器渲染流程\n\n在具体讨论原理之前，我们需要了解一下浏览器渲染流程的一些基本概念。浏览器渲染流程是个老生常谈的话题了，对于 “浏览器如何呈现一个页面的内容” 的这类问题，不少人都可以讲出一个相对完整的过程，从网络请求到浏览器解析，可以具体到很多的细节。除去网络资源获取的步骤，我们理解的 Web 页面的展示，一般可以分为 `构建 DOM 树`、`构建渲染树`、`布局`、`绘制`、`渲染层合成` 几个步骤。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/64776/12/12185/85384/5d9ad4e3E01d48107/5e8011b0a213988d.png)\n\n- 构建 DOM 树：浏览器将 HTML 解析成树形结构的 DOM 树，一般来说，这个过程发生在页面初次加载，或页面 JavaScript 修改了节点结构的时候。\n\n- 构建渲染树：浏览器将 CSS 解析成树形结构的 CSSOM 树，再和 DOM 树合并成渲染树。\n\n- 布局（Layout）：浏览器根据渲染树所体现的节点、各个节点的CSS定义以及它们的从属关系，计算出每个节点在屏幕中的位置。Web 页面中元素的布局是相对的，在页面元素位置、大小发生变化，往往会导致其他节点联动，需要重新计算布局，这时候的布局过程一般被称为回流（Reflow）。\n\n- 绘制（Paint）：遍历渲染树，调用渲染器的 `paint()` 方法在屏幕上绘制出节点内容，本质上是一个像素填充的过程。这个过程也出现于回流或一些不影响布局的 CSS 修改引起的屏幕局部重画，这时候它被称为重绘（Repaint）。实际上，绘制过程是在多个层上完成的，这些层我们称为渲染层（RenderLayer）。\n\n- 渲染层合成（Composite）：多个绘制后的渲染层按照恰当的重叠顺序进行合并，而后生成位图，最终通过显卡展示到屏幕上。\n\n这是一个基本的浏览器从解析到绘制一个 Web 页面的过程，跟上边页面卡顿问题的解决方法相关的，主要是最后一个环节 —— 渲染层合成。\n\n## 渲染层合成\n\n### 一、什么是渲染层合成\n\n在 DOM 树中每个节点都会对应一个渲染对象（RenderObject），当它们的渲染对象处于相同的坐标空间（z 轴空间）时，就会形成一个 RenderLayers，也就是渲染层。渲染层将保证页面元素以正确的顺序堆叠，这时候就会出现层合成（composite），从而正确处理透明元素和重叠元素的显示。\n\n这个模型类似于 Photoshop 的图层模型，在 Photoshop 中，每个设计元素都是一个独立的图层，多个图层以恰当的顺序在 z 轴空间上叠加，最终构成一个完整的设计图。\n\n对于有位置重叠的元素的页面，这个过程尤其重要，因为一旦图层的合并顺序出错，将会导致元素显示异常。\n\n### 二、浏览器的渲染原理\n\n从浏览器的渲染过程中我们知道，页面 HTML 会被解析成 DOM 树，每个 HTML 元素对应了树结构上的一个 node 节点。而从 DOM 树转化到一个个的渲染层，并最终执行合并、绘制的过程，中间其实还存在一些过渡的数据结构，它们记录了 DOM 树到屏幕图形的转化原理，其本质也就是树结构到层结构的演化。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/72300/13/12230/57970/5d9af266Ea33a2a11/0e079cf78463f9f3.png)\n\n#### 1、渲染对象（RenderObject）\n\n一个 DOM 节点对应了一个渲染对象，渲染对象依然维持着 DOM 树的树形结构。一个渲染对象知道如何绘制一个 DOM 节点的内容，它通过向一个绘图上下文（GraphicsContext）发出必要的绘制调用来绘制 DOM 节点。\n\n#### 2、渲染层（RenderLayer）\n\n这是浏览器渲染期间构建的第一个层模型，处于相同坐标空间（z轴空间）的渲染对象，都将归并到同一个渲染层中，因此根据层叠上下文，不同坐标空间的的渲染对象将形成多个渲染层，以体现它们的层叠关系。所以，对于满足形成层叠上下文条件的渲染对象，浏览器会自动为其创建新的渲染层。能够导致浏览器为其创建新的渲染层的，包括以下几类常见的情况：\n\n- 根元素 document\n\n- 有明确的定位属性（relative、fixed、sticky、absolute）\n\n- opacity < 1\n\n- 有 CSS fliter 属性\n\n- 有 CSS mask 属性\n\n- 有 CSS mix-blend-mode 属性且值不为 normal\n\n- 有 CSS transform 属性且值不为 none\n\n- backface-visibility 属性为 hidden\n\n- 有 CSS reflection 属性\n\n- 有 CSS column-count 属性且值不为 auto或者有 CSS column-width 属性且值不为 auto\n\n- 当前有对于 opacity、transform、fliter、backdrop-filter 应用动画\n\n- overflow 不为 visible\n\nDOM 节点和渲染对象是一一对应的，满足以上条件的渲染对象就能拥有独立的渲染层。当然这里的独立是不完全准确的，并不代表着它们完全独享了渲染层，由于不满足上述条件的渲染对象将会与其第一个拥有渲染层的父元素共用同一个渲染层，因此实际上，这些渲染对象会与它的部分子元素共用这个渲染层。\n\n#### 3、图形层（GraphicsLayer）\n\nGraphicsLayer 其实是一个负责生成最终准备呈现的内容图形的层模型，它拥有一个图形上下文（GraphicsContext），GraphicsContext 会负责输出该层的位图。存储在共享内存中的位图将作为纹理上传到 GPU，最后由 GPU 将多个位图进行合成，然后绘制到屏幕上，此时，我们的页面也就展现到了屏幕上。\n\n所以 GraphicsLayer 是一个重要的渲染载体和工具，但它并不直接处理渲染层，而是处理合成层。\n\n#### 4、合成层（CompositingLayer）\n\n满足某些特殊条件的渲染层，会被浏览器自动提升为合成层。合成层拥有单独的 GraphicsLayer，而其他不是合成层的渲染层，则和其第一个拥有 GraphicsLayer 的父层共用一个。\n\n那么一个渲染层满足哪些特殊条件时，才能被提升为合成层呢？这里列举了一些常见的情况：\n\n- 3D transforms：translate3d、translateZ 等\n\n- video、canvas、iframe 等元素\n\n- 通过 Element.animate() 实现的 opacity 动画转换\n\n- 通过 СSS 动画实现的 opacity 动画转换\n\n- position: fixed\n\n- 具有 will-change 属性\n\n- 对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition\n\n因此，文首例子的解决方案，其实就是利用 will-change 属性，将 CPU 消耗高的渲染元素提升为一个新的合成层，才能开启 GPU 加速的，因此你也可以使用 `transform: translateZ(0)` 来解决这个问题。\n\n这里值得注意的是，不少人会将这些合成层的条件和渲染层产生的条件混淆，这两种条件发生在两个不同的层处理环节，是完全不一样的。\n\n另外，有些文章会把 CSS Filter 也列为影响 Composite 的因素之一，然而我验证后发现并没有效果。\n\n### 三、隐式合成\n\n上边提到，满足某些显性的特殊条件时，渲染层会被浏览器提升为合成层。除此之外，在浏览器的 Composite 阶段，还存在一种隐式合成，部分渲染层在一些特定场景下，会被默认提升为合成层。\n\n对于隐式合成，[CSS GPU Animation](https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/) 中是这么描述的：\n\n> This is called implicit compositing: One or more non-composited elements that should appear above a composited one in the stacking order are promoted to composite layers.\n> (一个或多个非合成元素应出现在堆叠顺序上的合成元素之上，被提升到合成层。)\n\n这句话可能不好理解，它其实是在描述一个交叠问题（overlap）。举个例子说明一下：\n\n- 两个 absolute 定位的 div 在屏幕上交叠了，根据 `z-index` 的关系，其中一个 div 就会”盖在“了另外一个上边。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/66180/26/12280/12579/5d9c6518Ec22cbb0a/51a686ef840a786a.png)\n\n- 这个时候，如果处于下方的 div 被加上了 CSS 属性：`transform: translateZ(0)`，就会被浏览器提升为合成层。提升后的合成层位于 Document 上方，假如没有隐式合成，原本应该处于上方的 div 就依然还是跟 Document 共用一个 GraphicsLayer，层级反而降了，就出现了元素交叠关系错乱的问题。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/58063/27/12935/18359/5d9c6527Efe3e170d/25a87da60392f373.png)\n\n- 所以为了纠正错误的交叠顺序，浏览器必须让原本应该”盖在“它上边的渲染层也同时提升为合成层。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/73747/34/12559/25562/5d9c6537Ee08ae16a/1d32a52a5a58cadc.png)\n\n### 四、层爆炸和层压缩\n\n#### 1、层爆炸\n\n从上边的研究中我们可以发现，一些产生合成层的原因太过于隐蔽了，尤其是隐式合成。在平时的开发过程中，我们很少会去关注层合成的问题，很容易就产生一些不在预期范围内的合成层，当这些不符合预期的合成层达到一定量级时，就会变成层爆炸。\n\n层爆炸会占用 GPU 和大量的内存资源，严重损耗页面性能，因此盲目地使用 GPU 加速，结果有可能会是适得其反。[CSS3硬件加速也有坑](https://div.io/topic/1348) 这篇文章提供了一个很有趣的 [DEMO](https://fouber.github.io/test/layer/)，这个 DEMO 页面中包含了一个 h1 标题，它对 transform 应用了 animation 动画，进而导致被放到了合成层中渲染。由于 animation transform 的特殊性（动态交叠不确定），隐式合成在不需要交叠的情况下也能发生，就导致了页面中所有 `z-index` 高于它的节点所对应的渲染层全部提升为合成层，最终让这个页面整整产生了几千个合成层。\n\n消除隐式合成就是要消除元素交叠，拿这个 DEMO 来说，我们只需要给 h1 标题的 `z-index` 属性设置一个较高的数值，就能让它高于页面中其他元素，自然也就没有合成层提升的必要了。点击 DEMO 中的复选按钮就可以给 h1 标题加上一个较大的 `z-index`，前后效果对比十分明显。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/53422/4/12837/887162/5d9c91a5E7c057f7d/9dc2318cc194e91a.gif)\n\n#### 2、层压缩\n\n当然了，面对这种问题，浏览器也有相应的应对策略，如果多个渲染层同一个合成层重叠时，这些渲染层会被压缩到一个 GraphicsLayer 中，以防止由于重叠原因导致可能出现的“层爆炸”。这句话不好理解，具体可以看看这个例子：\n\n- 还是之前的模型，只不过这次不同的是，有四个 absolute 定位的 div 在屏幕内发生了交叠。此时处于最下方的 div 在加上了 CSS 属性 `transform: translateZ(0)` 后被浏览器提升为合成层，如果按照隐式合成的原理，盖在它上边的 div 会提升为一个新的合成层，第三个 div 又盖在了第二个上，自然也会被提升为合成层，第四个也同理。这样一来，岂不是就会产生四个合成层了？\n\n![](https://img10.360buyimg.com/wq/jfs/t1/77171/26/12580/58063/5d9c9840Eaefa1ecf/f7909d5e19083858.png)\n\n- 然而事实并不是这样的，浏览器的层压缩机制，会将隐式合成的多个渲染层压缩到同一个 GraphicsLayer 中进行渲染，也就是说，上方的三个 div 最终会处于同一个合成层中，这就是浏览器的层压缩。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/71488/24/12380/43473/5d9c96c0Ee4afadc2/58d8c94677d2aaea.png)\n\n当然了，浏览器的自动层压缩并不是万能的，有很多特定情况下，浏览器是无法进行层压缩的，[无线性能优化：Composite](https://fed.taobao.org/blog/2016/04/26/performance-composite/) 这篇文章列举了许多详细的场景。\n\n## 基于层合成的页面渲染优化\n\n### 一、层合成的得与失\n\n层合成是一个相对复杂的浏览器特性，为什么我们需要关注这么底层又难理解的东西呢？那是因为渲染层提升为合成层之后，会给我们带来不少好处：\n\n- 合成层的位图，会交由 GPU 合成，比 CPU 处理要快得多；\n\n- 当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层；\n\n- 元素提升为合成层后，transform 和 opacity 才不会触发 repaint，如果不是合成层，则其依然会触发 repaint。\n\n当然了，利弊是相对和共存的，层合成也存在一些缺点，这很多时候也成为了我们网页性能问题的根源所在：\n\n- 绘制的图层必须传输到 GPU，这些层的数量和大小达到一定量级后，可能会导致传输非常慢，进而导致一些低端和中端设备上出现闪烁；\n\n- 隐式合成容易产生过量的合成层，每个合成层都占用额外的内存，而内存是移动设备上的宝贵资源，过多使用内存可能会导致浏览器崩溃，让性能优化适得其反。\n\n### 二、Chrome Devtools 如何查看合成层\n\n层合成的特性给我们提供了一个利用终端硬件能力来优化页面性能的方式，对于一些重交互、重动画的页面，合理地利用层合成可以让页面的渲染效率得到极大提升，改善交互体验。而我们需要关注的是如何规避层合成对页面造成的负面影响，或者换个说法来讲，更多时候是如何权衡利害，合理组织页面的合成层，这就要求我们事先要对页面的层合成情况有一个详细的了解。Chrome Devtools 给我们提供了一些工具，可以方便的查看页面的合成层情况。\n\n首先是看看页面的渲染情况，以一个栏目页为例，点击 `More tools -> Rendering`，选择 `Layer borders`，你就能看到页面中的合成层都带上了黄色边框。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/77710/19/12438/584960/5d9d3039Ea64183ae/52acf54c52b37f89.jpg)\n\n这还不够，我们还需要更加详尽的层合成情况，点击 `More tools -> Layers`，你可以看到像这样的一个视图：\n\n![](https://img10.360buyimg.com/wq/jfs/t1/64792/37/12298/581872/5d9d2f6eE24ea35bc/fb20c5fe66effd7e.jpg)\n\n左侧列出了所有提升为独立合成层的元素，右侧则是一个整体合成层边界视图，以及选定合成层的详细情况，包括以下几个比较关键的信息：\n\n- Size：合成层的大小，其实也就是对应元素的尺寸；\n- Compositing Reasons：形成复合层原因，这是最关键的，也是我们分析问题的突破口，比如图中的合成层产生的原因就是交叠问题；\n- Memory estimate：内存占用估算；\n- Paint count：绘制次数；\n- Slow scroll regions：缓慢滚动区域。\n\n可以看出我们在不经意间就已经制造出了很多意料之外的合成层，这些没有实际意义的合成层都是可以被优化的。\n\n### 三、一些优化建议\n\n#### 1、动画使用 transform 实现\n\n对于一些体验要求较高的关键动画，比如一些交互复杂的玩法页面，存在持续变化位置的 animation 元素，我们最好是使用 transform 来实现而不是通过改变 left/top 的方式。这样做的原因是，如果使用 left/top 来实现位置变化，animation 节点和 Document 将被放到了同一个 GraphicsLayer 中进行渲染，持续的动画效果将导致整个 Document 不断地执行重绘，而使用 transform 的话，能够让 animation 节点被放置到一个独立合成层中进行渲染绘制，动画发生时不会影响到其它层。并且另一方面，动画会完全运行在 GPU 上，相比起 CPU 处理图层后再发送给显卡进行显示绘制来说，这样的动画往往更加流畅。\n\n#### 2、减少隐式合成\n\n虽然隐式合成从根本上来说是为了保证正确的图层重叠顺序，但具体到实际开发中，隐式合成很容易就导致一些无意义的合成层生成，归根结底其实就要求我们在开发时约束自己的布局习惯，避免踩坑。\n\n比如上边提到的栏目页面，就因为平时开发的不注意造成页面生成了过多的合成层，我在试图查看页面合成层情况的时候，在 PC 上已经能明显感到卡顿了。利用 Chrome Devtools 分析之后不难发现，页面里边存在的一个带动画 transform 的 button 按钮，提升为了合成层，动画交叠的不确定性使得页面内其他 `z-index` 大于它但其实并没有交叠的节点也都全部提升为了合成层（这个原因真的好坑）。\n\n这个时候我们只需要把这个动画节点的 `z-index` 属性值设置得大一些，让层叠顺序高过于页面其他无关节点就行。当然并不是盲目地设置 `z-index` 就能避免，有时候 `z-index` 也还是会导致隐式合成，这个时候可以试着调整一下文档中节点的先后顺序直接让后边的节点来覆盖前边的节点，而不用 `z-index` 来调整重叠关系。方法不是唯一的，具体方式还是得根据不同的页面具体分析。\n\n改善后的页面效果如下，可以看到相比优化前，我们消除了很多无意义的合成层。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/49398/34/13004/498267/5d9d5dcaE8ee4f855/2f18491a62374b69.jpg)\n\n#### 3、减小合成层的尺寸\n\n举个简单的例子，分别画两个尺寸一样的 div，但实现方式有点差别：一个直接设置尺寸 100x100，另一个设置尺寸 10x10，然后通过 `scale` 放大 10 倍，并且我们让这两个 div 都提升为合成层：\n\n```html\n<style>\n  .bottom, .top {\n    position: absolute;\n    will-change: transform;\n  }\n  .bottom {\n    width: 100px;\n    height: 100px;\n    top: 20px;\n    left: 20px;\n    z-index: 3;\n    background: rosybrown;\n  }\n  .top {\n    width: 10px;\n    height: 10px;\n    transform: scale(10);\n    top: 200px;\n    left: 200px;\n    z-index: 5;\n    background: indianred;\n  }\n</style>\n<body>\n  <div class=\"bottom\"></div>\n  <div class=\"top\"></div>\n</body>\n```\n\n利用 Chrome Devtools 查看这两个合成层的内存占用后发现，`.bottom` 内存占用是 39.1 KB，而 `.top` 是 400 B，差距十分明显。这是因为 `.top` 是合成层，transform 位于的 Composite 阶段，现在完全在 GPU 上执行。因此对于一些纯色图层来说，我们可以使用 width 和 height 属性减小合成层的物理尺寸，然后再用 `transform: scale(…)` 放大，这样一来可以极大地减少层合成带来的内存消耗。\n\n## 参考文章\n> [CSS3硬件加速也有坑](https://div.io/topic/1348)\n> [无线性能优化：Composite](https://fed.taobao.org/blog/2016/04/26/performance-composite/)\n> [CSS GPU Animation](https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/)\n> [详谈层合成](https://juejin.im/entry/59dc9aedf265da43200232f9)","source":"_posts/2019-10/浏览器层合成与页面渲染优化.md","raw":"---\ntitle: 浏览器层合成与页面渲染优化\ndate: 2019-10-15 09:51:26\ntags:\n\t- composite\n\t- 性能优化\ncover:  https://img10.360buyimg.com/wq/jfs/t1/73434/3/12238/512302/5d9af503Eb525566d/c178048dc91e8e01.png\nthumbnail: https://img10.360buyimg.com/wq/jfs/t1/73434/3/12238/512302/5d9af503Eb525566d/c178048dc91e8e01.png\ncategories: Web前端\n---\n\n> 作者：黄浩群\n\n## 一个 CSS 属性引发的血案\n\nWeb 页面性能是前端开发特别需要关注的重点，评判前端 Web 页面性能的指标有很多，页面的流畅度是其中的一种，如何让页面变得 “柔顺丝滑”，要讨论起来可就是个相当有料的话题了。之前开发移动端 H5 页面的时候，就遇到过一个有趣的性能问题 —— 某个卖场页面在 IOS 手机上出现了严重的卡顿，但在安卓机型下却表现得十分流畅。归纳一下在 iPhoneX 上测试的具体表现：\n\n- 页面加载时存在明显的延迟，但通过代理抓到的网络请求耗时并不比 Android 的高；\n\n- 页面滚动时会出现短暂的局部白屏，即丢帧。\n<!--more-->\n根据这些表征情况不难推断出，应该是有什么东西在疯狂占用 CPU，卡住了渲染进程。\n\n然而具体是什么东西，要问我我也并不知道。对于这种没法通过断点定位到的问题，恐怕只有用上祖师爷亲传的 “代码二分法” 才能制服得了了。一番艰苦排查之后，问题的根源终于聚焦到了下边这行 CSS 代码上：\n\n```css\n  filter: blur(100px);\n```\n\n这行 CSS 代码用于实现一个高斯模糊，来构造一个优惠券模块的底部阴影。由于活动配置了多个优惠券，导致页面里存在多个设置了这个属性的 div 元素，而 IOS 手机的浏览器似乎对这个属性的渲染十分吃力（然而为何吃力的原因不得而知），进而导致渲染进程的 CPU 占用率过高，最终造成卡顿。\n\n哦？CPU 忙不过来了？好办嘛！我给优惠券模块又加了这样一行代码，然后问题迎刃而解 ......\n\n```css\n  will-change: transform;\n```\n\n你没看错，我也没写少，确实就是靠一行代码解决的。\n\n认识它的人可能已经看出来了，大致原理其实很简单，这行代码能够开启 GPU 加速页面渲染，从而大大降低了 CPU 的负载压力，达到优化页面渲染性能的目的，不了解 CSS 硬件加速的可以看看这篇文章 [Increase Your Site’s Performance with Hardware-Accelerated CSS](https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css) 。\n\n问题解决了，但是真的就这么完事了吗？本着 “拔树寻根” 的伟大原则，我把这个东西好好地研究了一番，才发现 GPU 加速其实没那么简单。\n\n## 浏览器渲染流程\n\n在具体讨论原理之前，我们需要了解一下浏览器渲染流程的一些基本概念。浏览器渲染流程是个老生常谈的话题了，对于 “浏览器如何呈现一个页面的内容” 的这类问题，不少人都可以讲出一个相对完整的过程，从网络请求到浏览器解析，可以具体到很多的细节。除去网络资源获取的步骤，我们理解的 Web 页面的展示，一般可以分为 `构建 DOM 树`、`构建渲染树`、`布局`、`绘制`、`渲染层合成` 几个步骤。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/64776/12/12185/85384/5d9ad4e3E01d48107/5e8011b0a213988d.png)\n\n- 构建 DOM 树：浏览器将 HTML 解析成树形结构的 DOM 树，一般来说，这个过程发生在页面初次加载，或页面 JavaScript 修改了节点结构的时候。\n\n- 构建渲染树：浏览器将 CSS 解析成树形结构的 CSSOM 树，再和 DOM 树合并成渲染树。\n\n- 布局（Layout）：浏览器根据渲染树所体现的节点、各个节点的CSS定义以及它们的从属关系，计算出每个节点在屏幕中的位置。Web 页面中元素的布局是相对的，在页面元素位置、大小发生变化，往往会导致其他节点联动，需要重新计算布局，这时候的布局过程一般被称为回流（Reflow）。\n\n- 绘制（Paint）：遍历渲染树，调用渲染器的 `paint()` 方法在屏幕上绘制出节点内容，本质上是一个像素填充的过程。这个过程也出现于回流或一些不影响布局的 CSS 修改引起的屏幕局部重画，这时候它被称为重绘（Repaint）。实际上，绘制过程是在多个层上完成的，这些层我们称为渲染层（RenderLayer）。\n\n- 渲染层合成（Composite）：多个绘制后的渲染层按照恰当的重叠顺序进行合并，而后生成位图，最终通过显卡展示到屏幕上。\n\n这是一个基本的浏览器从解析到绘制一个 Web 页面的过程，跟上边页面卡顿问题的解决方法相关的，主要是最后一个环节 —— 渲染层合成。\n\n## 渲染层合成\n\n### 一、什么是渲染层合成\n\n在 DOM 树中每个节点都会对应一个渲染对象（RenderObject），当它们的渲染对象处于相同的坐标空间（z 轴空间）时，就会形成一个 RenderLayers，也就是渲染层。渲染层将保证页面元素以正确的顺序堆叠，这时候就会出现层合成（composite），从而正确处理透明元素和重叠元素的显示。\n\n这个模型类似于 Photoshop 的图层模型，在 Photoshop 中，每个设计元素都是一个独立的图层，多个图层以恰当的顺序在 z 轴空间上叠加，最终构成一个完整的设计图。\n\n对于有位置重叠的元素的页面，这个过程尤其重要，因为一旦图层的合并顺序出错，将会导致元素显示异常。\n\n### 二、浏览器的渲染原理\n\n从浏览器的渲染过程中我们知道，页面 HTML 会被解析成 DOM 树，每个 HTML 元素对应了树结构上的一个 node 节点。而从 DOM 树转化到一个个的渲染层，并最终执行合并、绘制的过程，中间其实还存在一些过渡的数据结构，它们记录了 DOM 树到屏幕图形的转化原理，其本质也就是树结构到层结构的演化。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/72300/13/12230/57970/5d9af266Ea33a2a11/0e079cf78463f9f3.png)\n\n#### 1、渲染对象（RenderObject）\n\n一个 DOM 节点对应了一个渲染对象，渲染对象依然维持着 DOM 树的树形结构。一个渲染对象知道如何绘制一个 DOM 节点的内容，它通过向一个绘图上下文（GraphicsContext）发出必要的绘制调用来绘制 DOM 节点。\n\n#### 2、渲染层（RenderLayer）\n\n这是浏览器渲染期间构建的第一个层模型，处于相同坐标空间（z轴空间）的渲染对象，都将归并到同一个渲染层中，因此根据层叠上下文，不同坐标空间的的渲染对象将形成多个渲染层，以体现它们的层叠关系。所以，对于满足形成层叠上下文条件的渲染对象，浏览器会自动为其创建新的渲染层。能够导致浏览器为其创建新的渲染层的，包括以下几类常见的情况：\n\n- 根元素 document\n\n- 有明确的定位属性（relative、fixed、sticky、absolute）\n\n- opacity < 1\n\n- 有 CSS fliter 属性\n\n- 有 CSS mask 属性\n\n- 有 CSS mix-blend-mode 属性且值不为 normal\n\n- 有 CSS transform 属性且值不为 none\n\n- backface-visibility 属性为 hidden\n\n- 有 CSS reflection 属性\n\n- 有 CSS column-count 属性且值不为 auto或者有 CSS column-width 属性且值不为 auto\n\n- 当前有对于 opacity、transform、fliter、backdrop-filter 应用动画\n\n- overflow 不为 visible\n\nDOM 节点和渲染对象是一一对应的，满足以上条件的渲染对象就能拥有独立的渲染层。当然这里的独立是不完全准确的，并不代表着它们完全独享了渲染层，由于不满足上述条件的渲染对象将会与其第一个拥有渲染层的父元素共用同一个渲染层，因此实际上，这些渲染对象会与它的部分子元素共用这个渲染层。\n\n#### 3、图形层（GraphicsLayer）\n\nGraphicsLayer 其实是一个负责生成最终准备呈现的内容图形的层模型，它拥有一个图形上下文（GraphicsContext），GraphicsContext 会负责输出该层的位图。存储在共享内存中的位图将作为纹理上传到 GPU，最后由 GPU 将多个位图进行合成，然后绘制到屏幕上，此时，我们的页面也就展现到了屏幕上。\n\n所以 GraphicsLayer 是一个重要的渲染载体和工具，但它并不直接处理渲染层，而是处理合成层。\n\n#### 4、合成层（CompositingLayer）\n\n满足某些特殊条件的渲染层，会被浏览器自动提升为合成层。合成层拥有单独的 GraphicsLayer，而其他不是合成层的渲染层，则和其第一个拥有 GraphicsLayer 的父层共用一个。\n\n那么一个渲染层满足哪些特殊条件时，才能被提升为合成层呢？这里列举了一些常见的情况：\n\n- 3D transforms：translate3d、translateZ 等\n\n- video、canvas、iframe 等元素\n\n- 通过 Element.animate() 实现的 opacity 动画转换\n\n- 通过 СSS 动画实现的 opacity 动画转换\n\n- position: fixed\n\n- 具有 will-change 属性\n\n- 对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition\n\n因此，文首例子的解决方案，其实就是利用 will-change 属性，将 CPU 消耗高的渲染元素提升为一个新的合成层，才能开启 GPU 加速的，因此你也可以使用 `transform: translateZ(0)` 来解决这个问题。\n\n这里值得注意的是，不少人会将这些合成层的条件和渲染层产生的条件混淆，这两种条件发生在两个不同的层处理环节，是完全不一样的。\n\n另外，有些文章会把 CSS Filter 也列为影响 Composite 的因素之一，然而我验证后发现并没有效果。\n\n### 三、隐式合成\n\n上边提到，满足某些显性的特殊条件时，渲染层会被浏览器提升为合成层。除此之外，在浏览器的 Composite 阶段，还存在一种隐式合成，部分渲染层在一些特定场景下，会被默认提升为合成层。\n\n对于隐式合成，[CSS GPU Animation](https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/) 中是这么描述的：\n\n> This is called implicit compositing: One or more non-composited elements that should appear above a composited one in the stacking order are promoted to composite layers.\n> (一个或多个非合成元素应出现在堆叠顺序上的合成元素之上，被提升到合成层。)\n\n这句话可能不好理解，它其实是在描述一个交叠问题（overlap）。举个例子说明一下：\n\n- 两个 absolute 定位的 div 在屏幕上交叠了，根据 `z-index` 的关系，其中一个 div 就会”盖在“了另外一个上边。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/66180/26/12280/12579/5d9c6518Ec22cbb0a/51a686ef840a786a.png)\n\n- 这个时候，如果处于下方的 div 被加上了 CSS 属性：`transform: translateZ(0)`，就会被浏览器提升为合成层。提升后的合成层位于 Document 上方，假如没有隐式合成，原本应该处于上方的 div 就依然还是跟 Document 共用一个 GraphicsLayer，层级反而降了，就出现了元素交叠关系错乱的问题。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/58063/27/12935/18359/5d9c6527Efe3e170d/25a87da60392f373.png)\n\n- 所以为了纠正错误的交叠顺序，浏览器必须让原本应该”盖在“它上边的渲染层也同时提升为合成层。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/73747/34/12559/25562/5d9c6537Ee08ae16a/1d32a52a5a58cadc.png)\n\n### 四、层爆炸和层压缩\n\n#### 1、层爆炸\n\n从上边的研究中我们可以发现，一些产生合成层的原因太过于隐蔽了，尤其是隐式合成。在平时的开发过程中，我们很少会去关注层合成的问题，很容易就产生一些不在预期范围内的合成层，当这些不符合预期的合成层达到一定量级时，就会变成层爆炸。\n\n层爆炸会占用 GPU 和大量的内存资源，严重损耗页面性能，因此盲目地使用 GPU 加速，结果有可能会是适得其反。[CSS3硬件加速也有坑](https://div.io/topic/1348) 这篇文章提供了一个很有趣的 [DEMO](https://fouber.github.io/test/layer/)，这个 DEMO 页面中包含了一个 h1 标题，它对 transform 应用了 animation 动画，进而导致被放到了合成层中渲染。由于 animation transform 的特殊性（动态交叠不确定），隐式合成在不需要交叠的情况下也能发生，就导致了页面中所有 `z-index` 高于它的节点所对应的渲染层全部提升为合成层，最终让这个页面整整产生了几千个合成层。\n\n消除隐式合成就是要消除元素交叠，拿这个 DEMO 来说，我们只需要给 h1 标题的 `z-index` 属性设置一个较高的数值，就能让它高于页面中其他元素，自然也就没有合成层提升的必要了。点击 DEMO 中的复选按钮就可以给 h1 标题加上一个较大的 `z-index`，前后效果对比十分明显。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/53422/4/12837/887162/5d9c91a5E7c057f7d/9dc2318cc194e91a.gif)\n\n#### 2、层压缩\n\n当然了，面对这种问题，浏览器也有相应的应对策略，如果多个渲染层同一个合成层重叠时，这些渲染层会被压缩到一个 GraphicsLayer 中，以防止由于重叠原因导致可能出现的“层爆炸”。这句话不好理解，具体可以看看这个例子：\n\n- 还是之前的模型，只不过这次不同的是，有四个 absolute 定位的 div 在屏幕内发生了交叠。此时处于最下方的 div 在加上了 CSS 属性 `transform: translateZ(0)` 后被浏览器提升为合成层，如果按照隐式合成的原理，盖在它上边的 div 会提升为一个新的合成层，第三个 div 又盖在了第二个上，自然也会被提升为合成层，第四个也同理。这样一来，岂不是就会产生四个合成层了？\n\n![](https://img10.360buyimg.com/wq/jfs/t1/77171/26/12580/58063/5d9c9840Eaefa1ecf/f7909d5e19083858.png)\n\n- 然而事实并不是这样的，浏览器的层压缩机制，会将隐式合成的多个渲染层压缩到同一个 GraphicsLayer 中进行渲染，也就是说，上方的三个 div 最终会处于同一个合成层中，这就是浏览器的层压缩。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/71488/24/12380/43473/5d9c96c0Ee4afadc2/58d8c94677d2aaea.png)\n\n当然了，浏览器的自动层压缩并不是万能的，有很多特定情况下，浏览器是无法进行层压缩的，[无线性能优化：Composite](https://fed.taobao.org/blog/2016/04/26/performance-composite/) 这篇文章列举了许多详细的场景。\n\n## 基于层合成的页面渲染优化\n\n### 一、层合成的得与失\n\n层合成是一个相对复杂的浏览器特性，为什么我们需要关注这么底层又难理解的东西呢？那是因为渲染层提升为合成层之后，会给我们带来不少好处：\n\n- 合成层的位图，会交由 GPU 合成，比 CPU 处理要快得多；\n\n- 当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层；\n\n- 元素提升为合成层后，transform 和 opacity 才不会触发 repaint，如果不是合成层，则其依然会触发 repaint。\n\n当然了，利弊是相对和共存的，层合成也存在一些缺点，这很多时候也成为了我们网页性能问题的根源所在：\n\n- 绘制的图层必须传输到 GPU，这些层的数量和大小达到一定量级后，可能会导致传输非常慢，进而导致一些低端和中端设备上出现闪烁；\n\n- 隐式合成容易产生过量的合成层，每个合成层都占用额外的内存，而内存是移动设备上的宝贵资源，过多使用内存可能会导致浏览器崩溃，让性能优化适得其反。\n\n### 二、Chrome Devtools 如何查看合成层\n\n层合成的特性给我们提供了一个利用终端硬件能力来优化页面性能的方式，对于一些重交互、重动画的页面，合理地利用层合成可以让页面的渲染效率得到极大提升，改善交互体验。而我们需要关注的是如何规避层合成对页面造成的负面影响，或者换个说法来讲，更多时候是如何权衡利害，合理组织页面的合成层，这就要求我们事先要对页面的层合成情况有一个详细的了解。Chrome Devtools 给我们提供了一些工具，可以方便的查看页面的合成层情况。\n\n首先是看看页面的渲染情况，以一个栏目页为例，点击 `More tools -> Rendering`，选择 `Layer borders`，你就能看到页面中的合成层都带上了黄色边框。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/77710/19/12438/584960/5d9d3039Ea64183ae/52acf54c52b37f89.jpg)\n\n这还不够，我们还需要更加详尽的层合成情况，点击 `More tools -> Layers`，你可以看到像这样的一个视图：\n\n![](https://img10.360buyimg.com/wq/jfs/t1/64792/37/12298/581872/5d9d2f6eE24ea35bc/fb20c5fe66effd7e.jpg)\n\n左侧列出了所有提升为独立合成层的元素，右侧则是一个整体合成层边界视图，以及选定合成层的详细情况，包括以下几个比较关键的信息：\n\n- Size：合成层的大小，其实也就是对应元素的尺寸；\n- Compositing Reasons：形成复合层原因，这是最关键的，也是我们分析问题的突破口，比如图中的合成层产生的原因就是交叠问题；\n- Memory estimate：内存占用估算；\n- Paint count：绘制次数；\n- Slow scroll regions：缓慢滚动区域。\n\n可以看出我们在不经意间就已经制造出了很多意料之外的合成层，这些没有实际意义的合成层都是可以被优化的。\n\n### 三、一些优化建议\n\n#### 1、动画使用 transform 实现\n\n对于一些体验要求较高的关键动画，比如一些交互复杂的玩法页面，存在持续变化位置的 animation 元素，我们最好是使用 transform 来实现而不是通过改变 left/top 的方式。这样做的原因是，如果使用 left/top 来实现位置变化，animation 节点和 Document 将被放到了同一个 GraphicsLayer 中进行渲染，持续的动画效果将导致整个 Document 不断地执行重绘，而使用 transform 的话，能够让 animation 节点被放置到一个独立合成层中进行渲染绘制，动画发生时不会影响到其它层。并且另一方面，动画会完全运行在 GPU 上，相比起 CPU 处理图层后再发送给显卡进行显示绘制来说，这样的动画往往更加流畅。\n\n#### 2、减少隐式合成\n\n虽然隐式合成从根本上来说是为了保证正确的图层重叠顺序，但具体到实际开发中，隐式合成很容易就导致一些无意义的合成层生成，归根结底其实就要求我们在开发时约束自己的布局习惯，避免踩坑。\n\n比如上边提到的栏目页面，就因为平时开发的不注意造成页面生成了过多的合成层，我在试图查看页面合成层情况的时候，在 PC 上已经能明显感到卡顿了。利用 Chrome Devtools 分析之后不难发现，页面里边存在的一个带动画 transform 的 button 按钮，提升为了合成层，动画交叠的不确定性使得页面内其他 `z-index` 大于它但其实并没有交叠的节点也都全部提升为了合成层（这个原因真的好坑）。\n\n这个时候我们只需要把这个动画节点的 `z-index` 属性值设置得大一些，让层叠顺序高过于页面其他无关节点就行。当然并不是盲目地设置 `z-index` 就能避免，有时候 `z-index` 也还是会导致隐式合成，这个时候可以试着调整一下文档中节点的先后顺序直接让后边的节点来覆盖前边的节点，而不用 `z-index` 来调整重叠关系。方法不是唯一的，具体方式还是得根据不同的页面具体分析。\n\n改善后的页面效果如下，可以看到相比优化前，我们消除了很多无意义的合成层。\n\n![](https://img10.360buyimg.com/wq/jfs/t1/49398/34/13004/498267/5d9d5dcaE8ee4f855/2f18491a62374b69.jpg)\n\n#### 3、减小合成层的尺寸\n\n举个简单的例子，分别画两个尺寸一样的 div，但实现方式有点差别：一个直接设置尺寸 100x100，另一个设置尺寸 10x10，然后通过 `scale` 放大 10 倍，并且我们让这两个 div 都提升为合成层：\n\n```html\n<style>\n  .bottom, .top {\n    position: absolute;\n    will-change: transform;\n  }\n  .bottom {\n    width: 100px;\n    height: 100px;\n    top: 20px;\n    left: 20px;\n    z-index: 3;\n    background: rosybrown;\n  }\n  .top {\n    width: 10px;\n    height: 10px;\n    transform: scale(10);\n    top: 200px;\n    left: 200px;\n    z-index: 5;\n    background: indianred;\n  }\n</style>\n<body>\n  <div class=\"bottom\"></div>\n  <div class=\"top\"></div>\n</body>\n```\n\n利用 Chrome Devtools 查看这两个合成层的内存占用后发现，`.bottom` 内存占用是 39.1 KB，而 `.top` 是 400 B，差距十分明显。这是因为 `.top` 是合成层，transform 位于的 Composite 阶段，现在完全在 GPU 上执行。因此对于一些纯色图层来说，我们可以使用 width 和 height 属性减小合成层的物理尺寸，然后再用 `transform: scale(…)` 放大，这样一来可以极大地减少层合成带来的内存消耗。\n\n## 参考文章\n> [CSS3硬件加速也有坑](https://div.io/topic/1348)\n> [无线性能优化：Composite](https://fed.taobao.org/blog/2016/04/26/performance-composite/)\n> [CSS GPU Animation](https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/)\n> [详谈层合成](https://juejin.im/entry/59dc9aedf265da43200232f9)","slug":"浏览器层合成与页面渲染优化","published":1,"updated":"2019-11-20T05:51:28.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflre001ssoyxssbf2z1j","content":"<blockquote>\n<p>作者：黄浩群</p>\n</blockquote>\n<h2 id=\"一个-CSS-属性引发的血案\"><a href=\"#一个-CSS-属性引发的血案\" class=\"headerlink\" title=\"一个 CSS 属性引发的血案\"></a>一个 CSS 属性引发的血案</h2><p>Web 页面性能是前端开发特别需要关注的重点，评判前端 Web 页面性能的指标有很多，页面的流畅度是其中的一种，如何让页面变得 “柔顺丝滑”，要讨论起来可就是个相当有料的话题了。之前开发移动端 H5 页面的时候，就遇到过一个有趣的性能问题 —— 某个卖场页面在 IOS 手机上出现了严重的卡顿，但在安卓机型下却表现得十分流畅。归纳一下在 iPhoneX 上测试的具体表现：</p>\n<ul>\n<li><p>页面加载时存在明显的延迟，但通过代理抓到的网络请求耗时并不比 Android 的高；</p>\n</li>\n<li><p>页面滚动时会出现短暂的局部白屏，即丢帧。</p>\n<a id=\"more\"></a>\n<p>根据这些表征情况不难推断出，应该是有什么东西在疯狂占用 CPU，卡住了渲染进程。</p>\n</li>\n</ul>\n<p>然而具体是什么东西，要问我我也并不知道。对于这种没法通过断点定位到的问题，恐怕只有用上祖师爷亲传的 “代码二分法” 才能制服得了了。一番艰苦排查之后，问题的根源终于聚焦到了下边这行 CSS 代码上：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">filter</span>: <span class=\"hljs-selector-tag\">blur</span>(100<span class=\"hljs-selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这行 CSS 代码用于实现一个高斯模糊，来构造一个优惠券模块的底部阴影。由于活动配置了多个优惠券，导致页面里存在多个设置了这个属性的 div 元素，而 IOS 手机的浏览器似乎对这个属性的渲染十分吃力（然而为何吃力的原因不得而知），进而导致渲染进程的 CPU 占用率过高，最终造成卡顿。</p>\n<p>哦？CPU 忙不过来了？好办嘛！我给优惠券模块又加了这样一行代码，然后问题迎刃而解 ……</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">will-change</span>: <span class=\"hljs-selector-tag\">transform</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你没看错，我也没写少，确实就是靠一行代码解决的。</p>\n<p>认识它的人可能已经看出来了，大致原理其实很简单，这行代码能够开启 GPU 加速页面渲染，从而大大降低了 CPU 的负载压力，达到优化页面渲染性能的目的，不了解 CSS 硬件加速的可以看看这篇文章 <a href=\"https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css\" target=\"_blank\" rel=\"noopener\">Increase Your Site’s Performance with Hardware-Accelerated CSS</a> 。</p>\n<p>问题解决了，但是真的就这么完事了吗？本着 “拔树寻根” 的伟大原则，我把这个东西好好地研究了一番，才发现 GPU 加速其实没那么简单。</p>\n<h2 id=\"浏览器渲染流程\"><a href=\"#浏览器渲染流程\" class=\"headerlink\" title=\"浏览器渲染流程\"></a>浏览器渲染流程</h2><p>在具体讨论原理之前，我们需要了解一下浏览器渲染流程的一些基本概念。浏览器渲染流程是个老生常谈的话题了，对于 “浏览器如何呈现一个页面的内容” 的这类问题，不少人都可以讲出一个相对完整的过程，从网络请求到浏览器解析，可以具体到很多的细节。除去网络资源获取的步骤，我们理解的 Web 页面的展示，一般可以分为 <code>构建 DOM 树</code>、<code>构建渲染树</code>、<code>布局</code>、<code>绘制</code>、<code>渲染层合成</code> 几个步骤。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/64776/12/12185/85384/5d9ad4e3E01d48107/5e8011b0a213988d.png\" alt></p>\n<ul>\n<li><p>构建 DOM 树：浏览器将 HTML 解析成树形结构的 DOM 树，一般来说，这个过程发生在页面初次加载，或页面 JavaScript 修改了节点结构的时候。</p>\n</li>\n<li><p>构建渲染树：浏览器将 CSS 解析成树形结构的 CSSOM 树，再和 DOM 树合并成渲染树。</p>\n</li>\n<li><p>布局（Layout）：浏览器根据渲染树所体现的节点、各个节点的CSS定义以及它们的从属关系，计算出每个节点在屏幕中的位置。Web 页面中元素的布局是相对的，在页面元素位置、大小发生变化，往往会导致其他节点联动，需要重新计算布局，这时候的布局过程一般被称为回流（Reflow）。</p>\n</li>\n<li><p>绘制（Paint）：遍历渲染树，调用渲染器的 <code>paint()</code> 方法在屏幕上绘制出节点内容，本质上是一个像素填充的过程。这个过程也出现于回流或一些不影响布局的 CSS 修改引起的屏幕局部重画，这时候它被称为重绘（Repaint）。实际上，绘制过程是在多个层上完成的，这些层我们称为渲染层（RenderLayer）。</p>\n</li>\n<li><p>渲染层合成（Composite）：多个绘制后的渲染层按照恰当的重叠顺序进行合并，而后生成位图，最终通过显卡展示到屏幕上。</p>\n</li>\n</ul>\n<p>这是一个基本的浏览器从解析到绘制一个 Web 页面的过程，跟上边页面卡顿问题的解决方法相关的，主要是最后一个环节 —— 渲染层合成。</p>\n<h2 id=\"渲染层合成\"><a href=\"#渲染层合成\" class=\"headerlink\" title=\"渲染层合成\"></a>渲染层合成</h2><h3 id=\"一、什么是渲染层合成\"><a href=\"#一、什么是渲染层合成\" class=\"headerlink\" title=\"一、什么是渲染层合成\"></a>一、什么是渲染层合成</h3><p>在 DOM 树中每个节点都会对应一个渲染对象（RenderObject），当它们的渲染对象处于相同的坐标空间（z 轴空间）时，就会形成一个 RenderLayers，也就是渲染层。渲染层将保证页面元素以正确的顺序堆叠，这时候就会出现层合成（composite），从而正确处理透明元素和重叠元素的显示。</p>\n<p>这个模型类似于 Photoshop 的图层模型，在 Photoshop 中，每个设计元素都是一个独立的图层，多个图层以恰当的顺序在 z 轴空间上叠加，最终构成一个完整的设计图。</p>\n<p>对于有位置重叠的元素的页面，这个过程尤其重要，因为一旦图层的合并顺序出错，将会导致元素显示异常。</p>\n<h3 id=\"二、浏览器的渲染原理\"><a href=\"#二、浏览器的渲染原理\" class=\"headerlink\" title=\"二、浏览器的渲染原理\"></a>二、浏览器的渲染原理</h3><p>从浏览器的渲染过程中我们知道，页面 HTML 会被解析成 DOM 树，每个 HTML 元素对应了树结构上的一个 node 节点。而从 DOM 树转化到一个个的渲染层，并最终执行合并、绘制的过程，中间其实还存在一些过渡的数据结构，它们记录了 DOM 树到屏幕图形的转化原理，其本质也就是树结构到层结构的演化。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/72300/13/12230/57970/5d9af266Ea33a2a11/0e079cf78463f9f3.png\" alt></p>\n<h4 id=\"1、渲染对象（RenderObject）\"><a href=\"#1、渲染对象（RenderObject）\" class=\"headerlink\" title=\"1、渲染对象（RenderObject）\"></a>1、渲染对象（RenderObject）</h4><p>一个 DOM 节点对应了一个渲染对象，渲染对象依然维持着 DOM 树的树形结构。一个渲染对象知道如何绘制一个 DOM 节点的内容，它通过向一个绘图上下文（GraphicsContext）发出必要的绘制调用来绘制 DOM 节点。</p>\n<h4 id=\"2、渲染层（RenderLayer）\"><a href=\"#2、渲染层（RenderLayer）\" class=\"headerlink\" title=\"2、渲染层（RenderLayer）\"></a>2、渲染层（RenderLayer）</h4><p>这是浏览器渲染期间构建的第一个层模型，处于相同坐标空间（z轴空间）的渲染对象，都将归并到同一个渲染层中，因此根据层叠上下文，不同坐标空间的的渲染对象将形成多个渲染层，以体现它们的层叠关系。所以，对于满足形成层叠上下文条件的渲染对象，浏览器会自动为其创建新的渲染层。能够导致浏览器为其创建新的渲染层的，包括以下几类常见的情况：</p>\n<ul>\n<li><p>根元素 document</p>\n</li>\n<li><p>有明确的定位属性（relative、fixed、sticky、absolute）</p>\n</li>\n<li><p>opacity &lt; 1</p>\n</li>\n<li><p>有 CSS fliter 属性</p>\n</li>\n<li><p>有 CSS mask 属性</p>\n</li>\n<li><p>有 CSS mix-blend-mode 属性且值不为 normal</p>\n</li>\n<li><p>有 CSS transform 属性且值不为 none</p>\n</li>\n<li><p>backface-visibility 属性为 hidden</p>\n</li>\n<li><p>有 CSS reflection 属性</p>\n</li>\n<li><p>有 CSS column-count 属性且值不为 auto或者有 CSS column-width 属性且值不为 auto</p>\n</li>\n<li><p>当前有对于 opacity、transform、fliter、backdrop-filter 应用动画</p>\n</li>\n<li><p>overflow 不为 visible</p>\n</li>\n</ul>\n<p>DOM 节点和渲染对象是一一对应的，满足以上条件的渲染对象就能拥有独立的渲染层。当然这里的独立是不完全准确的，并不代表着它们完全独享了渲染层，由于不满足上述条件的渲染对象将会与其第一个拥有渲染层的父元素共用同一个渲染层，因此实际上，这些渲染对象会与它的部分子元素共用这个渲染层。</p>\n<h4 id=\"3、图形层（GraphicsLayer）\"><a href=\"#3、图形层（GraphicsLayer）\" class=\"headerlink\" title=\"3、图形层（GraphicsLayer）\"></a>3、图形层（GraphicsLayer）</h4><p>GraphicsLayer 其实是一个负责生成最终准备呈现的内容图形的层模型，它拥有一个图形上下文（GraphicsContext），GraphicsContext 会负责输出该层的位图。存储在共享内存中的位图将作为纹理上传到 GPU，最后由 GPU 将多个位图进行合成，然后绘制到屏幕上，此时，我们的页面也就展现到了屏幕上。</p>\n<p>所以 GraphicsLayer 是一个重要的渲染载体和工具，但它并不直接处理渲染层，而是处理合成层。</p>\n<h4 id=\"4、合成层（CompositingLayer）\"><a href=\"#4、合成层（CompositingLayer）\" class=\"headerlink\" title=\"4、合成层（CompositingLayer）\"></a>4、合成层（CompositingLayer）</h4><p>满足某些特殊条件的渲染层，会被浏览器自动提升为合成层。合成层拥有单独的 GraphicsLayer，而其他不是合成层的渲染层，则和其第一个拥有 GraphicsLayer 的父层共用一个。</p>\n<p>那么一个渲染层满足哪些特殊条件时，才能被提升为合成层呢？这里列举了一些常见的情况：</p>\n<ul>\n<li><p>3D transforms：translate3d、translateZ 等</p>\n</li>\n<li><p>video、canvas、iframe 等元素</p>\n</li>\n<li><p>通过 Element.animate() 实现的 opacity 动画转换</p>\n</li>\n<li><p>通过 СSS 动画实现的 opacity 动画转换</p>\n</li>\n<li><p>position: fixed</p>\n</li>\n<li><p>具有 will-change 属性</p>\n</li>\n<li><p>对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition</p>\n</li>\n</ul>\n<p>因此，文首例子的解决方案，其实就是利用 will-change 属性，将 CPU 消耗高的渲染元素提升为一个新的合成层，才能开启 GPU 加速的，因此你也可以使用 <code>transform: translateZ(0)</code> 来解决这个问题。</p>\n<p>这里值得注意的是，不少人会将这些合成层的条件和渲染层产生的条件混淆，这两种条件发生在两个不同的层处理环节，是完全不一样的。</p>\n<p>另外，有些文章会把 CSS Filter 也列为影响 Composite 的因素之一，然而我验证后发现并没有效果。</p>\n<h3 id=\"三、隐式合成\"><a href=\"#三、隐式合成\" class=\"headerlink\" title=\"三、隐式合成\"></a>三、隐式合成</h3><p>上边提到，满足某些显性的特殊条件时，渲染层会被浏览器提升为合成层。除此之外，在浏览器的 Composite 阶段，还存在一种隐式合成，部分渲染层在一些特定场景下，会被默认提升为合成层。</p>\n<p>对于隐式合成，<a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">CSS GPU Animation</a> 中是这么描述的：</p>\n<blockquote>\n<p>This is called implicit compositing: One or more non-composited elements that should appear above a composited one in the stacking order are promoted to composite layers.<br>(一个或多个非合成元素应出现在堆叠顺序上的合成元素之上，被提升到合成层。)</p>\n</blockquote>\n<p>这句话可能不好理解，它其实是在描述一个交叠问题（overlap）。举个例子说明一下：</p>\n<ul>\n<li>两个 absolute 定位的 div 在屏幕上交叠了，根据 <code>z-index</code> 的关系，其中一个 div 就会”盖在“了另外一个上边。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/66180/26/12280/12579/5d9c6518Ec22cbb0a/51a686ef840a786a.png\" alt></p>\n<ul>\n<li>这个时候，如果处于下方的 div 被加上了 CSS 属性：<code>transform: translateZ(0)</code>，就会被浏览器提升为合成层。提升后的合成层位于 Document 上方，假如没有隐式合成，原本应该处于上方的 div 就依然还是跟 Document 共用一个 GraphicsLayer，层级反而降了，就出现了元素交叠关系错乱的问题。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/58063/27/12935/18359/5d9c6527Efe3e170d/25a87da60392f373.png\" alt></p>\n<ul>\n<li>所以为了纠正错误的交叠顺序，浏览器必须让原本应该”盖在“它上边的渲染层也同时提升为合成层。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/73747/34/12559/25562/5d9c6537Ee08ae16a/1d32a52a5a58cadc.png\" alt></p>\n<h3 id=\"四、层爆炸和层压缩\"><a href=\"#四、层爆炸和层压缩\" class=\"headerlink\" title=\"四、层爆炸和层压缩\"></a>四、层爆炸和层压缩</h3><h4 id=\"1、层爆炸\"><a href=\"#1、层爆炸\" class=\"headerlink\" title=\"1、层爆炸\"></a>1、层爆炸</h4><p>从上边的研究中我们可以发现，一些产生合成层的原因太过于隐蔽了，尤其是隐式合成。在平时的开发过程中，我们很少会去关注层合成的问题，很容易就产生一些不在预期范围内的合成层，当这些不符合预期的合成层达到一定量级时，就会变成层爆炸。</p>\n<p>层爆炸会占用 GPU 和大量的内存资源，严重损耗页面性能，因此盲目地使用 GPU 加速，结果有可能会是适得其反。<a href=\"https://div.io/topic/1348\" target=\"_blank\" rel=\"noopener\">CSS3硬件加速也有坑</a> 这篇文章提供了一个很有趣的 <a href=\"https://fouber.github.io/test/layer/\" target=\"_blank\" rel=\"noopener\">DEMO</a>，这个 DEMO 页面中包含了一个 h1 标题，它对 transform 应用了 animation 动画，进而导致被放到了合成层中渲染。由于 animation transform 的特殊性（动态交叠不确定），隐式合成在不需要交叠的情况下也能发生，就导致了页面中所有 <code>z-index</code> 高于它的节点所对应的渲染层全部提升为合成层，最终让这个页面整整产生了几千个合成层。</p>\n<p>消除隐式合成就是要消除元素交叠，拿这个 DEMO 来说，我们只需要给 h1 标题的 <code>z-index</code> 属性设置一个较高的数值，就能让它高于页面中其他元素，自然也就没有合成层提升的必要了。点击 DEMO 中的复选按钮就可以给 h1 标题加上一个较大的 <code>z-index</code>，前后效果对比十分明显。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/53422/4/12837/887162/5d9c91a5E7c057f7d/9dc2318cc194e91a.gif\" alt></p>\n<h4 id=\"2、层压缩\"><a href=\"#2、层压缩\" class=\"headerlink\" title=\"2、层压缩\"></a>2、层压缩</h4><p>当然了，面对这种问题，浏览器也有相应的应对策略，如果多个渲染层同一个合成层重叠时，这些渲染层会被压缩到一个 GraphicsLayer 中，以防止由于重叠原因导致可能出现的“层爆炸”。这句话不好理解，具体可以看看这个例子：</p>\n<ul>\n<li>还是之前的模型，只不过这次不同的是，有四个 absolute 定位的 div 在屏幕内发生了交叠。此时处于最下方的 div 在加上了 CSS 属性 <code>transform: translateZ(0)</code> 后被浏览器提升为合成层，如果按照隐式合成的原理，盖在它上边的 div 会提升为一个新的合成层，第三个 div 又盖在了第二个上，自然也会被提升为合成层，第四个也同理。这样一来，岂不是就会产生四个合成层了？</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/77171/26/12580/58063/5d9c9840Eaefa1ecf/f7909d5e19083858.png\" alt></p>\n<ul>\n<li>然而事实并不是这样的，浏览器的层压缩机制，会将隐式合成的多个渲染层压缩到同一个 GraphicsLayer 中进行渲染，也就是说，上方的三个 div 最终会处于同一个合成层中，这就是浏览器的层压缩。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/71488/24/12380/43473/5d9c96c0Ee4afadc2/58d8c94677d2aaea.png\" alt></p>\n<p>当然了，浏览器的自动层压缩并不是万能的，有很多特定情况下，浏览器是无法进行层压缩的，<a href=\"https://fed.taobao.org/blog/2016/04/26/performance-composite/\" target=\"_blank\" rel=\"noopener\">无线性能优化：Composite</a> 这篇文章列举了许多详细的场景。</p>\n<h2 id=\"基于层合成的页面渲染优化\"><a href=\"#基于层合成的页面渲染优化\" class=\"headerlink\" title=\"基于层合成的页面渲染优化\"></a>基于层合成的页面渲染优化</h2><h3 id=\"一、层合成的得与失\"><a href=\"#一、层合成的得与失\" class=\"headerlink\" title=\"一、层合成的得与失\"></a>一、层合成的得与失</h3><p>层合成是一个相对复杂的浏览器特性，为什么我们需要关注这么底层又难理解的东西呢？那是因为渲染层提升为合成层之后，会给我们带来不少好处：</p>\n<ul>\n<li><p>合成层的位图，会交由 GPU 合成，比 CPU 处理要快得多；</p>\n</li>\n<li><p>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层；</p>\n</li>\n<li><p>元素提升为合成层后，transform 和 opacity 才不会触发 repaint，如果不是合成层，则其依然会触发 repaint。</p>\n</li>\n</ul>\n<p>当然了，利弊是相对和共存的，层合成也存在一些缺点，这很多时候也成为了我们网页性能问题的根源所在：</p>\n<ul>\n<li><p>绘制的图层必须传输到 GPU，这些层的数量和大小达到一定量级后，可能会导致传输非常慢，进而导致一些低端和中端设备上出现闪烁；</p>\n</li>\n<li><p>隐式合成容易产生过量的合成层，每个合成层都占用额外的内存，而内存是移动设备上的宝贵资源，过多使用内存可能会导致浏览器崩溃，让性能优化适得其反。</p>\n</li>\n</ul>\n<h3 id=\"二、Chrome-Devtools-如何查看合成层\"><a href=\"#二、Chrome-Devtools-如何查看合成层\" class=\"headerlink\" title=\"二、Chrome Devtools 如何查看合成层\"></a>二、Chrome Devtools 如何查看合成层</h3><p>层合成的特性给我们提供了一个利用终端硬件能力来优化页面性能的方式，对于一些重交互、重动画的页面，合理地利用层合成可以让页面的渲染效率得到极大提升，改善交互体验。而我们需要关注的是如何规避层合成对页面造成的负面影响，或者换个说法来讲，更多时候是如何权衡利害，合理组织页面的合成层，这就要求我们事先要对页面的层合成情况有一个详细的了解。Chrome Devtools 给我们提供了一些工具，可以方便的查看页面的合成层情况。</p>\n<p>首先是看看页面的渲染情况，以一个栏目页为例，点击 <code>More tools -&gt; Rendering</code>，选择 <code>Layer borders</code>，你就能看到页面中的合成层都带上了黄色边框。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/77710/19/12438/584960/5d9d3039Ea64183ae/52acf54c52b37f89.jpg\" alt></p>\n<p>这还不够，我们还需要更加详尽的层合成情况，点击 <code>More tools -&gt; Layers</code>，你可以看到像这样的一个视图：</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/64792/37/12298/581872/5d9d2f6eE24ea35bc/fb20c5fe66effd7e.jpg\" alt></p>\n<p>左侧列出了所有提升为独立合成层的元素，右侧则是一个整体合成层边界视图，以及选定合成层的详细情况，包括以下几个比较关键的信息：</p>\n<ul>\n<li>Size：合成层的大小，其实也就是对应元素的尺寸；</li>\n<li>Compositing Reasons：形成复合层原因，这是最关键的，也是我们分析问题的突破口，比如图中的合成层产生的原因就是交叠问题；</li>\n<li>Memory estimate：内存占用估算；</li>\n<li>Paint count：绘制次数；</li>\n<li>Slow scroll regions：缓慢滚动区域。</li>\n</ul>\n<p>可以看出我们在不经意间就已经制造出了很多意料之外的合成层，这些没有实际意义的合成层都是可以被优化的。</p>\n<h3 id=\"三、一些优化建议\"><a href=\"#三、一些优化建议\" class=\"headerlink\" title=\"三、一些优化建议\"></a>三、一些优化建议</h3><h4 id=\"1、动画使用-transform-实现\"><a href=\"#1、动画使用-transform-实现\" class=\"headerlink\" title=\"1、动画使用 transform 实现\"></a>1、动画使用 transform 实现</h4><p>对于一些体验要求较高的关键动画，比如一些交互复杂的玩法页面，存在持续变化位置的 animation 元素，我们最好是使用 transform 来实现而不是通过改变 left/top 的方式。这样做的原因是，如果使用 left/top 来实现位置变化，animation 节点和 Document 将被放到了同一个 GraphicsLayer 中进行渲染，持续的动画效果将导致整个 Document 不断地执行重绘，而使用 transform 的话，能够让 animation 节点被放置到一个独立合成层中进行渲染绘制，动画发生时不会影响到其它层。并且另一方面，动画会完全运行在 GPU 上，相比起 CPU 处理图层后再发送给显卡进行显示绘制来说，这样的动画往往更加流畅。</p>\n<h4 id=\"2、减少隐式合成\"><a href=\"#2、减少隐式合成\" class=\"headerlink\" title=\"2、减少隐式合成\"></a>2、减少隐式合成</h4><p>虽然隐式合成从根本上来说是为了保证正确的图层重叠顺序，但具体到实际开发中，隐式合成很容易就导致一些无意义的合成层生成，归根结底其实就要求我们在开发时约束自己的布局习惯，避免踩坑。</p>\n<p>比如上边提到的栏目页面，就因为平时开发的不注意造成页面生成了过多的合成层，我在试图查看页面合成层情况的时候，在 PC 上已经能明显感到卡顿了。利用 Chrome Devtools 分析之后不难发现，页面里边存在的一个带动画 transform 的 button 按钮，提升为了合成层，动画交叠的不确定性使得页面内其他 <code>z-index</code> 大于它但其实并没有交叠的节点也都全部提升为了合成层（这个原因真的好坑）。</p>\n<p>这个时候我们只需要把这个动画节点的 <code>z-index</code> 属性值设置得大一些，让层叠顺序高过于页面其他无关节点就行。当然并不是盲目地设置 <code>z-index</code> 就能避免，有时候 <code>z-index</code> 也还是会导致隐式合成，这个时候可以试着调整一下文档中节点的先后顺序直接让后边的节点来覆盖前边的节点，而不用 <code>z-index</code> 来调整重叠关系。方法不是唯一的，具体方式还是得根据不同的页面具体分析。</p>\n<p>改善后的页面效果如下，可以看到相比优化前，我们消除了很多无意义的合成层。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/49398/34/13004/498267/5d9d5dcaE8ee4f855/2f18491a62374b69.jpg\" alt></p>\n<h4 id=\"3、减小合成层的尺寸\"><a href=\"#3、减小合成层的尺寸\" class=\"headerlink\" title=\"3、减小合成层的尺寸\"></a>3、减小合成层的尺寸</h4><p>举个简单的例子，分别画两个尺寸一样的 div，但实现方式有点差别：一个直接设置尺寸 100x100，另一个设置尺寸 10x10，然后通过 <code>scale</code> 放大 10 倍，并且我们让这两个 div 都提升为合成层：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.bottom</span>, <span class=\"hljs-selector-class\">.top</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    will-change: transform;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.bottom</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    top: 20px;</span><br><span class=\"line\">    left: 20px;</span><br><span class=\"line\">    z-index: 3;</span><br><span class=\"line\">    background: rosybrown;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.top</span> &#123;</span></span><br><span class=\"line\">    width: 10px;</span><br><span class=\"line\">    height: 10px;</span><br><span class=\"line\">    transform: scale(10);</span><br><span class=\"line\">    top: 200px;</span><br><span class=\"line\">    left: 200px;</span><br><span class=\"line\">    z-index: 5;</span><br><span class=\"line\">    background: indianred;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bottom\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"top\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>利用 Chrome Devtools 查看这两个合成层的内存占用后发现，<code>.bottom</code> 内存占用是 39.1 KB，而 <code>.top</code> 是 400 B，差距十分明显。这是因为 <code>.top</code> 是合成层，transform 位于的 Composite 阶段，现在完全在 GPU 上执行。因此对于一些纯色图层来说，我们可以使用 width 和 height 属性减小合成层的物理尺寸，然后再用 <code>transform: scale(…)</code> 放大，这样一来可以极大地减少层合成带来的内存消耗。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://div.io/topic/1348\" target=\"_blank\" rel=\"noopener\">CSS3硬件加速也有坑</a><br><a href=\"https://fed.taobao.org/blog/2016/04/26/performance-composite/\" target=\"_blank\" rel=\"noopener\">无线性能优化：Composite</a><br><a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">CSS GPU Animation</a><br><a href=\"https://juejin.im/entry/59dc9aedf265da43200232f9\" target=\"_blank\" rel=\"noopener\">详谈层合成</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：黄浩群</p>\n</blockquote>\n<h2 id=\"一个-CSS-属性引发的血案\"><a href=\"#一个-CSS-属性引发的血案\" class=\"headerlink\" title=\"一个 CSS 属性引发的血案\"></a>一个 CSS 属性引发的血案</h2><p>Web 页面性能是前端开发特别需要关注的重点，评判前端 Web 页面性能的指标有很多，页面的流畅度是其中的一种，如何让页面变得 “柔顺丝滑”，要讨论起来可就是个相当有料的话题了。之前开发移动端 H5 页面的时候，就遇到过一个有趣的性能问题 —— 某个卖场页面在 IOS 手机上出现了严重的卡顿，但在安卓机型下却表现得十分流畅。归纳一下在 iPhoneX 上测试的具体表现：</p>\n<ul>\n<li><p>页面加载时存在明显的延迟，但通过代理抓到的网络请求耗时并不比 Android 的高；</p>\n</li>\n<li><p>页面滚动时会出现短暂的局部白屏，即丢帧。</p></li></ul>","more":"<p>根据这些表征情况不难推断出，应该是有什么东西在疯狂占用 CPU，卡住了渲染进程。</p>\n</li>\n</ul>\n<p>然而具体是什么东西，要问我我也并不知道。对于这种没法通过断点定位到的问题，恐怕只有用上祖师爷亲传的 “代码二分法” 才能制服得了了。一番艰苦排查之后，问题的根源终于聚焦到了下边这行 CSS 代码上：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">filter</span>: <span class=\"selector-tag\">blur</span>(100<span class=\"selector-tag\">px</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这行 CSS 代码用于实现一个高斯模糊，来构造一个优惠券模块的底部阴影。由于活动配置了多个优惠券，导致页面里存在多个设置了这个属性的 div 元素，而 IOS 手机的浏览器似乎对这个属性的渲染十分吃力（然而为何吃力的原因不得而知），进而导致渲染进程的 CPU 占用率过高，最终造成卡顿。</p>\n<p>哦？CPU 忙不过来了？好办嘛！我给优惠券模块又加了这样一行代码，然后问题迎刃而解 ……</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">transform</span>;</span><br></pre></td></tr></table></figure>\n\n<p>你没看错，我也没写少，确实就是靠一行代码解决的。</p>\n<p>认识它的人可能已经看出来了，大致原理其实很简单，这行代码能够开启 GPU 加速页面渲染，从而大大降低了 CPU 的负载压力，达到优化页面渲染性能的目的，不了解 CSS 硬件加速的可以看看这篇文章 <a href=\"https://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css\" target=\"_blank\" rel=\"noopener\">Increase Your Site’s Performance with Hardware-Accelerated CSS</a> 。</p>\n<p>问题解决了，但是真的就这么完事了吗？本着 “拔树寻根” 的伟大原则，我把这个东西好好地研究了一番，才发现 GPU 加速其实没那么简单。</p>\n<h2 id=\"浏览器渲染流程\"><a href=\"#浏览器渲染流程\" class=\"headerlink\" title=\"浏览器渲染流程\"></a>浏览器渲染流程</h2><p>在具体讨论原理之前，我们需要了解一下浏览器渲染流程的一些基本概念。浏览器渲染流程是个老生常谈的话题了，对于 “浏览器如何呈现一个页面的内容” 的这类问题，不少人都可以讲出一个相对完整的过程，从网络请求到浏览器解析，可以具体到很多的细节。除去网络资源获取的步骤，我们理解的 Web 页面的展示，一般可以分为 <code>构建 DOM 树</code>、<code>构建渲染树</code>、<code>布局</code>、<code>绘制</code>、<code>渲染层合成</code> 几个步骤。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/64776/12/12185/85384/5d9ad4e3E01d48107/5e8011b0a213988d.png\" alt></p>\n<ul>\n<li><p>构建 DOM 树：浏览器将 HTML 解析成树形结构的 DOM 树，一般来说，这个过程发生在页面初次加载，或页面 JavaScript 修改了节点结构的时候。</p>\n</li>\n<li><p>构建渲染树：浏览器将 CSS 解析成树形结构的 CSSOM 树，再和 DOM 树合并成渲染树。</p>\n</li>\n<li><p>布局（Layout）：浏览器根据渲染树所体现的节点、各个节点的CSS定义以及它们的从属关系，计算出每个节点在屏幕中的位置。Web 页面中元素的布局是相对的，在页面元素位置、大小发生变化，往往会导致其他节点联动，需要重新计算布局，这时候的布局过程一般被称为回流（Reflow）。</p>\n</li>\n<li><p>绘制（Paint）：遍历渲染树，调用渲染器的 <code>paint()</code> 方法在屏幕上绘制出节点内容，本质上是一个像素填充的过程。这个过程也出现于回流或一些不影响布局的 CSS 修改引起的屏幕局部重画，这时候它被称为重绘（Repaint）。实际上，绘制过程是在多个层上完成的，这些层我们称为渲染层（RenderLayer）。</p>\n</li>\n<li><p>渲染层合成（Composite）：多个绘制后的渲染层按照恰当的重叠顺序进行合并，而后生成位图，最终通过显卡展示到屏幕上。</p>\n</li>\n</ul>\n<p>这是一个基本的浏览器从解析到绘制一个 Web 页面的过程，跟上边页面卡顿问题的解决方法相关的，主要是最后一个环节 —— 渲染层合成。</p>\n<h2 id=\"渲染层合成\"><a href=\"#渲染层合成\" class=\"headerlink\" title=\"渲染层合成\"></a>渲染层合成</h2><h3 id=\"一、什么是渲染层合成\"><a href=\"#一、什么是渲染层合成\" class=\"headerlink\" title=\"一、什么是渲染层合成\"></a>一、什么是渲染层合成</h3><p>在 DOM 树中每个节点都会对应一个渲染对象（RenderObject），当它们的渲染对象处于相同的坐标空间（z 轴空间）时，就会形成一个 RenderLayers，也就是渲染层。渲染层将保证页面元素以正确的顺序堆叠，这时候就会出现层合成（composite），从而正确处理透明元素和重叠元素的显示。</p>\n<p>这个模型类似于 Photoshop 的图层模型，在 Photoshop 中，每个设计元素都是一个独立的图层，多个图层以恰当的顺序在 z 轴空间上叠加，最终构成一个完整的设计图。</p>\n<p>对于有位置重叠的元素的页面，这个过程尤其重要，因为一旦图层的合并顺序出错，将会导致元素显示异常。</p>\n<h3 id=\"二、浏览器的渲染原理\"><a href=\"#二、浏览器的渲染原理\" class=\"headerlink\" title=\"二、浏览器的渲染原理\"></a>二、浏览器的渲染原理</h3><p>从浏览器的渲染过程中我们知道，页面 HTML 会被解析成 DOM 树，每个 HTML 元素对应了树结构上的一个 node 节点。而从 DOM 树转化到一个个的渲染层，并最终执行合并、绘制的过程，中间其实还存在一些过渡的数据结构，它们记录了 DOM 树到屏幕图形的转化原理，其本质也就是树结构到层结构的演化。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/72300/13/12230/57970/5d9af266Ea33a2a11/0e079cf78463f9f3.png\" alt></p>\n<h4 id=\"1、渲染对象（RenderObject）\"><a href=\"#1、渲染对象（RenderObject）\" class=\"headerlink\" title=\"1、渲染对象（RenderObject）\"></a>1、渲染对象（RenderObject）</h4><p>一个 DOM 节点对应了一个渲染对象，渲染对象依然维持着 DOM 树的树形结构。一个渲染对象知道如何绘制一个 DOM 节点的内容，它通过向一个绘图上下文（GraphicsContext）发出必要的绘制调用来绘制 DOM 节点。</p>\n<h4 id=\"2、渲染层（RenderLayer）\"><a href=\"#2、渲染层（RenderLayer）\" class=\"headerlink\" title=\"2、渲染层（RenderLayer）\"></a>2、渲染层（RenderLayer）</h4><p>这是浏览器渲染期间构建的第一个层模型，处于相同坐标空间（z轴空间）的渲染对象，都将归并到同一个渲染层中，因此根据层叠上下文，不同坐标空间的的渲染对象将形成多个渲染层，以体现它们的层叠关系。所以，对于满足形成层叠上下文条件的渲染对象，浏览器会自动为其创建新的渲染层。能够导致浏览器为其创建新的渲染层的，包括以下几类常见的情况：</p>\n<ul>\n<li><p>根元素 document</p>\n</li>\n<li><p>有明确的定位属性（relative、fixed、sticky、absolute）</p>\n</li>\n<li><p>opacity &lt; 1</p>\n</li>\n<li><p>有 CSS fliter 属性</p>\n</li>\n<li><p>有 CSS mask 属性</p>\n</li>\n<li><p>有 CSS mix-blend-mode 属性且值不为 normal</p>\n</li>\n<li><p>有 CSS transform 属性且值不为 none</p>\n</li>\n<li><p>backface-visibility 属性为 hidden</p>\n</li>\n<li><p>有 CSS reflection 属性</p>\n</li>\n<li><p>有 CSS column-count 属性且值不为 auto或者有 CSS column-width 属性且值不为 auto</p>\n</li>\n<li><p>当前有对于 opacity、transform、fliter、backdrop-filter 应用动画</p>\n</li>\n<li><p>overflow 不为 visible</p>\n</li>\n</ul>\n<p>DOM 节点和渲染对象是一一对应的，满足以上条件的渲染对象就能拥有独立的渲染层。当然这里的独立是不完全准确的，并不代表着它们完全独享了渲染层，由于不满足上述条件的渲染对象将会与其第一个拥有渲染层的父元素共用同一个渲染层，因此实际上，这些渲染对象会与它的部分子元素共用这个渲染层。</p>\n<h4 id=\"3、图形层（GraphicsLayer）\"><a href=\"#3、图形层（GraphicsLayer）\" class=\"headerlink\" title=\"3、图形层（GraphicsLayer）\"></a>3、图形层（GraphicsLayer）</h4><p>GraphicsLayer 其实是一个负责生成最终准备呈现的内容图形的层模型，它拥有一个图形上下文（GraphicsContext），GraphicsContext 会负责输出该层的位图。存储在共享内存中的位图将作为纹理上传到 GPU，最后由 GPU 将多个位图进行合成，然后绘制到屏幕上，此时，我们的页面也就展现到了屏幕上。</p>\n<p>所以 GraphicsLayer 是一个重要的渲染载体和工具，但它并不直接处理渲染层，而是处理合成层。</p>\n<h4 id=\"4、合成层（CompositingLayer）\"><a href=\"#4、合成层（CompositingLayer）\" class=\"headerlink\" title=\"4、合成层（CompositingLayer）\"></a>4、合成层（CompositingLayer）</h4><p>满足某些特殊条件的渲染层，会被浏览器自动提升为合成层。合成层拥有单独的 GraphicsLayer，而其他不是合成层的渲染层，则和其第一个拥有 GraphicsLayer 的父层共用一个。</p>\n<p>那么一个渲染层满足哪些特殊条件时，才能被提升为合成层呢？这里列举了一些常见的情况：</p>\n<ul>\n<li><p>3D transforms：translate3d、translateZ 等</p>\n</li>\n<li><p>video、canvas、iframe 等元素</p>\n</li>\n<li><p>通过 Element.animate() 实现的 opacity 动画转换</p>\n</li>\n<li><p>通过 СSS 动画实现的 opacity 动画转换</p>\n</li>\n<li><p>position: fixed</p>\n</li>\n<li><p>具有 will-change 属性</p>\n</li>\n<li><p>对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition</p>\n</li>\n</ul>\n<p>因此，文首例子的解决方案，其实就是利用 will-change 属性，将 CPU 消耗高的渲染元素提升为一个新的合成层，才能开启 GPU 加速的，因此你也可以使用 <code>transform: translateZ(0)</code> 来解决这个问题。</p>\n<p>这里值得注意的是，不少人会将这些合成层的条件和渲染层产生的条件混淆，这两种条件发生在两个不同的层处理环节，是完全不一样的。</p>\n<p>另外，有些文章会把 CSS Filter 也列为影响 Composite 的因素之一，然而我验证后发现并没有效果。</p>\n<h3 id=\"三、隐式合成\"><a href=\"#三、隐式合成\" class=\"headerlink\" title=\"三、隐式合成\"></a>三、隐式合成</h3><p>上边提到，满足某些显性的特殊条件时，渲染层会被浏览器提升为合成层。除此之外，在浏览器的 Composite 阶段，还存在一种隐式合成，部分渲染层在一些特定场景下，会被默认提升为合成层。</p>\n<p>对于隐式合成，<a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">CSS GPU Animation</a> 中是这么描述的：</p>\n<blockquote>\n<p>This is called implicit compositing: One or more non-composited elements that should appear above a composited one in the stacking order are promoted to composite layers.<br>(一个或多个非合成元素应出现在堆叠顺序上的合成元素之上，被提升到合成层。)</p>\n</blockquote>\n<p>这句话可能不好理解，它其实是在描述一个交叠问题（overlap）。举个例子说明一下：</p>\n<ul>\n<li>两个 absolute 定位的 div 在屏幕上交叠了，根据 <code>z-index</code> 的关系，其中一个 div 就会”盖在“了另外一个上边。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/66180/26/12280/12579/5d9c6518Ec22cbb0a/51a686ef840a786a.png\" alt></p>\n<ul>\n<li>这个时候，如果处于下方的 div 被加上了 CSS 属性：<code>transform: translateZ(0)</code>，就会被浏览器提升为合成层。提升后的合成层位于 Document 上方，假如没有隐式合成，原本应该处于上方的 div 就依然还是跟 Document 共用一个 GraphicsLayer，层级反而降了，就出现了元素交叠关系错乱的问题。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/58063/27/12935/18359/5d9c6527Efe3e170d/25a87da60392f373.png\" alt></p>\n<ul>\n<li>所以为了纠正错误的交叠顺序，浏览器必须让原本应该”盖在“它上边的渲染层也同时提升为合成层。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/73747/34/12559/25562/5d9c6537Ee08ae16a/1d32a52a5a58cadc.png\" alt></p>\n<h3 id=\"四、层爆炸和层压缩\"><a href=\"#四、层爆炸和层压缩\" class=\"headerlink\" title=\"四、层爆炸和层压缩\"></a>四、层爆炸和层压缩</h3><h4 id=\"1、层爆炸\"><a href=\"#1、层爆炸\" class=\"headerlink\" title=\"1、层爆炸\"></a>1、层爆炸</h4><p>从上边的研究中我们可以发现，一些产生合成层的原因太过于隐蔽了，尤其是隐式合成。在平时的开发过程中，我们很少会去关注层合成的问题，很容易就产生一些不在预期范围内的合成层，当这些不符合预期的合成层达到一定量级时，就会变成层爆炸。</p>\n<p>层爆炸会占用 GPU 和大量的内存资源，严重损耗页面性能，因此盲目地使用 GPU 加速，结果有可能会是适得其反。<a href=\"https://div.io/topic/1348\" target=\"_blank\" rel=\"noopener\">CSS3硬件加速也有坑</a> 这篇文章提供了一个很有趣的 <a href=\"https://fouber.github.io/test/layer/\" target=\"_blank\" rel=\"noopener\">DEMO</a>，这个 DEMO 页面中包含了一个 h1 标题，它对 transform 应用了 animation 动画，进而导致被放到了合成层中渲染。由于 animation transform 的特殊性（动态交叠不确定），隐式合成在不需要交叠的情况下也能发生，就导致了页面中所有 <code>z-index</code> 高于它的节点所对应的渲染层全部提升为合成层，最终让这个页面整整产生了几千个合成层。</p>\n<p>消除隐式合成就是要消除元素交叠，拿这个 DEMO 来说，我们只需要给 h1 标题的 <code>z-index</code> 属性设置一个较高的数值，就能让它高于页面中其他元素，自然也就没有合成层提升的必要了。点击 DEMO 中的复选按钮就可以给 h1 标题加上一个较大的 <code>z-index</code>，前后效果对比十分明显。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/53422/4/12837/887162/5d9c91a5E7c057f7d/9dc2318cc194e91a.gif\" alt></p>\n<h4 id=\"2、层压缩\"><a href=\"#2、层压缩\" class=\"headerlink\" title=\"2、层压缩\"></a>2、层压缩</h4><p>当然了，面对这种问题，浏览器也有相应的应对策略，如果多个渲染层同一个合成层重叠时，这些渲染层会被压缩到一个 GraphicsLayer 中，以防止由于重叠原因导致可能出现的“层爆炸”。这句话不好理解，具体可以看看这个例子：</p>\n<ul>\n<li>还是之前的模型，只不过这次不同的是，有四个 absolute 定位的 div 在屏幕内发生了交叠。此时处于最下方的 div 在加上了 CSS 属性 <code>transform: translateZ(0)</code> 后被浏览器提升为合成层，如果按照隐式合成的原理，盖在它上边的 div 会提升为一个新的合成层，第三个 div 又盖在了第二个上，自然也会被提升为合成层，第四个也同理。这样一来，岂不是就会产生四个合成层了？</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/77171/26/12580/58063/5d9c9840Eaefa1ecf/f7909d5e19083858.png\" alt></p>\n<ul>\n<li>然而事实并不是这样的，浏览器的层压缩机制，会将隐式合成的多个渲染层压缩到同一个 GraphicsLayer 中进行渲染，也就是说，上方的三个 div 最终会处于同一个合成层中，这就是浏览器的层压缩。</li>\n</ul>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/71488/24/12380/43473/5d9c96c0Ee4afadc2/58d8c94677d2aaea.png\" alt></p>\n<p>当然了，浏览器的自动层压缩并不是万能的，有很多特定情况下，浏览器是无法进行层压缩的，<a href=\"https://fed.taobao.org/blog/2016/04/26/performance-composite/\" target=\"_blank\" rel=\"noopener\">无线性能优化：Composite</a> 这篇文章列举了许多详细的场景。</p>\n<h2 id=\"基于层合成的页面渲染优化\"><a href=\"#基于层合成的页面渲染优化\" class=\"headerlink\" title=\"基于层合成的页面渲染优化\"></a>基于层合成的页面渲染优化</h2><h3 id=\"一、层合成的得与失\"><a href=\"#一、层合成的得与失\" class=\"headerlink\" title=\"一、层合成的得与失\"></a>一、层合成的得与失</h3><p>层合成是一个相对复杂的浏览器特性，为什么我们需要关注这么底层又难理解的东西呢？那是因为渲染层提升为合成层之后，会给我们带来不少好处：</p>\n<ul>\n<li><p>合成层的位图，会交由 GPU 合成，比 CPU 处理要快得多；</p>\n</li>\n<li><p>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层；</p>\n</li>\n<li><p>元素提升为合成层后，transform 和 opacity 才不会触发 repaint，如果不是合成层，则其依然会触发 repaint。</p>\n</li>\n</ul>\n<p>当然了，利弊是相对和共存的，层合成也存在一些缺点，这很多时候也成为了我们网页性能问题的根源所在：</p>\n<ul>\n<li><p>绘制的图层必须传输到 GPU，这些层的数量和大小达到一定量级后，可能会导致传输非常慢，进而导致一些低端和中端设备上出现闪烁；</p>\n</li>\n<li><p>隐式合成容易产生过量的合成层，每个合成层都占用额外的内存，而内存是移动设备上的宝贵资源，过多使用内存可能会导致浏览器崩溃，让性能优化适得其反。</p>\n</li>\n</ul>\n<h3 id=\"二、Chrome-Devtools-如何查看合成层\"><a href=\"#二、Chrome-Devtools-如何查看合成层\" class=\"headerlink\" title=\"二、Chrome Devtools 如何查看合成层\"></a>二、Chrome Devtools 如何查看合成层</h3><p>层合成的特性给我们提供了一个利用终端硬件能力来优化页面性能的方式，对于一些重交互、重动画的页面，合理地利用层合成可以让页面的渲染效率得到极大提升，改善交互体验。而我们需要关注的是如何规避层合成对页面造成的负面影响，或者换个说法来讲，更多时候是如何权衡利害，合理组织页面的合成层，这就要求我们事先要对页面的层合成情况有一个详细的了解。Chrome Devtools 给我们提供了一些工具，可以方便的查看页面的合成层情况。</p>\n<p>首先是看看页面的渲染情况，以一个栏目页为例，点击 <code>More tools -&gt; Rendering</code>，选择 <code>Layer borders</code>，你就能看到页面中的合成层都带上了黄色边框。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/77710/19/12438/584960/5d9d3039Ea64183ae/52acf54c52b37f89.jpg\" alt></p>\n<p>这还不够，我们还需要更加详尽的层合成情况，点击 <code>More tools -&gt; Layers</code>，你可以看到像这样的一个视图：</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/64792/37/12298/581872/5d9d2f6eE24ea35bc/fb20c5fe66effd7e.jpg\" alt></p>\n<p>左侧列出了所有提升为独立合成层的元素，右侧则是一个整体合成层边界视图，以及选定合成层的详细情况，包括以下几个比较关键的信息：</p>\n<ul>\n<li>Size：合成层的大小，其实也就是对应元素的尺寸；</li>\n<li>Compositing Reasons：形成复合层原因，这是最关键的，也是我们分析问题的突破口，比如图中的合成层产生的原因就是交叠问题；</li>\n<li>Memory estimate：内存占用估算；</li>\n<li>Paint count：绘制次数；</li>\n<li>Slow scroll regions：缓慢滚动区域。</li>\n</ul>\n<p>可以看出我们在不经意间就已经制造出了很多意料之外的合成层，这些没有实际意义的合成层都是可以被优化的。</p>\n<h3 id=\"三、一些优化建议\"><a href=\"#三、一些优化建议\" class=\"headerlink\" title=\"三、一些优化建议\"></a>三、一些优化建议</h3><h4 id=\"1、动画使用-transform-实现\"><a href=\"#1、动画使用-transform-实现\" class=\"headerlink\" title=\"1、动画使用 transform 实现\"></a>1、动画使用 transform 实现</h4><p>对于一些体验要求较高的关键动画，比如一些交互复杂的玩法页面，存在持续变化位置的 animation 元素，我们最好是使用 transform 来实现而不是通过改变 left/top 的方式。这样做的原因是，如果使用 left/top 来实现位置变化，animation 节点和 Document 将被放到了同一个 GraphicsLayer 中进行渲染，持续的动画效果将导致整个 Document 不断地执行重绘，而使用 transform 的话，能够让 animation 节点被放置到一个独立合成层中进行渲染绘制，动画发生时不会影响到其它层。并且另一方面，动画会完全运行在 GPU 上，相比起 CPU 处理图层后再发送给显卡进行显示绘制来说，这样的动画往往更加流畅。</p>\n<h4 id=\"2、减少隐式合成\"><a href=\"#2、减少隐式合成\" class=\"headerlink\" title=\"2、减少隐式合成\"></a>2、减少隐式合成</h4><p>虽然隐式合成从根本上来说是为了保证正确的图层重叠顺序，但具体到实际开发中，隐式合成很容易就导致一些无意义的合成层生成，归根结底其实就要求我们在开发时约束自己的布局习惯，避免踩坑。</p>\n<p>比如上边提到的栏目页面，就因为平时开发的不注意造成页面生成了过多的合成层，我在试图查看页面合成层情况的时候，在 PC 上已经能明显感到卡顿了。利用 Chrome Devtools 分析之后不难发现，页面里边存在的一个带动画 transform 的 button 按钮，提升为了合成层，动画交叠的不确定性使得页面内其他 <code>z-index</code> 大于它但其实并没有交叠的节点也都全部提升为了合成层（这个原因真的好坑）。</p>\n<p>这个时候我们只需要把这个动画节点的 <code>z-index</code> 属性值设置得大一些，让层叠顺序高过于页面其他无关节点就行。当然并不是盲目地设置 <code>z-index</code> 就能避免，有时候 <code>z-index</code> 也还是会导致隐式合成，这个时候可以试着调整一下文档中节点的先后顺序直接让后边的节点来覆盖前边的节点，而不用 <code>z-index</code> 来调整重叠关系。方法不是唯一的，具体方式还是得根据不同的页面具体分析。</p>\n<p>改善后的页面效果如下，可以看到相比优化前，我们消除了很多无意义的合成层。</p>\n<p><img src=\"https://img10.360buyimg.com/wq/jfs/t1/49398/34/13004/498267/5d9d5dcaE8ee4f855/2f18491a62374b69.jpg\" alt></p>\n<h4 id=\"3、减小合成层的尺寸\"><a href=\"#3、减小合成层的尺寸\" class=\"headerlink\" title=\"3、减小合成层的尺寸\"></a>3、减小合成层的尺寸</h4><p>举个简单的例子，分别画两个尺寸一样的 div，但实现方式有点差别：一个直接设置尺寸 100x100，另一个设置尺寸 10x10，然后通过 <code>scale</code> 放大 10 倍，并且我们让这两个 div 都提升为合成层：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.bottom</span>, <span class=\"selector-class\">.top</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    will-change: transform;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.bottom</span> &#123;</span></span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    top: 20px;</span><br><span class=\"line\">    left: 20px;</span><br><span class=\"line\">    z-index: 3;</span><br><span class=\"line\">    background: rosybrown;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.top</span> &#123;</span></span><br><span class=\"line\">    width: 10px;</span><br><span class=\"line\">    height: 10px;</span><br><span class=\"line\">    transform: scale(10);</span><br><span class=\"line\">    top: 200px;</span><br><span class=\"line\">    left: 200px;</span><br><span class=\"line\">    z-index: 5;</span><br><span class=\"line\">    background: indianred;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>利用 Chrome Devtools 查看这两个合成层的内存占用后发现，<code>.bottom</code> 内存占用是 39.1 KB，而 <code>.top</code> 是 400 B，差距十分明显。这是因为 <code>.top</code> 是合成层，transform 位于的 Composite 阶段，现在完全在 GPU 上执行。因此对于一些纯色图层来说，我们可以使用 width 和 height 属性减小合成层的物理尺寸，然后再用 <code>transform: scale(…)</code> 放大，这样一来可以极大地减少层合成带来的内存消耗。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://div.io/topic/1348\" target=\"_blank\" rel=\"noopener\">CSS3硬件加速也有坑</a><br><a href=\"https://fed.taobao.org/blog/2016/04/26/performance-composite/\" target=\"_blank\" rel=\"noopener\">无线性能优化：Composite</a><br><a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\" target=\"_blank\" rel=\"noopener\">CSS GPU Animation</a><br><a href=\"https://juejin.im/entry/59dc9aedf265da43200232f9\" target=\"_blank\" rel=\"noopener\">详谈层合成</a></p>\n</blockquote>"},{"title":"Electron 实践笔记","date":"2019-10-11T06:45:38.000Z","cover":"https://tva1.sinaimg.cn/large/006y8mN6gy1g7u9fky1oqj30z40ia406.jpg","thumbnail":"https://tva1.sinaimg.cn/large/006y8mN6gy1g7u9fky1oqj30z40ia406.jpg","_content":"\n> 作者：周全\n\n社交魔方平台是京东的 SNS 活动搭建平台，其内置了很多模板，每一个模板都有一个模板 JSON 用于生成表单，运营同学、商家配置了这个表单后就可以生成活动页面了。\n模板 JSON 是标准的结构化数据，包含名称、类型、控件类型、校验器、默认值等等字段。以往都是采用手写 JSON 的方式，这是非常低效的，而且容易出错。针对其结构化数据的特点可以用 GUI 的方式去编辑，我们基于 [Electron](http://electronjs.org) 参考 [Github Desktop 客户端](https://github.com/desktop/desktop) 的架构编写了一个 [编辑器](http://git.jd.com/zhouquan31_repos/cubic)，通过填写表单的方式生成 JSON。所以在这里记录下这个 Electron 编辑器开发过程中可以记录的点和从 Github Desktop 客户端代码中值得学习的点。\n<!--more-->\n![APP](http://img13.360buyimg.com/jdphoto/jfs/t1/69749/12/12614/548388/5d9f4cebE13fe8229/6b2bb3d8394c8a5b.jpg)\n\n## 一、关于 Electron\n> Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。\n\n上面是来自 Electron 官方的介绍。基于 Electron 平台，我们可以使用熟悉的前端技术栈来开发桌面应用。Electron 运行 package.json 的 main 脚本的进程被称为主进程（以下简称main）。 在主进程中运行的脚本通过创建 web 页面来展示用户界面（以下简称 renderer）。 一个 Electron 应用总是有且只有一个主进程。main 用于创建应用，创建浏览器窗口，它就是一个彻底的 Node 进程，获取不到 DOM, BOM 这些接口。在 main 创建的浏览器窗口中运行的就是 renderer 进程，它既可以获取 DOM, BOM 这些接口，也可以使用 Node 的 API。两类进程之间可以通过 Electron 提供的 IPC 接口通信。\n\n\n## 二、开发环境搭建\n\n我们了解到 Electron 分为两类进程，main 和 renderer。所以搭建开发环境时不能像普通的前端应用一样一个 webpack 配置搞定。并且我们想要实现\n\n1. 一键启动开发环境\n2. 一键打包\n3. 一键发布\n\n那么就需要两个 webpack 配置文件。\n\n一个用于开发环境 -- `webpack.dev.ts`。\n\n```ts\n// webpack.dev.ts\nconst mainConfig = merge({}, base.mainConfig, config, {\n  watch: true\n})\n\nconst rendererConfig = merge({}, base.rendererConfig, config, {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.styl$/,\n        use: ['style-loader', 'css-loader', 'stylus-loader'],\n      }\n    ]\n  },\n  devServer: {\n    contentBase: path.join(__dirname, base.outputDir),\n    port: 8000,\n    hot: true,\n    inline: true,\n    historyApiFallback: true,\n    writeToDisk: true\n  },\n})\n\nmodule.exports = [rendererConfig, mainConfig]\n```\n\n另一个用于生产环境 -- `webpack.prod.ts`。\n\n```ts\nconst config: webpack.Configuration = {\n  mode: 'production',\n  devtool: 'source-map',\n}\n\nconst mainConfig = merge({}, base.mainConfig, config)\n\nconst rendererConfig = merge({}, base.rendererConfig, config, {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n      {\n        test: /\\.styl$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'stylus-loader'],\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({ filename: 'renderer.css' }),\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static',\n      openAnalyzer: false,\n      reportFilename: 'renderer.report.html',\n    }),\n  ],\n})\n\nmodule.exports = [mainConfig, rendererConfig]\n```\n\n这里参考了 Desktop 使用 Typescript 编写 webpack 配置文件。配合 interface 可以实现 webpack 配置文件的编辑器自动补全。具体使用方法可参考 webpack 文档 https://webpack.js.org/configuration/configuration-languages/#typescript\n\n每一个配置文件导出一个数组，分别是 main, renderer 的配置对象。\n\n使用 webpack-dev-server 启动能实现 renderer 的热更新，main 则是使用 webpack 的 watch 模式。\n\n```json\n{\n  \"compile:dev\": \"webpack-dev-server --config scripts/webpack.dev.ts\"\n}\n```\n\n使用 [nodemon](https://nodemon.io) 监听 main 编译后的产物，nodemon 监听到改动则重新运行 `electron .` 重启应用,这样间接实现了 main 的 livereload。\n\n> Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.\n\n```json\n{\n  \"app\": \"electron .\",\n  \"app:watch\": \"nodemon --watch 'dest/main.js' --exec npm run app\",\n}\n```\n\n这样就实现了一键启动开发环境，且能够监听代码变化，重新启动应用。\n\n> Tips: 开源社区有更好的 [electron-webpack](https://github.com/electron-userland/electron-webpack), HMR for both renderer and main processes\n\n生产环境则使用 webpack 顺序编译 main 和 renderer。编译完成后使用 [electron-builder](https://www.electron.build) 打包。这样就实现了一键打包。\n\n由于工具链的缺失实现不了一键发布，就只能打包后手动发布了（后面详细说明）。\n\n下面就是完整的 scripts。\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"run-p -c compile:dev typecheck:watch app:watch\",\n    \"dist\": \"npm run compile:prod && electron-builder build --win --mac\",\n    \"compile:dev\": \"webpack-dev-server --config scripts/webpack.dev.ts\",\n    \"compile:prod\": \"npm run clean && webpack --config scripts/webpack.prod.ts\",\n    \"app\": \"electron .\",\n    \"app:watch\": \"nodemon --watch 'dest/main.js' --exec npm run app\",\n    \"clean\": \"rimraf dest dist\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"typecheck:watch\": \"tsc --noEmit --watch\",\n    \"lint\": \"eslint src --ext .ts,.js --fix\",\n    \"release:patch\": \"standard-version --release-as patch && git push --follow-tags origin master && npm run dist\",\n    \"release:minor\": \"standard-version --release-as minor && git push --follow-tags origin master && npm run dist\",\n    \"release:major\": \"standard-version --release-as major && git push --follow-tags origin master && npm run dist\",\n    \"repush\": \"git push --follow-tags origin master && npm run dist\"\n  },\n}\n```\n\n## 三、目录结构\n\n### 1. 项目目录结构\n\n```sh\nsrc\n├── lib\n│   ├── cube\n│   ├── databases\n│   ├── enviroment\n│   ├── files\n│   ├── local-storage\n│   ├── log\n│   ├── shell\n│   ├── stores\n│   ├── update\n│   ├── validator\n│   └── watcher\n├── main\n│   ├── app-window.ts\n│   ├── event-bus.ts\n│   ├── index.ts\n│   ├── keyboard\n│   └── menu\n├── models\n│   ├── popup.ts\n│   └── project.ts\n└── renderer\n    ├── App.tsx\n    ├── assets\n    ├── components\n    ├── index.html\n    ├── index.tsx\n    ├── pages\n    └── types\n```\n\n在目录结构上模仿了 Desktop。main 目录存放 main 进程相关代码，包括应用入口，窗口创建，菜单，快捷键等等；而 renderer 目录则是整个 UI 渲染层的代码。lib 目录则是一些和 UI 无关也和 main 无强相关的业务逻辑代码。models 则存放一些领域模型。\n\n### 2. CSS 规范\n\n在这个 React 中项目中没有使用 css-modules 这类方案。而是使用 BEM 这类能形成命名空间的规范来实现模块化，这样做的好处是能够比较好的对样式进行覆盖。\n\n在文件的组织方式上采用一个独立的 React 组件搭配一个独立的样式文件，这样在重构的时候，我们想要修改一个组件的样式只需要找到对应的样式文件进行修改即可，提高重构的效率。\n\n```\nstylesheets\n  ├── common.styl\n  ├── components\n  │   ├── editor.styl\n  │   ├── empty-guide.styl\n  │   ├── find-in-page.styl\n  │   ├── reindex.styl\n  │   ├── sidebar.styl\n  │   ├── source-viewer.styl\n  │   └── upload.styl\n  ├── index.styl\n  └── reset.styl\n```\n\n\n## 三、IPC 通信\n\n> 进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。 \n\nElectron 的 main 进程和 renderer 进程的通信是通过 Electron 提供的 `ipcMain` 和 `ipcRenderer` 来实现的。\n\n### 1. main 端\n\n在 main 中向某一个窗口 renderer 发送消息可以使用 `window.webContents.send`。\n在 main 端监听 renderer 消息可以使用 `ipcMain.on`。\n\n```js\n// 在主进程中.\nconst { ipcMain } = require('electron')\nipcMain.on('asynchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\"\n  event.reply('asynchronous-reply', 'pong')\n})\n\nipcMain.on('synchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\"\n  event.returnValue = 'pong'\n})\n```\n\n### 2. renderer 端\n\n回复同步消息可以使用 `event.returnValue`。同步消息的返回值可以直接读取。\n回复异步消息可以使用 `event.reply`。那么在 renderer 就要监听回复的 channel 得到返回值。\n\n```ts\n//在渲染器进程 (网页) 中。\nconst { ipcRenderer } = require('electron')\nconsole.log(ipcRenderer.sendSync('synchronous-message', 'ping')) // prints \"pong\"\n\nipcRenderer.on('asynchronous-reply', (event, arg) => {\n  console.log(arg) // prints \"pong\"\n})\nipcRenderer.send('asynchronous-message', 'ping')\n```\n\n可以看到 renderer 可以使用 `ipcRenderer.send` 向主进程发送异步消息。用 `ipcRenderer.sendSync` 发送同步消息。\n\n## 四、数据持久化及状态管理\n\n### 1. 复杂数据持久化\n\n数据持久化可选的方案有很多，比如 [electron-store](https://github.com/sindresorhus/electron-store#readme)等基于 JSON 文件实现的存储方案。对于更复杂的应用场景还可以使用 [lowdb](https://github.com/typicode/lowdb)，[nedb](https://github.com/louischatriot/nedb) ，`sqlite`等。\n\n最初我使用的是 `electron-store`, 并且一直有一个执念是对磁盘的读写只能在 main 进程进行，renderer 进程只负责渲染界面。所以在最初设计的是在 renderer 进程渲染数据或者更新数据的时候都需要通过 IPC 到 main 进程来完成最终的磁盘读写。除去读写正常的情况，还要考虑读写磁盘的异常，这样导致数据流异常的绕。而且还需要自己维护 ID 的生成。借鉴了 Desktop 的代码后，重构了数据持久化部分，也采用了 [Dexie](https://github.com/dfahlander/Dexie.js)，它是对浏览器标准数据库 indexedDB 的一个封装。从它的 Readme 可以看到它主要解决了indexedDB 的三个问题：\n\n1. 不明确的异常处理\n2. 查询很烂\n3. 代码复杂\n\n\n```ts\nimport Dexie from 'dexie';\n\nexport interface IDatabaseProject {\n  id?: number;\n  name: string;\n  filePath: string;\n}\n\nexport class ProjectsDatabase extends Dexie {\n  public projects: Dexie.Table<IDatabaseProject, number>;\n  constructor() {\n    super('ProjectsDatabase');\n\n    this.version(1).stores({\n      projects: '++id,&name,&filePath',\n    });\n\n    this.projects = this.table('projects');\n  }\n}\n```\n\n继承 Dexie 来实现我们自己的数据库类，在构造函数中声明数据库的版本，表的 schema 等等。具体可以参考 [Dexie 官方文档](https://dexie.org/docs/)。\n\n\n### 2. 简单数据持久化\n\n一些 UI 状态的标志位存储（比如某个弹窗是否显示过），我们一般会把这种标志位存储到 `localStorage` 中。\n在查看 Desktop 的源码过程中，发现他们对 `number`, `boolean` 类型的数据的 get, set 进行了简单的封装。使用起来非常方便，这里贴一下对于 `boolean` 型数据的处理。\n\n```typescript\nexport function getBoolean(key: string): boolean | undefined\nexport function getBoolean(key: string, defaultValue: boolean): boolean\nexport function getBoolean(\n  key: string,\n  defaultValue?: boolean\n): boolean | undefined {\n  const value = localStorage.getItem(key)\n  if (value === null) {\n    return defaultValue\n  }\n\n  if (value === '1' || value === 'true') {\n    return true\n  }\n\n  if (value === '0' || value === 'false') {\n    return false\n  }\n\n  return defaultValue\n}\n\nexport function setBoolean(key: string, value: boolean) {\n  localStorage.setItem(key, value ? '1' : '0')\n}\n```\n\n[源码详见](https://github.com/desktop/desktop/blob/development/app/src/lib/local-storage.ts)\n\n\n\n## 五、功能实现\n\n### 1. 磁盘/编辑器版本实时同步\n\n一般情况下，在编辑器中我们编辑的内容其实是编辑器读取磁盘文件到内存中的副本。所以说如果磁盘的文件发生了改动，比如 Git 切换分支造成文件变动，抑或是删除了磁盘文件，重命名等等都会造成内存版本和磁盘版本的不一致，即磁盘版本领先于内存版本，这个时候就可能产生冲突。解决这个问题很简单，可以使用 fs.watch/watchFile 监听当前编辑的文件，一旦发生变化，就重新读取磁盘版本，更新内存版本来实现同步。但是 fs.watch 这个 API 在工程上不是可以开箱即用的，有许多兼容问题和一些 bug。比如说\n\nNode.js fs.watch:\n\n- Doesn't report filenames on MacOS.\n- Doesn't report events at all when using editors like Sublime on MacOS.\n- Often reports events twice.\n- Emits most changes as rename.\n- Does not provide an easy way to recursively watch file trees.\n\nNode.js fs.watchFile:\n\n- Almost as bad at event handling.\n- Also does not provide any recursive watching.\n- Results in high CPU utilization.\n\n上面列举的点来自 [chokidar](https://github.com/paulmillr/chokidar)，它是一个 Node 模块，提供了开箱可用的监听文件变化的能力。只需要监听 `add`, `unlink`, `change` 等事件读取最新版本的文本到编辑器就可以实现磁盘/编辑器版本的同步了。\n\n\n### 2. Context-Menu\n\nDesktop 的 `contextmenu` (右键菜单)的实现基于原生 IPC 的，比较绕。\n\n首先我们需要知道的是 `Menu` 类是 `main process only` 的。\n\n在需要 `contextmenu` 的 `JSX.Element` 上绑定 `onContextMenu` 事件。构造对象数组 `Array<MenuItem>`, 并且为每个 MenuItem 对象绑定触发事件，再通过 IPC 将对象传递至 main 进程，值得一提的是这个时候将 MenuItem 数组赋值给了一个全局对象，暂存起来。在 main 进程构造出真正的 MenuItem 实例，绑定 MenuItem 的点击事件，触发 MenuItem 点击事件的时候记录 MenuItem 的 序列号 index，再将 index 通过 event.sender.send 将 index 传递到 renderer 进程。renderer 进程拿到 index 之后根据之前保存的全局对象取出单个 MenuItem， 执行绑定的事件。\n\n```\nonContextMenu => showContextualMenu (暂存MenuItems，ipcRenderer.send) => icpMain => menu.popup() => MenuItem.onClick(index) => event.sernder.send(index) => MenuItem.action()\n```\n\n所以在我的应用中使用了 remote 对象屏蔽上述复杂的 IPC 通信。在 renderer 进程完成 Menu 的构造展示和事件的绑定触发。\n\n```ts\nimport { remote } from 'electron';\nconst { MenuItem, dialog, getCurrentWindow, Menu } = remote;\n\nconst onContextMenu = (project: Project) => {\n  const menu = new Menu();\n\n  const menus = [\n    new MenuItem({\n      label: '在终端中打开',\n      visible: __DARWIN__,\n      click() {\n        const accessor = new FileAccessor(project.filePath);\n        accessor.openInTerminal();\n      },\n    }),\n    new MenuItem({\n      label: '在 vscode 中打开',\n      click() {\n        const accessor = new FileAccessor(project.filePath);\n        accessor.openInVscode();\n      },\n    }),\n  ];\n\n  menus.forEach(menu.append);\n  menu.popup({ window: getCurrentWindow() });\n};\n```\n\n## 六、日志\n\n完善的日志不论是开发环境还是生产环境都是非常重要的，大致记录 UI 状态迁移背后的数据变动，流程的分支走向，能很好的辅助开发。\n\n参考 Desktop，他们的日志基于日志库：[winston](https://github.com/winstonjs/winston#readme)。\n\n在 main 进程和 renderer 进程都提供了全局 log 对象，接口都是一致的。分别是 `debug`, `info`, `warn`, `error`。在 renderer 进程，简单的封装了 `window.console` 对象上的 `debug`, `info`, `warn`, `error` 方法，日志打印到浏览器控制台的时候也通过 IPC 传递到 main 进程，由 main 进程统一管理。 \n\nmain 进程接收了来自 renderer 进程的日志信息和 main 进程自身的日志信息。设置了两个 `transports`。`winston.transports.Console` 和 `winston.transports.DailyRotateFile` 分别用于将日志信息打印在终端控制台和存储在磁盘文件。DailyRotateFile 以天为单位，设置了最多存储 14 天的上限。\n\n在 main 进程和 renderer 进程启动时分别引入日志安装模块。因为 log 方法都是暴露在全局，因此只需要在进程启动时引入一次即可。同时在 TS 环境中还需要添加 log 方法的类型声明。\n\n\n## 七、打包，发布及更新\n\n开源世界已经有非常完善的打包和发布的工具 -- [electron-builder](https://www.electron.build)。它集多平台打包，签名，自动更新，发布到Github等平台等等功能于一身。\n\n鉴于这个工具只能在内网使用，不能发布到 Github 而且也没有没有苹果开发者工具无法进行签名，只能利用 `electron-builder` 在本机打包，发布的话只能使用手动打包上传了，用户也只能手动下载安装包覆盖安装，不能像 VSCODE 这样实现自动更新。\n\n既然不能自动更新，那么新版本下发后，如何通知到用户去下载新版本安装包更新呢？\n从用户这一端来看，在应用每次启动的时候可以做一次请求，查询是否有版本更新，或者是在应用菜单栏提供入口，让用户手动触发更新查询。查询到服务端的最新版本后，使用 [sermver](https://www.npmjs.com/package/semver) 比较本机版本是否低于服务器版本，如果是就下发通知给用户，提示用户去下载更新。\n\n在有限的条件下怎么实现这个功能呢？\n\n实现这个功能必需的三个元素：服务端标识着最新版本的可读文件；托管各个版本安装包的云空间；应用代码中的更新逻辑。\n\n服务端标识着最新版本的可读文件：每次打包时都会更新 `package.json`，所以我们直接把 `package.json` 上传到某个不带鉴权的 CDN 就可以，更新的时候就请求这个文件。\n\n托管各个版本安装包的云空间：这个可以使用云盘，云盘可以生成分享链接，把这个链接手动拷贝到 Gitlab 该版本的 tag 的 Notes 中。\n\n应用代码中的更新逻辑：\n\n```ts\nimport got from 'got';\nimport semver from 'semver';\nimport { app, remote, BrowserWindow } from 'electron';\n\nconst realApp = app || remote.app;\nconst currentVersion = realApp.getVersion();\n\nexport async function checkForUpdates(window: BrowserWindow, silent: boolean = false) {\n  const url = `http://yourcdn/package.json?t=${Date.now()}`;\n  try {\n    const response = await got(url);\n    const pkg = JSON.parse(response.body);\n    log.debug('检查更新，云端版本：', pkg.version);\n    log.debug('当前版本', currentVersion);\n    if (semver.lt(currentVersion, pkg.version)) {\n      window.webContents.send('update-available', pkg.version);\n    } else {\n      window.webContents.send('update-not-available', silent);\n    }\n  } catch (error) {\n    window.webContents.send('update-error', silent);\n  }\n}\n\n```\n\n分别在应用主进程启动、用户点击应用菜单`检查更新`时调用这个方法，从而通知 UI 进程下发通知。我们期望应用主进程启动时的更新是在失败或者无更新时是静默的，不用打扰用户，所以在 IPC 管道可以提供一个 `silent` 参数。检测到更新后就可以通知用户，用户点击更新后就可以跳转到最新版本的 Gitlab tags ，引导用户下载最新版本进行手动安装。\n\n\n## 八、其他\n\n### 1. devtools\n\n开发 Electron 应用中 renderer 端也是使用 Chrome devtools 来调试的。对于 React, Mobx 这类框的 devtools 扩展也可以通过 `electron-devtools-installer` 来安装。应用窗口创建之后调用`electron-devtools-installer` 进行 `mobx`、`react` 等扩展的安装。\n\n```ts\nconst { default: installExtension, MOBX_DEVTOOLS, REACT_DEVELOPER_TOOLS } = require('electron-devtools-installer');\nconst extensions = [REACT_DEVELOPER_TOOLS, MOBX_DEVTOOLS];\nfor (const extension of extensions) {\n  try {\n    installExtension(extension);\n  } catch (e) {\n    // log.error(e);\n  }\n}\n```\n\n### 2. 保持窗口大小\n\n对于桌面应用，一个常见的需求就是关闭后重新打开，需要恢复到上次打开时的窗口大小，位置。实现这个比较简单，监听窗口的 resize 事件，把窗口信息记录到当前用户的应用数据文件夹, 即 `app.getPath(appData)`。下次启动应用创建窗口时读取这个文件设置窗口信息即可。开源社区已经有对这个功能封装好的库：[electron-window-state](https://github.com/mawie81/electron-window-state#readme)\n\n\n```js\nconst windowStateKeeper = require('electron-window-state');\nlet win;\n\napp.on('ready', function () {\n  let mainWindowState = windowStateKeeper({\n    defaultWidth: 1000,\n    defaultHeight: 800\n  });\n\n  win = new BrowserWindow({\n    'x': mainWindowState.x,\n    'y': mainWindowState.y,\n    'width': mainWindowState.width,\n    'height': mainWindowState.height\n  });\n\n  mainWindowState.manage(win);\n});\n```\n\n只需要提供缺省窗口大小，剩余的事情 `electron-window-state` 都帮我们搞定了。","source":"_posts/2019-10/Electron-实践笔记.md","raw":"---\ntitle: Electron 实践笔记\ndate: 2019-10-11 14:45:38\ncover: https://tva1.sinaimg.cn/large/006y8mN6gy1g7u9fky1oqj30z40ia406.jpg\nthumbnail: https://tva1.sinaimg.cn/large/006y8mN6gy1g7u9fky1oqj30z40ia406.jpg\ntags:\n\t- Electron\n\t- 桌面开发\ncategories: Node.js\n---\n\n> 作者：周全\n\n社交魔方平台是京东的 SNS 活动搭建平台，其内置了很多模板，每一个模板都有一个模板 JSON 用于生成表单，运营同学、商家配置了这个表单后就可以生成活动页面了。\n模板 JSON 是标准的结构化数据，包含名称、类型、控件类型、校验器、默认值等等字段。以往都是采用手写 JSON 的方式，这是非常低效的，而且容易出错。针对其结构化数据的特点可以用 GUI 的方式去编辑，我们基于 [Electron](http://electronjs.org) 参考 [Github Desktop 客户端](https://github.com/desktop/desktop) 的架构编写了一个 [编辑器](http://git.jd.com/zhouquan31_repos/cubic)，通过填写表单的方式生成 JSON。所以在这里记录下这个 Electron 编辑器开发过程中可以记录的点和从 Github Desktop 客户端代码中值得学习的点。\n<!--more-->\n![APP](http://img13.360buyimg.com/jdphoto/jfs/t1/69749/12/12614/548388/5d9f4cebE13fe8229/6b2bb3d8394c8a5b.jpg)\n\n## 一、关于 Electron\n> Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。\n\n上面是来自 Electron 官方的介绍。基于 Electron 平台，我们可以使用熟悉的前端技术栈来开发桌面应用。Electron 运行 package.json 的 main 脚本的进程被称为主进程（以下简称main）。 在主进程中运行的脚本通过创建 web 页面来展示用户界面（以下简称 renderer）。 一个 Electron 应用总是有且只有一个主进程。main 用于创建应用，创建浏览器窗口，它就是一个彻底的 Node 进程，获取不到 DOM, BOM 这些接口。在 main 创建的浏览器窗口中运行的就是 renderer 进程，它既可以获取 DOM, BOM 这些接口，也可以使用 Node 的 API。两类进程之间可以通过 Electron 提供的 IPC 接口通信。\n\n\n## 二、开发环境搭建\n\n我们了解到 Electron 分为两类进程，main 和 renderer。所以搭建开发环境时不能像普通的前端应用一样一个 webpack 配置搞定。并且我们想要实现\n\n1. 一键启动开发环境\n2. 一键打包\n3. 一键发布\n\n那么就需要两个 webpack 配置文件。\n\n一个用于开发环境 -- `webpack.dev.ts`。\n\n```ts\n// webpack.dev.ts\nconst mainConfig = merge({}, base.mainConfig, config, {\n  watch: true\n})\n\nconst rendererConfig = merge({}, base.rendererConfig, config, {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.styl$/,\n        use: ['style-loader', 'css-loader', 'stylus-loader'],\n      }\n    ]\n  },\n  devServer: {\n    contentBase: path.join(__dirname, base.outputDir),\n    port: 8000,\n    hot: true,\n    inline: true,\n    historyApiFallback: true,\n    writeToDisk: true\n  },\n})\n\nmodule.exports = [rendererConfig, mainConfig]\n```\n\n另一个用于生产环境 -- `webpack.prod.ts`。\n\n```ts\nconst config: webpack.Configuration = {\n  mode: 'production',\n  devtool: 'source-map',\n}\n\nconst mainConfig = merge({}, base.mainConfig, config)\n\nconst rendererConfig = merge({}, base.rendererConfig, config, {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n      {\n        test: /\\.styl$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'stylus-loader'],\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({ filename: 'renderer.css' }),\n    new BundleAnalyzerPlugin({\n      analyzerMode: 'static',\n      openAnalyzer: false,\n      reportFilename: 'renderer.report.html',\n    }),\n  ],\n})\n\nmodule.exports = [mainConfig, rendererConfig]\n```\n\n这里参考了 Desktop 使用 Typescript 编写 webpack 配置文件。配合 interface 可以实现 webpack 配置文件的编辑器自动补全。具体使用方法可参考 webpack 文档 https://webpack.js.org/configuration/configuration-languages/#typescript\n\n每一个配置文件导出一个数组，分别是 main, renderer 的配置对象。\n\n使用 webpack-dev-server 启动能实现 renderer 的热更新，main 则是使用 webpack 的 watch 模式。\n\n```json\n{\n  \"compile:dev\": \"webpack-dev-server --config scripts/webpack.dev.ts\"\n}\n```\n\n使用 [nodemon](https://nodemon.io) 监听 main 编译后的产物，nodemon 监听到改动则重新运行 `electron .` 重启应用,这样间接实现了 main 的 livereload。\n\n> Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.\n\n```json\n{\n  \"app\": \"electron .\",\n  \"app:watch\": \"nodemon --watch 'dest/main.js' --exec npm run app\",\n}\n```\n\n这样就实现了一键启动开发环境，且能够监听代码变化，重新启动应用。\n\n> Tips: 开源社区有更好的 [electron-webpack](https://github.com/electron-userland/electron-webpack), HMR for both renderer and main processes\n\n生产环境则使用 webpack 顺序编译 main 和 renderer。编译完成后使用 [electron-builder](https://www.electron.build) 打包。这样就实现了一键打包。\n\n由于工具链的缺失实现不了一键发布，就只能打包后手动发布了（后面详细说明）。\n\n下面就是完整的 scripts。\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"run-p -c compile:dev typecheck:watch app:watch\",\n    \"dist\": \"npm run compile:prod && electron-builder build --win --mac\",\n    \"compile:dev\": \"webpack-dev-server --config scripts/webpack.dev.ts\",\n    \"compile:prod\": \"npm run clean && webpack --config scripts/webpack.prod.ts\",\n    \"app\": \"electron .\",\n    \"app:watch\": \"nodemon --watch 'dest/main.js' --exec npm run app\",\n    \"clean\": \"rimraf dest dist\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"typecheck:watch\": \"tsc --noEmit --watch\",\n    \"lint\": \"eslint src --ext .ts,.js --fix\",\n    \"release:patch\": \"standard-version --release-as patch && git push --follow-tags origin master && npm run dist\",\n    \"release:minor\": \"standard-version --release-as minor && git push --follow-tags origin master && npm run dist\",\n    \"release:major\": \"standard-version --release-as major && git push --follow-tags origin master && npm run dist\",\n    \"repush\": \"git push --follow-tags origin master && npm run dist\"\n  },\n}\n```\n\n## 三、目录结构\n\n### 1. 项目目录结构\n\n```sh\nsrc\n├── lib\n│   ├── cube\n│   ├── databases\n│   ├── enviroment\n│   ├── files\n│   ├── local-storage\n│   ├── log\n│   ├── shell\n│   ├── stores\n│   ├── update\n│   ├── validator\n│   └── watcher\n├── main\n│   ├── app-window.ts\n│   ├── event-bus.ts\n│   ├── index.ts\n│   ├── keyboard\n│   └── menu\n├── models\n│   ├── popup.ts\n│   └── project.ts\n└── renderer\n    ├── App.tsx\n    ├── assets\n    ├── components\n    ├── index.html\n    ├── index.tsx\n    ├── pages\n    └── types\n```\n\n在目录结构上模仿了 Desktop。main 目录存放 main 进程相关代码，包括应用入口，窗口创建，菜单，快捷键等等；而 renderer 目录则是整个 UI 渲染层的代码。lib 目录则是一些和 UI 无关也和 main 无强相关的业务逻辑代码。models 则存放一些领域模型。\n\n### 2. CSS 规范\n\n在这个 React 中项目中没有使用 css-modules 这类方案。而是使用 BEM 这类能形成命名空间的规范来实现模块化，这样做的好处是能够比较好的对样式进行覆盖。\n\n在文件的组织方式上采用一个独立的 React 组件搭配一个独立的样式文件，这样在重构的时候，我们想要修改一个组件的样式只需要找到对应的样式文件进行修改即可，提高重构的效率。\n\n```\nstylesheets\n  ├── common.styl\n  ├── components\n  │   ├── editor.styl\n  │   ├── empty-guide.styl\n  │   ├── find-in-page.styl\n  │   ├── reindex.styl\n  │   ├── sidebar.styl\n  │   ├── source-viewer.styl\n  │   └── upload.styl\n  ├── index.styl\n  └── reset.styl\n```\n\n\n## 三、IPC 通信\n\n> 进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。 \n\nElectron 的 main 进程和 renderer 进程的通信是通过 Electron 提供的 `ipcMain` 和 `ipcRenderer` 来实现的。\n\n### 1. main 端\n\n在 main 中向某一个窗口 renderer 发送消息可以使用 `window.webContents.send`。\n在 main 端监听 renderer 消息可以使用 `ipcMain.on`。\n\n```js\n// 在主进程中.\nconst { ipcMain } = require('electron')\nipcMain.on('asynchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\"\n  event.reply('asynchronous-reply', 'pong')\n})\n\nipcMain.on('synchronous-message', (event, arg) => {\n  console.log(arg) // prints \"ping\"\n  event.returnValue = 'pong'\n})\n```\n\n### 2. renderer 端\n\n回复同步消息可以使用 `event.returnValue`。同步消息的返回值可以直接读取。\n回复异步消息可以使用 `event.reply`。那么在 renderer 就要监听回复的 channel 得到返回值。\n\n```ts\n//在渲染器进程 (网页) 中。\nconst { ipcRenderer } = require('electron')\nconsole.log(ipcRenderer.sendSync('synchronous-message', 'ping')) // prints \"pong\"\n\nipcRenderer.on('asynchronous-reply', (event, arg) => {\n  console.log(arg) // prints \"pong\"\n})\nipcRenderer.send('asynchronous-message', 'ping')\n```\n\n可以看到 renderer 可以使用 `ipcRenderer.send` 向主进程发送异步消息。用 `ipcRenderer.sendSync` 发送同步消息。\n\n## 四、数据持久化及状态管理\n\n### 1. 复杂数据持久化\n\n数据持久化可选的方案有很多，比如 [electron-store](https://github.com/sindresorhus/electron-store#readme)等基于 JSON 文件实现的存储方案。对于更复杂的应用场景还可以使用 [lowdb](https://github.com/typicode/lowdb)，[nedb](https://github.com/louischatriot/nedb) ，`sqlite`等。\n\n最初我使用的是 `electron-store`, 并且一直有一个执念是对磁盘的读写只能在 main 进程进行，renderer 进程只负责渲染界面。所以在最初设计的是在 renderer 进程渲染数据或者更新数据的时候都需要通过 IPC 到 main 进程来完成最终的磁盘读写。除去读写正常的情况，还要考虑读写磁盘的异常，这样导致数据流异常的绕。而且还需要自己维护 ID 的生成。借鉴了 Desktop 的代码后，重构了数据持久化部分，也采用了 [Dexie](https://github.com/dfahlander/Dexie.js)，它是对浏览器标准数据库 indexedDB 的一个封装。从它的 Readme 可以看到它主要解决了indexedDB 的三个问题：\n\n1. 不明确的异常处理\n2. 查询很烂\n3. 代码复杂\n\n\n```ts\nimport Dexie from 'dexie';\n\nexport interface IDatabaseProject {\n  id?: number;\n  name: string;\n  filePath: string;\n}\n\nexport class ProjectsDatabase extends Dexie {\n  public projects: Dexie.Table<IDatabaseProject, number>;\n  constructor() {\n    super('ProjectsDatabase');\n\n    this.version(1).stores({\n      projects: '++id,&name,&filePath',\n    });\n\n    this.projects = this.table('projects');\n  }\n}\n```\n\n继承 Dexie 来实现我们自己的数据库类，在构造函数中声明数据库的版本，表的 schema 等等。具体可以参考 [Dexie 官方文档](https://dexie.org/docs/)。\n\n\n### 2. 简单数据持久化\n\n一些 UI 状态的标志位存储（比如某个弹窗是否显示过），我们一般会把这种标志位存储到 `localStorage` 中。\n在查看 Desktop 的源码过程中，发现他们对 `number`, `boolean` 类型的数据的 get, set 进行了简单的封装。使用起来非常方便，这里贴一下对于 `boolean` 型数据的处理。\n\n```typescript\nexport function getBoolean(key: string): boolean | undefined\nexport function getBoolean(key: string, defaultValue: boolean): boolean\nexport function getBoolean(\n  key: string,\n  defaultValue?: boolean\n): boolean | undefined {\n  const value = localStorage.getItem(key)\n  if (value === null) {\n    return defaultValue\n  }\n\n  if (value === '1' || value === 'true') {\n    return true\n  }\n\n  if (value === '0' || value === 'false') {\n    return false\n  }\n\n  return defaultValue\n}\n\nexport function setBoolean(key: string, value: boolean) {\n  localStorage.setItem(key, value ? '1' : '0')\n}\n```\n\n[源码详见](https://github.com/desktop/desktop/blob/development/app/src/lib/local-storage.ts)\n\n\n\n## 五、功能实现\n\n### 1. 磁盘/编辑器版本实时同步\n\n一般情况下，在编辑器中我们编辑的内容其实是编辑器读取磁盘文件到内存中的副本。所以说如果磁盘的文件发生了改动，比如 Git 切换分支造成文件变动，抑或是删除了磁盘文件，重命名等等都会造成内存版本和磁盘版本的不一致，即磁盘版本领先于内存版本，这个时候就可能产生冲突。解决这个问题很简单，可以使用 fs.watch/watchFile 监听当前编辑的文件，一旦发生变化，就重新读取磁盘版本，更新内存版本来实现同步。但是 fs.watch 这个 API 在工程上不是可以开箱即用的，有许多兼容问题和一些 bug。比如说\n\nNode.js fs.watch:\n\n- Doesn't report filenames on MacOS.\n- Doesn't report events at all when using editors like Sublime on MacOS.\n- Often reports events twice.\n- Emits most changes as rename.\n- Does not provide an easy way to recursively watch file trees.\n\nNode.js fs.watchFile:\n\n- Almost as bad at event handling.\n- Also does not provide any recursive watching.\n- Results in high CPU utilization.\n\n上面列举的点来自 [chokidar](https://github.com/paulmillr/chokidar)，它是一个 Node 模块，提供了开箱可用的监听文件变化的能力。只需要监听 `add`, `unlink`, `change` 等事件读取最新版本的文本到编辑器就可以实现磁盘/编辑器版本的同步了。\n\n\n### 2. Context-Menu\n\nDesktop 的 `contextmenu` (右键菜单)的实现基于原生 IPC 的，比较绕。\n\n首先我们需要知道的是 `Menu` 类是 `main process only` 的。\n\n在需要 `contextmenu` 的 `JSX.Element` 上绑定 `onContextMenu` 事件。构造对象数组 `Array<MenuItem>`, 并且为每个 MenuItem 对象绑定触发事件，再通过 IPC 将对象传递至 main 进程，值得一提的是这个时候将 MenuItem 数组赋值给了一个全局对象，暂存起来。在 main 进程构造出真正的 MenuItem 实例，绑定 MenuItem 的点击事件，触发 MenuItem 点击事件的时候记录 MenuItem 的 序列号 index，再将 index 通过 event.sender.send 将 index 传递到 renderer 进程。renderer 进程拿到 index 之后根据之前保存的全局对象取出单个 MenuItem， 执行绑定的事件。\n\n```\nonContextMenu => showContextualMenu (暂存MenuItems，ipcRenderer.send) => icpMain => menu.popup() => MenuItem.onClick(index) => event.sernder.send(index) => MenuItem.action()\n```\n\n所以在我的应用中使用了 remote 对象屏蔽上述复杂的 IPC 通信。在 renderer 进程完成 Menu 的构造展示和事件的绑定触发。\n\n```ts\nimport { remote } from 'electron';\nconst { MenuItem, dialog, getCurrentWindow, Menu } = remote;\n\nconst onContextMenu = (project: Project) => {\n  const menu = new Menu();\n\n  const menus = [\n    new MenuItem({\n      label: '在终端中打开',\n      visible: __DARWIN__,\n      click() {\n        const accessor = new FileAccessor(project.filePath);\n        accessor.openInTerminal();\n      },\n    }),\n    new MenuItem({\n      label: '在 vscode 中打开',\n      click() {\n        const accessor = new FileAccessor(project.filePath);\n        accessor.openInVscode();\n      },\n    }),\n  ];\n\n  menus.forEach(menu.append);\n  menu.popup({ window: getCurrentWindow() });\n};\n```\n\n## 六、日志\n\n完善的日志不论是开发环境还是生产环境都是非常重要的，大致记录 UI 状态迁移背后的数据变动，流程的分支走向，能很好的辅助开发。\n\n参考 Desktop，他们的日志基于日志库：[winston](https://github.com/winstonjs/winston#readme)。\n\n在 main 进程和 renderer 进程都提供了全局 log 对象，接口都是一致的。分别是 `debug`, `info`, `warn`, `error`。在 renderer 进程，简单的封装了 `window.console` 对象上的 `debug`, `info`, `warn`, `error` 方法，日志打印到浏览器控制台的时候也通过 IPC 传递到 main 进程，由 main 进程统一管理。 \n\nmain 进程接收了来自 renderer 进程的日志信息和 main 进程自身的日志信息。设置了两个 `transports`。`winston.transports.Console` 和 `winston.transports.DailyRotateFile` 分别用于将日志信息打印在终端控制台和存储在磁盘文件。DailyRotateFile 以天为单位，设置了最多存储 14 天的上限。\n\n在 main 进程和 renderer 进程启动时分别引入日志安装模块。因为 log 方法都是暴露在全局，因此只需要在进程启动时引入一次即可。同时在 TS 环境中还需要添加 log 方法的类型声明。\n\n\n## 七、打包，发布及更新\n\n开源世界已经有非常完善的打包和发布的工具 -- [electron-builder](https://www.electron.build)。它集多平台打包，签名，自动更新，发布到Github等平台等等功能于一身。\n\n鉴于这个工具只能在内网使用，不能发布到 Github 而且也没有没有苹果开发者工具无法进行签名，只能利用 `electron-builder` 在本机打包，发布的话只能使用手动打包上传了，用户也只能手动下载安装包覆盖安装，不能像 VSCODE 这样实现自动更新。\n\n既然不能自动更新，那么新版本下发后，如何通知到用户去下载新版本安装包更新呢？\n从用户这一端来看，在应用每次启动的时候可以做一次请求，查询是否有版本更新，或者是在应用菜单栏提供入口，让用户手动触发更新查询。查询到服务端的最新版本后，使用 [sermver](https://www.npmjs.com/package/semver) 比较本机版本是否低于服务器版本，如果是就下发通知给用户，提示用户去下载更新。\n\n在有限的条件下怎么实现这个功能呢？\n\n实现这个功能必需的三个元素：服务端标识着最新版本的可读文件；托管各个版本安装包的云空间；应用代码中的更新逻辑。\n\n服务端标识着最新版本的可读文件：每次打包时都会更新 `package.json`，所以我们直接把 `package.json` 上传到某个不带鉴权的 CDN 就可以，更新的时候就请求这个文件。\n\n托管各个版本安装包的云空间：这个可以使用云盘，云盘可以生成分享链接，把这个链接手动拷贝到 Gitlab 该版本的 tag 的 Notes 中。\n\n应用代码中的更新逻辑：\n\n```ts\nimport got from 'got';\nimport semver from 'semver';\nimport { app, remote, BrowserWindow } from 'electron';\n\nconst realApp = app || remote.app;\nconst currentVersion = realApp.getVersion();\n\nexport async function checkForUpdates(window: BrowserWindow, silent: boolean = false) {\n  const url = `http://yourcdn/package.json?t=${Date.now()}`;\n  try {\n    const response = await got(url);\n    const pkg = JSON.parse(response.body);\n    log.debug('检查更新，云端版本：', pkg.version);\n    log.debug('当前版本', currentVersion);\n    if (semver.lt(currentVersion, pkg.version)) {\n      window.webContents.send('update-available', pkg.version);\n    } else {\n      window.webContents.send('update-not-available', silent);\n    }\n  } catch (error) {\n    window.webContents.send('update-error', silent);\n  }\n}\n\n```\n\n分别在应用主进程启动、用户点击应用菜单`检查更新`时调用这个方法，从而通知 UI 进程下发通知。我们期望应用主进程启动时的更新是在失败或者无更新时是静默的，不用打扰用户，所以在 IPC 管道可以提供一个 `silent` 参数。检测到更新后就可以通知用户，用户点击更新后就可以跳转到最新版本的 Gitlab tags ，引导用户下载最新版本进行手动安装。\n\n\n## 八、其他\n\n### 1. devtools\n\n开发 Electron 应用中 renderer 端也是使用 Chrome devtools 来调试的。对于 React, Mobx 这类框的 devtools 扩展也可以通过 `electron-devtools-installer` 来安装。应用窗口创建之后调用`electron-devtools-installer` 进行 `mobx`、`react` 等扩展的安装。\n\n```ts\nconst { default: installExtension, MOBX_DEVTOOLS, REACT_DEVELOPER_TOOLS } = require('electron-devtools-installer');\nconst extensions = [REACT_DEVELOPER_TOOLS, MOBX_DEVTOOLS];\nfor (const extension of extensions) {\n  try {\n    installExtension(extension);\n  } catch (e) {\n    // log.error(e);\n  }\n}\n```\n\n### 2. 保持窗口大小\n\n对于桌面应用，一个常见的需求就是关闭后重新打开，需要恢复到上次打开时的窗口大小，位置。实现这个比较简单，监听窗口的 resize 事件，把窗口信息记录到当前用户的应用数据文件夹, 即 `app.getPath(appData)`。下次启动应用创建窗口时读取这个文件设置窗口信息即可。开源社区已经有对这个功能封装好的库：[electron-window-state](https://github.com/mawie81/electron-window-state#readme)\n\n\n```js\nconst windowStateKeeper = require('electron-window-state');\nlet win;\n\napp.on('ready', function () {\n  let mainWindowState = windowStateKeeper({\n    defaultWidth: 1000,\n    defaultHeight: 800\n  });\n\n  win = new BrowserWindow({\n    'x': mainWindowState.x,\n    'y': mainWindowState.y,\n    'width': mainWindowState.width,\n    'height': mainWindowState.height\n  });\n\n  mainWindowState.manage(win);\n});\n```\n\n只需要提供缺省窗口大小，剩余的事情 `electron-window-state` 都帮我们搞定了。","slug":"Electron-实践笔记","published":1,"updated":"2019-11-20T05:13:20.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflrf001vsoyx69uvsanv","content":"<blockquote>\n<p>作者：周全</p>\n</blockquote>\n<p>社交魔方平台是京东的 SNS 活动搭建平台，其内置了很多模板，每一个模板都有一个模板 JSON 用于生成表单，运营同学、商家配置了这个表单后就可以生成活动页面了。<br>模板 JSON 是标准的结构化数据，包含名称、类型、控件类型、校验器、默认值等等字段。以往都是采用手写 JSON 的方式，这是非常低效的，而且容易出错。针对其结构化数据的特点可以用 GUI 的方式去编辑，我们基于 <a href=\"http://electronjs.org\" target=\"_blank\" rel=\"noopener\">Electron</a> 参考 <a href=\"https://github.com/desktop/desktop\" target=\"_blank\" rel=\"noopener\">Github Desktop 客户端</a> 的架构编写了一个 <a href=\"http://git.jd.com/zhouquan31_repos/cubic\" target=\"_blank\" rel=\"noopener\">编辑器</a>，通过填写表单的方式生成 JSON。所以在这里记录下这个 Electron 编辑器开发过程中可以记录的点和从 Github Desktop 客户端代码中值得学习的点。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://img13.360buyimg.com/jdphoto/jfs/t1/69749/12/12614/548388/5d9f4cebE13fe8229/6b2bb3d8394c8a5b.jpg\" alt=\"APP\"></p>\n<h2 id=\"一、关于-Electron\"><a href=\"#一、关于-Electron\" class=\"headerlink\" title=\"一、关于 Electron\"></a>一、关于 Electron</h2><blockquote>\n<p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p>\n</blockquote>\n<p>上面是来自 Electron 官方的介绍。基于 Electron 平台，我们可以使用熟悉的前端技术栈来开发桌面应用。Electron 运行 package.json 的 main 脚本的进程被称为主进程（以下简称main）。 在主进程中运行的脚本通过创建 web 页面来展示用户界面（以下简称 renderer）。 一个 Electron 应用总是有且只有一个主进程。main 用于创建应用，创建浏览器窗口，它就是一个彻底的 Node 进程，获取不到 DOM, BOM 这些接口。在 main 创建的浏览器窗口中运行的就是 renderer 进程，它既可以获取 DOM, BOM 这些接口，也可以使用 Node 的 API。两类进程之间可以通过 Electron 提供的 IPC 接口通信。</p>\n<h2 id=\"二、开发环境搭建\"><a href=\"#二、开发环境搭建\" class=\"headerlink\" title=\"二、开发环境搭建\"></a>二、开发环境搭建</h2><p>我们了解到 Electron 分为两类进程，main 和 renderer。所以搭建开发环境时不能像普通的前端应用一样一个 webpack 配置搞定。并且我们想要实现</p>\n<ol>\n<li>一键启动开发环境</li>\n<li>一键打包</li>\n<li>一键发布</li>\n</ol>\n<p>那么就需要两个 webpack 配置文件。</p>\n<p>一个用于开发环境 – <code>webpack.dev.ts</code>。</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// webpack.dev.ts</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> mainConfig = merge(&#123;&#125;, base.mainConfig, config, &#123;</span><br><span class=\"line\">  watch: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> rendererConfig = merge(&#123;&#125;, base.rendererConfig, config, &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"hljs-string\">'style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        use: [<span class=\"hljs-string\">'style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>, <span class=\"hljs-string\">'stylus-loader'</span>],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: path.join(__dirname, base.outputDir),</span><br><span class=\"line\">    port: <span class=\"hljs-number\">8000</span>,</span><br><span class=\"line\">    hot: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    inline: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    writeToDisk: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = [rendererConfig, mainConfig]</span><br></pre></td></tr></table></figure>\n\n<p>另一个用于生产环境 – <code>webpack.prod.ts</code>。</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> config: webpack.Configuration = &#123;</span><br><span class=\"line\">  mode: <span class=\"hljs-string\">'production'</span>,</span><br><span class=\"line\">  devtool: <span class=\"hljs-string\">'source-map'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> mainConfig = merge(&#123;&#125;, base.mainConfig, config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> rendererConfig = merge(&#123;&#125;, base.rendererConfig, config, &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"hljs-string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"hljs-regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"hljs-string\">'css-loader'</span>, <span class=\"hljs-string\">'stylus-loader'</span>],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> MiniCssExtractPlugin(&#123; filename: <span class=\"hljs-string\">'renderer.css'</span> &#125;),</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class=\"line\">      analyzerMode: <span class=\"hljs-string\">'static'</span>,</span><br><span class=\"line\">      openAnalyzer: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"line\">      reportFilename: <span class=\"hljs-string\">'renderer.report.html'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = [mainConfig, rendererConfig]</span><br></pre></td></tr></table></figure>\n\n<p>这里参考了 Desktop 使用 Typescript 编写 webpack 配置文件。配合 interface 可以实现 webpack 配置文件的编辑器自动补全。具体使用方法可参考 webpack 文档 <a href=\"https://webpack.js.org/configuration/configuration-languages/#typescript\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/configuration/configuration-languages/#typescript</a></p>\n<p>每一个配置文件导出一个数组，分别是 main, renderer 的配置对象。</p>\n<p>使用 webpack-dev-server 启动能实现 renderer 的热更新，main 则是使用 webpack 的 watch 模式。</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"compile:dev\"</span>: <span class=\"hljs-string\">\"webpack-dev-server --config scripts/webpack.dev.ts\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://nodemon.io\" target=\"_blank\" rel=\"noopener\">nodemon</a> 监听 main 编译后的产物，nodemon 监听到改动则重新运行 <code>electron .</code> 重启应用,这样间接实现了 main 的 livereload。</p>\n<blockquote>\n<p>Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.</p>\n</blockquote>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"app\"</span>: <span class=\"hljs-string\">\"electron .\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"app:watch\"</span>: <span class=\"hljs-string\">\"nodemon --watch 'dest/main.js' --exec npm run app\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就实现了一键启动开发环境，且能够监听代码变化，重新启动应用。</p>\n<blockquote>\n<p>Tips: 开源社区有更好的 <a href=\"https://github.com/electron-userland/electron-webpack\" target=\"_blank\" rel=\"noopener\">electron-webpack</a>, HMR for both renderer and main processes</p>\n</blockquote>\n<p>生产环境则使用 webpack 顺序编译 main 和 renderer。编译完成后使用 <a href=\"https://www.electron.build\" target=\"_blank\" rel=\"noopener\">electron-builder</a> 打包。这样就实现了一键打包。</p>\n<p>由于工具链的缺失实现不了一键发布，就只能打包后手动发布了（后面详细说明）。</p>\n<p>下面就是完整的 scripts。</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"run-p -c compile:dev typecheck:watch app:watch\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"dist\"</span>: <span class=\"hljs-string\">\"npm run compile:prod &amp;&amp; electron-builder build --win --mac\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"compile:dev\"</span>: <span class=\"hljs-string\">\"webpack-dev-server --config scripts/webpack.dev.ts\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"compile:prod\"</span>: <span class=\"hljs-string\">\"npm run clean &amp;&amp; webpack --config scripts/webpack.prod.ts\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"app\"</span>: <span class=\"hljs-string\">\"electron .\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"app:watch\"</span>: <span class=\"hljs-string\">\"nodemon --watch 'dest/main.js' --exec npm run app\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"clean\"</span>: <span class=\"hljs-string\">\"rimraf dest dist\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"typecheck\"</span>: <span class=\"hljs-string\">\"tsc --noEmit\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"typecheck:watch\"</span>: <span class=\"hljs-string\">\"tsc --noEmit --watch\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"lint\"</span>: <span class=\"hljs-string\">\"eslint src --ext .ts,.js --fix\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"release:patch\"</span>: <span class=\"hljs-string\">\"standard-version --release-as patch &amp;&amp; git push --follow-tags origin master &amp;&amp; npm run dist\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"release:minor\"</span>: <span class=\"hljs-string\">\"standard-version --release-as minor &amp;&amp; git push --follow-tags origin master &amp;&amp; npm run dist\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"release:major\"</span>: <span class=\"hljs-string\">\"standard-version --release-as major &amp;&amp; git push --follow-tags origin master &amp;&amp; npm run dist\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"repush\"</span>: <span class=\"hljs-string\">\"git push --follow-tags origin master &amp;&amp; npm run dist\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、目录结构\"><a href=\"#三、目录结构\" class=\"headerlink\" title=\"三、目录结构\"></a>三、目录结构</h2><h3 id=\"1-项目目录结构\"><a href=\"#1-项目目录结构\" class=\"headerlink\" title=\"1. 项目目录结构\"></a>1. 项目目录结构</h3><figure class=\"highlight sh hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">│   ├── cube</span><br><span class=\"line\">│   ├── databases</span><br><span class=\"line\">│   ├── enviroment</span><br><span class=\"line\">│   ├── files</span><br><span class=\"line\">│   ├── <span class=\"hljs-built_in\">local</span>-storage</span><br><span class=\"line\">│   ├── <span class=\"hljs-built_in\">log</span></span><br><span class=\"line\">│   ├── shell</span><br><span class=\"line\">│   ├── stores</span><br><span class=\"line\">│   ├── update</span><br><span class=\"line\">│   ├── validator</span><br><span class=\"line\">│   └── watcher</span><br><span class=\"line\">├── main</span><br><span class=\"line\">│   ├── app-window.ts</span><br><span class=\"line\">│   ├── event-bus.ts</span><br><span class=\"line\">│   ├── index.ts</span><br><span class=\"line\">│   ├── keyboard</span><br><span class=\"line\">│   └── menu</span><br><span class=\"line\">├── models</span><br><span class=\"line\">│   ├── popup.ts</span><br><span class=\"line\">│   └── project.ts</span><br><span class=\"line\">└── renderer</span><br><span class=\"line\">    ├── App.tsx</span><br><span class=\"line\">    ├── assets</span><br><span class=\"line\">    ├── components</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    ├── index.tsx</span><br><span class=\"line\">    ├── pages</span><br><span class=\"line\">    └── types</span><br></pre></td></tr></table></figure>\n\n<p>在目录结构上模仿了 Desktop。main 目录存放 main 进程相关代码，包括应用入口，窗口创建，菜单，快捷键等等；而 renderer 目录则是整个 UI 渲染层的代码。lib 目录则是一些和 UI 无关也和 main 无强相关的业务逻辑代码。models 则存放一些领域模型。</p>\n<h3 id=\"2-CSS-规范\"><a href=\"#2-CSS-规范\" class=\"headerlink\" title=\"2. CSS 规范\"></a>2. CSS 规范</h3><p>在这个 React 中项目中没有使用 css-modules 这类方案。而是使用 BEM 这类能形成命名空间的规范来实现模块化，这样做的好处是能够比较好的对样式进行覆盖。</p>\n<p>在文件的组织方式上采用一个独立的 React 组件搭配一个独立的样式文件，这样在重构的时候，我们想要修改一个组件的样式只需要找到对应的样式文件进行修改即可，提高重构的效率。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stylesheets</span><br><span class=\"line\">  ├── common.styl</span><br><span class=\"line\">  ├── components</span><br><span class=\"line\">  │   ├── editor.styl</span><br><span class=\"line\">  │   ├── empty-guide.styl</span><br><span class=\"line\">  │   ├── find-in-page.styl</span><br><span class=\"line\">  │   ├── reindex.styl</span><br><span class=\"line\">  │   ├── sidebar.styl</span><br><span class=\"line\">  │   ├── source-viewer.styl</span><br><span class=\"line\">  │   └── upload.styl</span><br><span class=\"line\">  ├── index.styl</span><br><span class=\"line\">  └── reset.styl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、IPC-通信\"><a href=\"#三、IPC-通信\" class=\"headerlink\" title=\"三、IPC 通信\"></a>三、IPC 通信</h2><blockquote>\n<p>进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。 </p>\n</blockquote>\n<p>Electron 的 main 进程和 renderer 进程的通信是通过 Electron 提供的 <code>ipcMain</code> 和 <code>ipcRenderer</code> 来实现的。</p>\n<h3 id=\"1-main-端\"><a href=\"#1-main-端\" class=\"headerlink\" title=\"1. main 端\"></a>1. main 端</h3><p>在 main 中向某一个窗口 renderer 发送消息可以使用 <code>window.webContents.send</code>。<br>在 main 端监听 renderer 消息可以使用 <code>ipcMain.on</code>。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 在主进程中.</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; ipcMain &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron'</span>)</span><br><span class=\"line\">ipcMain.on(<span class=\"hljs-string\">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(arg) <span class=\"hljs-comment\">// prints \"ping\"</span></span><br><span class=\"line\">  event.reply(<span class=\"hljs-string\">'asynchronous-reply'</span>, <span class=\"hljs-string\">'pong'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.on(<span class=\"hljs-string\">'synchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(arg) <span class=\"hljs-comment\">// prints \"ping\"</span></span><br><span class=\"line\">  event.returnValue = <span class=\"hljs-string\">'pong'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-renderer-端\"><a href=\"#2-renderer-端\" class=\"headerlink\" title=\"2. renderer 端\"></a>2. renderer 端</h3><p>回复同步消息可以使用 <code>event.returnValue</code>。同步消息的返回值可以直接读取。<br>回复异步消息可以使用 <code>event.reply</code>。那么在 renderer 就要监听回复的 channel 得到返回值。</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//在渲染器进程 (网页) 中。</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron'</span>)</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(ipcRenderer.sendSync(<span class=\"hljs-string\">'synchronous-message'</span>, <span class=\"hljs-string\">'ping'</span>)) <span class=\"hljs-comment\">// prints \"pong\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">ipcRenderer.on(<span class=\"hljs-string\">'asynchronous-reply'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(arg) <span class=\"hljs-comment\">// prints \"pong\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ipcRenderer.send(<span class=\"hljs-string\">'asynchronous-message'</span>, <span class=\"hljs-string\">'ping'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 renderer 可以使用 <code>ipcRenderer.send</code> 向主进程发送异步消息。用 <code>ipcRenderer.sendSync</code> 发送同步消息。</p>\n<h2 id=\"四、数据持久化及状态管理\"><a href=\"#四、数据持久化及状态管理\" class=\"headerlink\" title=\"四、数据持久化及状态管理\"></a>四、数据持久化及状态管理</h2><h3 id=\"1-复杂数据持久化\"><a href=\"#1-复杂数据持久化\" class=\"headerlink\" title=\"1. 复杂数据持久化\"></a>1. 复杂数据持久化</h3><p>数据持久化可选的方案有很多，比如 <a href=\"https://github.com/sindresorhus/electron-store#readme\" target=\"_blank\" rel=\"noopener\">electron-store</a>等基于 JSON 文件实现的存储方案。对于更复杂的应用场景还可以使用 <a href=\"https://github.com/typicode/lowdb\" target=\"_blank\" rel=\"noopener\">lowdb</a>，<a href=\"https://github.com/louischatriot/nedb\" target=\"_blank\" rel=\"noopener\">nedb</a> ，<code>sqlite</code>等。</p>\n<p>最初我使用的是 <code>electron-store</code>, 并且一直有一个执念是对磁盘的读写只能在 main 进程进行，renderer 进程只负责渲染界面。所以在最初设计的是在 renderer 进程渲染数据或者更新数据的时候都需要通过 IPC 到 main 进程来完成最终的磁盘读写。除去读写正常的情况，还要考虑读写磁盘的异常，这样导致数据流异常的绕。而且还需要自己维护 ID 的生成。借鉴了 Desktop 的代码后，重构了数据持久化部分，也采用了 <a href=\"https://github.com/dfahlander/Dexie.js\" target=\"_blank\" rel=\"noopener\">Dexie</a>，它是对浏览器标准数据库 indexedDB 的一个封装。从它的 Readme 可以看到它主要解决了indexedDB 的三个问题：</p>\n<ol>\n<li>不明确的异常处理</li>\n<li>查询很烂</li>\n<li>代码复杂</li>\n</ol>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Dexie <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'dexie'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> IDatabaseProject &#123;</span><br><span class=\"line\">  id?: <span class=\"hljs-built_in\">number</span>;</span><br><span class=\"line\">  name: <span class=\"hljs-built_in\">string</span>;</span><br><span class=\"line\">  filePath: <span class=\"hljs-built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> ProjectsDatabase <span class=\"hljs-keyword\">extends</span> Dexie &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">public</span> projects: Dexie.Table&lt;IDatabaseProject, <span class=\"hljs-built_in\">number</span>&gt;;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">super</span>(<span class=\"hljs-string\">'ProjectsDatabase'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.version(<span class=\"hljs-number\">1</span>).stores(&#123;</span><br><span class=\"line\">      projects: <span class=\"hljs-string\">'++id,&amp;name,&amp;filePath'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.projects = <span class=\"hljs-keyword\">this</span>.table(<span class=\"hljs-string\">'projects'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承 Dexie 来实现我们自己的数据库类，在构造函数中声明数据库的版本，表的 schema 等等。具体可以参考 <a href=\"https://dexie.org/docs/\" target=\"_blank\" rel=\"noopener\">Dexie 官方文档</a>。</p>\n<h3 id=\"2-简单数据持久化\"><a href=\"#2-简单数据持久化\" class=\"headerlink\" title=\"2. 简单数据持久化\"></a>2. 简单数据持久化</h3><p>一些 UI 状态的标志位存储（比如某个弹窗是否显示过），我们一般会把这种标志位存储到 <code>localStorage</code> 中。<br>在查看 Desktop 的源码过程中，发现他们对 <code>number</code>, <code>boolean</code> 类型的数据的 get, set 进行了简单的封装。使用起来非常方便，这里贴一下对于 <code>boolean</code> 型数据的处理。</p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBoolean</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">boolean</span> | <span class=\"hljs-title\">undefined</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-title\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBoolean</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">string</span>, defaultValue: <span class=\"hljs-built_in\">boolean</span></span>): <span class=\"hljs-title\">boolean</span></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-title\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBoolean</span>(<span class=\"hljs-params\"></span></span></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-params\">  key: <span class=\"hljs-built_in\">string</span>,</span></span></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-params\">  defaultValue?: <span class=\"hljs-built_in\">boolean</span></span></span></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-params\"></span>): <span class=\"hljs-title\">boolean</span> | <span class=\"hljs-title\">undefined</span> </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-function\">  <span class=\"hljs-title\">const</span> <span class=\"hljs-title\">value</span> = <span class=\"hljs-title\">localStorage</span>.<span class=\"hljs-title\">getItem</span>(<span class=\"hljs-params\">key</span>)</span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-function\">  <span class=\"hljs-title\">if</span> (<span class=\"hljs-params\">value === <span class=\"hljs-literal\">null</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"hljs-function\">    <span class=\"hljs-title\">return</span> <span class=\"hljs-title\">defaultValue</span></span></span><br><span class=\"line\"><span class=\"hljs-function\">  &#125;</span></span><br><span class=\"line\"><span class=\"hljs-function\"></span></span><br><span class=\"line\"><span class=\"hljs-function\">  <span class=\"hljs-title\">if</span> (<span class=\"hljs-params\">value === '1' || value === '<span class=\"hljs-literal\">true</span>'</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-string\">'0'</span> || value === <span class=\"hljs-string\">'false'</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> defaultValue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setBoolean</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">string</span>, value: <span class=\"hljs-built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  localStorage.setItem(key, value ? <span class=\"hljs-string\">'1'</span> : <span class=\"hljs-string\">'0'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/desktop/desktop/blob/development/app/src/lib/local-storage.ts\" target=\"_blank\" rel=\"noopener\">源码详见</a></p>\n<h2 id=\"五、功能实现\"><a href=\"#五、功能实现\" class=\"headerlink\" title=\"五、功能实现\"></a>五、功能实现</h2><h3 id=\"1-磁盘-编辑器版本实时同步\"><a href=\"#1-磁盘-编辑器版本实时同步\" class=\"headerlink\" title=\"1. 磁盘/编辑器版本实时同步\"></a>1. 磁盘/编辑器版本实时同步</h3><p>一般情况下，在编辑器中我们编辑的内容其实是编辑器读取磁盘文件到内存中的副本。所以说如果磁盘的文件发生了改动，比如 Git 切换分支造成文件变动，抑或是删除了磁盘文件，重命名等等都会造成内存版本和磁盘版本的不一致，即磁盘版本领先于内存版本，这个时候就可能产生冲突。解决这个问题很简单，可以使用 fs.watch/watchFile 监听当前编辑的文件，一旦发生变化，就重新读取磁盘版本，更新内存版本来实现同步。但是 fs.watch 这个 API 在工程上不是可以开箱即用的，有许多兼容问题和一些 bug。比如说</p>\n<p>Node.js fs.watch:</p>\n<ul>\n<li>Doesn’t report filenames on MacOS.</li>\n<li>Doesn’t report events at all when using editors like Sublime on MacOS.</li>\n<li>Often reports events twice.</li>\n<li>Emits most changes as rename.</li>\n<li>Does not provide an easy way to recursively watch file trees.</li>\n</ul>\n<p>Node.js fs.watchFile:</p>\n<ul>\n<li>Almost as bad at event handling.</li>\n<li>Also does not provide any recursive watching.</li>\n<li>Results in high CPU utilization.</li>\n</ul>\n<p>上面列举的点来自 <a href=\"https://github.com/paulmillr/chokidar\" target=\"_blank\" rel=\"noopener\">chokidar</a>，它是一个 Node 模块，提供了开箱可用的监听文件变化的能力。只需要监听 <code>add</code>, <code>unlink</code>, <code>change</code> 等事件读取最新版本的文本到编辑器就可以实现磁盘/编辑器版本的同步了。</p>\n<h3 id=\"2-Context-Menu\"><a href=\"#2-Context-Menu\" class=\"headerlink\" title=\"2. Context-Menu\"></a>2. Context-Menu</h3><p>Desktop 的 <code>contextmenu</code> (右键菜单)的实现基于原生 IPC 的，比较绕。</p>\n<p>首先我们需要知道的是 <code>Menu</code> 类是 <code>main process only</code> 的。</p>\n<p>在需要 <code>contextmenu</code> 的 <code>JSX.Element</code> 上绑定 <code>onContextMenu</code> 事件。构造对象数组 <code>Array&lt;MenuItem&gt;</code>, 并且为每个 MenuItem 对象绑定触发事件，再通过 IPC 将对象传递至 main 进程，值得一提的是这个时候将 MenuItem 数组赋值给了一个全局对象，暂存起来。在 main 进程构造出真正的 MenuItem 实例，绑定 MenuItem 的点击事件，触发 MenuItem 点击事件的时候记录 MenuItem 的 序列号 index，再将 index 通过 event.sender.send 将 index 传递到 renderer 进程。renderer 进程拿到 index 之后根据之前保存的全局对象取出单个 MenuItem， 执行绑定的事件。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onContextMenu =&gt; showContextualMenu (暂存MenuItems，ipcRenderer.send) =&gt; icpMain =&gt; menu.popup() =&gt; MenuItem.onClick(index) =&gt; event.sernder.send(index) =&gt; MenuItem.action()</span><br></pre></td></tr></table></figure>\n\n<p>所以在我的应用中使用了 remote 对象屏蔽上述复杂的 IPC 通信。在 renderer 进程完成 Menu 的构造展示和事件的绑定触发。</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; remote &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'electron'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; MenuItem, dialog, getCurrentWindow, Menu &#125; = remote;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> onContextMenu = <span class=\"hljs-function\">(<span class=\"hljs-params\">project: Project</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> menu = <span class=\"hljs-keyword\">new</span> Menu();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> menus = [</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> MenuItem(&#123;</span><br><span class=\"line\">      label: <span class=\"hljs-string\">'在终端中打开'</span>,</span><br><span class=\"line\">      visible: __DARWIN__,</span><br><span class=\"line\">      click() &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> accessor = <span class=\"hljs-keyword\">new</span> FileAccessor(project.filePath);</span><br><span class=\"line\">        accessor.openInTerminal();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"hljs-keyword\">new</span> MenuItem(&#123;</span><br><span class=\"line\">      label: <span class=\"hljs-string\">'在 vscode 中打开'</span>,</span><br><span class=\"line\">      click() &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> accessor = <span class=\"hljs-keyword\">new</span> FileAccessor(project.filePath);</span><br><span class=\"line\">        accessor.openInVscode();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  menus.forEach(menu.append);</span><br><span class=\"line\">  menu.popup(&#123; <span class=\"hljs-built_in\">window</span>: getCurrentWindow() &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、日志\"><a href=\"#六、日志\" class=\"headerlink\" title=\"六、日志\"></a>六、日志</h2><p>完善的日志不论是开发环境还是生产环境都是非常重要的，大致记录 UI 状态迁移背后的数据变动，流程的分支走向，能很好的辅助开发。</p>\n<p>参考 Desktop，他们的日志基于日志库：<a href=\"https://github.com/winstonjs/winston#readme\" target=\"_blank\" rel=\"noopener\">winston</a>。</p>\n<p>在 main 进程和 renderer 进程都提供了全局 log 对象，接口都是一致的。分别是 <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>。在 renderer 进程，简单的封装了 <code>window.console</code> 对象上的 <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code> 方法，日志打印到浏览器控制台的时候也通过 IPC 传递到 main 进程，由 main 进程统一管理。 </p>\n<p>main 进程接收了来自 renderer 进程的日志信息和 main 进程自身的日志信息。设置了两个 <code>transports</code>。<code>winston.transports.Console</code> 和 <code>winston.transports.DailyRotateFile</code> 分别用于将日志信息打印在终端控制台和存储在磁盘文件。DailyRotateFile 以天为单位，设置了最多存储 14 天的上限。</p>\n<p>在 main 进程和 renderer 进程启动时分别引入日志安装模块。因为 log 方法都是暴露在全局，因此只需要在进程启动时引入一次即可。同时在 TS 环境中还需要添加 log 方法的类型声明。</p>\n<h2 id=\"七、打包，发布及更新\"><a href=\"#七、打包，发布及更新\" class=\"headerlink\" title=\"七、打包，发布及更新\"></a>七、打包，发布及更新</h2><p>开源世界已经有非常完善的打包和发布的工具 – <a href=\"https://www.electron.build\" target=\"_blank\" rel=\"noopener\">electron-builder</a>。它集多平台打包，签名，自动更新，发布到Github等平台等等功能于一身。</p>\n<p>鉴于这个工具只能在内网使用，不能发布到 Github 而且也没有没有苹果开发者工具无法进行签名，只能利用 <code>electron-builder</code> 在本机打包，发布的话只能使用手动打包上传了，用户也只能手动下载安装包覆盖安装，不能像 VSCODE 这样实现自动更新。</p>\n<p>既然不能自动更新，那么新版本下发后，如何通知到用户去下载新版本安装包更新呢？<br>从用户这一端来看，在应用每次启动的时候可以做一次请求，查询是否有版本更新，或者是在应用菜单栏提供入口，让用户手动触发更新查询。查询到服务端的最新版本后，使用 <a href=\"https://www.npmjs.com/package/semver\" target=\"_blank\" rel=\"noopener\">sermver</a> 比较本机版本是否低于服务器版本，如果是就下发通知给用户，提示用户去下载更新。</p>\n<p>在有限的条件下怎么实现这个功能呢？</p>\n<p>实现这个功能必需的三个元素：服务端标识着最新版本的可读文件；托管各个版本安装包的云空间；应用代码中的更新逻辑。</p>\n<p>服务端标识着最新版本的可读文件：每次打包时都会更新 <code>package.json</code>，所以我们直接把 <code>package.json</code> 上传到某个不带鉴权的 CDN 就可以，更新的时候就请求这个文件。</p>\n<p>托管各个版本安装包的云空间：这个可以使用云盘，云盘可以生成分享链接，把这个链接手动拷贝到 Gitlab 该版本的 tag 的 Notes 中。</p>\n<p>应用代码中的更新逻辑：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> got <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'got'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> semver <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'semver'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; app, remote, BrowserWindow &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'electron'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> realApp = app || remote.app;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> currentVersion = realApp.getVersion();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkForUpdates</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>: BrowserWindow, silent: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`http://yourcdn/package.json?t=<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> got(url);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> pkg = <span class=\"hljs-built_in\">JSON</span>.parse(response.body);</span><br><span class=\"line\">    log.debug(<span class=\"hljs-string\">'检查更新，云端版本：'</span>, pkg.version);</span><br><span class=\"line\">    log.debug(<span class=\"hljs-string\">'当前版本'</span>, currentVersion);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (semver.lt(currentVersion, pkg.version)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-built_in\">window</span>.webContents.send(<span class=\"hljs-string\">'update-available'</span>, pkg.version);</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-built_in\">window</span>.webContents.send(<span class=\"hljs-string\">'update-not-available'</span>, silent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">window</span>.webContents.send(<span class=\"hljs-string\">'update-error'</span>, silent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分别在应用主进程启动、用户点击应用菜单<code>检查更新</code>时调用这个方法，从而通知 UI 进程下发通知。我们期望应用主进程启动时的更新是在失败或者无更新时是静默的，不用打扰用户，所以在 IPC 管道可以提供一个 <code>silent</code> 参数。检测到更新后就可以通知用户，用户点击更新后就可以跳转到最新版本的 Gitlab tags ，引导用户下载最新版本进行手动安装。</p>\n<h2 id=\"八、其他\"><a href=\"#八、其他\" class=\"headerlink\" title=\"八、其他\"></a>八、其他</h2><h3 id=\"1-devtools\"><a href=\"#1-devtools\" class=\"headerlink\" title=\"1. devtools\"></a>1. devtools</h3><p>开发 Electron 应用中 renderer 端也是使用 Chrome devtools 来调试的。对于 React, Mobx 这类框的 devtools 扩展也可以通过 <code>electron-devtools-installer</code> 来安装。应用窗口创建之后调用<code>electron-devtools-installer</code> 进行 <code>mobx</code>、<code>react</code> 等扩展的安装。</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-keyword\">default</span>: installExtension, MOBX_DEVTOOLS, REACT_DEVELOPER_TOOLS &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron-devtools-installer'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> extensions = [REACT_DEVELOPER_TOOLS, MOBX_DEVTOOLS];</span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> extension of extensions) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">    installExtension(extension);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// log.error(e);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-保持窗口大小\"><a href=\"#2-保持窗口大小\" class=\"headerlink\" title=\"2. 保持窗口大小\"></a>2. 保持窗口大小</h3><p>对于桌面应用，一个常见的需求就是关闭后重新打开，需要恢复到上次打开时的窗口大小，位置。实现这个比较简单，监听窗口的 resize 事件，把窗口信息记录到当前用户的应用数据文件夹, 即 <code>app.getPath(appData)</code>。下次启动应用创建窗口时读取这个文件设置窗口信息即可。开源社区已经有对这个功能封装好的库：<a href=\"https://github.com/mawie81/electron-window-state#readme\" target=\"_blank\" rel=\"noopener\">electron-window-state</a></p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> windowStateKeeper = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'electron-window-state'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> win;</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"hljs-string\">'ready'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> mainWindowState = windowStateKeeper(&#123;</span><br><span class=\"line\">    defaultWidth: <span class=\"hljs-number\">1000</span>,</span><br><span class=\"line\">    defaultHeight: <span class=\"hljs-number\">800</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  win = <span class=\"hljs-keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">    <span class=\"hljs-string\">'x'</span>: mainWindowState.x,</span><br><span class=\"line\">    <span class=\"hljs-string\">'y'</span>: mainWindowState.y,</span><br><span class=\"line\">    <span class=\"hljs-string\">'width'</span>: mainWindowState.width,</span><br><span class=\"line\">    <span class=\"hljs-string\">'height'</span>: mainWindowState.height</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  mainWindowState.manage(win);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>只需要提供缺省窗口大小，剩余的事情 <code>electron-window-state</code> 都帮我们搞定了。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：周全</p>\n</blockquote>\n<p>社交魔方平台是京东的 SNS 活动搭建平台，其内置了很多模板，每一个模板都有一个模板 JSON 用于生成表单，运营同学、商家配置了这个表单后就可以生成活动页面了。<br>模板 JSON 是标准的结构化数据，包含名称、类型、控件类型、校验器、默认值等等字段。以往都是采用手写 JSON 的方式，这是非常低效的，而且容易出错。针对其结构化数据的特点可以用 GUI 的方式去编辑，我们基于 <a href=\"http://electronjs.org\" target=\"_blank\" rel=\"noopener\">Electron</a> 参考 <a href=\"https://github.com/desktop/desktop\" target=\"_blank\" rel=\"noopener\">Github Desktop 客户端</a> 的架构编写了一个 <a href=\"http://git.jd.com/zhouquan31_repos/cubic\" target=\"_blank\" rel=\"noopener\">编辑器</a>，通过填写表单的方式生成 JSON。所以在这里记录下这个 Electron 编辑器开发过程中可以记录的点和从 Github Desktop 客户端代码中值得学习的点。</p>","more":"<p><img src=\"http://img13.360buyimg.com/jdphoto/jfs/t1/69749/12/12614/548388/5d9f4cebE13fe8229/6b2bb3d8394c8a5b.jpg\" alt=\"APP\"></p>\n<h2 id=\"一、关于-Electron\"><a href=\"#一、关于-Electron\" class=\"headerlink\" title=\"一、关于 Electron\"></a>一、关于 Electron</h2><blockquote>\n<p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</p>\n</blockquote>\n<p>上面是来自 Electron 官方的介绍。基于 Electron 平台，我们可以使用熟悉的前端技术栈来开发桌面应用。Electron 运行 package.json 的 main 脚本的进程被称为主进程（以下简称main）。 在主进程中运行的脚本通过创建 web 页面来展示用户界面（以下简称 renderer）。 一个 Electron 应用总是有且只有一个主进程。main 用于创建应用，创建浏览器窗口，它就是一个彻底的 Node 进程，获取不到 DOM, BOM 这些接口。在 main 创建的浏览器窗口中运行的就是 renderer 进程，它既可以获取 DOM, BOM 这些接口，也可以使用 Node 的 API。两类进程之间可以通过 Electron 提供的 IPC 接口通信。</p>\n<h2 id=\"二、开发环境搭建\"><a href=\"#二、开发环境搭建\" class=\"headerlink\" title=\"二、开发环境搭建\"></a>二、开发环境搭建</h2><p>我们了解到 Electron 分为两类进程，main 和 renderer。所以搭建开发环境时不能像普通的前端应用一样一个 webpack 配置搞定。并且我们想要实现</p>\n<ol>\n<li>一键启动开发环境</li>\n<li>一键打包</li>\n<li>一键发布</li>\n</ol>\n<p>那么就需要两个 webpack 配置文件。</p>\n<p>一个用于开发环境 – <code>webpack.dev.ts</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dev.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mainConfig = merge(&#123;&#125;, base.mainConfig, config, &#123;</span><br><span class=\"line\">  watch: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rendererConfig = merge(&#123;&#125;, base.rendererConfig, config, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'stylus-loader'</span>],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: path.join(__dirname, base.outputDir),</span><br><span class=\"line\">    port: <span class=\"number\">8000</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    inline: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    writeToDisk: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = [rendererConfig, mainConfig]</span><br></pre></td></tr></table></figure>\n\n<p>另一个用于生产环境 – <code>webpack.prod.ts</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config: webpack.Configuration = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mainConfig = merge(&#123;&#125;, base.mainConfig, config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rendererConfig = merge(&#123;&#125;, base.rendererConfig, config, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.styl$/</span>,</span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"string\">'css-loader'</span>, <span class=\"string\">'stylus-loader'</span>],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123; filename: <span class=\"string\">'renderer.css'</span> &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class=\"line\">      analyzerMode: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">      openAnalyzer: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      reportFilename: <span class=\"string\">'renderer.report.html'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = [mainConfig, rendererConfig]</span><br></pre></td></tr></table></figure>\n\n<p>这里参考了 Desktop 使用 Typescript 编写 webpack 配置文件。配合 interface 可以实现 webpack 配置文件的编辑器自动补全。具体使用方法可参考 webpack 文档 <a href=\"https://webpack.js.org/configuration/configuration-languages/#typescript\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/configuration/configuration-languages/#typescript</a></p>\n<p>每一个配置文件导出一个数组，分别是 main, renderer 的配置对象。</p>\n<p>使用 webpack-dev-server 启动能实现 renderer 的热更新，main 则是使用 webpack 的 watch 模式。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compile:dev\"</span>: <span class=\"string\">\"webpack-dev-server --config scripts/webpack.dev.ts\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <a href=\"https://nodemon.io\" target=\"_blank\" rel=\"noopener\">nodemon</a> 监听 main 编译后的产物，nodemon 监听到改动则重新运行 <code>electron .</code> 重启应用,这样间接实现了 main 的 livereload。</p>\n<blockquote>\n<p>Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"app\"</span>: <span class=\"string\">\"electron .\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"app:watch\"</span>: <span class=\"string\">\"nodemon --watch 'dest/main.js' --exec npm run app\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就实现了一键启动开发环境，且能够监听代码变化，重新启动应用。</p>\n<blockquote>\n<p>Tips: 开源社区有更好的 <a href=\"https://github.com/electron-userland/electron-webpack\" target=\"_blank\" rel=\"noopener\">electron-webpack</a>, HMR for both renderer and main processes</p>\n</blockquote>\n<p>生产环境则使用 webpack 顺序编译 main 和 renderer。编译完成后使用 <a href=\"https://www.electron.build\" target=\"_blank\" rel=\"noopener\">electron-builder</a> 打包。这样就实现了一键打包。</p>\n<p>由于工具链的缺失实现不了一键发布，就只能打包后手动发布了（后面详细说明）。</p>\n<p>下面就是完整的 scripts。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"run-p -c compile:dev typecheck:watch app:watch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"npm run compile:prod &amp;&amp; electron-builder build --win --mac\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"compile:dev\"</span>: <span class=\"string\">\"webpack-dev-server --config scripts/webpack.dev.ts\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"compile:prod\"</span>: <span class=\"string\">\"npm run clean &amp;&amp; webpack --config scripts/webpack.prod.ts\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"app\"</span>: <span class=\"string\">\"electron .\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"app:watch\"</span>: <span class=\"string\">\"nodemon --watch 'dest/main.js' --exec npm run app\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean\"</span>: <span class=\"string\">\"rimraf dest dist\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"typecheck\"</span>: <span class=\"string\">\"tsc --noEmit\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"typecheck:watch\"</span>: <span class=\"string\">\"tsc --noEmit --watch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lint\"</span>: <span class=\"string\">\"eslint src --ext .ts,.js --fix\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"release:patch\"</span>: <span class=\"string\">\"standard-version --release-as patch &amp;&amp; git push --follow-tags origin master &amp;&amp; npm run dist\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"release:minor\"</span>: <span class=\"string\">\"standard-version --release-as minor &amp;&amp; git push --follow-tags origin master &amp;&amp; npm run dist\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"release:major\"</span>: <span class=\"string\">\"standard-version --release-as major &amp;&amp; git push --follow-tags origin master &amp;&amp; npm run dist\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"repush\"</span>: <span class=\"string\">\"git push --follow-tags origin master &amp;&amp; npm run dist\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、目录结构\"><a href=\"#三、目录结构\" class=\"headerlink\" title=\"三、目录结构\"></a>三、目录结构</h2><h3 id=\"1-项目目录结构\"><a href=\"#1-项目目录结构\" class=\"headerlink\" title=\"1. 项目目录结构\"></a>1. 项目目录结构</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">│   ├── cube</span><br><span class=\"line\">│   ├── databases</span><br><span class=\"line\">│   ├── enviroment</span><br><span class=\"line\">│   ├── files</span><br><span class=\"line\">│   ├── <span class=\"built_in\">local</span>-storage</span><br><span class=\"line\">│   ├── <span class=\"built_in\">log</span></span><br><span class=\"line\">│   ├── shell</span><br><span class=\"line\">│   ├── stores</span><br><span class=\"line\">│   ├── update</span><br><span class=\"line\">│   ├── validator</span><br><span class=\"line\">│   └── watcher</span><br><span class=\"line\">├── main</span><br><span class=\"line\">│   ├── app-window.ts</span><br><span class=\"line\">│   ├── event-bus.ts</span><br><span class=\"line\">│   ├── index.ts</span><br><span class=\"line\">│   ├── keyboard</span><br><span class=\"line\">│   └── menu</span><br><span class=\"line\">├── models</span><br><span class=\"line\">│   ├── popup.ts</span><br><span class=\"line\">│   └── project.ts</span><br><span class=\"line\">└── renderer</span><br><span class=\"line\">    ├── App.tsx</span><br><span class=\"line\">    ├── assets</span><br><span class=\"line\">    ├── components</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    ├── index.tsx</span><br><span class=\"line\">    ├── pages</span><br><span class=\"line\">    └── types</span><br></pre></td></tr></table></figure>\n\n<p>在目录结构上模仿了 Desktop。main 目录存放 main 进程相关代码，包括应用入口，窗口创建，菜单，快捷键等等；而 renderer 目录则是整个 UI 渲染层的代码。lib 目录则是一些和 UI 无关也和 main 无强相关的业务逻辑代码。models 则存放一些领域模型。</p>\n<h3 id=\"2-CSS-规范\"><a href=\"#2-CSS-规范\" class=\"headerlink\" title=\"2. CSS 规范\"></a>2. CSS 规范</h3><p>在这个 React 中项目中没有使用 css-modules 这类方案。而是使用 BEM 这类能形成命名空间的规范来实现模块化，这样做的好处是能够比较好的对样式进行覆盖。</p>\n<p>在文件的组织方式上采用一个独立的 React 组件搭配一个独立的样式文件，这样在重构的时候，我们想要修改一个组件的样式只需要找到对应的样式文件进行修改即可，提高重构的效率。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stylesheets</span><br><span class=\"line\">  ├── common.styl</span><br><span class=\"line\">  ├── components</span><br><span class=\"line\">  │   ├── editor.styl</span><br><span class=\"line\">  │   ├── empty-guide.styl</span><br><span class=\"line\">  │   ├── find-in-page.styl</span><br><span class=\"line\">  │   ├── reindex.styl</span><br><span class=\"line\">  │   ├── sidebar.styl</span><br><span class=\"line\">  │   ├── source-viewer.styl</span><br><span class=\"line\">  │   └── upload.styl</span><br><span class=\"line\">  ├── index.styl</span><br><span class=\"line\">  └── reset.styl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、IPC-通信\"><a href=\"#三、IPC-通信\" class=\"headerlink\" title=\"三、IPC 通信\"></a>三、IPC 通信</h2><blockquote>\n<p>进程间通信（IPC，InterProcess Communication）是指在不同进程之间传播或交换信息。 </p>\n</blockquote>\n<p>Electron 的 main 进程和 renderer 进程的通信是通过 Electron 提供的 <code>ipcMain</code> 和 <code>ipcRenderer</code> 来实现的。</p>\n<h3 id=\"1-main-端\"><a href=\"#1-main-端\" class=\"headerlink\" title=\"1. main 端\"></a>1. main 端</h3><p>在 main 中向某一个窗口 renderer 发送消息可以使用 <code>window.webContents.send</code>。<br>在 main 端监听 renderer 消息可以使用 <code>ipcMain.on</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在主进程中.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcMain &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>)</span><br><span class=\"line\">ipcMain.on(<span class=\"string\">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg) <span class=\"comment\">// prints \"ping\"</span></span><br><span class=\"line\">  event.reply(<span class=\"string\">'asynchronous-reply'</span>, <span class=\"string\">'pong'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.on(<span class=\"string\">'synchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg) <span class=\"comment\">// prints \"ping\"</span></span><br><span class=\"line\">  event.returnValue = <span class=\"string\">'pong'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-renderer-端\"><a href=\"#2-renderer-端\" class=\"headerlink\" title=\"2. renderer 端\"></a>2. renderer 端</h3><p>回复同步消息可以使用 <code>event.returnValue</code>。同步消息的返回值可以直接读取。<br>回复异步消息可以使用 <code>event.reply</code>。那么在 renderer 就要监听回复的 channel 得到返回值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在渲染器进程 (网页) 中。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ipcRenderer.sendSync(<span class=\"string\">'synchronous-message'</span>, <span class=\"string\">'ping'</span>)) <span class=\"comment\">// prints \"pong\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">ipcRenderer.on(<span class=\"string\">'asynchronous-reply'</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg) <span class=\"comment\">// prints \"pong\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">ipcRenderer.send(<span class=\"string\">'asynchronous-message'</span>, <span class=\"string\">'ping'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 renderer 可以使用 <code>ipcRenderer.send</code> 向主进程发送异步消息。用 <code>ipcRenderer.sendSync</code> 发送同步消息。</p>\n<h2 id=\"四、数据持久化及状态管理\"><a href=\"#四、数据持久化及状态管理\" class=\"headerlink\" title=\"四、数据持久化及状态管理\"></a>四、数据持久化及状态管理</h2><h3 id=\"1-复杂数据持久化\"><a href=\"#1-复杂数据持久化\" class=\"headerlink\" title=\"1. 复杂数据持久化\"></a>1. 复杂数据持久化</h3><p>数据持久化可选的方案有很多，比如 <a href=\"https://github.com/sindresorhus/electron-store#readme\" target=\"_blank\" rel=\"noopener\">electron-store</a>等基于 JSON 文件实现的存储方案。对于更复杂的应用场景还可以使用 <a href=\"https://github.com/typicode/lowdb\" target=\"_blank\" rel=\"noopener\">lowdb</a>，<a href=\"https://github.com/louischatriot/nedb\" target=\"_blank\" rel=\"noopener\">nedb</a> ，<code>sqlite</code>等。</p>\n<p>最初我使用的是 <code>electron-store</code>, 并且一直有一个执念是对磁盘的读写只能在 main 进程进行，renderer 进程只负责渲染界面。所以在最初设计的是在 renderer 进程渲染数据或者更新数据的时候都需要通过 IPC 到 main 进程来完成最终的磁盘读写。除去读写正常的情况，还要考虑读写磁盘的异常，这样导致数据流异常的绕。而且还需要自己维护 ID 的生成。借鉴了 Desktop 的代码后，重构了数据持久化部分，也采用了 <a href=\"https://github.com/dfahlander/Dexie.js\" target=\"_blank\" rel=\"noopener\">Dexie</a>，它是对浏览器标准数据库 indexedDB 的一个封装。从它的 Readme 可以看到它主要解决了indexedDB 的三个问题：</p>\n<ol>\n<li>不明确的异常处理</li>\n<li>查询很烂</li>\n<li>代码复杂</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Dexie <span class=\"keyword\">from</span> <span class=\"string\">'dexie'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> IDatabaseProject &#123;</span><br><span class=\"line\">  id?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  filePath: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProjectsDatabase <span class=\"keyword\">extends</span> Dexie &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> projects: Dexie.Table&lt;IDatabaseProject, <span class=\"built_in\">number</span>&gt;;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"string\">'ProjectsDatabase'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.version(<span class=\"number\">1</span>).stores(&#123;</span><br><span class=\"line\">      projects: <span class=\"string\">'++id,&amp;name,&amp;filePath'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.projects = <span class=\"keyword\">this</span>.table(<span class=\"string\">'projects'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继承 Dexie 来实现我们自己的数据库类，在构造函数中声明数据库的版本，表的 schema 等等。具体可以参考 <a href=\"https://dexie.org/docs/\" target=\"_blank\" rel=\"noopener\">Dexie 官方文档</a>。</p>\n<h3 id=\"2-简单数据持久化\"><a href=\"#2-简单数据持久化\" class=\"headerlink\" title=\"2. 简单数据持久化\"></a>2. 简单数据持久化</h3><p>一些 UI 状态的标志位存储（比如某个弹窗是否显示过），我们一般会把这种标志位存储到 <code>localStorage</code> 中。<br>在查看 Desktop 的源码过程中，发现他们对 <code>number</code>, <code>boolean</code> 类型的数据的 get, set 进行了简单的封装。使用起来非常方便，这里贴一下对于 <code>boolean</code> 型数据的处理。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoolean</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>): <span class=\"title\">boolean</span> | <span class=\"title\">undefined</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoolean</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, defaultValue: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">boolean</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"title\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoolean</span>(<span class=\"params\"></span></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"function\"><span class=\"params\">  key: <span class=\"built_in\">string</span>,</span></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"function\"><span class=\"params\">  defaultValue?: <span class=\"built_in\">boolean</span></span></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">boolean</span> | <span class=\"title\">undefined</span> </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">  <span class=\"title\">const</span> <span class=\"title\">value</span> = <span class=\"title\">localStorage</span>.<span class=\"title\">getItem</span>(<span class=\"params\">key</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">  <span class=\"title\">if</span> (<span class=\"params\">value === <span class=\"literal\">null</span></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">return</span> <span class=\"title\">defaultValue</span></span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">if</span> (<span class=\"params\">value === '1' || value === '<span class=\"literal\">true</span>'</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"string\">'0'</span> || value === <span class=\"string\">'false'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> defaultValue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setBoolean</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, value: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  localStorage.setItem(key, value ? <span class=\"string\">'1'</span> : <span class=\"string\">'0'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/desktop/desktop/blob/development/app/src/lib/local-storage.ts\" target=\"_blank\" rel=\"noopener\">源码详见</a></p>\n<h2 id=\"五、功能实现\"><a href=\"#五、功能实现\" class=\"headerlink\" title=\"五、功能实现\"></a>五、功能实现</h2><h3 id=\"1-磁盘-编辑器版本实时同步\"><a href=\"#1-磁盘-编辑器版本实时同步\" class=\"headerlink\" title=\"1. 磁盘/编辑器版本实时同步\"></a>1. 磁盘/编辑器版本实时同步</h3><p>一般情况下，在编辑器中我们编辑的内容其实是编辑器读取磁盘文件到内存中的副本。所以说如果磁盘的文件发生了改动，比如 Git 切换分支造成文件变动，抑或是删除了磁盘文件，重命名等等都会造成内存版本和磁盘版本的不一致，即磁盘版本领先于内存版本，这个时候就可能产生冲突。解决这个问题很简单，可以使用 fs.watch/watchFile 监听当前编辑的文件，一旦发生变化，就重新读取磁盘版本，更新内存版本来实现同步。但是 fs.watch 这个 API 在工程上不是可以开箱即用的，有许多兼容问题和一些 bug。比如说</p>\n<p>Node.js fs.watch:</p>\n<ul>\n<li>Doesn’t report filenames on MacOS.</li>\n<li>Doesn’t report events at all when using editors like Sublime on MacOS.</li>\n<li>Often reports events twice.</li>\n<li>Emits most changes as rename.</li>\n<li>Does not provide an easy way to recursively watch file trees.</li>\n</ul>\n<p>Node.js fs.watchFile:</p>\n<ul>\n<li>Almost as bad at event handling.</li>\n<li>Also does not provide any recursive watching.</li>\n<li>Results in high CPU utilization.</li>\n</ul>\n<p>上面列举的点来自 <a href=\"https://github.com/paulmillr/chokidar\" target=\"_blank\" rel=\"noopener\">chokidar</a>，它是一个 Node 模块，提供了开箱可用的监听文件变化的能力。只需要监听 <code>add</code>, <code>unlink</code>, <code>change</code> 等事件读取最新版本的文本到编辑器就可以实现磁盘/编辑器版本的同步了。</p>\n<h3 id=\"2-Context-Menu\"><a href=\"#2-Context-Menu\" class=\"headerlink\" title=\"2. Context-Menu\"></a>2. Context-Menu</h3><p>Desktop 的 <code>contextmenu</code> (右键菜单)的实现基于原生 IPC 的，比较绕。</p>\n<p>首先我们需要知道的是 <code>Menu</code> 类是 <code>main process only</code> 的。</p>\n<p>在需要 <code>contextmenu</code> 的 <code>JSX.Element</code> 上绑定 <code>onContextMenu</code> 事件。构造对象数组 <code>Array&lt;MenuItem&gt;</code>, 并且为每个 MenuItem 对象绑定触发事件，再通过 IPC 将对象传递至 main 进程，值得一提的是这个时候将 MenuItem 数组赋值给了一个全局对象，暂存起来。在 main 进程构造出真正的 MenuItem 实例，绑定 MenuItem 的点击事件，触发 MenuItem 点击事件的时候记录 MenuItem 的 序列号 index，再将 index 通过 event.sender.send 将 index 传递到 renderer 进程。renderer 进程拿到 index 之后根据之前保存的全局对象取出单个 MenuItem， 执行绑定的事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onContextMenu =&gt; showContextualMenu (暂存MenuItems，ipcRenderer.send) =&gt; icpMain =&gt; menu.popup() =&gt; MenuItem.onClick(index) =&gt; event.sernder.send(index) =&gt; MenuItem.action()</span><br></pre></td></tr></table></figure>\n\n<p>所以在我的应用中使用了 remote 对象屏蔽上述复杂的 IPC 通信。在 renderer 进程完成 Menu 的构造展示和事件的绑定触发。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; remote &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MenuItem, dialog, getCurrentWindow, Menu &#125; = remote;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> onContextMenu = <span class=\"function\">(<span class=\"params\">project: Project</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> menu = <span class=\"keyword\">new</span> Menu();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> menus = [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MenuItem(&#123;</span><br><span class=\"line\">      label: <span class=\"string\">'在终端中打开'</span>,</span><br><span class=\"line\">      visible: __DARWIN__,</span><br><span class=\"line\">      click() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> accessor = <span class=\"keyword\">new</span> FileAccessor(project.filePath);</span><br><span class=\"line\">        accessor.openInTerminal();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MenuItem(&#123;</span><br><span class=\"line\">      label: <span class=\"string\">'在 vscode 中打开'</span>,</span><br><span class=\"line\">      click() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> accessor = <span class=\"keyword\">new</span> FileAccessor(project.filePath);</span><br><span class=\"line\">        accessor.openInVscode();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  menus.forEach(menu.append);</span><br><span class=\"line\">  menu.popup(&#123; <span class=\"built_in\">window</span>: getCurrentWindow() &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、日志\"><a href=\"#六、日志\" class=\"headerlink\" title=\"六、日志\"></a>六、日志</h2><p>完善的日志不论是开发环境还是生产环境都是非常重要的，大致记录 UI 状态迁移背后的数据变动，流程的分支走向，能很好的辅助开发。</p>\n<p>参考 Desktop，他们的日志基于日志库：<a href=\"https://github.com/winstonjs/winston#readme\" target=\"_blank\" rel=\"noopener\">winston</a>。</p>\n<p>在 main 进程和 renderer 进程都提供了全局 log 对象，接口都是一致的。分别是 <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>。在 renderer 进程，简单的封装了 <code>window.console</code> 对象上的 <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code> 方法，日志打印到浏览器控制台的时候也通过 IPC 传递到 main 进程，由 main 进程统一管理。 </p>\n<p>main 进程接收了来自 renderer 进程的日志信息和 main 进程自身的日志信息。设置了两个 <code>transports</code>。<code>winston.transports.Console</code> 和 <code>winston.transports.DailyRotateFile</code> 分别用于将日志信息打印在终端控制台和存储在磁盘文件。DailyRotateFile 以天为单位，设置了最多存储 14 天的上限。</p>\n<p>在 main 进程和 renderer 进程启动时分别引入日志安装模块。因为 log 方法都是暴露在全局，因此只需要在进程启动时引入一次即可。同时在 TS 环境中还需要添加 log 方法的类型声明。</p>\n<h2 id=\"七、打包，发布及更新\"><a href=\"#七、打包，发布及更新\" class=\"headerlink\" title=\"七、打包，发布及更新\"></a>七、打包，发布及更新</h2><p>开源世界已经有非常完善的打包和发布的工具 – <a href=\"https://www.electron.build\" target=\"_blank\" rel=\"noopener\">electron-builder</a>。它集多平台打包，签名，自动更新，发布到Github等平台等等功能于一身。</p>\n<p>鉴于这个工具只能在内网使用，不能发布到 Github 而且也没有没有苹果开发者工具无法进行签名，只能利用 <code>electron-builder</code> 在本机打包，发布的话只能使用手动打包上传了，用户也只能手动下载安装包覆盖安装，不能像 VSCODE 这样实现自动更新。</p>\n<p>既然不能自动更新，那么新版本下发后，如何通知到用户去下载新版本安装包更新呢？<br>从用户这一端来看，在应用每次启动的时候可以做一次请求，查询是否有版本更新，或者是在应用菜单栏提供入口，让用户手动触发更新查询。查询到服务端的最新版本后，使用 <a href=\"https://www.npmjs.com/package/semver\" target=\"_blank\" rel=\"noopener\">sermver</a> 比较本机版本是否低于服务器版本，如果是就下发通知给用户，提示用户去下载更新。</p>\n<p>在有限的条件下怎么实现这个功能呢？</p>\n<p>实现这个功能必需的三个元素：服务端标识着最新版本的可读文件；托管各个版本安装包的云空间；应用代码中的更新逻辑。</p>\n<p>服务端标识着最新版本的可读文件：每次打包时都会更新 <code>package.json</code>，所以我们直接把 <code>package.json</code> 上传到某个不带鉴权的 CDN 就可以，更新的时候就请求这个文件。</p>\n<p>托管各个版本安装包的云空间：这个可以使用云盘，云盘可以生成分享链接，把这个链接手动拷贝到 Gitlab 该版本的 tag 的 Notes 中。</p>\n<p>应用代码中的更新逻辑：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> got <span class=\"keyword\">from</span> <span class=\"string\">'got'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> semver <span class=\"keyword\">from</span> <span class=\"string\">'semver'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; app, remote, BrowserWindow &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> realApp = app || remote.app;</span><br><span class=\"line\"><span class=\"keyword\">const</span> currentVersion = realApp.getVersion();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkForUpdates</span>(<span class=\"params\"><span class=\"built_in\">window</span>: BrowserWindow, silent: <span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">`http://yourcdn/package.json?t=<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> got(url);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pkg = <span class=\"built_in\">JSON</span>.parse(response.body);</span><br><span class=\"line\">    log.debug(<span class=\"string\">'检查更新，云端版本：'</span>, pkg.version);</span><br><span class=\"line\">    log.debug(<span class=\"string\">'当前版本'</span>, currentVersion);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (semver.lt(currentVersion, pkg.version)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.webContents.send(<span class=\"string\">'update-available'</span>, pkg.version);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.webContents.send(<span class=\"string\">'update-not-available'</span>, silent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.webContents.send(<span class=\"string\">'update-error'</span>, silent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分别在应用主进程启动、用户点击应用菜单<code>检查更新</code>时调用这个方法，从而通知 UI 进程下发通知。我们期望应用主进程启动时的更新是在失败或者无更新时是静默的，不用打扰用户，所以在 IPC 管道可以提供一个 <code>silent</code> 参数。检测到更新后就可以通知用户，用户点击更新后就可以跳转到最新版本的 Gitlab tags ，引导用户下载最新版本进行手动安装。</p>\n<h2 id=\"八、其他\"><a href=\"#八、其他\" class=\"headerlink\" title=\"八、其他\"></a>八、其他</h2><h3 id=\"1-devtools\"><a href=\"#1-devtools\" class=\"headerlink\" title=\"1. devtools\"></a>1. devtools</h3><p>开发 Electron 应用中 renderer 端也是使用 Chrome devtools 来调试的。对于 React, Mobx 这类框的 devtools 扩展也可以通过 <code>electron-devtools-installer</code> 来安装。应用窗口创建之后调用<code>electron-devtools-installer</code> 进行 <code>mobx</code>、<code>react</code> 等扩展的安装。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"keyword\">default</span>: installExtension, MOBX_DEVTOOLS, REACT_DEVELOPER_TOOLS &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-devtools-installer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> extensions = [REACT_DEVELOPER_TOOLS, MOBX_DEVTOOLS];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> extension of extensions) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    installExtension(extension);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// log.error(e);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-保持窗口大小\"><a href=\"#2-保持窗口大小\" class=\"headerlink\" title=\"2. 保持窗口大小\"></a>2. 保持窗口大小</h3><p>对于桌面应用，一个常见的需求就是关闭后重新打开，需要恢复到上次打开时的窗口大小，位置。实现这个比较简单，监听窗口的 resize 事件，把窗口信息记录到当前用户的应用数据文件夹, 即 <code>app.getPath(appData)</code>。下次启动应用创建窗口时读取这个文件设置窗口信息即可。开源社区已经有对这个功能封装好的库：<a href=\"https://github.com/mawie81/electron-window-state#readme\" target=\"_blank\" rel=\"noopener\">electron-window-state</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> windowStateKeeper = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-window-state'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> win;</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'ready'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mainWindowState = windowStateKeeper(&#123;</span><br><span class=\"line\">    defaultWidth: <span class=\"number\">1000</span>,</span><br><span class=\"line\">    defaultHeight: <span class=\"number\">800</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">    <span class=\"string\">'x'</span>: mainWindowState.x,</span><br><span class=\"line\">    <span class=\"string\">'y'</span>: mainWindowState.y,</span><br><span class=\"line\">    <span class=\"string\">'width'</span>: mainWindowState.width,</span><br><span class=\"line\">    <span class=\"string\">'height'</span>: mainWindowState.height</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  mainWindowState.manage(win);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>只需要提供缺省窗口大小，剩余的事情 <code>electron-window-state</code> 都帮我们搞定了。</p>"},{"title":"【译】在生产环境中使用原生JavaScript模块","date":"2019-09-10T09:47:26.000Z","cover":"https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg","author":{"nick":"龚亮","github_name":"gongliang11"},"_content":"\n> 原文地址：https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\n> 原文作者：PHILIP WALTON\n> 译者：龚亮 ，校对：刘辉\n> 声明：本翻译仅做学习交流使用，转载请注明来源\n\n两年前，我写了一篇有关module/nomodule技术的[文章](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过`<script type=\"module\">`加载）和一个使用ES5语法的版本（通过`<script nomodule>`加载）。该技术允许你向支持模块（*译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多\"模块\"一词，都是这个含义*）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。\n<!--more-->\n但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  \n\n为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  \n\n其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  \n\n不过，当时并没有更好的方法来部署模块(*译者注：指遵循ES2015模块规范的文件*)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(*译者注：指除ES2015模块外的传统部署方式*)更好的性能。实际上，这个站点(*译者注：指原文章所在的网站*)已经在生产环境中使用原生模块好几个月了。\n\n# 对模块的误解\n与我交流过的很多人都认为模块（*译者注：指遵循ES2015模块规范的部署方式*）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:\n> ...小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。\n\n如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。\n\n如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（*译者注：原文是minifier，指去除空格注释等*）。  \n\n实际情况是，**你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！**\n\n事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（*译者注：指rollup和webpack中的runtime的代码*），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有`import`和`export`语句的模块，则不需要这些代码！\n\n幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。\n\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n尽管如此，Rollup有一个插件（[rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs)），它可以将CommonJS源代码转换为`ES2015`。如果一开始你的依赖项采用ES2015模块管理肯定会[更好](https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules)，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。\n\n在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。\n\n# 最优打包策略\n打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。\n\n同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。\n\n因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。\n\n默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。\n\n在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。\n\n那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。\n\n# 包级别的代码拆分\n如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态`import()`时[自动代码拆分](https://rollupjs.org/guide/en/#code-splitting)（在v1.0.0中添加）和通过`manualChunks`选项进行[可编程的手动代码拆分](https://rollupjs.org/guide/en/#manualchunks)（在v1.11.0中添加）。\n\n有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。\n\n这是一个使用`manualChunks`选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)\n\n```\nexport default {\n  input: {\n    main: 'src/main.mjs',\n  },\n  output: {\n    dir: 'build',\n    format: 'esm',\n    entryFileNames: '[name].[hash].mjs',\n  },\n  manualChunks(id) {\n    if (id.includes('node_modules')) {\n      // Return the directory name following the last `node_modules`.\n      // 返回最后一个node_modules后面跟着的目录名\n      // Usually this is the package, but it could also be the scope.\n      // 通常都会是一个包名，也有可能是一个私有域\n      const dirs = id.split(path.sep);\n      return dirs[dirs.lastIndexOf('node_modules') + 1];\n    }\n  },\n}\n```\n\n`manualChunks`选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。\n\n考虑从`lodash-es`包中导入`cloneDeep()`、`debounce()`和`find()`模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它`lodash`模块)一起放入一个名为`npm.lodash-es.XXXX.mjs`的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。\n\n在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):\n```\nexport {cloneDeep, debounce, find};\n```\n希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用`import`和`export`语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。\n\n例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:\n```\n(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"import1\"],{\n\n/***/ \"tLzr\":\n/*!*********************************!*\\\n  !*** ./app/scripts/import-1.js ***!\n  \\*********************************/\n/*! exports provided: import1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"import1\", function() { return import1; });\n/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ \"6xPP\");\n\nconst import1 = \"imported: \" + _dep_1__WEBPACK_IMPORTED_MODULE_0__[\"dep1\"];\n\n/***/ })\n\n}]);\n```\n\n## 如果你有数百个npm依赖项怎么办？\n我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。\n\n当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。\n\n但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。\n\n尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，`React`和`react-dom`)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项[分组为同一个文件](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162))。\n\n# 动态导入\n使用原生`import`语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。\n\n如果你想使用动态`import()`懒加载代码，那么你还必须处理这样一个事实：有些浏览器[支持模块](https://caniuse.com/#feat=es6-module)，但[不支持动态`import()`](https://caniuse.com/#feat=es6-module-dynamic-import)（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。\n\n幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态`import()`。\n\n向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用`import()`之前):\n```\nimport dynamicImportPolyfill from 'dynamic-import-polyfill';\n\n// This needs to be done before any dynamic imports are used. And if your\n// modules are hosted in a sub-directory, the path must be specified here.\ndynamicImportPolyfill.initialize({modulePath: '/modules/'});\n```\n最后要做的是告诉Rollup将输出代码中的动态`import()`重命名为你指定的另一个名称(通过[`output.dynamicImportFunction`](https://rollupjs.org/guide/en/#outputdynamicimportfunction)选项配置)。动态导入polyfill默认使用名称为__import__，但是可以[配置](https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options)它。\n\n需要重命名`import()`语句的原因是`import`是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生`import()`，因为这样做会导致语法错误。\n\n让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。\n\n## 高效加载JavaScript模块\n当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。\n\n但是，当你加载实际的JavaScript模块（通过`<script type=\"module\">`以及随后`import`语句引用的模块时），你将希望使用[`modulepreload`](https://developers.google.com/web/updates/2017/12/modulepreload)而不是传统的[`preload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content)(仅适用于原始脚本)。\n```\n<link rel=\"modulepreload\" href=\"/modules/main.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-one.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-two.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-three.XXXX.mjs\">\n<!-- ... -->\n<script type=\"module\" src=\"/modules/main.XXXX.mjs\"></script>\n```\n实际上，对于预加载原生的模块，`modulepreload`实际上比传统的`preload`要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。\n\n这意味着通过`modulepreload`加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。\n\n## 生成`modulepreload`列表\nRollup的[bundle](https://rollupjs.org/guide/en/#generatebundle)对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的[generateBundle](https://rollupjs.org/guide/en/#generatebundle)钩子中很容易获得需要预加载哪些文件的列表。\n\n虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:\n```\n{\n  generateBundle(options, bundle) {\n    // A mapping of entry chunk names to their full dependency list.\n    const modulepreloadMap = {};\n\n    for (const [fileName, chunkInfo] of Object.entries(bundle)) {\n      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) {\n        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];\n      }\n    }\n\n    // Do something with the mapping...\n    console.log(modulepreloadMap);\n  }\n}\n```\n例如，这里是我如何为这个站点以及我的[demo应用](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84)生成[modulepreload列表的](https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43)。\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n# 为什么要部署原生模块？\n如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。\n\n### 更小的代码总量\n\n当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要[webpack运行时和清单](https://webpack.js.org/concepts/manifest/)。\n\n### 更好的预加载\n正如我在前一节中提到的，使用`modulepreload`允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。\n\n因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和`modulepreload`加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。\n\n换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。\n\n### 更面向未来\n许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性[KV存储API](https://developers.google.com/web/updates/2019/03/kv-storage)时曾提到过这个问题)。\n\n以下是一些仅限模块才有的最令人兴奋的新功能：\n\n* [内置模块](https://github.com/tc39/proposal-javascript-standard-library/)\n* [HTML模块](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md)\n* [CSS模块](https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md)\n* [JSON模块](https://github.com/whatwg/html/pull/4407)\n* [导入地图](https://github.com/WICG/import-maps)\n* [workers、service workers和window之间共享模块](https://html.spec.whatwg.org/multipage/workers.html#module-worker-example)\n\n# 支持旧版浏览器\n在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。\n\n对于支持模块但不支持动态导入的浏览器，可以使用上面提到的[`dynamic-import-polyfill`](https://github.com/GoogleChromeLabs/dynamic-import-polyfill)。由于polyfill非常小，并且在可用时将使用浏览器的原生动态`import()`，因此添加这个polyfill几乎没有大小或性能成本。\n\n对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。\n\n## 一个实际的例子\n由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个[演示应用程序](https://rollup-native-modules-boilerplate.glitch.me/)，它使用了我在这里阐述的所有技术。\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n这个演示程序可以在不支持动态`import()`的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。\n\n为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:\n\n* Babel转换（包括JSX）\n* CommonJS的依赖关系（例如react，react-dom）\n* CSS依赖项\n* Asset hashing\n* 代码拆分\n* 动态导入（带有polyfill降级机制）\n* module/nomodule降级机制\n\n代码托管在[GitHub](https://github.com/philipwalton/rollup-native-modules-boilerplate)上(因此你可以派生repo并自己构建它)，而演示则托管在[Glitch](https://glitch.com/edit/#!/rollup-native-modules-boilerplate)上，因此你可以重新组合代码并使用这些特性。\n\n最重要的是查看示例中使用的[Rollup配置](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js)，因为它定义了如何生成最终模块。\n\n# 总结\n希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。\n\n以下是快速完成此工作所需步骤的摘要：\n* 使用打包器，但要确保输出格式为ES2015模块\n* 积极地进行代码拆分(如果可能的话，一直到node包)\n* 预加载静态依赖关系图中的所有模块(通过`modulepreload`)\n* 使用polyfill来支持不支持动态`import()`的浏览器\n* 使用`<script nomodule>`支持根本不支持模块的浏览器\n\n如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请[告诉我](https://twitter.com/philwalton)进展如何，因为我既想听你的问题，也想听你的成功故事！\n\n模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。\n\n> 译者评：\n1.作者上一篇文章的译文：https://jdc.jd.com/archives/4911\n2.另外一篇讲JavaScript原生模块的文章：https://www.jianshu.com/p/9aae3884b05b\n","source":"_posts/2019-09/【译】在生产环境中使用原生JavaScript模块.md","raw":"---\ntitle: 【译】在生产环境中使用原生JavaScript模块\ndate: 2019-09-10 17:47:26\ncover: https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg\ntags: \n  - type=\"module\"\n  - 代码拆分\n  - rollup打包\n  - modulepreload\ncategories: Web开发\nauthor:\n    nick: 龚亮\n    github_name: gongliang11\n---\n\n> 原文地址：https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\n> 原文作者：PHILIP WALTON\n> 译者：龚亮 ，校对：刘辉\n> 声明：本翻译仅做学习交流使用，转载请注明来源\n\n两年前，我写了一篇有关module/nomodule技术的[文章](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过`<script type=\"module\">`加载）和一个使用ES5语法的版本（通过`<script nomodule>`加载）。该技术允许你向支持模块（*译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多\"模块\"一词，都是这个含义*）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。\n<!--more-->\n但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  \n\n为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  \n\n其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  \n\n不过，当时并没有更好的方法来部署模块(*译者注：指遵循ES2015模块规范的文件*)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(*译者注：指除ES2015模块外的传统部署方式*)更好的性能。实际上，这个站点(*译者注：指原文章所在的网站*)已经在生产环境中使用原生模块好几个月了。\n\n# 对模块的误解\n与我交流过的很多人都认为模块（*译者注：指遵循ES2015模块规范的部署方式*）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:\n> ...小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。\n\n如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。\n\n如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（*译者注：原文是minifier，指去除空格注释等*）。  \n\n实际情况是，**你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！**\n\n事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（*译者注：指rollup和webpack中的runtime的代码*），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有`import`和`export`语句的模块，则不需要这些代码！\n\n幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。\n\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n尽管如此，Rollup有一个插件（[rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs)），它可以将CommonJS源代码转换为`ES2015`。如果一开始你的依赖项采用ES2015模块管理肯定会[更好](https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules)，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。\n\n在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。\n\n# 最优打包策略\n打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。\n\n同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。\n\n因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。\n\n默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。\n\n在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。\n\n那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。\n\n# 包级别的代码拆分\n如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态`import()`时[自动代码拆分](https://rollupjs.org/guide/en/#code-splitting)（在v1.0.0中添加）和通过`manualChunks`选项进行[可编程的手动代码拆分](https://rollupjs.org/guide/en/#manualchunks)（在v1.11.0中添加）。\n\n有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。\n\n这是一个使用`manualChunks`选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)\n\n```\nexport default {\n  input: {\n    main: 'src/main.mjs',\n  },\n  output: {\n    dir: 'build',\n    format: 'esm',\n    entryFileNames: '[name].[hash].mjs',\n  },\n  manualChunks(id) {\n    if (id.includes('node_modules')) {\n      // Return the directory name following the last `node_modules`.\n      // 返回最后一个node_modules后面跟着的目录名\n      // Usually this is the package, but it could also be the scope.\n      // 通常都会是一个包名，也有可能是一个私有域\n      const dirs = id.split(path.sep);\n      return dirs[dirs.lastIndexOf('node_modules') + 1];\n    }\n  },\n}\n```\n\n`manualChunks`选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。\n\n考虑从`lodash-es`包中导入`cloneDeep()`、`debounce()`和`find()`模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它`lodash`模块)一起放入一个名为`npm.lodash-es.XXXX.mjs`的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。\n\n在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):\n```\nexport {cloneDeep, debounce, find};\n```\n希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用`import`和`export`语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。\n\n例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:\n```\n(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"import1\"],{\n\n/***/ \"tLzr\":\n/*!*********************************!*\\\n  !*** ./app/scripts/import-1.js ***!\n  \\*********************************/\n/*! exports provided: import1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"import1\", function() { return import1; });\n/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ \"6xPP\");\n\nconst import1 = \"imported: \" + _dep_1__WEBPACK_IMPORTED_MODULE_0__[\"dep1\"];\n\n/***/ })\n\n}]);\n```\n\n## 如果你有数百个npm依赖项怎么办？\n我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。\n\n当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。\n\n但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。\n\n尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，`React`和`react-dom`)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项[分组为同一个文件](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162))。\n\n# 动态导入\n使用原生`import`语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。\n\n如果你想使用动态`import()`懒加载代码，那么你还必须处理这样一个事实：有些浏览器[支持模块](https://caniuse.com/#feat=es6-module)，但[不支持动态`import()`](https://caniuse.com/#feat=es6-module-dynamic-import)（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。\n\n幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态`import()`。\n\n向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用`import()`之前):\n```\nimport dynamicImportPolyfill from 'dynamic-import-polyfill';\n\n// This needs to be done before any dynamic imports are used. And if your\n// modules are hosted in a sub-directory, the path must be specified here.\ndynamicImportPolyfill.initialize({modulePath: '/modules/'});\n```\n最后要做的是告诉Rollup将输出代码中的动态`import()`重命名为你指定的另一个名称(通过[`output.dynamicImportFunction`](https://rollupjs.org/guide/en/#outputdynamicimportfunction)选项配置)。动态导入polyfill默认使用名称为__import__，但是可以[配置](https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options)它。\n\n需要重命名`import()`语句的原因是`import`是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生`import()`，因为这样做会导致语法错误。\n\n让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。\n\n## 高效加载JavaScript模块\n当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。\n\n但是，当你加载实际的JavaScript模块（通过`<script type=\"module\">`以及随后`import`语句引用的模块时），你将希望使用[`modulepreload`](https://developers.google.com/web/updates/2017/12/modulepreload)而不是传统的[`preload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content)(仅适用于原始脚本)。\n```\n<link rel=\"modulepreload\" href=\"/modules/main.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-one.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-two.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-three.XXXX.mjs\">\n<!-- ... -->\n<script type=\"module\" src=\"/modules/main.XXXX.mjs\"></script>\n```\n实际上，对于预加载原生的模块，`modulepreload`实际上比传统的`preload`要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。\n\n这意味着通过`modulepreload`加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。\n\n## 生成`modulepreload`列表\nRollup的[bundle](https://rollupjs.org/guide/en/#generatebundle)对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的[generateBundle](https://rollupjs.org/guide/en/#generatebundle)钩子中很容易获得需要预加载哪些文件的列表。\n\n虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:\n```\n{\n  generateBundle(options, bundle) {\n    // A mapping of entry chunk names to their full dependency list.\n    const modulepreloadMap = {};\n\n    for (const [fileName, chunkInfo] of Object.entries(bundle)) {\n      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) {\n        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];\n      }\n    }\n\n    // Do something with the mapping...\n    console.log(modulepreloadMap);\n  }\n}\n```\n例如，这里是我如何为这个站点以及我的[demo应用](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84)生成[modulepreload列表的](https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43)。\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n# 为什么要部署原生模块？\n如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。\n\n### 更小的代码总量\n\n当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要[webpack运行时和清单](https://webpack.js.org/concepts/manifest/)。\n\n### 更好的预加载\n正如我在前一节中提到的，使用`modulepreload`允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。\n\n因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和`modulepreload`加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。\n\n换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。\n\n### 更面向未来\n许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性[KV存储API](https://developers.google.com/web/updates/2019/03/kv-storage)时曾提到过这个问题)。\n\n以下是一些仅限模块才有的最令人兴奋的新功能：\n\n* [内置模块](https://github.com/tc39/proposal-javascript-standard-library/)\n* [HTML模块](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md)\n* [CSS模块](https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md)\n* [JSON模块](https://github.com/whatwg/html/pull/4407)\n* [导入地图](https://github.com/WICG/import-maps)\n* [workers、service workers和window之间共享模块](https://html.spec.whatwg.org/multipage/workers.html#module-worker-example)\n\n# 支持旧版浏览器\n在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。\n\n对于支持模块但不支持动态导入的浏览器，可以使用上面提到的[`dynamic-import-polyfill`](https://github.com/GoogleChromeLabs/dynamic-import-polyfill)。由于polyfill非常小，并且在可用时将使用浏览器的原生动态`import()`，因此添加这个polyfill几乎没有大小或性能成本。\n\n对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。\n\n## 一个实际的例子\n由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个[演示应用程序](https://rollup-native-modules-boilerplate.glitch.me/)，它使用了我在这里阐述的所有技术。\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n这个演示程序可以在不支持动态`import()`的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。\n\n为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:\n\n* Babel转换（包括JSX）\n* CommonJS的依赖关系（例如react，react-dom）\n* CSS依赖项\n* Asset hashing\n* 代码拆分\n* 动态导入（带有polyfill降级机制）\n* module/nomodule降级机制\n\n代码托管在[GitHub](https://github.com/philipwalton/rollup-native-modules-boilerplate)上(因此你可以派生repo并自己构建它)，而演示则托管在[Glitch](https://glitch.com/edit/#!/rollup-native-modules-boilerplate)上，因此你可以重新组合代码并使用这些特性。\n\n最重要的是查看示例中使用的[Rollup配置](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js)，因为它定义了如何生成最终模块。\n\n# 总结\n希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。\n\n以下是快速完成此工作所需步骤的摘要：\n* 使用打包器，但要确保输出格式为ES2015模块\n* 积极地进行代码拆分(如果可能的话，一直到node包)\n* 预加载静态依赖关系图中的所有模块(通过`modulepreload`)\n* 使用polyfill来支持不支持动态`import()`的浏览器\n* 使用`<script nomodule>`支持根本不支持模块的浏览器\n\n如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请[告诉我](https://twitter.com/philwalton)进展如何，因为我既想听你的问题，也想听你的成功故事！\n\n模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。\n\n> 译者评：\n1.作者上一篇文章的译文：https://jdc.jd.com/archives/4911\n2.另外一篇讲JavaScript原生模块的文章：https://www.jianshu.com/p/9aae3884b05b\n","slug":"【译】在生产环境中使用原生JavaScript模块","published":1,"updated":"2019-11-20T05:13:20.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflrq002lsoyx54zq9z9q","content":"<blockquote>\n<p>原文地址：<a href=\"https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\" target=\"_blank\" rel=\"noopener\">https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/</a><br>原文作者：PHILIP WALTON<br>译者：龚亮 ，校对：刘辉<br>声明：本翻译仅做学习交流使用，转载请注明来源</p>\n</blockquote>\n<p>两年前，我写了一篇有关module/nomodule技术的<a href=\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\" target=\"_blank\" rel=\"noopener\">文章</a>，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过<code>&lt;script type=&quot;module&quot;&gt;</code>加载）和一个使用ES5语法的版本（通过<code>&lt;script nomodule&gt;</code>加载）。该技术允许你向支持模块（<em>译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多”模块”一词，都是这个含义</em>）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。</p>\n<a id=\"more\"></a>\n<p>但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  </p>\n<p>为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  </p>\n<p>其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  </p>\n<p>不过，当时并没有更好的方法来部署模块(<em>译者注：指遵循ES2015模块规范的文件</em>)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(<em>译者注：指除ES2015模块外的传统部署方式</em>)更好的性能。实际上，这个站点(<em>译者注：指原文章所在的网站</em>)已经在生产环境中使用原生模块好几个月了。</p>\n<h1 id=\"对模块的误解\"><a href=\"#对模块的误解\" class=\"headerlink\" title=\"对模块的误解\"></a>对模块的误解</h1><p>与我交流过的很多人都认为模块（<em>译者注：指遵循ES2015模块规范的部署方式</em>）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:</p>\n<blockquote>\n<p>…小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。</p>\n</blockquote>\n<p>如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：</p>\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。</p>\n<p>如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（<em>译者注：原文是minifier，指去除空格注释等</em>）。  </p>\n<p>实际情况是，<strong>你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！</strong></p>\n<p>事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（<em>译者注：指rollup和webpack中的runtime的代码</em>），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有<code>import</code>和<code>export</code>语句的模块，则不需要这些代码！</p>\n<p>幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n<p>尽管如此，Rollup有一个插件（<a href=\"https://github.com/rollup/rollup-plugin-commonjs\" target=\"_blank\" rel=\"noopener\">rollup-plugin-commonjs</a>），它可以将CommonJS源代码转换为<code>ES2015</code>。如果一开始你的依赖项采用ES2015模块管理肯定会<a href=\"https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules\" target=\"_blank\" rel=\"noopener\">更好</a>，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。</p>\n<p>在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。</p>\n<h1 id=\"最优打包策略\"><a href=\"#最优打包策略\" class=\"headerlink\" title=\"最优打包策略\"></a>最优打包策略</h1><p>打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。</p>\n<p>同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。</p>\n<p>因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。</p>\n<p>默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。</p>\n<p>在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。</p>\n<p>那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。</p>\n<h1 id=\"包级别的代码拆分\"><a href=\"#包级别的代码拆分\" class=\"headerlink\" title=\"包级别的代码拆分\"></a>包级别的代码拆分</h1><p>如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态<code>import()</code>时<a href=\"https://rollupjs.org/guide/en/#code-splitting\" target=\"_blank\" rel=\"noopener\">自动代码拆分</a>（在v1.0.0中添加）和通过<code>manualChunks</code>选项进行<a href=\"https://rollupjs.org/guide/en/#manualchunks\" target=\"_blank\" rel=\"noopener\">可编程的手动代码拆分</a>（在v1.11.0中添加）。</p>\n<p>有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。</p>\n<p>这是一个使用<code>manualChunks</code>选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  input: &#123;</span><br><span class=\"line\">    main: &apos;src/main.mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    dir: &apos;build&apos;,</span><br><span class=\"line\">    format: &apos;esm&apos;,</span><br><span class=\"line\">    entryFileNames: &apos;[name].[hash].mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  manualChunks(id) &#123;</span><br><span class=\"line\">    if (id.includes(&apos;node_modules&apos;)) &#123;</span><br><span class=\"line\">      // Return the directory name following the last `node_modules`.</span><br><span class=\"line\">      // 返回最后一个node_modules后面跟着的目录名</span><br><span class=\"line\">      // Usually this is the package, but it could also be the scope.</span><br><span class=\"line\">      // 通常都会是一个包名，也有可能是一个私有域</span><br><span class=\"line\">      const dirs = id.split(path.sep);</span><br><span class=\"line\">      return dirs[dirs.lastIndexOf(&apos;node_modules&apos;) + 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>manualChunks</code>选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。</p>\n<p>考虑从<code>lodash-es</code>包中导入<code>cloneDeep()</code>、<code>debounce()</code>和<code>find()</code>模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它<code>lodash</code>模块)一起放入一个名为<code>npm.lodash-es.XXXX.mjs</code>的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。</p>\n<p>在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;cloneDeep, debounce, find&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用<code>import</code>和<code>export</code>语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。</p>\n<p>例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[&quot;import1&quot;],&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &quot;tLzr&quot;:</span><br><span class=\"line\">/*!*********************************!*\\</span><br><span class=\"line\">  !*** ./app/scripts/import-1.js ***!</span><br><span class=\"line\">  \\*********************************/</span><br><span class=\"line\">/*! exports provided: import1 */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;import1&quot;, function() &#123; return import1; &#125;);</span><br><span class=\"line\">/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ &quot;6xPP&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">const import1 = &quot;imported: &quot; + _dep_1__WEBPACK_IMPORTED_MODULE_0__[&quot;dep1&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如果你有数百个npm依赖项怎么办？\"><a href=\"#如果你有数百个npm依赖项怎么办？\" class=\"headerlink\" title=\"如果你有数百个npm依赖项怎么办？\"></a>如果你有数百个npm依赖项怎么办？</h2><p>我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。</p>\n<p>当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。</p>\n<p>但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。</p>\n<p>尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，<code>React</code>和<code>react-dom</code>)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162\" target=\"_blank\" rel=\"noopener\">分组为同一个文件</a>)。</p>\n<h1 id=\"动态导入\"><a href=\"#动态导入\" class=\"headerlink\" title=\"动态导入\"></a>动态导入</h1><p>使用原生<code>import</code>语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。</p>\n<p>如果你想使用动态<code>import()</code>懒加载代码，那么你还必须处理这样一个事实：有些浏览器<a href=\"https://caniuse.com/#feat=es6-module\" target=\"_blank\" rel=\"noopener\">支持模块</a>，但<a href=\"https://caniuse.com/#feat=es6-module-dynamic-import\" target=\"_blank\" rel=\"noopener\">不支持动态<code>import()</code></a>（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。</p>\n<p>幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态<code>import()</code>。</p>\n<p>向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用<code>import()</code>之前):</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dynamicImportPolyfill from &apos;dynamic-import-polyfill&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// This needs to be done before any dynamic imports are used. And if your</span><br><span class=\"line\">// modules are hosted in a sub-directory, the path must be specified here.</span><br><span class=\"line\">dynamicImportPolyfill.initialize(&#123;modulePath: &apos;/modules/&apos;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后要做的是告诉Rollup将输出代码中的动态<code>import()</code>重命名为你指定的另一个名称(通过<a href=\"https://rollupjs.org/guide/en/#outputdynamicimportfunction\" target=\"_blank\" rel=\"noopener\"><code>output.dynamicImportFunction</code></a>选项配置)。动态导入polyfill默认使用名称为<strong>import</strong>，但是可以<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options\" target=\"_blank\" rel=\"noopener\">配置</a>它。</p>\n<p>需要重命名<code>import()</code>语句的原因是<code>import</code>是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生<code>import()</code>，因为这样做会导致语法错误。</p>\n<p>让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。</p>\n<h2 id=\"高效加载JavaScript模块\"><a href=\"#高效加载JavaScript模块\" class=\"headerlink\" title=\"高效加载JavaScript模块\"></a>高效加载JavaScript模块</h2><p>当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。</p>\n<p>但是，当你加载实际的JavaScript模块（通过<code>&lt;script type=&quot;module&quot;&gt;</code>以及随后<code>import</code>语句引用的模块时），你将希望使用<a href=\"https://developers.google.com/web/updates/2017/12/modulepreload\" target=\"_blank\" rel=\"noopener\"><code>modulepreload</code></a>而不是传统的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\"><code>preload</code></a>(仅适用于原始脚本)。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/main.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-one.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-two.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-three.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;/modules/main.XXXX.mjs&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，对于预加载原生的模块，<code>modulepreload</code>实际上比传统的<code>preload</code>要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。</p>\n<p>这意味着通过<code>modulepreload</code>加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。</p>\n<h2 id=\"生成modulepreload列表\"><a href=\"#生成modulepreload列表\" class=\"headerlink\" title=\"生成modulepreload列表\"></a>生成<code>modulepreload</code>列表</h2><p>Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">bundle</a>对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">generateBundle</a>钩子中很容易获得需要预加载哪些文件的列表。</p>\n<p>虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  generateBundle(options, bundle) &#123;</span><br><span class=\"line\">    // A mapping of entry chunk names to their full dependency list.</span><br><span class=\"line\">    const modulepreloadMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const [fileName, chunkInfo] of Object.entries(bundle)) &#123;</span><br><span class=\"line\">      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) &#123;</span><br><span class=\"line\">        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Do something with the mapping...</span><br><span class=\"line\">    console.log(modulepreloadMap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如，这里是我如何为这个站点以及我的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84\" target=\"_blank\" rel=\"noopener\">demo应用</a>生成<a href=\"https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43\" target=\"_blank\" rel=\"noopener\">modulepreload列表的</a>。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n<h1 id=\"为什么要部署原生模块？\"><a href=\"#为什么要部署原生模块？\" class=\"headerlink\" title=\"为什么要部署原生模块？\"></a>为什么要部署原生模块？</h1><p>如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。</p>\n<h3 id=\"更小的代码总量\"><a href=\"#更小的代码总量\" class=\"headerlink\" title=\"更小的代码总量\"></a>更小的代码总量</h3><p>当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要<a href=\"https://webpack.js.org/concepts/manifest/\" target=\"_blank\" rel=\"noopener\">webpack运行时和清单</a>。</p>\n<h3 id=\"更好的预加载\"><a href=\"#更好的预加载\" class=\"headerlink\" title=\"更好的预加载\"></a>更好的预加载</h3><p>正如我在前一节中提到的，使用<code>modulepreload</code>允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。</p>\n<p>因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和<code>modulepreload</code>加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。</p>\n<p>换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。</p>\n<h3 id=\"更面向未来\"><a href=\"#更面向未来\" class=\"headerlink\" title=\"更面向未来\"></a>更面向未来</h3><p>许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性<a href=\"https://developers.google.com/web/updates/2019/03/kv-storage\" target=\"_blank\" rel=\"noopener\">KV存储API</a>时曾提到过这个问题)。</p>\n<p>以下是一些仅限模块才有的最令人兴奋的新功能：</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-javascript-standard-library/\" target=\"_blank\" rel=\"noopener\">内置模块</a></li>\n<li><a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md\" target=\"_blank\" rel=\"noopener\">HTML模块</a></li>\n<li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md\" target=\"_blank\" rel=\"noopener\">CSS模块</a></li>\n<li><a href=\"https://github.com/whatwg/html/pull/4407\" target=\"_blank\" rel=\"noopener\">JSON模块</a></li>\n<li><a href=\"https://github.com/WICG/import-maps\" target=\"_blank\" rel=\"noopener\">导入地图</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/workers.html#module-worker-example\" target=\"_blank\" rel=\"noopener\">workers、service workers和window之间共享模块</a></li>\n</ul>\n<h1 id=\"支持旧版浏览器\"><a href=\"#支持旧版浏览器\" class=\"headerlink\" title=\"支持旧版浏览器\"></a>支持旧版浏览器</h1><p>在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。</p>\n<p>对于支持模块但不支持动态导入的浏览器，可以使用上面提到的<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill\" target=\"_blank\" rel=\"noopener\"><code>dynamic-import-polyfill</code></a>。由于polyfill非常小，并且在可用时将使用浏览器的原生动态<code>import()</code>，因此添加这个polyfill几乎没有大小或性能成本。</p>\n<p>对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。</p>\n<h2 id=\"一个实际的例子\"><a href=\"#一个实际的例子\" class=\"headerlink\" title=\"一个实际的例子\"></a>一个实际的例子</h2><p>由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个<a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">演示应用程序</a>，它使用了我在这里阐述的所有技术。</p>\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n<p>这个演示程序可以在不支持动态<code>import()</code>的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。</p>\n<p>为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:</p>\n<ul>\n<li>Babel转换（包括JSX）</li>\n<li>CommonJS的依赖关系（例如react，react-dom）</li>\n<li>CSS依赖项</li>\n<li>Asset hashing</li>\n<li>代码拆分</li>\n<li>动态导入（带有polyfill降级机制）</li>\n<li>module/nomodule降级机制</li>\n</ul>\n<p>代码托管在<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">GitHub</a>上(因此你可以派生repo并自己构建它)，而演示则托管在<a href=\"https://glitch.com/edit/#!/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">Glitch</a>上，因此你可以重新组合代码并使用这些特性。</p>\n<p>最重要的是查看示例中使用的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js\" target=\"_blank\" rel=\"noopener\">Rollup配置</a>，因为它定义了如何生成最终模块。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。</p>\n<p>以下是快速完成此工作所需步骤的摘要：</p>\n<ul>\n<li>使用打包器，但要确保输出格式为ES2015模块</li>\n<li>积极地进行代码拆分(如果可能的话，一直到node包)</li>\n<li>预加载静态依赖关系图中的所有模块(通过<code>modulepreload</code>)</li>\n<li>使用polyfill来支持不支持动态<code>import()</code>的浏览器</li>\n<li>使用<code>&lt;script nomodule&gt;</code>支持根本不支持模块的浏览器</li>\n</ul>\n<p>如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请<a href=\"https://twitter.com/philwalton\" target=\"_blank\" rel=\"noopener\">告诉我</a>进展如何，因为我既想听你的问题，也想听你的成功故事！</p>\n<p>模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。</p>\n<blockquote>\n<p>译者评：<br>1.作者上一篇文章的译文：<a href=\"https://jdc.jd.com/archives/4911\" target=\"_blank\" rel=\"noopener\">https://jdc.jd.com/archives/4911</a><br>2.另外一篇讲JavaScript原生模块的文章：<a href=\"https://www.jianshu.com/p/9aae3884b05b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9aae3884b05b</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文地址：<a href=\"https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\" target=\"_blank\" rel=\"noopener\">https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/</a><br>原文作者：PHILIP WALTON<br>译者：龚亮 ，校对：刘辉<br>声明：本翻译仅做学习交流使用，转载请注明来源</p>\n</blockquote>\n<p>两年前，我写了一篇有关module/nomodule技术的<a href=\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\" target=\"_blank\" rel=\"noopener\">文章</a>，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过<code>&lt;script type=&quot;module&quot;&gt;</code>加载）和一个使用ES5语法的版本（通过<code>&lt;script nomodule&gt;</code>加载）。该技术允许你向支持模块（<em>译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多”模块”一词，都是这个含义</em>）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。</p>","more":"<p>但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  </p>\n<p>为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  </p>\n<p>其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  </p>\n<p>不过，当时并没有更好的方法来部署模块(<em>译者注：指遵循ES2015模块规范的文件</em>)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(<em>译者注：指除ES2015模块外的传统部署方式</em>)更好的性能。实际上，这个站点(<em>译者注：指原文章所在的网站</em>)已经在生产环境中使用原生模块好几个月了。</p>\n<h1 id=\"对模块的误解\"><a href=\"#对模块的误解\" class=\"headerlink\" title=\"对模块的误解\"></a>对模块的误解</h1><p>与我交流过的很多人都认为模块（<em>译者注：指遵循ES2015模块规范的部署方式</em>）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:</p>\n<blockquote>\n<p>…小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。</p>\n</blockquote>\n<p>如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：</p>\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。</p>\n<p>如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（<em>译者注：原文是minifier，指去除空格注释等</em>）。  </p>\n<p>实际情况是，<strong>你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！</strong></p>\n<p>事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（<em>译者注：指rollup和webpack中的runtime的代码</em>），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有<code>import</code>和<code>export</code>语句的模块，则不需要这些代码！</p>\n<p>幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n<p>尽管如此，Rollup有一个插件（<a href=\"https://github.com/rollup/rollup-plugin-commonjs\" target=\"_blank\" rel=\"noopener\">rollup-plugin-commonjs</a>），它可以将CommonJS源代码转换为<code>ES2015</code>。如果一开始你的依赖项采用ES2015模块管理肯定会<a href=\"https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules\" target=\"_blank\" rel=\"noopener\">更好</a>，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。</p>\n<p>在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。</p>\n<h1 id=\"最优打包策略\"><a href=\"#最优打包策略\" class=\"headerlink\" title=\"最优打包策略\"></a>最优打包策略</h1><p>打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。</p>\n<p>同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。</p>\n<p>因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。</p>\n<p>默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。</p>\n<p>在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。</p>\n<p>那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。</p>\n<h1 id=\"包级别的代码拆分\"><a href=\"#包级别的代码拆分\" class=\"headerlink\" title=\"包级别的代码拆分\"></a>包级别的代码拆分</h1><p>如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态<code>import()</code>时<a href=\"https://rollupjs.org/guide/en/#code-splitting\" target=\"_blank\" rel=\"noopener\">自动代码拆分</a>（在v1.0.0中添加）和通过<code>manualChunks</code>选项进行<a href=\"https://rollupjs.org/guide/en/#manualchunks\" target=\"_blank\" rel=\"noopener\">可编程的手动代码拆分</a>（在v1.11.0中添加）。</p>\n<p>有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。</p>\n<p>这是一个使用<code>manualChunks</code>选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  input: &#123;</span><br><span class=\"line\">    main: &apos;src/main.mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    dir: &apos;build&apos;,</span><br><span class=\"line\">    format: &apos;esm&apos;,</span><br><span class=\"line\">    entryFileNames: &apos;[name].[hash].mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  manualChunks(id) &#123;</span><br><span class=\"line\">    if (id.includes(&apos;node_modules&apos;)) &#123;</span><br><span class=\"line\">      // Return the directory name following the last `node_modules`.</span><br><span class=\"line\">      // 返回最后一个node_modules后面跟着的目录名</span><br><span class=\"line\">      // Usually this is the package, but it could also be the scope.</span><br><span class=\"line\">      // 通常都会是一个包名，也有可能是一个私有域</span><br><span class=\"line\">      const dirs = id.split(path.sep);</span><br><span class=\"line\">      return dirs[dirs.lastIndexOf(&apos;node_modules&apos;) + 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>manualChunks</code>选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。</p>\n<p>考虑从<code>lodash-es</code>包中导入<code>cloneDeep()</code>、<code>debounce()</code>和<code>find()</code>模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它<code>lodash</code>模块)一起放入一个名为<code>npm.lodash-es.XXXX.mjs</code>的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。</p>\n<p>在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;cloneDeep, debounce, find&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用<code>import</code>和<code>export</code>语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。</p>\n<p>例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[&quot;import1&quot;],&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &quot;tLzr&quot;:</span><br><span class=\"line\">/*!*********************************!*\\</span><br><span class=\"line\">  !*** ./app/scripts/import-1.js ***!</span><br><span class=\"line\">  \\*********************************/</span><br><span class=\"line\">/*! exports provided: import1 */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;import1&quot;, function() &#123; return import1; &#125;);</span><br><span class=\"line\">/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ &quot;6xPP&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">const import1 = &quot;imported: &quot; + _dep_1__WEBPACK_IMPORTED_MODULE_0__[&quot;dep1&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如果你有数百个npm依赖项怎么办？\"><a href=\"#如果你有数百个npm依赖项怎么办？\" class=\"headerlink\" title=\"如果你有数百个npm依赖项怎么办？\"></a>如果你有数百个npm依赖项怎么办？</h2><p>我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。</p>\n<p>当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。</p>\n<p>但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。</p>\n<p>尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，<code>React</code>和<code>react-dom</code>)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162\" target=\"_blank\" rel=\"noopener\">分组为同一个文件</a>)。</p>\n<h1 id=\"动态导入\"><a href=\"#动态导入\" class=\"headerlink\" title=\"动态导入\"></a>动态导入</h1><p>使用原生<code>import</code>语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。</p>\n<p>如果你想使用动态<code>import()</code>懒加载代码，那么你还必须处理这样一个事实：有些浏览器<a href=\"https://caniuse.com/#feat=es6-module\" target=\"_blank\" rel=\"noopener\">支持模块</a>，但<a href=\"https://caniuse.com/#feat=es6-module-dynamic-import\" target=\"_blank\" rel=\"noopener\">不支持动态<code>import()</code></a>（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。</p>\n<p>幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态<code>import()</code>。</p>\n<p>向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用<code>import()</code>之前):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dynamicImportPolyfill from &apos;dynamic-import-polyfill&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// This needs to be done before any dynamic imports are used. And if your</span><br><span class=\"line\">// modules are hosted in a sub-directory, the path must be specified here.</span><br><span class=\"line\">dynamicImportPolyfill.initialize(&#123;modulePath: &apos;/modules/&apos;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后要做的是告诉Rollup将输出代码中的动态<code>import()</code>重命名为你指定的另一个名称(通过<a href=\"https://rollupjs.org/guide/en/#outputdynamicimportfunction\" target=\"_blank\" rel=\"noopener\"><code>output.dynamicImportFunction</code></a>选项配置)。动态导入polyfill默认使用名称为<strong>import</strong>，但是可以<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options\" target=\"_blank\" rel=\"noopener\">配置</a>它。</p>\n<p>需要重命名<code>import()</code>语句的原因是<code>import</code>是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生<code>import()</code>，因为这样做会导致语法错误。</p>\n<p>让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。</p>\n<h2 id=\"高效加载JavaScript模块\"><a href=\"#高效加载JavaScript模块\" class=\"headerlink\" title=\"高效加载JavaScript模块\"></a>高效加载JavaScript模块</h2><p>当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。</p>\n<p>但是，当你加载实际的JavaScript模块（通过<code>&lt;script type=&quot;module&quot;&gt;</code>以及随后<code>import</code>语句引用的模块时），你将希望使用<a href=\"https://developers.google.com/web/updates/2017/12/modulepreload\" target=\"_blank\" rel=\"noopener\"><code>modulepreload</code></a>而不是传统的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\"><code>preload</code></a>(仅适用于原始脚本)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/main.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-one.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-two.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-three.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;/modules/main.XXXX.mjs&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，对于预加载原生的模块，<code>modulepreload</code>实际上比传统的<code>preload</code>要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。</p>\n<p>这意味着通过<code>modulepreload</code>加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。</p>\n<h2 id=\"生成modulepreload列表\"><a href=\"#生成modulepreload列表\" class=\"headerlink\" title=\"生成modulepreload列表\"></a>生成<code>modulepreload</code>列表</h2><p>Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">bundle</a>对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">generateBundle</a>钩子中很容易获得需要预加载哪些文件的列表。</p>\n<p>虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  generateBundle(options, bundle) &#123;</span><br><span class=\"line\">    // A mapping of entry chunk names to their full dependency list.</span><br><span class=\"line\">    const modulepreloadMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const [fileName, chunkInfo] of Object.entries(bundle)) &#123;</span><br><span class=\"line\">      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) &#123;</span><br><span class=\"line\">        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Do something with the mapping...</span><br><span class=\"line\">    console.log(modulepreloadMap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如，这里是我如何为这个站点以及我的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84\" target=\"_blank\" rel=\"noopener\">demo应用</a>生成<a href=\"https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43\" target=\"_blank\" rel=\"noopener\">modulepreload列表的</a>。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n<h1 id=\"为什么要部署原生模块？\"><a href=\"#为什么要部署原生模块？\" class=\"headerlink\" title=\"为什么要部署原生模块？\"></a>为什么要部署原生模块？</h1><p>如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。</p>\n<h3 id=\"更小的代码总量\"><a href=\"#更小的代码总量\" class=\"headerlink\" title=\"更小的代码总量\"></a>更小的代码总量</h3><p>当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要<a href=\"https://webpack.js.org/concepts/manifest/\" target=\"_blank\" rel=\"noopener\">webpack运行时和清单</a>。</p>\n<h3 id=\"更好的预加载\"><a href=\"#更好的预加载\" class=\"headerlink\" title=\"更好的预加载\"></a>更好的预加载</h3><p>正如我在前一节中提到的，使用<code>modulepreload</code>允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。</p>\n<p>因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和<code>modulepreload</code>加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。</p>\n<p>换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。</p>\n<h3 id=\"更面向未来\"><a href=\"#更面向未来\" class=\"headerlink\" title=\"更面向未来\"></a>更面向未来</h3><p>许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性<a href=\"https://developers.google.com/web/updates/2019/03/kv-storage\" target=\"_blank\" rel=\"noopener\">KV存储API</a>时曾提到过这个问题)。</p>\n<p>以下是一些仅限模块才有的最令人兴奋的新功能：</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-javascript-standard-library/\" target=\"_blank\" rel=\"noopener\">内置模块</a></li>\n<li><a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md\" target=\"_blank\" rel=\"noopener\">HTML模块</a></li>\n<li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md\" target=\"_blank\" rel=\"noopener\">CSS模块</a></li>\n<li><a href=\"https://github.com/whatwg/html/pull/4407\" target=\"_blank\" rel=\"noopener\">JSON模块</a></li>\n<li><a href=\"https://github.com/WICG/import-maps\" target=\"_blank\" rel=\"noopener\">导入地图</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/workers.html#module-worker-example\" target=\"_blank\" rel=\"noopener\">workers、service workers和window之间共享模块</a></li>\n</ul>\n<h1 id=\"支持旧版浏览器\"><a href=\"#支持旧版浏览器\" class=\"headerlink\" title=\"支持旧版浏览器\"></a>支持旧版浏览器</h1><p>在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。</p>\n<p>对于支持模块但不支持动态导入的浏览器，可以使用上面提到的<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill\" target=\"_blank\" rel=\"noopener\"><code>dynamic-import-polyfill</code></a>。由于polyfill非常小，并且在可用时将使用浏览器的原生动态<code>import()</code>，因此添加这个polyfill几乎没有大小或性能成本。</p>\n<p>对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。</p>\n<h2 id=\"一个实际的例子\"><a href=\"#一个实际的例子\" class=\"headerlink\" title=\"一个实际的例子\"></a>一个实际的例子</h2><p>由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个<a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">演示应用程序</a>，它使用了我在这里阐述的所有技术。</p>\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n<p>这个演示程序可以在不支持动态<code>import()</code>的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。</p>\n<p>为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:</p>\n<ul>\n<li>Babel转换（包括JSX）</li>\n<li>CommonJS的依赖关系（例如react，react-dom）</li>\n<li>CSS依赖项</li>\n<li>Asset hashing</li>\n<li>代码拆分</li>\n<li>动态导入（带有polyfill降级机制）</li>\n<li>module/nomodule降级机制</li>\n</ul>\n<p>代码托管在<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">GitHub</a>上(因此你可以派生repo并自己构建它)，而演示则托管在<a href=\"https://glitch.com/edit/#!/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">Glitch</a>上，因此你可以重新组合代码并使用这些特性。</p>\n<p>最重要的是查看示例中使用的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js\" target=\"_blank\" rel=\"noopener\">Rollup配置</a>，因为它定义了如何生成最终模块。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。</p>\n<p>以下是快速完成此工作所需步骤的摘要：</p>\n<ul>\n<li>使用打包器，但要确保输出格式为ES2015模块</li>\n<li>积极地进行代码拆分(如果可能的话，一直到node包)</li>\n<li>预加载静态依赖关系图中的所有模块(通过<code>modulepreload</code>)</li>\n<li>使用polyfill来支持不支持动态<code>import()</code>的浏览器</li>\n<li>使用<code>&lt;script nomodule&gt;</code>支持根本不支持模块的浏览器</li>\n</ul>\n<p>如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请<a href=\"https://twitter.com/philwalton\" target=\"_blank\" rel=\"noopener\">告诉我</a>进展如何，因为我既想听你的问题，也想听你的成功故事！</p>\n<p>模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。</p>\n<blockquote>\n<p>译者评：<br>1.作者上一篇文章的译文：<a href=\"https://jdc.jd.com/archives/4911\" target=\"_blank\" rel=\"noopener\">https://jdc.jd.com/archives/4911</a><br>2.另外一篇讲JavaScript原生模块的文章：<a href=\"https://www.jianshu.com/p/9aae3884b05b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9aae3884b05b</a></p>\n</blockquote>"},{"title":"换种方式读源码：如何实现一个简易版的Mocha","date":"2019-10-09T03:38:01.000Z","cover":"https://img12.360buyimg.com/jdphoto/s720x500_jfs/t1/55376/13/6006/26944/5d39aef7E0f8caba4/5943c06be69970c0.jpg","thumbnail":"https://img12.360buyimg.com/jdphoto/s720x500_jfs/t1/55376/13/6006/26944/5d39aef7E0f8caba4/5943c06be69970c0.jpg","_content":"\n> 作者：黄浩群\n\n## 前言\n\nMocha 是目前最流行的 JavaScript 测试框架，理解 Mocha 的内部实现原理有助于我们更深入地了解和学习自动化测试。然而阅读源码一直是个让人望而生畏的过程，大量的高级写法经常是晦涩难懂，大量的边缘情况的处理也十分影响对核心代码的理解，以至于写一篇源码解析过后往往是连自己都看不懂。所以，这次我们不生啃 Mocha 源码，换个方式，从零开始一步步实现一个简易版的 Mocha。\n\n## 我们将实现什么？\n\n- 实现 Mocha 框架的 BDD 风格测试，能通过 describe/it 函数定义一组或单个的测试用例；\n- 实现 Mocha 框架的 Hook 机制，包括 before、after、beforeEach、afterEach；\n- 实现简单格式的测试报告输出。\n<!--more-->\n## Mocha 的 BDD 测试\n\nMocha 支持 BDD/TDD 等多种测试风格，默认使用 BDD 接口。BDD（行为驱动开发）是一种以需求为导向的敏捷开发方法，相比主张”测试先行“的 TDD（测试驱动开发）而言，它强调”需求先行“，从一个更加宏观的角度去关注包括开发、QA、需求方在内的多方利益相关者的协作关系，力求让开发者“做正确的事“。在 Mocha 中，一个简单的 BDD 式测试用例如下：\n\n```js\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    before(function() {\n      // ...\n    });\n    it('should return -1 when not present', function() {\n      // ...\n    });\n    it('should return the index when present', function() {\n      // ...\n    });\n    after(function() {\n      // ...\n    });\n  });\n});\n```\n\nMocha 的 BDD 测试主要包括以下几个 API：\n- `describe/context`：行为描述，代表一个测试块，是一组测试单元的集合；\n- `it/specify`：描述了一个测试单元，是最小的测试单位；\n- `before`：Hook 函数，在执行该测试块之前执行；\n- `after`：Hook 函数，在执行该测试块之后执行；\n- `beforeEach`：Hook 函数，在执行该测试块中每个测试单元之前执行；\n- `afterEach`：Hook 函数，在执行该测试块中每个测试单元之后执行。\n\n## 开始\n\n话不多说，我们直接开始。\n\n#### 一、目录设计\n\n新建一个项目，命名为 simple-mocha。目录结构如下：\n\n```js\n├─ mocha/\n│   ├─ index.js\n│   ├─ src/\n│   ├─ interfaces/\n│   └─ reporters/\n├─ test/\n└─ package.json\n```\n\n先对这个目录结构作简单解释：\n- `mocha/`：存放我们即将实现的 simple-mocha 的源代码\n- `mocha/index.js`：simple-mocha 入口\n- `mocha/src/`：simple-mocha 核心代码\n- `mocha/interfaces/`：存放各类风格的测试接口，如 BDD\n- `mocha/reporters/`：存放用于输出测试报告的各种 reporter，如 SPEC\n- `test/`：存放我们编写的测试用例\n- `package.json`\n\n其中 package.json 内容如下：\n\n```json\n{\n  \"name\": \"simple-mocha\",\n  \"version\": \"1.0.0\",\n  \"description\": \"a simple mocha for understanding the mechanism of mocha\",\n  \"main\": \"\",\n  \"scripts\": {\n    \"test\": \"node mocha/index.js\"\n  },\n  \"author\": \"hankle\",\n  \"license\": \"ISC\"\n}\n```\n\n执行 `npm test` 就可以启动执行测试用例。\n\n#### 二、模块设计\n\nMocha 的 BDD 测试应该是一个”先定义后执行“的过程，这样才能保证其 Hook 机制正确执行，而与代码编写顺序无关，因此我们把整个测试流程分为两个阶段：收集测试用例（定义）和执行测试用例（执行）。我们构造了一个 Mocha 类来完成这两个过程，同时这个类也负责统筹协调其他各模块的执行，因此它是整个测试流程的核心。\n\n```js\n// mocha/src/mocha.js\nclass Mocha {\n  constructor() {}\n  run() {}\n}\n\nmodule.exports = Mocha;\n```\n\n```js\n// mocha/index.js\nconst Mocha = require('./src/mocha');\n\nconst mocha = new Mocha();\nmocha.run();\n```\n\n另一方面我们知道，describe 函数描述了一个测试集合，这个测试集合除包括若干测试单元外，还拥有着一些自身的 Hook 函数，维护了一套严格的执行流。it 函数描述了一个测试单元，它需要执行测试用例，并且接收断言结果。这是两个逻辑复杂的单元，同时需要维护一定的内部状态，我们用两个类（Suite/Test）来分别构造它们。此外我们可以看出，BDD 风格的测试用例是一个典型的树形结构，describe 定义的测试块可以包含测试块，也可以包含 it 定义的测试单元。所以 Suite/Test 实例还将作为节点，构造出一棵 suite-test 树。比如下边这个测试用例：\n\n```js\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when not present', function () {\n      // ...\n    })\n    it('should return the index when present', function () {\n      // ...\n    })\n  })\n\n  describe('#every()', function () {\n    it('should return true when all items are satisfied', function () {\n      // ...\n    })\n  })\n})\n```\n\n由它构造出来的 suite-test 树是这样的：\n\n```js\n                                             ┌────────────────────────────────────────────────────────┐\n                                           ┌─┤        test:\"should return -1 when not present\"        │\n                    ┌────────────────────┐ │ └────────────────────────────────────────────────────────┘\n                  ┌─┤ suite:\"#indexOf()\" ├─┤\n                  │ └────────────────────┘ │ ┌────────────────────────────────────────────────────────┐\n┌───────────────┐ │                        └─┤       test:\"should return the index when present\"      │\n│ suite:\"Array\" ├─┤                          └────────────────────────────────────────────────────────┘\n└───────────────┘ │\n                  │ ┌────────────────────┐   ┌────────────────────────────────────────────────────────┐\n                  └─┤  suite:\"#every()\"  ├───┤ test:\"should return true when all items are satisfied\" │ \n                    └────────────────────┘   └────────────────────────────────────────────────────────┘\n```\n\n因此，Suite/Test 除了要能够表示 describe/it 之外，还应该能够诠释这种树状结构的父子级关系：\n\n```js\n// mocha/src/suite.js\nclass Suite {\n  constructor(props) {\n    this.title = props.title;    // Suite名称，即describe传入的第一个参数\n    this.suites = [];            // 子级suite\n    this.tests = [];             // 包含的test\n    this.parent = props.parent;  // 父suite\n    this._beforeAll = [];        // before hook\n    this._afterAll = [];         // after hook\n    this._beforeEach = [];       // beforeEach hook\n    this._afterEach = [];        // afterEach hook\n\n    if (props.parent instanceof Suite) {\n      props.parent.suites.push(this);\n    }\n  }\n}\n\nmodule.exports = Suite;\n```\n\n```js\n// mocha/src/test.js\nclass Test {\n  constructor(props) {\n    this.title = props.title;  // Test名称，即it传入的第一个参数\n    this.fn = props.fn;        // Test的执行函数，即it传入的第二个参数\n  }\n}\n\nmodule.exports = Test;\n```\n\n我们完善一下目录结构：\n\n```js\n├─ mocha/\n│   ├─ index.js\n│   ├─ src/\n│   │   ├─ mocha.js\n│   │   ├─ runner.js\n│   │   ├─ suite.js\n│   │   ├─ test.js\n│   │   └─ utils.js\n│   ├─ interfaces/\n│   │   ├─ bdd.js\n│   │   └─ index.js\n│   └─ reporters/\n│       ├─ spec.js\n│       └─ index.js\n├─ test/\n└─ package.json\n```\n\n考虑到执行测试用例的过程较为复杂，我们把这块逻辑单独抽离到 `runner.js`，它将在执行阶段负责调度 suite 和 test 节点并运行测试用例，后续会详细说到。\n\n#### 三、收集测试用例\n\n收集测试用例环节首先需要创建一个 suite 根节点，并把 API 挂载到全局，然后再执行测试用例文件 `*.spec.js` 进行用例收集，最终将生成一棵与之结构对应的 suite-test 树。\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/53678/4/6276/45324/5d3d8050Ec3ec53ee/f8ce3fdc0c125be1.png)\n\n###### 1、suite 根节点\n\n我们先创建一个 suite 实例，作为整棵 suite-test 树的根节点，同时它也是我们收集和执行测试用例的起点。\n\n```js\n// mocha/src/mocha.js\nconst Suite = require('./suite');\n\nclass Mocha {\n  constructor() {\n    // 创建一个suite根节点\n    this.rootSuite = new Suite({\n      title: '',\n      parent: null\n    });\n  }\n  // ...\n}\n```\n\n###### 2、BDD API 的全局挂载\n\n在我们使用 Mocha 编写测试用例时，我们不需要手动引入 Mocha 提供的任何模块，就能够直接使用 describe、it 等一系列 API。那怎么样才能实现这一点呢？很简单，把 API 挂载到 global 对象上就行。因此，我们需要在执行测试用例文件之前，先将 BDD 风格的 API 全部作全局挂载。\n\n```js\n// mocha/src/mocha.js\n// ...\nconst interfaces = require('../interfaces');\n\nclass Mocha {\n  constructor() {\n    // 创建一个根suite\n    // ...\n    // 使用bdd测试风格，将API挂载到global对象上\n    const ui = 'bdd';\n    interfaces[ui](global, this.rootSuite);\n  }\n  // ...\n}\n```\n\n```js\n// mocha/interfaces/index.js\nmodule.exports.bdd = require('./bdd');\n```\n\n```js\n// mocha/interfaces/bdd.js\nmodule.exports = function (context, root) {\n  context.describe = context.context = function (title, fn) {}\n  context.it = context.specify = function (title, fn) {}\n  context.before = function (fn) {}\n  context.after = function (fn) {}\n  context.beforeEach = function (fn) {}\n  context.afterEach = function (fn) {}\n}\n```\n\n###### 3、BDD API 的具体实现\n\n我们先看看 describe 函数怎么实现。\n\ndescribe 传入的 fn 参数是一个函数，它描述了一个测试块，测试块包含了若干子测试块和测试单元。因此我们需要执行 describe 传入的 fn 函数，才能够获知到它的子层结构，从而构造出一棵完整的 suite-test 树。而逐层执行 describe 的 fn 函数，本质上就是一个深度优先遍历的过程，因此我们需要利用一个栈（stack）来记录 suite 根节点到当前节点的路径。\n\n```js\n// mocha/interfaces/bdd.js\nconst Suite = require('../src/suite');\nconst Test = require('../src/test');\n\nmodule.exports = function (context, root) {\n  // 记录 suite 根节点到当前节点的路径\n  const suites = [root];\n\n  context.describe = context.context = function (title, fn) {\n    const parent = suites[0];\n    const suite = new Suite({\n      title,\n      parent\n    });\n\n    suites.unshift(suite);\n    fn.call(suite);\n    suites.shift(suite);\n  }\n}\n```\n\n每次处理一个 describe 时，我们都会构建一个 Suite 实例来表示它，并且在执行 fn 前入栈，执行 fn 后出栈，保证 `suites[0]` 始终是当前正在处理的 suite 节点。利用这个栈列表，我们可以在遍历过程中构建出 suite 的树级关系。\n\n同样的，其他 API 也都需要依赖这个栈列表来实现：\n\n```js\n// mocha/interfaces/bdd.js\nmodule.exports = function (context, root) {\n  // 记录 suite 根节点到当前节点的路径\n  const suites = [root];\n\n  // context.describe = ...\n\n  context.it = context.specify = function (title, fn) {\n    const parent = suites[0];\n    const test = new Test({\n      title,\n      fn\n    });\n    parent.tests.push(test);\n  }\n\n  context.before = function (fn) {\n    const cur = suites[0];\n    cur._beforeAll.push(fn);\n  }\n\n  context.after = function (fn) {\n    const cur = suites[0];\n    cur._afterAll.push(fn);\n  }\n\n  context.beforeEach = function (fn) {\n    const cur = suites[0];\n    cur._beforeEach.push(fn);\n  }\n\n  context.afterEach = function (fn) {\n    const cur = suites[0];\n    cur._afterEach.push(fn);\n  }\n}\n```\n\n###### 4、执行测试用例文件\n\n一切准备就绪，我们开始 `require` 测试用例文件。要完成这个步骤，我们需要一个函数来协助完成，它负责解析 test 路径下的资源，返回一个文件列表，并且能够支持 test 路径为文件和为目录的两种情况。\n\n```js\n// mocha/src/utils.js\nconst path = require('path');\nconst fs = require('fs');\n\nmodule.exports.lookupFiles = function lookupFiles(filepath) {\n  let stat;\n\n  // 假设路径是文件\n  try {\n    stat = fs.statSync(`${filepath}.js`);\n    if (stat.isFile()) {\n      // 确实是文件，直接以数组形式返回\n      return [filepath];\n    }\n  } catch(e) {}\n\t\n  // 假设路径是目录\n  let files = []; // 存放目录下的所有文件\n  fs.readdirSync(filepath).forEach(function(dirent) {\n    let pathname = path.join(filepath, dirent);\n\n    try {\n      stat = fs.statSync(pathname);\n      if (stat.isDirectory()) {\n        // 是目录，进一步递归\n        files = files.concat(lookupFiles(pathname));\n      } else if (stat.isFile()) {\n        // 是文件，补充到待返回的文件列表中\n        files.push(pathname);\n      }\n    } catch(e) {}\n  });\n\t\n  return files;\n}\n```\n\n```js\n// mocha/src/mocha.js\n// ...\nconst path = require('path');\nconst utils = require('./utils');\n\nclass Mocha {\n  constructor() {\n    // 创建一个根suite\n    // ...\n    // 使用bdd测试风格，将API挂载到global对象上\n    // ...\n    // 执行测试用例文件，构建suite-test树\n    const spec = path.resolve(__dirname, '../../test');\n    const files = utils.lookupFiles(spec);\n    files.forEach(file => {\n      require(file);\n    });\n  }\n  // ...\n}\n```\n\n#### 四、执行测试用例\n\n在这个环节中，我们需要通过遍历 suite-test 树来递归执行 suite 节点和 test 节点，并同步地输出测试报告。\n\n![](https://img12.360buyimg.com/jdphoto/jfs/t1/84286/39/5724/43564/5d3d7f79E2576b082/4e91c6c081678702.png)\n\n###### 1、异步执行\n\nMocha 的测试用例和 Hook 函数是支持异步执行的。异步执行的写法有两种，一种是函数返回值为一个 promise 对象，另一种是函数接收一个入参 `done`，并由开发者在异步代码中手动调用 `done(error)` 来向 Mocha 传递断言结果。所以，在执行测试用例之前，我们需要一个包装函数，将开发者传入的函数 promise 化：\n\n```js\n// mocha/src/utils.js\n// ...\nmodule.exports.adaptPromise = function(fn) {\n  return () => new Promise(resolve => {\n    if (fn.length == 0) { // 不使用参数 done\n      try {\n        const ret = fn();\n        // 判断是否返回promise\n        if (ret instanceof Promise) {\n          return ret.then(resolve, resolve);\n        } else {\n          resolve();\n        }\n      } catch (error) {\n        resolve(error);\n      }\n    } else { // 使用参数 done\n      function done(error) {\n        resolve(error);\n      }\n      fn(done);\n    }\n  })\n}\n```\n\n这个工具函数传入一个函数 fn 并返回另外一个函数，执行返回的函数能够以 promise 的形式去运行 fn。这样一来，我们需要稍微修改一下之前的代码：\n\n```js\n// mocha/interfaces/bdd.js\n// ...\nconst { adaptPromise } = require('../src/utils');\n\nmodule.exports = function (context, root) {\n  // ...\n  context.it = context.specify = function (title, fn) {\n    // ...\n    const test = new Test({\n      title,\n      fn: adaptPromise(fn)\n    });\n    // ...\n  }\n\n  context.before = function (fn) {\n    // ...\n    cur._beforeAll.push(adaptPromise(fn));\n  }\n\n  context.after = function (fn) {\n    // ...\n    cur._afterAll.push(adaptPromise(fn));\n  }\n\n  context.beforeEach = function (fn) {\n    // ...\n    cur._beforeEach.push(adaptPromise(fn));\n  }\n\n  context.afterEach = function (fn) {\n    // ...\n    cur._afterEach.push(adaptPromise(fn));\n  }\n}\n```\n\n###### 2、测试用例执行器\n\n执行测试用例需要调度 suite 和 test 节点，因此我们需要一个执行器（runner）来统一负责执行过程。这是执行阶段的核心，我们先直接贴代码：\n\n```js\n// mocha/src/runner.js\nconst EventEmitter = require('events').EventEmitter;\n\n// 监听事件的标识\nconst constants = {\n  EVENT_RUN_BEGIN: 'EVENT_RUN_BEGIN',      // 执行流程开始\n  EVENT_RUN_END: 'EVENT_RUN_END',          // 执行流程结束\n  EVENT_SUITE_BEGIN: 'EVENT_SUITE_BEGIN',  // 执行suite开始\n  EVENT_SUITE_END: 'EVENT_SUITE_END',      // 执行suite开始\n  EVENT_FAIL: 'EVENT_FAIL',                // 执行用例失败\n  EVENT_PASS: 'EVENT_PASS'                 // 执行用例成功\n}\n\nclass Runner extends EventEmitter {\n  constructor() {\n    super();\n    // 记录 suite 根节点到当前节点的路径\n    this.suites = [];\n  }\n\n  /*\n   * 主入口\n   */\n  async run(root) {\n    this.emit(constants.EVENT_RUN_BEGIN);\n    await this.runSuite(root);\n    this.emit(constants.EVENT_RUN_END);\n  }\n\n  /*\n   * 执行suite\n   */\n  async runSuite(suite) {\n    // suite执行开始\n    this.emit(constants.EVENT_SUITE_BEGIN, suite);\n\n    // 1）执行before钩子函数\n    if (suite._beforeAll.length) {\n      for (const fn of suite._beforeAll) {\n        const result = await fn();\n        if (result instanceof Error) {\n          this.emit(constants.EVENT_FAIL, `\"before all\" hook in ${suite.title}: ${result.message}`);\n          // suite执行结束\n          this.emit(constants.EVENT_SUITE_END);\n          return;\n        }\n      }\n    }\n  \n    // 路径栈推入当前节点\n    this.suites.unshift(suite);\n  \n    // 2）执行test\n    if (suite.tests.length) {\n      for (const test of suite.tests) {\n        await this.runTest(test);\n      }\n    }\n  \n    // 3）执行子级suite\n    if (suite.suites.length) {\n      for (const child of suite.suites) {\n        await this.runSuite(child);\n      }\n    }\n  \n    // 路径栈推出当前节点\n    this.suites.shift(suite);\n  \n    // 4）执行after钩子函数\n    if (suite._afterAll.length) {\n      for (const fn of suite._afterAll) {\n        const result = await fn();\n        if (result instanceof Error) {\n          this.emit(constants.EVENT_FAIL, `\"after all\" hook in ${suite.title}: ${result.message}`);\n          // suite执行结束\n          this.emit(constants.EVENT_SUITE_END);\n          return;\n        }\n      }\n    }\n\n    // suite结束\n    this.emit(constants.EVENT_SUITE_END);\n  }\n  \n  /*\n   * 执行suite\n   */\n  async runTest(test) {\n    // 1）由suite根节点向当前suite节点，依次执行beforeEach钩子函数\n    const _beforeEach = [].concat(this.suites).reverse().reduce((list, suite) => list.concat(suite._beforeEach), []);\n    if (_beforeEach.length) {\n      for (const fn of _beforeEach) {\n        const result = await fn();\n        if (result instanceof Error) {\n          return this.emit(constants.EVENT_FAIL, `\"before each\" hook for ${test.title}: ${result.message}`)\n        }\n      }\n    }\n  \n    // 2）执行测试用例\n    const result = await test.fn();\n    if (result instanceof Error) {\n      return this.emit(constants.EVENT_FAIL, `${test.title}`);\n    } else {\n      this.emit(constants.EVENT_PASS, `${test.title}`);\n    }\n  \n    // 3）由当前suite节点向suite根节点，依次执行afterEach钩子函数\n    const _afterEach = [].concat(this.suites).reduce((list, suite) => list.concat(suite._afterEach), []);\n    if (_afterEach.length) {\n      for (const fn of _afterEach) {\n        const result = await fn();\n        if (result instanceof Error) {\n          return this.emit(constants.EVENT_FAIL, `\"after each\" hook for ${test.title}: ${result.message}`)\n        }\n      }\n    }\n  }\n}\n\nRunner.constants = constants;\nmodule.exports = Runner\n```\n\n代码很长，我们稍微捋一下。\n\n首先，我们构造一个 Runner 类，利用两个 async 方法来完成对 suite-test 树的遍历：\n\n- `runSuite` ：负责执行 suite 节点。它不仅需要调用 runTest 执行该 suite 节点上的若干 test 节点，还需要调用 runSuite 执行下一级的若干 suite 节点来实现遍历，同时，before/after 也将在这里得到调用。执行顺序依次是：`before -> runTest -> runSuite -> after`。\n- `runTest` ：负责执行 test 节点，主要是执行该 test 对象上定义的测试用例。另外，beforeEach/afterEach 的执行有一个类似浏览器事件捕获和冒泡的过程，我们需要沿节点路径向当前 suite 节点方向和向 suite 根节点方向分别执行各 suite 的 beforeEach/afterEach 钩子函数。执行顺序依次是：`beforeEach -> run test case -> afterEach`。\n\n在遍历过程中，我们依然是利用一个栈列表来维护 suite 根节点到当前节点的路径。同时，这两个流程都用 async/await 写法来组织，保证所有任务在异步场景下依然是按序执行的。\n\n其次，测试结论是“边执行边输出”的。为了在执行过程中能向 reporter 实时通知执行结果和执行状态，我们让 Runner 类继承自 EventEmitter 类，使其具备订阅/发布事件的能力，这个后续会细讲。\n\n最后，我们在 Mocha 实例的 run 方法中去实例化 Runner 并调用它：\n\n```js\n// mocha/src/mocha.js\n// ...\nconst Runner = require('./runner');\n\nclass Mocha {\n  // ...\n  run() {\n    const runner = new Runner();\n    runner.run(this.rootSuite);\n  }\n}\n```\n\n###### 3、输出测试报告\n\nreporter 负责测试报告输出，这个过程是在执行测试用例的过程中同步进行的，因此我们利用 EventEmitter 让 reporter 和 runner 保持通信。在 runner 中我们已经在各个关键节点都作了 event emit，所以我们只需要在 reporter 中加上相应的事件监听即可：\n\n```js\n// mocha/reporters/index.js\nmodule.exports.spec = require('./spec');\n```\n\n```js\n// mocha/reporters/spec.js\nconst constants = require('../src/runner').constants;\n\nmodule.exports = function (runner) {\n\n  // 执行开始\n  runner.on(constants.EVENT_RUN_BEGIN, function() {});\n\n  // suite执行开始\n  runner.on(constants.EVENT_SUITE_BEGIN, function(suite) {});\n\n  // suite执行结束\n  runner.on(constants.EVENT_SUITE_END, function() {});\n\n  // 用例通过\n  runner.on(constants.EVENT_PASS, function(title) {});\n\n  // 用例失败\n  runner.on(constants.EVENT_FAIL, function(title) {});\n\n  // 执行结束\n  runner.once(constants.EVENT_RUN_END, function() {});\n}\n```\n\nMocha 类中引入 reporter，执行事件订阅，就能让 runner 将测试的状态结果实时推送给 reporter 了：\n\n```js\n// mocha/src/mocha.js\nconst reporters = require('../reporters');\n// ...\nclass Mocha {\n  // ...\n  run() {\n    const runner = new Runner();\n    reporters['spec'](runner);\n    runner.run(this.rootSuite);\n  }\n}\n```\n\nreporter 中可以任意构造你想要的报告样式输出，例如这样：\n\n```js\n// mocha/reporters/spec.js\nconst constants = require('../src/runner').constants;\n\nconst colors = {\n  pass: 90,\n  fail: 31,\n  green: 32,\n}\n\nfunction color(type, str) {\n  return '\\u001b[' + colors[type] + 'm' + str + '\\u001b[0m';\n}\n\nmodule.exports = function (runner) {\n\n  let indents = 0;\n  let passes = 0;\n  let failures = 0;\n\n  function indent(i = 0) {\n    return Array(indents + i).join('  ');\n  }\n\n  // 执行开始\n  runner.on(constants.EVENT_RUN_BEGIN, function() {\n    console.log();\n  });\n\n  // suite执行开始\n  runner.on(constants.EVENT_SUITE_BEGIN, function(suite) {\n    console.log();\n\n    ++indents;\n    console.log(indent(), suite.title);\n  });\n\n  // suite执行结束\n  runner.on(constants.EVENT_SUITE_END, function() {\n    --indents;\n    if (indents == 1) console.log();\n  });\n\n  // 用例通过\n  runner.on(constants.EVENT_PASS, function(title) {\n    passes++;\n\n    const fmt = indent(1) + color('green', '  ✓') + color('pass', ' %s');\n    console.log(fmt, title);\n  });\n\n  // 用例失败\n  runner.on(constants.EVENT_FAIL, function(title) {\n    failures++;\n\n    const fmt = indent(1) + color('fail', '  × %s');\n    console.log(fmt, title);\n  });\n\n  // 执行结束\n  runner.once(constants.EVENT_RUN_END, function() {\n    console.log(color('green', '  %d passing'), passes);\n    console.log(color('fail', '  %d failing'), failures);\n  });\n}\n```\n\n#### 五、验证\n\n到这里，我们的 simple-mocha 就基本完成了，我们可以编写一个测试用例来简单验证一下：\n\n```js\n// test/test.spec.js\nconst assert = require('assert');\n\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when not present', function () {\n      assert.equal(-1, [1, 2, 3].indexOf(4))\n    })\n\n    it('should return the index when present', function () {\n      assert.equal(-1, [1, 2, 3].indexOf(3))\n    })\n  })\n\n  describe('#every()', function () {\n    it('should return true when all items are satisfied', function () {\n      assert.equal(true, [1, 2, 3].every(item => !isNaN(item)))\n    })\n  })\n})\n\ndescribe('Srting', function () {\n  describe('#replace', function () {\n    it('should return a string that has been replaced', function () {\n      assert.equal('hey Hankle', 'hey Densy'.replace('Densy', 'Hankle'))\n    })\n  })\n})\n```\n\n这里我们用 node 内置的 assert 模块来执行断言测试。下边是执行结果：\n\n```\nnpm test\n\n> simple-mocha@1.0.0 test /Documents/simple-mocha\n> node mocha\n\n   Array\n     #indexOf()\n        ✓ should return -1 when not present\n        × should return the index when present\n     #every()\n        ✓ should return true when all items are satisfied\n\n   String\n     #replace\n        ✓ should return a string that has been replaced\n\n  3 passing\n  1 failing\n```\n\n测试用例执行成功。附上完整的流程图：\n\n![](https://img13.360buyimg.com/jdphoto/jfs/t1/48002/14/6249/38293/5d3d7dd6E1b985819/7ba08cfe21c04c73.png)\n\n## 结尾\n\n如果你看到了这里，看完并看懂了上边实现 simple-mocha 的整个流程，那么很高兴地告诉你，你已经掌握了 Mocha 最核心的运行机理。simple-mocha 的整个实现过程其实就是 Mocha 实现的一个简化。而为了让大家在看完这篇文章后再去阅读 Mocha 源码时能够更快速地理解，我在简化和浅化 Mocha 实现流程的同时，也尽可能地保留了其中的一些命名和实现细节。有差别的地方，如执行测试用例环节，Mocha 源码利用了一个复杂的 Hook 机制来实现异步测试的依序执行，而我为了方便理解，用 async/await 来替代实现。当然这不是说 Mocha 实现得繁琐，在更加复杂的测试场景下，这套 Hook 机制是十分必要的。所以，这篇文章仅仅希望能够帮助我们攻克 Mocha 源码阅读的第一道陡坡，而要理解 Mocha 的精髓，光看这篇文章是远远不够的，还得深入阅读 Mocha 源码。\n\n## 参考文章\n> [Mocha官方文档](https://mochajs.org/)\n> [BDD和Mocha框架](http://www.moye.me/2014/11/22/bdd_mocha/)","source":"_posts/2019-10/换种方式读源码：如何实现一个简易版的Mocha.md","raw":"---\ntitle: 换种方式读源码：如何实现一个简易版的Mocha\ndate: 2019-10-09 11:38:01\ncover:  https://img12.360buyimg.com/jdphoto/s720x500_jfs/t1/55376/13/6006/26944/5d39aef7E0f8caba4/5943c06be69970c0.jpg\nthumbnail: https://img12.360buyimg.com/jdphoto/s720x500_jfs/t1/55376/13/6006/26944/5d39aef7E0f8caba4/5943c06be69970c0.jpg\ntags: \n  - Mocha\n  - BDD/TDD\n  - 测试框架\ncategories: Web前端\n---\n\n> 作者：黄浩群\n\n## 前言\n\nMocha 是目前最流行的 JavaScript 测试框架，理解 Mocha 的内部实现原理有助于我们更深入地了解和学习自动化测试。然而阅读源码一直是个让人望而生畏的过程，大量的高级写法经常是晦涩难懂，大量的边缘情况的处理也十分影响对核心代码的理解，以至于写一篇源码解析过后往往是连自己都看不懂。所以，这次我们不生啃 Mocha 源码，换个方式，从零开始一步步实现一个简易版的 Mocha。\n\n## 我们将实现什么？\n\n- 实现 Mocha 框架的 BDD 风格测试，能通过 describe/it 函数定义一组或单个的测试用例；\n- 实现 Mocha 框架的 Hook 机制，包括 before、after、beforeEach、afterEach；\n- 实现简单格式的测试报告输出。\n<!--more-->\n## Mocha 的 BDD 测试\n\nMocha 支持 BDD/TDD 等多种测试风格，默认使用 BDD 接口。BDD（行为驱动开发）是一种以需求为导向的敏捷开发方法，相比主张”测试先行“的 TDD（测试驱动开发）而言，它强调”需求先行“，从一个更加宏观的角度去关注包括开发、QA、需求方在内的多方利益相关者的协作关系，力求让开发者“做正确的事“。在 Mocha 中，一个简单的 BDD 式测试用例如下：\n\n```js\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    before(function() {\n      // ...\n    });\n    it('should return -1 when not present', function() {\n      // ...\n    });\n    it('should return the index when present', function() {\n      // ...\n    });\n    after(function() {\n      // ...\n    });\n  });\n});\n```\n\nMocha 的 BDD 测试主要包括以下几个 API：\n- `describe/context`：行为描述，代表一个测试块，是一组测试单元的集合；\n- `it/specify`：描述了一个测试单元，是最小的测试单位；\n- `before`：Hook 函数，在执行该测试块之前执行；\n- `after`：Hook 函数，在执行该测试块之后执行；\n- `beforeEach`：Hook 函数，在执行该测试块中每个测试单元之前执行；\n- `afterEach`：Hook 函数，在执行该测试块中每个测试单元之后执行。\n\n## 开始\n\n话不多说，我们直接开始。\n\n#### 一、目录设计\n\n新建一个项目，命名为 simple-mocha。目录结构如下：\n\n```js\n├─ mocha/\n│   ├─ index.js\n│   ├─ src/\n│   ├─ interfaces/\n│   └─ reporters/\n├─ test/\n└─ package.json\n```\n\n先对这个目录结构作简单解释：\n- `mocha/`：存放我们即将实现的 simple-mocha 的源代码\n- `mocha/index.js`：simple-mocha 入口\n- `mocha/src/`：simple-mocha 核心代码\n- `mocha/interfaces/`：存放各类风格的测试接口，如 BDD\n- `mocha/reporters/`：存放用于输出测试报告的各种 reporter，如 SPEC\n- `test/`：存放我们编写的测试用例\n- `package.json`\n\n其中 package.json 内容如下：\n\n```json\n{\n  \"name\": \"simple-mocha\",\n  \"version\": \"1.0.0\",\n  \"description\": \"a simple mocha for understanding the mechanism of mocha\",\n  \"main\": \"\",\n  \"scripts\": {\n    \"test\": \"node mocha/index.js\"\n  },\n  \"author\": \"hankle\",\n  \"license\": \"ISC\"\n}\n```\n\n执行 `npm test` 就可以启动执行测试用例。\n\n#### 二、模块设计\n\nMocha 的 BDD 测试应该是一个”先定义后执行“的过程，这样才能保证其 Hook 机制正确执行，而与代码编写顺序无关，因此我们把整个测试流程分为两个阶段：收集测试用例（定义）和执行测试用例（执行）。我们构造了一个 Mocha 类来完成这两个过程，同时这个类也负责统筹协调其他各模块的执行，因此它是整个测试流程的核心。\n\n```js\n// mocha/src/mocha.js\nclass Mocha {\n  constructor() {}\n  run() {}\n}\n\nmodule.exports = Mocha;\n```\n\n```js\n// mocha/index.js\nconst Mocha = require('./src/mocha');\n\nconst mocha = new Mocha();\nmocha.run();\n```\n\n另一方面我们知道，describe 函数描述了一个测试集合，这个测试集合除包括若干测试单元外，还拥有着一些自身的 Hook 函数，维护了一套严格的执行流。it 函数描述了一个测试单元，它需要执行测试用例，并且接收断言结果。这是两个逻辑复杂的单元，同时需要维护一定的内部状态，我们用两个类（Suite/Test）来分别构造它们。此外我们可以看出，BDD 风格的测试用例是一个典型的树形结构，describe 定义的测试块可以包含测试块，也可以包含 it 定义的测试单元。所以 Suite/Test 实例还将作为节点，构造出一棵 suite-test 树。比如下边这个测试用例：\n\n```js\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when not present', function () {\n      // ...\n    })\n    it('should return the index when present', function () {\n      // ...\n    })\n  })\n\n  describe('#every()', function () {\n    it('should return true when all items are satisfied', function () {\n      // ...\n    })\n  })\n})\n```\n\n由它构造出来的 suite-test 树是这样的：\n\n```js\n                                             ┌────────────────────────────────────────────────────────┐\n                                           ┌─┤        test:\"should return -1 when not present\"        │\n                    ┌────────────────────┐ │ └────────────────────────────────────────────────────────┘\n                  ┌─┤ suite:\"#indexOf()\" ├─┤\n                  │ └────────────────────┘ │ ┌────────────────────────────────────────────────────────┐\n┌───────────────┐ │                        └─┤       test:\"should return the index when present\"      │\n│ suite:\"Array\" ├─┤                          └────────────────────────────────────────────────────────┘\n└───────────────┘ │\n                  │ ┌────────────────────┐   ┌────────────────────────────────────────────────────────┐\n                  └─┤  suite:\"#every()\"  ├───┤ test:\"should return true when all items are satisfied\" │ \n                    └────────────────────┘   └────────────────────────────────────────────────────────┘\n```\n\n因此，Suite/Test 除了要能够表示 describe/it 之外，还应该能够诠释这种树状结构的父子级关系：\n\n```js\n// mocha/src/suite.js\nclass Suite {\n  constructor(props) {\n    this.title = props.title;    // Suite名称，即describe传入的第一个参数\n    this.suites = [];            // 子级suite\n    this.tests = [];             // 包含的test\n    this.parent = props.parent;  // 父suite\n    this._beforeAll = [];        // before hook\n    this._afterAll = [];         // after hook\n    this._beforeEach = [];       // beforeEach hook\n    this._afterEach = [];        // afterEach hook\n\n    if (props.parent instanceof Suite) {\n      props.parent.suites.push(this);\n    }\n  }\n}\n\nmodule.exports = Suite;\n```\n\n```js\n// mocha/src/test.js\nclass Test {\n  constructor(props) {\n    this.title = props.title;  // Test名称，即it传入的第一个参数\n    this.fn = props.fn;        // Test的执行函数，即it传入的第二个参数\n  }\n}\n\nmodule.exports = Test;\n```\n\n我们完善一下目录结构：\n\n```js\n├─ mocha/\n│   ├─ index.js\n│   ├─ src/\n│   │   ├─ mocha.js\n│   │   ├─ runner.js\n│   │   ├─ suite.js\n│   │   ├─ test.js\n│   │   └─ utils.js\n│   ├─ interfaces/\n│   │   ├─ bdd.js\n│   │   └─ index.js\n│   └─ reporters/\n│       ├─ spec.js\n│       └─ index.js\n├─ test/\n└─ package.json\n```\n\n考虑到执行测试用例的过程较为复杂，我们把这块逻辑单独抽离到 `runner.js`，它将在执行阶段负责调度 suite 和 test 节点并运行测试用例，后续会详细说到。\n\n#### 三、收集测试用例\n\n收集测试用例环节首先需要创建一个 suite 根节点，并把 API 挂载到全局，然后再执行测试用例文件 `*.spec.js` 进行用例收集，最终将生成一棵与之结构对应的 suite-test 树。\n\n![](https://img14.360buyimg.com/jdphoto/jfs/t1/53678/4/6276/45324/5d3d8050Ec3ec53ee/f8ce3fdc0c125be1.png)\n\n###### 1、suite 根节点\n\n我们先创建一个 suite 实例，作为整棵 suite-test 树的根节点，同时它也是我们收集和执行测试用例的起点。\n\n```js\n// mocha/src/mocha.js\nconst Suite = require('./suite');\n\nclass Mocha {\n  constructor() {\n    // 创建一个suite根节点\n    this.rootSuite = new Suite({\n      title: '',\n      parent: null\n    });\n  }\n  // ...\n}\n```\n\n###### 2、BDD API 的全局挂载\n\n在我们使用 Mocha 编写测试用例时，我们不需要手动引入 Mocha 提供的任何模块，就能够直接使用 describe、it 等一系列 API。那怎么样才能实现这一点呢？很简单，把 API 挂载到 global 对象上就行。因此，我们需要在执行测试用例文件之前，先将 BDD 风格的 API 全部作全局挂载。\n\n```js\n// mocha/src/mocha.js\n// ...\nconst interfaces = require('../interfaces');\n\nclass Mocha {\n  constructor() {\n    // 创建一个根suite\n    // ...\n    // 使用bdd测试风格，将API挂载到global对象上\n    const ui = 'bdd';\n    interfaces[ui](global, this.rootSuite);\n  }\n  // ...\n}\n```\n\n```js\n// mocha/interfaces/index.js\nmodule.exports.bdd = require('./bdd');\n```\n\n```js\n// mocha/interfaces/bdd.js\nmodule.exports = function (context, root) {\n  context.describe = context.context = function (title, fn) {}\n  context.it = context.specify = function (title, fn) {}\n  context.before = function (fn) {}\n  context.after = function (fn) {}\n  context.beforeEach = function (fn) {}\n  context.afterEach = function (fn) {}\n}\n```\n\n###### 3、BDD API 的具体实现\n\n我们先看看 describe 函数怎么实现。\n\ndescribe 传入的 fn 参数是一个函数，它描述了一个测试块，测试块包含了若干子测试块和测试单元。因此我们需要执行 describe 传入的 fn 函数，才能够获知到它的子层结构，从而构造出一棵完整的 suite-test 树。而逐层执行 describe 的 fn 函数，本质上就是一个深度优先遍历的过程，因此我们需要利用一个栈（stack）来记录 suite 根节点到当前节点的路径。\n\n```js\n// mocha/interfaces/bdd.js\nconst Suite = require('../src/suite');\nconst Test = require('../src/test');\n\nmodule.exports = function (context, root) {\n  // 记录 suite 根节点到当前节点的路径\n  const suites = [root];\n\n  context.describe = context.context = function (title, fn) {\n    const parent = suites[0];\n    const suite = new Suite({\n      title,\n      parent\n    });\n\n    suites.unshift(suite);\n    fn.call(suite);\n    suites.shift(suite);\n  }\n}\n```\n\n每次处理一个 describe 时，我们都会构建一个 Suite 实例来表示它，并且在执行 fn 前入栈，执行 fn 后出栈，保证 `suites[0]` 始终是当前正在处理的 suite 节点。利用这个栈列表，我们可以在遍历过程中构建出 suite 的树级关系。\n\n同样的，其他 API 也都需要依赖这个栈列表来实现：\n\n```js\n// mocha/interfaces/bdd.js\nmodule.exports = function (context, root) {\n  // 记录 suite 根节点到当前节点的路径\n  const suites = [root];\n\n  // context.describe = ...\n\n  context.it = context.specify = function (title, fn) {\n    const parent = suites[0];\n    const test = new Test({\n      title,\n      fn\n    });\n    parent.tests.push(test);\n  }\n\n  context.before = function (fn) {\n    const cur = suites[0];\n    cur._beforeAll.push(fn);\n  }\n\n  context.after = function (fn) {\n    const cur = suites[0];\n    cur._afterAll.push(fn);\n  }\n\n  context.beforeEach = function (fn) {\n    const cur = suites[0];\n    cur._beforeEach.push(fn);\n  }\n\n  context.afterEach = function (fn) {\n    const cur = suites[0];\n    cur._afterEach.push(fn);\n  }\n}\n```\n\n###### 4、执行测试用例文件\n\n一切准备就绪，我们开始 `require` 测试用例文件。要完成这个步骤，我们需要一个函数来协助完成，它负责解析 test 路径下的资源，返回一个文件列表，并且能够支持 test 路径为文件和为目录的两种情况。\n\n```js\n// mocha/src/utils.js\nconst path = require('path');\nconst fs = require('fs');\n\nmodule.exports.lookupFiles = function lookupFiles(filepath) {\n  let stat;\n\n  // 假设路径是文件\n  try {\n    stat = fs.statSync(`${filepath}.js`);\n    if (stat.isFile()) {\n      // 确实是文件，直接以数组形式返回\n      return [filepath];\n    }\n  } catch(e) {}\n\t\n  // 假设路径是目录\n  let files = []; // 存放目录下的所有文件\n  fs.readdirSync(filepath).forEach(function(dirent) {\n    let pathname = path.join(filepath, dirent);\n\n    try {\n      stat = fs.statSync(pathname);\n      if (stat.isDirectory()) {\n        // 是目录，进一步递归\n        files = files.concat(lookupFiles(pathname));\n      } else if (stat.isFile()) {\n        // 是文件，补充到待返回的文件列表中\n        files.push(pathname);\n      }\n    } catch(e) {}\n  });\n\t\n  return files;\n}\n```\n\n```js\n// mocha/src/mocha.js\n// ...\nconst path = require('path');\nconst utils = require('./utils');\n\nclass Mocha {\n  constructor() {\n    // 创建一个根suite\n    // ...\n    // 使用bdd测试风格，将API挂载到global对象上\n    // ...\n    // 执行测试用例文件，构建suite-test树\n    const spec = path.resolve(__dirname, '../../test');\n    const files = utils.lookupFiles(spec);\n    files.forEach(file => {\n      require(file);\n    });\n  }\n  // ...\n}\n```\n\n#### 四、执行测试用例\n\n在这个环节中，我们需要通过遍历 suite-test 树来递归执行 suite 节点和 test 节点，并同步地输出测试报告。\n\n![](https://img12.360buyimg.com/jdphoto/jfs/t1/84286/39/5724/43564/5d3d7f79E2576b082/4e91c6c081678702.png)\n\n###### 1、异步执行\n\nMocha 的测试用例和 Hook 函数是支持异步执行的。异步执行的写法有两种，一种是函数返回值为一个 promise 对象，另一种是函数接收一个入参 `done`，并由开发者在异步代码中手动调用 `done(error)` 来向 Mocha 传递断言结果。所以，在执行测试用例之前，我们需要一个包装函数，将开发者传入的函数 promise 化：\n\n```js\n// mocha/src/utils.js\n// ...\nmodule.exports.adaptPromise = function(fn) {\n  return () => new Promise(resolve => {\n    if (fn.length == 0) { // 不使用参数 done\n      try {\n        const ret = fn();\n        // 判断是否返回promise\n        if (ret instanceof Promise) {\n          return ret.then(resolve, resolve);\n        } else {\n          resolve();\n        }\n      } catch (error) {\n        resolve(error);\n      }\n    } else { // 使用参数 done\n      function done(error) {\n        resolve(error);\n      }\n      fn(done);\n    }\n  })\n}\n```\n\n这个工具函数传入一个函数 fn 并返回另外一个函数，执行返回的函数能够以 promise 的形式去运行 fn。这样一来，我们需要稍微修改一下之前的代码：\n\n```js\n// mocha/interfaces/bdd.js\n// ...\nconst { adaptPromise } = require('../src/utils');\n\nmodule.exports = function (context, root) {\n  // ...\n  context.it = context.specify = function (title, fn) {\n    // ...\n    const test = new Test({\n      title,\n      fn: adaptPromise(fn)\n    });\n    // ...\n  }\n\n  context.before = function (fn) {\n    // ...\n    cur._beforeAll.push(adaptPromise(fn));\n  }\n\n  context.after = function (fn) {\n    // ...\n    cur._afterAll.push(adaptPromise(fn));\n  }\n\n  context.beforeEach = function (fn) {\n    // ...\n    cur._beforeEach.push(adaptPromise(fn));\n  }\n\n  context.afterEach = function (fn) {\n    // ...\n    cur._afterEach.push(adaptPromise(fn));\n  }\n}\n```\n\n###### 2、测试用例执行器\n\n执行测试用例需要调度 suite 和 test 节点，因此我们需要一个执行器（runner）来统一负责执行过程。这是执行阶段的核心，我们先直接贴代码：\n\n```js\n// mocha/src/runner.js\nconst EventEmitter = require('events').EventEmitter;\n\n// 监听事件的标识\nconst constants = {\n  EVENT_RUN_BEGIN: 'EVENT_RUN_BEGIN',      // 执行流程开始\n  EVENT_RUN_END: 'EVENT_RUN_END',          // 执行流程结束\n  EVENT_SUITE_BEGIN: 'EVENT_SUITE_BEGIN',  // 执行suite开始\n  EVENT_SUITE_END: 'EVENT_SUITE_END',      // 执行suite开始\n  EVENT_FAIL: 'EVENT_FAIL',                // 执行用例失败\n  EVENT_PASS: 'EVENT_PASS'                 // 执行用例成功\n}\n\nclass Runner extends EventEmitter {\n  constructor() {\n    super();\n    // 记录 suite 根节点到当前节点的路径\n    this.suites = [];\n  }\n\n  /*\n   * 主入口\n   */\n  async run(root) {\n    this.emit(constants.EVENT_RUN_BEGIN);\n    await this.runSuite(root);\n    this.emit(constants.EVENT_RUN_END);\n  }\n\n  /*\n   * 执行suite\n   */\n  async runSuite(suite) {\n    // suite执行开始\n    this.emit(constants.EVENT_SUITE_BEGIN, suite);\n\n    // 1）执行before钩子函数\n    if (suite._beforeAll.length) {\n      for (const fn of suite._beforeAll) {\n        const result = await fn();\n        if (result instanceof Error) {\n          this.emit(constants.EVENT_FAIL, `\"before all\" hook in ${suite.title}: ${result.message}`);\n          // suite执行结束\n          this.emit(constants.EVENT_SUITE_END);\n          return;\n        }\n      }\n    }\n  \n    // 路径栈推入当前节点\n    this.suites.unshift(suite);\n  \n    // 2）执行test\n    if (suite.tests.length) {\n      for (const test of suite.tests) {\n        await this.runTest(test);\n      }\n    }\n  \n    // 3）执行子级suite\n    if (suite.suites.length) {\n      for (const child of suite.suites) {\n        await this.runSuite(child);\n      }\n    }\n  \n    // 路径栈推出当前节点\n    this.suites.shift(suite);\n  \n    // 4）执行after钩子函数\n    if (suite._afterAll.length) {\n      for (const fn of suite._afterAll) {\n        const result = await fn();\n        if (result instanceof Error) {\n          this.emit(constants.EVENT_FAIL, `\"after all\" hook in ${suite.title}: ${result.message}`);\n          // suite执行结束\n          this.emit(constants.EVENT_SUITE_END);\n          return;\n        }\n      }\n    }\n\n    // suite结束\n    this.emit(constants.EVENT_SUITE_END);\n  }\n  \n  /*\n   * 执行suite\n   */\n  async runTest(test) {\n    // 1）由suite根节点向当前suite节点，依次执行beforeEach钩子函数\n    const _beforeEach = [].concat(this.suites).reverse().reduce((list, suite) => list.concat(suite._beforeEach), []);\n    if (_beforeEach.length) {\n      for (const fn of _beforeEach) {\n        const result = await fn();\n        if (result instanceof Error) {\n          return this.emit(constants.EVENT_FAIL, `\"before each\" hook for ${test.title}: ${result.message}`)\n        }\n      }\n    }\n  \n    // 2）执行测试用例\n    const result = await test.fn();\n    if (result instanceof Error) {\n      return this.emit(constants.EVENT_FAIL, `${test.title}`);\n    } else {\n      this.emit(constants.EVENT_PASS, `${test.title}`);\n    }\n  \n    // 3）由当前suite节点向suite根节点，依次执行afterEach钩子函数\n    const _afterEach = [].concat(this.suites).reduce((list, suite) => list.concat(suite._afterEach), []);\n    if (_afterEach.length) {\n      for (const fn of _afterEach) {\n        const result = await fn();\n        if (result instanceof Error) {\n          return this.emit(constants.EVENT_FAIL, `\"after each\" hook for ${test.title}: ${result.message}`)\n        }\n      }\n    }\n  }\n}\n\nRunner.constants = constants;\nmodule.exports = Runner\n```\n\n代码很长，我们稍微捋一下。\n\n首先，我们构造一个 Runner 类，利用两个 async 方法来完成对 suite-test 树的遍历：\n\n- `runSuite` ：负责执行 suite 节点。它不仅需要调用 runTest 执行该 suite 节点上的若干 test 节点，还需要调用 runSuite 执行下一级的若干 suite 节点来实现遍历，同时，before/after 也将在这里得到调用。执行顺序依次是：`before -> runTest -> runSuite -> after`。\n- `runTest` ：负责执行 test 节点，主要是执行该 test 对象上定义的测试用例。另外，beforeEach/afterEach 的执行有一个类似浏览器事件捕获和冒泡的过程，我们需要沿节点路径向当前 suite 节点方向和向 suite 根节点方向分别执行各 suite 的 beforeEach/afterEach 钩子函数。执行顺序依次是：`beforeEach -> run test case -> afterEach`。\n\n在遍历过程中，我们依然是利用一个栈列表来维护 suite 根节点到当前节点的路径。同时，这两个流程都用 async/await 写法来组织，保证所有任务在异步场景下依然是按序执行的。\n\n其次，测试结论是“边执行边输出”的。为了在执行过程中能向 reporter 实时通知执行结果和执行状态，我们让 Runner 类继承自 EventEmitter 类，使其具备订阅/发布事件的能力，这个后续会细讲。\n\n最后，我们在 Mocha 实例的 run 方法中去实例化 Runner 并调用它：\n\n```js\n// mocha/src/mocha.js\n// ...\nconst Runner = require('./runner');\n\nclass Mocha {\n  // ...\n  run() {\n    const runner = new Runner();\n    runner.run(this.rootSuite);\n  }\n}\n```\n\n###### 3、输出测试报告\n\nreporter 负责测试报告输出，这个过程是在执行测试用例的过程中同步进行的，因此我们利用 EventEmitter 让 reporter 和 runner 保持通信。在 runner 中我们已经在各个关键节点都作了 event emit，所以我们只需要在 reporter 中加上相应的事件监听即可：\n\n```js\n// mocha/reporters/index.js\nmodule.exports.spec = require('./spec');\n```\n\n```js\n// mocha/reporters/spec.js\nconst constants = require('../src/runner').constants;\n\nmodule.exports = function (runner) {\n\n  // 执行开始\n  runner.on(constants.EVENT_RUN_BEGIN, function() {});\n\n  // suite执行开始\n  runner.on(constants.EVENT_SUITE_BEGIN, function(suite) {});\n\n  // suite执行结束\n  runner.on(constants.EVENT_SUITE_END, function() {});\n\n  // 用例通过\n  runner.on(constants.EVENT_PASS, function(title) {});\n\n  // 用例失败\n  runner.on(constants.EVENT_FAIL, function(title) {});\n\n  // 执行结束\n  runner.once(constants.EVENT_RUN_END, function() {});\n}\n```\n\nMocha 类中引入 reporter，执行事件订阅，就能让 runner 将测试的状态结果实时推送给 reporter 了：\n\n```js\n// mocha/src/mocha.js\nconst reporters = require('../reporters');\n// ...\nclass Mocha {\n  // ...\n  run() {\n    const runner = new Runner();\n    reporters['spec'](runner);\n    runner.run(this.rootSuite);\n  }\n}\n```\n\nreporter 中可以任意构造你想要的报告样式输出，例如这样：\n\n```js\n// mocha/reporters/spec.js\nconst constants = require('../src/runner').constants;\n\nconst colors = {\n  pass: 90,\n  fail: 31,\n  green: 32,\n}\n\nfunction color(type, str) {\n  return '\\u001b[' + colors[type] + 'm' + str + '\\u001b[0m';\n}\n\nmodule.exports = function (runner) {\n\n  let indents = 0;\n  let passes = 0;\n  let failures = 0;\n\n  function indent(i = 0) {\n    return Array(indents + i).join('  ');\n  }\n\n  // 执行开始\n  runner.on(constants.EVENT_RUN_BEGIN, function() {\n    console.log();\n  });\n\n  // suite执行开始\n  runner.on(constants.EVENT_SUITE_BEGIN, function(suite) {\n    console.log();\n\n    ++indents;\n    console.log(indent(), suite.title);\n  });\n\n  // suite执行结束\n  runner.on(constants.EVENT_SUITE_END, function() {\n    --indents;\n    if (indents == 1) console.log();\n  });\n\n  // 用例通过\n  runner.on(constants.EVENT_PASS, function(title) {\n    passes++;\n\n    const fmt = indent(1) + color('green', '  ✓') + color('pass', ' %s');\n    console.log(fmt, title);\n  });\n\n  // 用例失败\n  runner.on(constants.EVENT_FAIL, function(title) {\n    failures++;\n\n    const fmt = indent(1) + color('fail', '  × %s');\n    console.log(fmt, title);\n  });\n\n  // 执行结束\n  runner.once(constants.EVENT_RUN_END, function() {\n    console.log(color('green', '  %d passing'), passes);\n    console.log(color('fail', '  %d failing'), failures);\n  });\n}\n```\n\n#### 五、验证\n\n到这里，我们的 simple-mocha 就基本完成了，我们可以编写一个测试用例来简单验证一下：\n\n```js\n// test/test.spec.js\nconst assert = require('assert');\n\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when not present', function () {\n      assert.equal(-1, [1, 2, 3].indexOf(4))\n    })\n\n    it('should return the index when present', function () {\n      assert.equal(-1, [1, 2, 3].indexOf(3))\n    })\n  })\n\n  describe('#every()', function () {\n    it('should return true when all items are satisfied', function () {\n      assert.equal(true, [1, 2, 3].every(item => !isNaN(item)))\n    })\n  })\n})\n\ndescribe('Srting', function () {\n  describe('#replace', function () {\n    it('should return a string that has been replaced', function () {\n      assert.equal('hey Hankle', 'hey Densy'.replace('Densy', 'Hankle'))\n    })\n  })\n})\n```\n\n这里我们用 node 内置的 assert 模块来执行断言测试。下边是执行结果：\n\n```\nnpm test\n\n> simple-mocha@1.0.0 test /Documents/simple-mocha\n> node mocha\n\n   Array\n     #indexOf()\n        ✓ should return -1 when not present\n        × should return the index when present\n     #every()\n        ✓ should return true when all items are satisfied\n\n   String\n     #replace\n        ✓ should return a string that has been replaced\n\n  3 passing\n  1 failing\n```\n\n测试用例执行成功。附上完整的流程图：\n\n![](https://img13.360buyimg.com/jdphoto/jfs/t1/48002/14/6249/38293/5d3d7dd6E1b985819/7ba08cfe21c04c73.png)\n\n## 结尾\n\n如果你看到了这里，看完并看懂了上边实现 simple-mocha 的整个流程，那么很高兴地告诉你，你已经掌握了 Mocha 最核心的运行机理。simple-mocha 的整个实现过程其实就是 Mocha 实现的一个简化。而为了让大家在看完这篇文章后再去阅读 Mocha 源码时能够更快速地理解，我在简化和浅化 Mocha 实现流程的同时，也尽可能地保留了其中的一些命名和实现细节。有差别的地方，如执行测试用例环节，Mocha 源码利用了一个复杂的 Hook 机制来实现异步测试的依序执行，而我为了方便理解，用 async/await 来替代实现。当然这不是说 Mocha 实现得繁琐，在更加复杂的测试场景下，这套 Hook 机制是十分必要的。所以，这篇文章仅仅希望能够帮助我们攻克 Mocha 源码阅读的第一道陡坡，而要理解 Mocha 的精髓，光看这篇文章是远远不够的，还得深入阅读 Mocha 源码。\n\n## 参考文章\n> [Mocha官方文档](https://mochajs.org/)\n> [BDD和Mocha框架](http://www.moye.me/2014/11/22/bdd_mocha/)","slug":"换种方式读源码：如何实现一个简易版的Mocha","published":1,"updated":"2019-11-20T05:51:49.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflrs002msoyx1t3ifnti","content":"<blockquote>\n<p>作者：黄浩群</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Mocha 是目前最流行的 JavaScript 测试框架，理解 Mocha 的内部实现原理有助于我们更深入地了解和学习自动化测试。然而阅读源码一直是个让人望而生畏的过程，大量的高级写法经常是晦涩难懂，大量的边缘情况的处理也十分影响对核心代码的理解，以至于写一篇源码解析过后往往是连自己都看不懂。所以，这次我们不生啃 Mocha 源码，换个方式，从零开始一步步实现一个简易版的 Mocha。</p>\n<h2 id=\"我们将实现什么？\"><a href=\"#我们将实现什么？\" class=\"headerlink\" title=\"我们将实现什么？\"></a>我们将实现什么？</h2><ul>\n<li>实现 Mocha 框架的 BDD 风格测试，能通过 describe/it 函数定义一组或单个的测试用例；</li>\n<li>实现 Mocha 框架的 Hook 机制，包括 before、after、beforeEach、afterEach；</li>\n<li>实现简单格式的测试报告输出。<a id=\"more\"></a>\n<h2 id=\"Mocha-的-BDD-测试\"><a href=\"#Mocha-的-BDD-测试\" class=\"headerlink\" title=\"Mocha 的 BDD 测试\"></a>Mocha 的 BDD 测试</h2></li>\n</ul>\n<p>Mocha 支持 BDD/TDD 等多种测试风格，默认使用 BDD 接口。BDD（行为驱动开发）是一种以需求为导向的敏捷开发方法，相比主张”测试先行“的 TDD（测试驱动开发）而言，它强调”需求先行“，从一个更加宏观的角度去关注包括开发、QA、需求方在内的多方利益相关者的协作关系，力求让开发者“做正确的事“。在 Mocha 中，一个简单的 BDD 式测试用例如下：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"hljs-string\">'Array'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"hljs-string\">'#indexOf()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    before(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return -1 when not present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return the index when present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    after(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Mocha 的 BDD 测试主要包括以下几个 API：</p>\n<ul>\n<li><code>describe/context</code>：行为描述，代表一个测试块，是一组测试单元的集合；</li>\n<li><code>it/specify</code>：描述了一个测试单元，是最小的测试单位；</li>\n<li><code>before</code>：Hook 函数，在执行该测试块之前执行；</li>\n<li><code>after</code>：Hook 函数，在执行该测试块之后执行；</li>\n<li><code>beforeEach</code>：Hook 函数，在执行该测试块中每个测试单元之前执行；</li>\n<li><code>afterEach</code>：Hook 函数，在执行该测试块中每个测试单元之后执行。</li>\n</ul>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>话不多说，我们直接开始。</p>\n<h4 id=\"一、目录设计\"><a href=\"#一、目录设计\" class=\"headerlink\" title=\"一、目录设计\"></a>一、目录设计</h4><p>新建一个项目，命名为 simple-mocha。目录结构如下：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─ mocha/</span><br><span class=\"line\">│   ├─ index.js</span><br><span class=\"line\">│   ├─ src/</span><br><span class=\"line\">│   ├─ interfaces/</span><br><span class=\"line\">│   └─ reporters/</span><br><span class=\"line\">├─ test/</span><br><span class=\"line\">└─ package.json</span><br></pre></td></tr></table></figure>\n\n<p>先对这个目录结构作简单解释：</p>\n<ul>\n<li><code>mocha/</code>：存放我们即将实现的 simple-mocha 的源代码</li>\n<li><code>mocha/index.js</code>：simple-mocha 入口</li>\n<li><code>mocha/src/</code>：simple-mocha 核心代码</li>\n<li><code>mocha/interfaces/</code>：存放各类风格的测试接口，如 BDD</li>\n<li><code>mocha/reporters/</code>：存放用于输出测试报告的各种 reporter，如 SPEC</li>\n<li><code>test/</code>：存放我们编写的测试用例</li>\n<li><code>package.json</code></li>\n</ul>\n<p>其中 package.json 内容如下：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"simple-mocha\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"a simple mocha for understanding the mechanism of mocha\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"node mocha/index.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"hankle\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>npm test</code> 就可以启动执行测试用例。</p>\n<h4 id=\"二、模块设计\"><a href=\"#二、模块设计\" class=\"headerlink\" title=\"二、模块设计\"></a>二、模块设计</h4><p>Mocha 的 BDD 测试应该是一个”先定义后执行“的过程，这样才能保证其 Hook 机制正确执行，而与代码编写顺序无关，因此我们把整个测试流程分为两个阶段：收集测试用例（定义）和执行测试用例（执行）。我们构造了一个 Mocha 类来完成这两个过程，同时这个类也负责统筹协调其他各模块的执行，因此它是整个测试流程的核心。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">  run() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = Mocha;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/index.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> Mocha = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./src/mocha'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> mocha = <span class=\"hljs-keyword\">new</span> Mocha();</span><br><span class=\"line\">mocha.run();</span><br></pre></td></tr></table></figure>\n\n<p>另一方面我们知道，describe 函数描述了一个测试集合，这个测试集合除包括若干测试单元外，还拥有着一些自身的 Hook 函数，维护了一套严格的执行流。it 函数描述了一个测试单元，它需要执行测试用例，并且接收断言结果。这是两个逻辑复杂的单元，同时需要维护一定的内部状态，我们用两个类（Suite/Test）来分别构造它们。此外我们可以看出，BDD 风格的测试用例是一个典型的树形结构，describe 定义的测试块可以包含测试块，也可以包含 it 定义的测试单元。所以 Suite/Test 实例还将作为节点，构造出一棵 suite-test 树。比如下边这个测试用例：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"hljs-string\">'Array'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"hljs-string\">'#indexOf()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return -1 when not present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return the index when present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"hljs-string\">'#every()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return true when all items are satisfied'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>由它构造出来的 suite-test 树是这样的：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                             ┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">                                           ┌─┤        test:<span class=\"hljs-string\">\"should return -1 when not present\"</span>        │</span><br><span class=\"line\">                    ┌────────────────────┐ │ └────────────────────────────────────────────────────────┘</span><br><span class=\"line\">                  ┌─┤ suite:<span class=\"hljs-string\">\"#indexOf()\"</span> ├─┤</span><br><span class=\"line\">                  │ └────────────────────┘ │ ┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">┌───────────────┐ │                        └─┤       test:<span class=\"hljs-string\">\"should return the index when present\"</span>      │</span><br><span class=\"line\">│ suite:<span class=\"hljs-string\">\"Array\"</span> ├─┤                          └────────────────────────────────────────────────────────┘</span><br><span class=\"line\">└───────────────┘ │</span><br><span class=\"line\">                  │ ┌────────────────────┐   ┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">                  └─┤  suite:<span class=\"hljs-string\">\"#every()\"</span>  ├───┤ test:<span class=\"hljs-string\">\"should return true when all items are satisfied\"</span> │ </span><br><span class=\"line\">                    └────────────────────┘   └────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>因此，Suite/Test 除了要能够表示 describe/it 之外，还应该能够诠释这种树状结构的父子级关系：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/suite.js</span></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Suite</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.title = props.title;    <span class=\"hljs-comment\">// Suite名称，即describe传入的第一个参数</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.suites = [];            <span class=\"hljs-comment\">// 子级suite</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.tests = [];             <span class=\"hljs-comment\">// 包含的test</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.parent = props.parent;  <span class=\"hljs-comment\">// 父suite</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>._beforeAll = [];        <span class=\"hljs-comment\">// before hook</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>._afterAll = [];         <span class=\"hljs-comment\">// after hook</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>._beforeEach = [];       <span class=\"hljs-comment\">// beforeEach hook</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>._afterEach = [];        <span class=\"hljs-comment\">// afterEach hook</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (props.parent <span class=\"hljs-keyword\">instanceof</span> Suite) &#123;</span><br><span class=\"line\">      props.parent.suites.push(<span class=\"hljs-keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = Suite;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/test.js</span></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.title = props.title;  <span class=\"hljs-comment\">// Test名称，即it传入的第一个参数</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.fn = props.fn;        <span class=\"hljs-comment\">// Test的执行函数，即it传入的第二个参数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = Test;</span><br></pre></td></tr></table></figure>\n\n<p>我们完善一下目录结构：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─ mocha/</span><br><span class=\"line\">│   ├─ index.js</span><br><span class=\"line\">│   ├─ src/</span><br><span class=\"line\">│   │   ├─ mocha.js</span><br><span class=\"line\">│   │   ├─ runner.js</span><br><span class=\"line\">│   │   ├─ suite.js</span><br><span class=\"line\">│   │   ├─ test.js</span><br><span class=\"line\">│   │   └─ utils.js</span><br><span class=\"line\">│   ├─ interfaces/</span><br><span class=\"line\">│   │   ├─ bdd.js</span><br><span class=\"line\">│   │   └─ index.js</span><br><span class=\"line\">│   └─ reporters/</span><br><span class=\"line\">│       ├─ spec.js</span><br><span class=\"line\">│       └─ index.js</span><br><span class=\"line\">├─ test/</span><br><span class=\"line\">└─ package.json</span><br></pre></td></tr></table></figure>\n\n<p>考虑到执行测试用例的过程较为复杂，我们把这块逻辑单独抽离到 <code>runner.js</code>，它将在执行阶段负责调度 suite 和 test 节点并运行测试用例，后续会详细说到。</p>\n<h4 id=\"三、收集测试用例\"><a href=\"#三、收集测试用例\" class=\"headerlink\" title=\"三、收集测试用例\"></a>三、收集测试用例</h4><p>收集测试用例环节首先需要创建一个 suite 根节点，并把 API 挂载到全局，然后再执行测试用例文件 <code>*.spec.js</code> 进行用例收集，最终将生成一棵与之结构对应的 suite-test 树。</p>\n<p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/53678/4/6276/45324/5d3d8050Ec3ec53ee/f8ce3fdc0c125be1.png\" alt></p>\n<h6 id=\"1、suite-根节点\"><a href=\"#1、suite-根节点\" class=\"headerlink\" title=\"1、suite 根节点\"></a>1、suite 根节点</h6><p>我们先创建一个 suite 实例，作为整棵 suite-test 树的根节点，同时它也是我们收集和执行测试用例的起点。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> Suite = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./suite'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 创建一个suite根节点</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rootSuite = <span class=\"hljs-keyword\">new</span> Suite(&#123;</span><br><span class=\"line\">      title: <span class=\"hljs-string\">''</span>,</span><br><span class=\"line\">      parent: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、BDD-API-的全局挂载\"><a href=\"#2、BDD-API-的全局挂载\" class=\"headerlink\" title=\"2、BDD API 的全局挂载\"></a>2、BDD API 的全局挂载</h6><p>在我们使用 Mocha 编写测试用例时，我们不需要手动引入 Mocha 提供的任何模块，就能够直接使用 describe、it 等一系列 API。那怎么样才能实现这一点呢？很简单，把 API 挂载到 global 对象上就行。因此，我们需要在执行测试用例文件之前，先将 BDD 风格的 API 全部作全局挂载。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> interfaces = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../interfaces'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 创建一个根suite</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 使用bdd测试风格，将API挂载到global对象上</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> ui = <span class=\"hljs-string\">'bdd'</span>;</span><br><span class=\"line\">    interfaces[ui](global, <span class=\"hljs-keyword\">this</span>.rootSuite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/interfaces/index.js</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports.bdd = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./bdd'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  context.describe = context.context = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">title, fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.it = context.specify = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">title, fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.before = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.after = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.beforeEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.afterEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3、BDD-API-的具体实现\"><a href=\"#3、BDD-API-的具体实现\" class=\"headerlink\" title=\"3、BDD API 的具体实现\"></a>3、BDD API 的具体实现</h6><p>我们先看看 describe 函数怎么实现。</p>\n<p>describe 传入的 fn 参数是一个函数，它描述了一个测试块，测试块包含了若干子测试块和测试单元。因此我们需要执行 describe 传入的 fn 函数，才能够获知到它的子层结构，从而构造出一棵完整的 suite-test 树。而逐层执行 describe 的 fn 函数，本质上就是一个深度优先遍历的过程，因此我们需要利用一个栈（stack）来记录 suite 根节点到当前节点的路径。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> Suite = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../src/suite'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> Test = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../src/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 记录 suite 根节点到当前节点的路径</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> suites = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  context.describe = context.context = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">title, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> parent = suites[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> suite = <span class=\"hljs-keyword\">new</span> Suite(&#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      parent</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    suites.unshift(suite);</span><br><span class=\"line\">    fn.call(suite);</span><br><span class=\"line\">    suites.shift(suite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次处理一个 describe 时，我们都会构建一个 Suite 实例来表示它，并且在执行 fn 前入栈，执行 fn 后出栈，保证 <code>suites[0]</code> 始终是当前正在处理的 suite 节点。利用这个栈列表，我们可以在遍历过程中构建出 suite 的树级关系。</p>\n<p>同样的，其他 API 也都需要依赖这个栈列表来实现：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 记录 suite 根节点到当前节点的路径</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> suites = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// context.describe = ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  context.it = context.specify = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">title, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> parent = suites[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-keyword\">new</span> Test(&#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      fn</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    parent.tests.push(test);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.before = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> cur = suites[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    cur._beforeAll.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.after = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> cur = suites[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    cur._afterAll.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.beforeEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> cur = suites[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    cur._beforeEach.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.afterEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> cur = suites[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    cur._afterEach.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4、执行测试用例文件\"><a href=\"#4、执行测试用例文件\" class=\"headerlink\" title=\"4、执行测试用例文件\"></a>4、执行测试用例文件</h6><p>一切准备就绪，我们开始 <code>require</code> 测试用例文件。要完成这个步骤，我们需要一个函数来协助完成，它负责解析 test 路径下的资源，返回一个文件列表，并且能够支持 test 路径为文件和为目录的两种情况。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/utils.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports.lookupFiles = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lookupFiles</span>(<span class=\"hljs-params\">filepath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> stat;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 假设路径是文件</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">    stat = fs.statSync(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;filepath&#125;</span>.js`</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (stat.isFile()) &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// 确实是文件，直接以数组形式返回</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> [filepath];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 假设路径是目录</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> files = []; <span class=\"hljs-comment\">// 存放目录下的所有文件</span></span><br><span class=\"line\">  fs.readdirSync(filepath).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">dirent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> pathname = path.join(filepath, dirent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">      stat = fs.statSync(pathname);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (stat.isDirectory()) &#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">// 是目录，进一步递归</span></span><br><span class=\"line\">        files = files.concat(lookupFiles(pathname));</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (stat.isFile()) &#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">// 是文件，补充到待返回的文件列表中</span></span><br><span class=\"line\">        files.push(pathname);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> utils = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./utils'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 创建一个根suite</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 使用bdd测试风格，将API挂载到global对象上</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 执行测试用例文件，构建suite-test树</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> spec = path.resolve(__dirname, <span class=\"hljs-string\">'../../test'</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> files = utils.lookupFiles(spec);</span><br><span class=\"line\">    files.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-built_in\">require</span>(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、执行测试用例\"><a href=\"#四、执行测试用例\" class=\"headerlink\" title=\"四、执行测试用例\"></a>四、执行测试用例</h4><p>在这个环节中，我们需要通过遍历 suite-test 树来递归执行 suite 节点和 test 节点，并同步地输出测试报告。</p>\n<p><img src=\"https://img12.360buyimg.com/jdphoto/jfs/t1/84286/39/5724/43564/5d3d7f79E2576b082/4e91c6c081678702.png\" alt></p>\n<h6 id=\"1、异步执行\"><a href=\"#1、异步执行\" class=\"headerlink\" title=\"1、异步执行\"></a>1、异步执行</h6><p>Mocha 的测试用例和 Hook 函数是支持异步执行的。异步执行的写法有两种，一种是函数返回值为一个 promise 对象，另一种是函数接收一个入参 <code>done</code>，并由开发者在异步代码中手动调用 <code>done(error)</code> 来向 Mocha 传递断言结果。所以，在执行测试用例之前，我们需要一个包装函数，将开发者传入的函数 promise 化：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/utils.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports.adaptPromise = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (fn.length == <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">// 不使用参数 done</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> ret = fn();</span><br><span class=\"line\">        <span class=\"hljs-comment\">// 判断是否返回promise</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (ret <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span> ret.then(resolve, resolve);</span><br><span class=\"line\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        resolve(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 使用参数 done</span></span><br><span class=\"line\">      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">done</span>(<span class=\"hljs-params\">error</span>) </span>&#123;</span><br><span class=\"line\">        resolve(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fn(done);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个工具函数传入一个函数 fn 并返回另外一个函数，执行返回的函数能够以 promise 的形式去运行 fn。这样一来，我们需要稍微修改一下之前的代码：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; adaptPromise &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../src/utils'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">  context.it = context.specify = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">title, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-keyword\">new</span> Test(&#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      fn: adaptPromise(fn)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.before = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    cur._beforeAll.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.after = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    cur._afterAll.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.beforeEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    cur._beforeEach.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.afterEach = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">    cur._afterEach.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、测试用例执行器\"><a href=\"#2、测试用例执行器\" class=\"headerlink\" title=\"2、测试用例执行器\"></a>2、测试用例执行器</h6><p>执行测试用例需要调度 suite 和 test 节点，因此我们需要一个执行器（runner）来统一负责执行过程。这是执行阶段的核心，我们先直接贴代码：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/runner.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> EventEmitter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'events'</span>).EventEmitter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// 监听事件的标识</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> constants = &#123;</span><br><span class=\"line\">  EVENT_RUN_BEGIN: <span class=\"hljs-string\">'EVENT_RUN_BEGIN'</span>,      <span class=\"hljs-comment\">// 执行流程开始</span></span><br><span class=\"line\">  EVENT_RUN_END: <span class=\"hljs-string\">'EVENT_RUN_END'</span>,          <span class=\"hljs-comment\">// 执行流程结束</span></span><br><span class=\"line\">  EVENT_SUITE_BEGIN: <span class=\"hljs-string\">'EVENT_SUITE_BEGIN'</span>,  <span class=\"hljs-comment\">// 执行suite开始</span></span><br><span class=\"line\">  EVENT_SUITE_END: <span class=\"hljs-string\">'EVENT_SUITE_END'</span>,      <span class=\"hljs-comment\">// 执行suite开始</span></span><br><span class=\"line\">  EVENT_FAIL: <span class=\"hljs-string\">'EVENT_FAIL'</span>,                <span class=\"hljs-comment\">// 执行用例失败</span></span><br><span class=\"line\">  EVENT_PASS: <span class=\"hljs-string\">'EVENT_PASS'</span>                 <span class=\"hljs-comment\">// 执行用例成功</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Runner</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 记录 suite 根节点到当前节点的路径</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.suites = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * 主入口</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> run(root) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_RUN_BEGIN);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.runSuite(root);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_RUN_END);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * 执行suite</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> runSuite(suite) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// suite执行开始</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_SUITE_BEGIN, suite);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// 1）执行before钩子函数</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (suite._beforeAll.length) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fn <span class=\"hljs-keyword\">of</span> suite._beforeAll) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (result <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"hljs-string\">`\"before all\" hook in <span class=\"hljs-subst\">$&#123;suite.title&#125;</span>: <span class=\"hljs-subst\">$&#123;result.message&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"hljs-comment\">// suite执行结束</span></span><br><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_SUITE_END);</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 路径栈推入当前节点</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.suites.unshift(suite);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 2）执行test</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (suite.tests.length) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> test <span class=\"hljs-keyword\">of</span> suite.tests) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.runTest(test);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 3）执行子级suite</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (suite.suites.length) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> child <span class=\"hljs-keyword\">of</span> suite.suites) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.runSuite(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 路径栈推出当前节点</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.suites.shift(suite);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 4）执行after钩子函数</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (suite._afterAll.length) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fn <span class=\"hljs-keyword\">of</span> suite._afterAll) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (result <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"hljs-string\">`\"after all\" hook in <span class=\"hljs-subst\">$&#123;suite.title&#125;</span>: <span class=\"hljs-subst\">$&#123;result.message&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"hljs-comment\">// suite执行结束</span></span><br><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_SUITE_END);</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// suite结束</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_SUITE_END);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * 执行suite</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> runTest(test) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 1）由suite根节点向当前suite节点，依次执行beforeEach钩子函数</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> _beforeEach = [].concat(<span class=\"hljs-keyword\">this</span>.suites).reverse().reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">list, suite</span>) =&gt;</span> list.concat(suite._beforeEach), []);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (_beforeEach.length) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fn <span class=\"hljs-keyword\">of</span> _beforeEach) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (result <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"hljs-string\">`\"before each\" hook for <span class=\"hljs-subst\">$&#123;test.title&#125;</span>: <span class=\"hljs-subst\">$&#123;result.message&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 2）执行测试用例</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> test.fn();</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (result <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;test.title&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_PASS, <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;test.title&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"hljs-comment\">// 3）由当前suite节点向suite根节点，依次执行afterEach钩子函数</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> _afterEach = [].concat(<span class=\"hljs-keyword\">this</span>.suites).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">list, suite</span>) =&gt;</span> list.concat(suite._afterEach), []);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (_afterEach.length) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fn <span class=\"hljs-keyword\">of</span> _afterEach) &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (result <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"hljs-string\">`\"after each\" hook for <span class=\"hljs-subst\">$&#123;test.title&#125;</span>: <span class=\"hljs-subst\">$&#123;result.message&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Runner.constants = constants;</span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = Runner</span><br></pre></td></tr></table></figure>\n\n<p>代码很长，我们稍微捋一下。</p>\n<p>首先，我们构造一个 Runner 类，利用两个 async 方法来完成对 suite-test 树的遍历：</p>\n<ul>\n<li><code>runSuite</code> ：负责执行 suite 节点。它不仅需要调用 runTest 执行该 suite 节点上的若干 test 节点，还需要调用 runSuite 执行下一级的若干 suite 节点来实现遍历，同时，before/after 也将在这里得到调用。执行顺序依次是：<code>before -&gt; runTest -&gt; runSuite -&gt; after</code>。</li>\n<li><code>runTest</code> ：负责执行 test 节点，主要是执行该 test 对象上定义的测试用例。另外，beforeEach/afterEach 的执行有一个类似浏览器事件捕获和冒泡的过程，我们需要沿节点路径向当前 suite 节点方向和向 suite 根节点方向分别执行各 suite 的 beforeEach/afterEach 钩子函数。执行顺序依次是：<code>beforeEach -&gt; run test case -&gt; afterEach</code>。</li>\n</ul>\n<p>在遍历过程中，我们依然是利用一个栈列表来维护 suite 根节点到当前节点的路径。同时，这两个流程都用 async/await 写法来组织，保证所有任务在异步场景下依然是按序执行的。</p>\n<p>其次，测试结论是“边执行边输出”的。为了在执行过程中能向 reporter 实时通知执行结果和执行状态，我们让 Runner 类继承自 EventEmitter 类，使其具备订阅/发布事件的能力，这个后续会细讲。</p>\n<p>最后，我们在 Mocha 实例的 run 方法中去实例化 Runner 并调用它：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> Runner = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./runner'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> runner = <span class=\"hljs-keyword\">new</span> Runner();</span><br><span class=\"line\">    runner.run(<span class=\"hljs-keyword\">this</span>.rootSuite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3、输出测试报告\"><a href=\"#3、输出测试报告\" class=\"headerlink\" title=\"3、输出测试报告\"></a>3、输出测试报告</h6><p>reporter 负责测试报告输出，这个过程是在执行测试用例的过程中同步进行的，因此我们利用 EventEmitter 让 reporter 和 runner 保持通信。在 runner 中我们已经在各个关键节点都作了 event emit，所以我们只需要在 reporter 中加上相应的事件监听即可：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/reporters/index.js</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports.spec = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./spec'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/reporters/spec.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> constants = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../src/runner'</span>).constants;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">runner</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_RUN_BEGIN, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// suite执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_BEGIN, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">suite</span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// suite执行结束</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_END, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 用例通过</span></span><br><span class=\"line\">  runner.on(constants.EVENT_PASS, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">title</span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 用例失败</span></span><br><span class=\"line\">  runner.on(constants.EVENT_FAIL, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">title</span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 执行结束</span></span><br><span class=\"line\">  runner.once(constants.EVENT_RUN_END, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mocha 类中引入 reporter，执行事件订阅，就能让 runner 将测试的状态结果实时推送给 reporter 了：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> reporters = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../reporters'</span>);</span><br><span class=\"line\"><span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ...</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> runner = <span class=\"hljs-keyword\">new</span> Runner();</span><br><span class=\"line\">    reporters[<span class=\"hljs-string\">'spec'</span>](runner);</span><br><span class=\"line\">    runner.run(<span class=\"hljs-keyword\">this</span>.rootSuite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>reporter 中可以任意构造你想要的报告样式输出，例如这样：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// mocha/reporters/spec.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> constants = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../src/runner'</span>).constants;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> colors = &#123;</span><br><span class=\"line\">  pass: <span class=\"hljs-number\">90</span>,</span><br><span class=\"line\">  fail: <span class=\"hljs-number\">31</span>,</span><br><span class=\"line\">  green: <span class=\"hljs-number\">32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">color</span>(<span class=\"hljs-params\">type, str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'\\u001b['</span> + colors[type] + <span class=\"hljs-string\">'m'</span> + str + <span class=\"hljs-string\">'\\u001b[0m'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">runner</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> indents = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> passes = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> failures = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">indent</span>(<span class=\"hljs-params\">i = <span class=\"hljs-number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>(indents + i).join(<span class=\"hljs-string\">'  '</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_RUN_BEGIN, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// suite执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_BEGIN, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">suite</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log();</span><br><span class=\"line\"></span><br><span class=\"line\">    ++indents;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(indent(), suite.title);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// suite执行结束</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_END, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    --indents;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (indents == <span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">console</span>.log();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 用例通过</span></span><br><span class=\"line\">  runner.on(constants.EVENT_PASS, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">title</span>) </span>&#123;</span><br><span class=\"line\">    passes++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> fmt = indent(<span class=\"hljs-number\">1</span>) + color(<span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'  ✓'</span>) + color(<span class=\"hljs-string\">'pass'</span>, <span class=\"hljs-string\">' %s'</span>);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(fmt, title);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 用例失败</span></span><br><span class=\"line\">  runner.on(constants.EVENT_FAIL, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">title</span>) </span>&#123;</span><br><span class=\"line\">    failures++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> fmt = indent(<span class=\"hljs-number\">1</span>) + color(<span class=\"hljs-string\">'fail'</span>, <span class=\"hljs-string\">'  × %s'</span>);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(fmt, title);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 执行结束</span></span><br><span class=\"line\">  runner.once(constants.EVENT_RUN_END, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(color(<span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'  %d passing'</span>), passes);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(color(<span class=\"hljs-string\">'fail'</span>, <span class=\"hljs-string\">'  %d failing'</span>), failures);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五、验证\"><a href=\"#五、验证\" class=\"headerlink\" title=\"五、验证\"></a>五、验证</h4><p>到这里，我们的 simple-mocha 就基本完成了，我们可以编写一个测试用例来简单验证一下：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// test/test.spec.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> assert = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'assert'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"hljs-string\">'Array'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"hljs-string\">'#indexOf()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return -1 when not present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"hljs-number\">-1</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].indexOf(<span class=\"hljs-number\">4</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return the index when present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"hljs-number\">-1</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].indexOf(<span class=\"hljs-number\">3</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"hljs-string\">'#every()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return true when all items are satisfied'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"hljs-literal\">true</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].every(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> !<span class=\"hljs-built_in\">isNaN</span>(item)))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"hljs-string\">'Srting'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"hljs-string\">'#replace'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"hljs-string\">'should return a string that has been replaced'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"hljs-string\">'hey Hankle'</span>, <span class=\"hljs-string\">'hey Densy'</span>.replace(<span class=\"hljs-string\">'Densy'</span>, <span class=\"hljs-string\">'Hankle'</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们用 node 内置的 assert 模块来执行断言测试。下边是执行结果：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm test</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; simple-mocha@1.0.0 test /Documents/simple-mocha</span><br><span class=\"line\">&gt; node mocha</span><br><span class=\"line\"></span><br><span class=\"line\">   Array</span><br><span class=\"line\">     #indexOf()</span><br><span class=\"line\">        ✓ should return -1 when not present</span><br><span class=\"line\">        × should return the index when present</span><br><span class=\"line\">     #every()</span><br><span class=\"line\">        ✓ should return true when all items are satisfied</span><br><span class=\"line\"></span><br><span class=\"line\">   String</span><br><span class=\"line\">     #replace</span><br><span class=\"line\">        ✓ should return a string that has been replaced</span><br><span class=\"line\"></span><br><span class=\"line\">  3 passing</span><br><span class=\"line\">  1 failing</span><br></pre></td></tr></table></figure>\n\n<p>测试用例执行成功。附上完整的流程图：</p>\n<p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/48002/14/6249/38293/5d3d7dd6E1b985819/7ba08cfe21c04c73.png\" alt></p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>如果你看到了这里，看完并看懂了上边实现 simple-mocha 的整个流程，那么很高兴地告诉你，你已经掌握了 Mocha 最核心的运行机理。simple-mocha 的整个实现过程其实就是 Mocha 实现的一个简化。而为了让大家在看完这篇文章后再去阅读 Mocha 源码时能够更快速地理解，我在简化和浅化 Mocha 实现流程的同时，也尽可能地保留了其中的一些命名和实现细节。有差别的地方，如执行测试用例环节，Mocha 源码利用了一个复杂的 Hook 机制来实现异步测试的依序执行，而我为了方便理解，用 async/await 来替代实现。当然这不是说 Mocha 实现得繁琐，在更加复杂的测试场景下，这套 Hook 机制是十分必要的。所以，这篇文章仅仅希望能够帮助我们攻克 Mocha 源码阅读的第一道陡坡，而要理解 Mocha 的精髓，光看这篇文章是远远不够的，还得深入阅读 Mocha 源码。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">Mocha官方文档</a><br><a href=\"http://www.moye.me/2014/11/22/bdd_mocha/\" target=\"_blank\" rel=\"noopener\">BDD和Mocha框架</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：黄浩群</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Mocha 是目前最流行的 JavaScript 测试框架，理解 Mocha 的内部实现原理有助于我们更深入地了解和学习自动化测试。然而阅读源码一直是个让人望而生畏的过程，大量的高级写法经常是晦涩难懂，大量的边缘情况的处理也十分影响对核心代码的理解，以至于写一篇源码解析过后往往是连自己都看不懂。所以，这次我们不生啃 Mocha 源码，换个方式，从零开始一步步实现一个简易版的 Mocha。</p>\n<h2 id=\"我们将实现什么？\"><a href=\"#我们将实现什么？\" class=\"headerlink\" title=\"我们将实现什么？\"></a>我们将实现什么？</h2><ul>\n<li>实现 Mocha 框架的 BDD 风格测试，能通过 describe/it 函数定义一组或单个的测试用例；</li>\n<li>实现 Mocha 框架的 Hook 机制，包括 before、after、beforeEach、afterEach；</li>\n<li>实现简单格式的测试报告输出。</li></ul>","more":"<h2 id=\"Mocha-的-BDD-测试\"><a href=\"#Mocha-的-BDD-测试\" class=\"headerlink\" title=\"Mocha 的 BDD 测试\"></a>Mocha 的 BDD 测试</h2></li>\n</ul>\n<p>Mocha 支持 BDD/TDD 等多种测试风格，默认使用 BDD 接口。BDD（行为驱动开发）是一种以需求为导向的敏捷开发方法，相比主张”测试先行“的 TDD（测试驱动开发）而言，它强调”需求先行“，从一个更加宏观的角度去关注包括开发、QA、需求方在内的多方利益相关者的协作关系，力求让开发者“做正确的事“。在 Mocha 中，一个简单的 BDD 式测试用例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Array'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'#indexOf()'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(<span class=\"string\">'should return -1 when not present'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    it(<span class=\"string\">'should return the index when present'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Mocha 的 BDD 测试主要包括以下几个 API：</p>\n<ul>\n<li><code>describe/context</code>：行为描述，代表一个测试块，是一组测试单元的集合；</li>\n<li><code>it/specify</code>：描述了一个测试单元，是最小的测试单位；</li>\n<li><code>before</code>：Hook 函数，在执行该测试块之前执行；</li>\n<li><code>after</code>：Hook 函数，在执行该测试块之后执行；</li>\n<li><code>beforeEach</code>：Hook 函数，在执行该测试块中每个测试单元之前执行；</li>\n<li><code>afterEach</code>：Hook 函数，在执行该测试块中每个测试单元之后执行。</li>\n</ul>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>话不多说，我们直接开始。</p>\n<h4 id=\"一、目录设计\"><a href=\"#一、目录设计\" class=\"headerlink\" title=\"一、目录设计\"></a>一、目录设计</h4><p>新建一个项目，命名为 simple-mocha。目录结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─ mocha/</span><br><span class=\"line\">│   ├─ index.js</span><br><span class=\"line\">│   ├─ src/</span><br><span class=\"line\">│   ├─ interfaces/</span><br><span class=\"line\">│   └─ reporters/</span><br><span class=\"line\">├─ test/</span><br><span class=\"line\">└─ package.json</span><br></pre></td></tr></table></figure>\n\n<p>先对这个目录结构作简单解释：</p>\n<ul>\n<li><code>mocha/</code>：存放我们即将实现的 simple-mocha 的源代码</li>\n<li><code>mocha/index.js</code>：simple-mocha 入口</li>\n<li><code>mocha/src/</code>：simple-mocha 核心代码</li>\n<li><code>mocha/interfaces/</code>：存放各类风格的测试接口，如 BDD</li>\n<li><code>mocha/reporters/</code>：存放用于输出测试报告的各种 reporter，如 SPEC</li>\n<li><code>test/</code>：存放我们编写的测试用例</li>\n<li><code>package.json</code></li>\n</ul>\n<p>其中 package.json 内容如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"simple-mocha\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"a simple mocha for understanding the mechanism of mocha\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"node mocha/index.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"hankle\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>npm test</code> 就可以启动执行测试用例。</p>\n<h4 id=\"二、模块设计\"><a href=\"#二、模块设计\" class=\"headerlink\" title=\"二、模块设计\"></a>二、模块设计</h4><p>Mocha 的 BDD 测试应该是一个”先定义后执行“的过程，这样才能保证其 Hook 机制正确执行，而与代码编写顺序无关，因此我们把整个测试流程分为两个阶段：收集测试用例（定义）和执行测试用例（执行）。我们构造了一个 Mocha 类来完成这两个过程，同时这个类也负责统筹协调其他各模块的执行，因此它是整个测试流程的核心。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">  run() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Mocha;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mocha = <span class=\"built_in\">require</span>(<span class=\"string\">'./src/mocha'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mocha = <span class=\"keyword\">new</span> Mocha();</span><br><span class=\"line\">mocha.run();</span><br></pre></td></tr></table></figure>\n\n<p>另一方面我们知道，describe 函数描述了一个测试集合，这个测试集合除包括若干测试单元外，还拥有着一些自身的 Hook 函数，维护了一套严格的执行流。it 函数描述了一个测试单元，它需要执行测试用例，并且接收断言结果。这是两个逻辑复杂的单元，同时需要维护一定的内部状态，我们用两个类（Suite/Test）来分别构造它们。此外我们可以看出，BDD 风格的测试用例是一个典型的树形结构，describe 定义的测试块可以包含测试块，也可以包含 it 定义的测试单元。所以 Suite/Test 实例还将作为节点，构造出一棵 suite-test 树。比如下边这个测试用例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Array'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'#indexOf()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'should return -1 when not present'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    it(<span class=\"string\">'should return the index when present'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'#every()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'should return true when all items are satisfied'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>由它构造出来的 suite-test 树是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                             ┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">                                           ┌─┤        test:<span class=\"string\">\"should return -1 when not present\"</span>        │</span><br><span class=\"line\">                    ┌────────────────────┐ │ └────────────────────────────────────────────────────────┘</span><br><span class=\"line\">                  ┌─┤ suite:<span class=\"string\">\"#indexOf()\"</span> ├─┤</span><br><span class=\"line\">                  │ └────────────────────┘ │ ┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">┌───────────────┐ │                        └─┤       test:<span class=\"string\">\"should return the index when present\"</span>      │</span><br><span class=\"line\">│ suite:<span class=\"string\">\"Array\"</span> ├─┤                          └────────────────────────────────────────────────────────┘</span><br><span class=\"line\">└───────────────┘ │</span><br><span class=\"line\">                  │ ┌────────────────────┐   ┌────────────────────────────────────────────────────────┐</span><br><span class=\"line\">                  └─┤  suite:<span class=\"string\">\"#every()\"</span>  ├───┤ test:<span class=\"string\">\"should return true when all items are satisfied\"</span> │ </span><br><span class=\"line\">                    └────────────────────┘   └────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>因此，Suite/Test 除了要能够表示 describe/it 之外，还应该能够诠释这种树状结构的父子级关系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/suite.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Suite</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title = props.title;    <span class=\"comment\">// Suite名称，即describe传入的第一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.suites = [];            <span class=\"comment\">// 子级suite</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tests = [];             <span class=\"comment\">// 包含的test</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent = props.parent;  <span class=\"comment\">// 父suite</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._beforeAll = [];        <span class=\"comment\">// before hook</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._afterAll = [];         <span class=\"comment\">// after hook</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._beforeEach = [];       <span class=\"comment\">// beforeEach hook</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._afterEach = [];        <span class=\"comment\">// afterEach hook</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (props.parent <span class=\"keyword\">instanceof</span> Suite) &#123;</span><br><span class=\"line\">      props.parent.suites.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Suite;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/test.js</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title = props.title;  <span class=\"comment\">// Test名称，即it传入的第一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fn = props.fn;        <span class=\"comment\">// Test的执行函数，即it传入的第二个参数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Test;</span><br></pre></td></tr></table></figure>\n\n<p>我们完善一下目录结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─ mocha/</span><br><span class=\"line\">│   ├─ index.js</span><br><span class=\"line\">│   ├─ src/</span><br><span class=\"line\">│   │   ├─ mocha.js</span><br><span class=\"line\">│   │   ├─ runner.js</span><br><span class=\"line\">│   │   ├─ suite.js</span><br><span class=\"line\">│   │   ├─ test.js</span><br><span class=\"line\">│   │   └─ utils.js</span><br><span class=\"line\">│   ├─ interfaces/</span><br><span class=\"line\">│   │   ├─ bdd.js</span><br><span class=\"line\">│   │   └─ index.js</span><br><span class=\"line\">│   └─ reporters/</span><br><span class=\"line\">│       ├─ spec.js</span><br><span class=\"line\">│       └─ index.js</span><br><span class=\"line\">├─ test/</span><br><span class=\"line\">└─ package.json</span><br></pre></td></tr></table></figure>\n\n<p>考虑到执行测试用例的过程较为复杂，我们把这块逻辑单独抽离到 <code>runner.js</code>，它将在执行阶段负责调度 suite 和 test 节点并运行测试用例，后续会详细说到。</p>\n<h4 id=\"三、收集测试用例\"><a href=\"#三、收集测试用例\" class=\"headerlink\" title=\"三、收集测试用例\"></a>三、收集测试用例</h4><p>收集测试用例环节首先需要创建一个 suite 根节点，并把 API 挂载到全局，然后再执行测试用例文件 <code>*.spec.js</code> 进行用例收集，最终将生成一棵与之结构对应的 suite-test 树。</p>\n<p><img src=\"https://img14.360buyimg.com/jdphoto/jfs/t1/53678/4/6276/45324/5d3d8050Ec3ec53ee/f8ce3fdc0c125be1.png\" alt></p>\n<h6 id=\"1、suite-根节点\"><a href=\"#1、suite-根节点\" class=\"headerlink\" title=\"1、suite 根节点\"></a>1、suite 根节点</h6><p>我们先创建一个 suite 实例，作为整棵 suite-test 树的根节点，同时它也是我们收集和执行测试用例的起点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Suite = <span class=\"built_in\">require</span>(<span class=\"string\">'./suite'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个suite根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rootSuite = <span class=\"keyword\">new</span> Suite(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">''</span>,</span><br><span class=\"line\">      parent: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、BDD-API-的全局挂载\"><a href=\"#2、BDD-API-的全局挂载\" class=\"headerlink\" title=\"2、BDD API 的全局挂载\"></a>2、BDD API 的全局挂载</h6><p>在我们使用 Mocha 编写测试用例时，我们不需要手动引入 Mocha 提供的任何模块，就能够直接使用 describe、it 等一系列 API。那怎么样才能实现这一点呢？很简单，把 API 挂载到 global 对象上就行。因此，我们需要在执行测试用例文件之前，先将 BDD 风格的 API 全部作全局挂载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> interfaces = <span class=\"built_in\">require</span>(<span class=\"string\">'../interfaces'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个根suite</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用bdd测试风格，将API挂载到global对象上</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ui = <span class=\"string\">'bdd'</span>;</span><br><span class=\"line\">    interfaces[ui](global, <span class=\"keyword\">this</span>.rootSuite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/interfaces/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.bdd = <span class=\"built_in\">require</span>(<span class=\"string\">'./bdd'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  context.describe = context.context = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title, fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.it = context.specify = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title, fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.beforeEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">  context.afterEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3、BDD-API-的具体实现\"><a href=\"#3、BDD-API-的具体实现\" class=\"headerlink\" title=\"3、BDD API 的具体实现\"></a>3、BDD API 的具体实现</h6><p>我们先看看 describe 函数怎么实现。</p>\n<p>describe 传入的 fn 参数是一个函数，它描述了一个测试块，测试块包含了若干子测试块和测试单元。因此我们需要执行 describe 传入的 fn 函数，才能够获知到它的子层结构，从而构造出一棵完整的 suite-test 树。而逐层执行 describe 的 fn 函数，本质上就是一个深度优先遍历的过程，因此我们需要利用一个栈（stack）来记录 suite 根节点到当前节点的路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Suite = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/suite'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Test = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 记录 suite 根节点到当前节点的路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> suites = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  context.describe = context.context = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parent = suites[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> suite = <span class=\"keyword\">new</span> Suite(&#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      parent</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    suites.unshift(suite);</span><br><span class=\"line\">    fn.call(suite);</span><br><span class=\"line\">    suites.shift(suite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次处理一个 describe 时，我们都会构建一个 Suite 实例来表示它，并且在执行 fn 前入栈，执行 fn 后出栈，保证 <code>suites[0]</code> 始终是当前正在处理的 suite 节点。利用这个栈列表，我们可以在遍历过程中构建出 suite 的树级关系。</p>\n<p>同样的，其他 API 也都需要依赖这个栈列表来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 记录 suite 根节点到当前节点的路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> suites = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// context.describe = ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  context.it = context.specify = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parent = suites[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> Test(&#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      fn</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    parent.tests.push(test);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = suites[<span class=\"number\">0</span>];</span><br><span class=\"line\">    cur._beforeAll.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = suites[<span class=\"number\">0</span>];</span><br><span class=\"line\">    cur._afterAll.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.beforeEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = suites[<span class=\"number\">0</span>];</span><br><span class=\"line\">    cur._beforeEach.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.afterEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = suites[<span class=\"number\">0</span>];</span><br><span class=\"line\">    cur._afterEach.push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"4、执行测试用例文件\"><a href=\"#4、执行测试用例文件\" class=\"headerlink\" title=\"4、执行测试用例文件\"></a>4、执行测试用例文件</h6><p>一切准备就绪，我们开始 <code>require</code> 测试用例文件。要完成这个步骤，我们需要一个函数来协助完成，它负责解析 test 路径下的资源，返回一个文件列表，并且能够支持 test 路径为文件和为目录的两种情况。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/utils.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.lookupFiles = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookupFiles</span>(<span class=\"params\">filepath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stat;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 假设路径是文件</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    stat = fs.statSync(<span class=\"string\">`<span class=\"subst\">$&#123;filepath&#125;</span>.js`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stat.isFile()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 确实是文件，直接以数组形式返回</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> [filepath];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"comment\">// 假设路径是目录</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> files = []; <span class=\"comment\">// 存放目录下的所有文件</span></span><br><span class=\"line\">  fs.readdirSync(filepath).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dirent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathname = path.join(filepath, dirent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      stat = fs.statSync(pathname);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stat.isDirectory()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是目录，进一步递归</span></span><br><span class=\"line\">        files = files.concat(lookupFiles(pathname));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stat.isFile()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是文件，补充到待返回的文件列表中</span></span><br><span class=\"line\">        files.push(pathname);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个根suite</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用bdd测试风格，将API挂载到global对象上</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 执行测试用例文件，构建suite-test树</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> spec = path.resolve(__dirname, <span class=\"string\">'../../test'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> files = utils.lookupFiles(spec);</span><br><span class=\"line\">    files.forEach(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">require</span>(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四、执行测试用例\"><a href=\"#四、执行测试用例\" class=\"headerlink\" title=\"四、执行测试用例\"></a>四、执行测试用例</h4><p>在这个环节中，我们需要通过遍历 suite-test 树来递归执行 suite 节点和 test 节点，并同步地输出测试报告。</p>\n<p><img src=\"https://img12.360buyimg.com/jdphoto/jfs/t1/84286/39/5724/43564/5d3d7f79E2576b082/4e91c6c081678702.png\" alt></p>\n<h6 id=\"1、异步执行\"><a href=\"#1、异步执行\" class=\"headerlink\" title=\"1、异步执行\"></a>1、异步执行</h6><p>Mocha 的测试用例和 Hook 函数是支持异步执行的。异步执行的写法有两种，一种是函数返回值为一个 promise 对象，另一种是函数接收一个入参 <code>done</code>，并由开发者在异步代码中手动调用 <code>done(error)</code> 来向 Mocha 传递断言结果。所以，在执行测试用例之前，我们需要一个包装函数，将开发者传入的函数 promise 化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/utils.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.adaptPromise = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fn.length == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 不使用参数 done</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ret = fn();</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否返回promise</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> ret.then(resolve, resolve);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        resolve(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 使用参数 done</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">done</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        resolve(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fn(done);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个工具函数传入一个函数 fn 并返回另外一个函数，执行返回的函数能够以 promise 的形式去运行 fn。这样一来，我们需要稍微修改一下之前的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/interfaces/bdd.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; adaptPromise &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/utils'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context, root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  context.it = context.specify = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title, fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> Test(&#123;</span><br><span class=\"line\">      title,</span><br><span class=\"line\">      fn: adaptPromise(fn)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    cur._beforeAll.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.after = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    cur._afterAll.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.beforeEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    cur._beforeEach.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  context.afterEach = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    cur._afterEach.push(adaptPromise(fn));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、测试用例执行器\"><a href=\"#2、测试用例执行器\" class=\"headerlink\" title=\"2、测试用例执行器\"></a>2、测试用例执行器</h6><p>执行测试用例需要调度 suite 和 test 节点，因此我们需要一个执行器（runner）来统一负责执行过程。这是执行阶段的核心，我们先直接贴代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/runner.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听事件的标识</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> constants = &#123;</span><br><span class=\"line\">  EVENT_RUN_BEGIN: <span class=\"string\">'EVENT_RUN_BEGIN'</span>,      <span class=\"comment\">// 执行流程开始</span></span><br><span class=\"line\">  EVENT_RUN_END: <span class=\"string\">'EVENT_RUN_END'</span>,          <span class=\"comment\">// 执行流程结束</span></span><br><span class=\"line\">  EVENT_SUITE_BEGIN: <span class=\"string\">'EVENT_SUITE_BEGIN'</span>,  <span class=\"comment\">// 执行suite开始</span></span><br><span class=\"line\">  EVENT_SUITE_END: <span class=\"string\">'EVENT_SUITE_END'</span>,      <span class=\"comment\">// 执行suite开始</span></span><br><span class=\"line\">  EVENT_FAIL: <span class=\"string\">'EVENT_FAIL'</span>,                <span class=\"comment\">// 执行用例失败</span></span><br><span class=\"line\">  EVENT_PASS: <span class=\"string\">'EVENT_PASS'</span>                 <span class=\"comment\">// 执行用例成功</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 记录 suite 根节点到当前节点的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.suites = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 主入口</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> run(root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit(constants.EVENT_RUN_BEGIN);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.runSuite(root);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit(constants.EVENT_RUN_END);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 执行suite</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> runSuite(suite) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// suite执行开始</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit(constants.EVENT_SUITE_BEGIN, suite);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1）执行before钩子函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (suite._beforeAll.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> suite._beforeAll) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"string\">`\"before all\" hook in <span class=\"subst\">$&#123;suite.title&#125;</span>: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"comment\">// suite执行结束</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.emit(constants.EVENT_SUITE_END);</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 路径栈推入当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.suites.unshift(suite);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 2）执行test</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (suite.tests.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> test <span class=\"keyword\">of</span> suite.tests) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.runTest(test);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 3）执行子级suite</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (suite.suites.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> child <span class=\"keyword\">of</span> suite.suites) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.runSuite(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 路径栈推出当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.suites.shift(suite);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 4）执行after钩子函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (suite._afterAll.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> suite._afterAll) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"string\">`\"after all\" hook in <span class=\"subst\">$&#123;suite.title&#125;</span>: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>);</span><br><span class=\"line\">          <span class=\"comment\">// suite执行结束</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.emit(constants.EVENT_SUITE_END);</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// suite结束</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit(constants.EVENT_SUITE_END);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 执行suite</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> runTest(test) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1）由suite根节点向当前suite节点，依次执行beforeEach钩子函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _beforeEach = [].concat(<span class=\"keyword\">this</span>.suites).reverse().reduce(<span class=\"function\">(<span class=\"params\">list, suite</span>) =&gt;</span> list.concat(suite._beforeEach), []);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_beforeEach.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> _beforeEach) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"string\">`\"before each\" hook for <span class=\"subst\">$&#123;test.title&#125;</span>: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 2）执行测试用例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> test.fn();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"string\">`<span class=\"subst\">$&#123;test.title&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emit(constants.EVENT_PASS, <span class=\"string\">`<span class=\"subst\">$&#123;test.title&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 3）由当前suite节点向suite根节点，依次执行afterEach钩子函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _afterEach = [].concat(<span class=\"keyword\">this</span>.suites).reduce(<span class=\"function\">(<span class=\"params\">list, suite</span>) =&gt;</span> list.concat(suite._afterEach), []);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_afterEach.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> _afterEach) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> fn();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.emit(constants.EVENT_FAIL, <span class=\"string\">`\"after each\" hook for <span class=\"subst\">$&#123;test.title&#125;</span>: <span class=\"subst\">$&#123;result.message&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Runner.constants = constants;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Runner</span><br></pre></td></tr></table></figure>\n\n<p>代码很长，我们稍微捋一下。</p>\n<p>首先，我们构造一个 Runner 类，利用两个 async 方法来完成对 suite-test 树的遍历：</p>\n<ul>\n<li><code>runSuite</code> ：负责执行 suite 节点。它不仅需要调用 runTest 执行该 suite 节点上的若干 test 节点，还需要调用 runSuite 执行下一级的若干 suite 节点来实现遍历，同时，before/after 也将在这里得到调用。执行顺序依次是：<code>before -&gt; runTest -&gt; runSuite -&gt; after</code>。</li>\n<li><code>runTest</code> ：负责执行 test 节点，主要是执行该 test 对象上定义的测试用例。另外，beforeEach/afterEach 的执行有一个类似浏览器事件捕获和冒泡的过程，我们需要沿节点路径向当前 suite 节点方向和向 suite 根节点方向分别执行各 suite 的 beforeEach/afterEach 钩子函数。执行顺序依次是：<code>beforeEach -&gt; run test case -&gt; afterEach</code>。</li>\n</ul>\n<p>在遍历过程中，我们依然是利用一个栈列表来维护 suite 根节点到当前节点的路径。同时，这两个流程都用 async/await 写法来组织，保证所有任务在异步场景下依然是按序执行的。</p>\n<p>其次，测试结论是“边执行边输出”的。为了在执行过程中能向 reporter 实时通知执行结果和执行状态，我们让 Runner 类继承自 EventEmitter 类，使其具备订阅/发布事件的能力，这个后续会细讲。</p>\n<p>最后，我们在 Mocha 实例的 run 方法中去实例化 Runner 并调用它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Runner = <span class=\"built_in\">require</span>(<span class=\"string\">'./runner'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> runner = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">    runner.run(<span class=\"keyword\">this</span>.rootSuite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3、输出测试报告\"><a href=\"#3、输出测试报告\" class=\"headerlink\" title=\"3、输出测试报告\"></a>3、输出测试报告</h6><p>reporter 负责测试报告输出，这个过程是在执行测试用例的过程中同步进行的，因此我们利用 EventEmitter 让 reporter 和 runner 保持通信。在 runner 中我们已经在各个关键节点都作了 event emit，所以我们只需要在 reporter 中加上相应的事件监听即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/reporters/index.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.spec = <span class=\"built_in\">require</span>(<span class=\"string\">'./spec'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/reporters/spec.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> constants = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/runner'</span>).constants;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">runner</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_RUN_BEGIN, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// suite执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_BEGIN, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">suite</span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// suite执行结束</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_END, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用例通过</span></span><br><span class=\"line\">  runner.on(constants.EVENT_PASS, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title</span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用例失败</span></span><br><span class=\"line\">  runner.on(constants.EVENT_FAIL, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title</span>) </span>&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行结束</span></span><br><span class=\"line\">  runner.once(constants.EVENT_RUN_END, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Mocha 类中引入 reporter，执行事件订阅，就能让 runner 将测试的状态结果实时推送给 reporter 了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/src/mocha.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reporters = <span class=\"built_in\">require</span>(<span class=\"string\">'../reporters'</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> runner = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">    reporters[<span class=\"string\">'spec'</span>](runner);</span><br><span class=\"line\">    runner.run(<span class=\"keyword\">this</span>.rootSuite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>reporter 中可以任意构造你想要的报告样式输出，例如这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mocha/reporters/spec.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> constants = <span class=\"built_in\">require</span>(<span class=\"string\">'../src/runner'</span>).constants;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> colors = &#123;</span><br><span class=\"line\">  pass: <span class=\"number\">90</span>,</span><br><span class=\"line\">  fail: <span class=\"number\">31</span>,</span><br><span class=\"line\">  green: <span class=\"number\">32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span>(<span class=\"params\">type, str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'\\u001b['</span> + colors[type] + <span class=\"string\">'m'</span> + str + <span class=\"string\">'\\u001b[0m'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">runner</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> indents = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> passes = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> failures = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">indent</span>(<span class=\"params\">i = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(indents + i).join(<span class=\"string\">'  '</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_RUN_BEGIN, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// suite执行开始</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_BEGIN, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">suite</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\"></span><br><span class=\"line\">    ++indents;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(indent(), suite.title);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// suite执行结束</span></span><br><span class=\"line\">  runner.on(constants.EVENT_SUITE_END, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    --indents;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (indents == <span class=\"number\">1</span>) <span class=\"built_in\">console</span>.log();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用例通过</span></span><br><span class=\"line\">  runner.on(constants.EVENT_PASS, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title</span>) </span>&#123;</span><br><span class=\"line\">    passes++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fmt = indent(<span class=\"number\">1</span>) + color(<span class=\"string\">'green'</span>, <span class=\"string\">'  ✓'</span>) + color(<span class=\"string\">'pass'</span>, <span class=\"string\">' %s'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fmt, title);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用例失败</span></span><br><span class=\"line\">  runner.on(constants.EVENT_FAIL, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title</span>) </span>&#123;</span><br><span class=\"line\">    failures++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fmt = indent(<span class=\"number\">1</span>) + color(<span class=\"string\">'fail'</span>, <span class=\"string\">'  × %s'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fmt, title);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行结束</span></span><br><span class=\"line\">  runner.once(constants.EVENT_RUN_END, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color(<span class=\"string\">'green'</span>, <span class=\"string\">'  %d passing'</span>), passes);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(color(<span class=\"string\">'fail'</span>, <span class=\"string\">'  %d failing'</span>), failures);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五、验证\"><a href=\"#五、验证\" class=\"headerlink\" title=\"五、验证\"></a>五、验证</h4><p>到这里，我们的 simple-mocha 就基本完成了，我们可以编写一个测试用例来简单验证一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test/test.spec.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Array'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'#indexOf()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'should return -1 when not present'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"number\">-1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].indexOf(<span class=\"number\">4</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'should return the index when present'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"number\">-1</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].indexOf(<span class=\"number\">3</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  describe(<span class=\"string\">'#every()'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'should return true when all items are satisfied'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"literal\">true</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].every(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> !<span class=\"built_in\">isNaN</span>(item)))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'Srting'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'#replace'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'should return a string that has been replaced'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      assert.equal(<span class=\"string\">'hey Hankle'</span>, <span class=\"string\">'hey Densy'</span>.replace(<span class=\"string\">'Densy'</span>, <span class=\"string\">'Hankle'</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们用 node 内置的 assert 模块来执行断言测试。下边是执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm test</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; simple-mocha@1.0.0 test /Documents/simple-mocha</span><br><span class=\"line\">&gt; node mocha</span><br><span class=\"line\"></span><br><span class=\"line\">   Array</span><br><span class=\"line\">     #indexOf()</span><br><span class=\"line\">        ✓ should return -1 when not present</span><br><span class=\"line\">        × should return the index when present</span><br><span class=\"line\">     #every()</span><br><span class=\"line\">        ✓ should return true when all items are satisfied</span><br><span class=\"line\"></span><br><span class=\"line\">   String</span><br><span class=\"line\">     #replace</span><br><span class=\"line\">        ✓ should return a string that has been replaced</span><br><span class=\"line\"></span><br><span class=\"line\">  3 passing</span><br><span class=\"line\">  1 failing</span><br></pre></td></tr></table></figure>\n\n<p>测试用例执行成功。附上完整的流程图：</p>\n<p><img src=\"https://img13.360buyimg.com/jdphoto/jfs/t1/48002/14/6249/38293/5d3d7dd6E1b985819/7ba08cfe21c04c73.png\" alt></p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>如果你看到了这里，看完并看懂了上边实现 simple-mocha 的整个流程，那么很高兴地告诉你，你已经掌握了 Mocha 最核心的运行机理。simple-mocha 的整个实现过程其实就是 Mocha 实现的一个简化。而为了让大家在看完这篇文章后再去阅读 Mocha 源码时能够更快速地理解，我在简化和浅化 Mocha 实现流程的同时，也尽可能地保留了其中的一些命名和实现细节。有差别的地方，如执行测试用例环节，Mocha 源码利用了一个复杂的 Hook 机制来实现异步测试的依序执行，而我为了方便理解，用 async/await 来替代实现。当然这不是说 Mocha 实现得繁琐，在更加复杂的测试场景下，这套 Hook 机制是十分必要的。所以，这篇文章仅仅希望能够帮助我们攻克 Mocha 源码阅读的第一道陡坡，而要理解 Mocha 的精髓，光看这篇文章是远远不够的，还得深入阅读 Mocha 源码。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">Mocha官方文档</a><br><a href=\"http://www.moye.me/2014/11/22/bdd_mocha/\" target=\"_blank\" rel=\"noopener\">BDD和Mocha框架</a></p>\n</blockquote>"},{"title":"记一次Node.js直出服务的性能优化","date":"2019-09-26T19:06:01.000Z","cover":"https://img14.360buyimg.com/jdphoto/jfs/t1/50740/31/9213/54632/5d6a57bcE69b28e44/8fa1c3c5396e49af.jpg","thumbnail":"https://img14.360buyimg.com/jdphoto/jfs/t1/50740/31/9213/54632/5d6a57bcE69b28e44/8fa1c3c5396e49af.jpg","_content":"\n> 作者：肖睦群、李刚松\n\n## 一.问题背景\n\nMPM（Market Page Maker）是京东社交电商部的组件化的页面可视化搭建平台，于2016年9月份上线，平均每周150+个页面，目前已经成为社交电商部的一个核心系统。系统使用Vue.js作为组件化的基础框架,并于2017年5月份上线了Node.js直出服务。MPM的页面会被运营同学拿到各种渠道投放，整体流量很不稳定，对于流量的暴涨情况要能够及时处理，这对于开发同学来说是一个比较烦的工作。\n\n前几天突然收到告警信息，由于运营同学将某个MPM活动页面投放了外部广告，直出服务流量大涨，服务器CPU使用率达到了80%以上，于是立马申请扩容，问题虽解决，但是留给了我们一个问题：直出服务能否优化，这次量级的流量进来之后，是否可以稳定支撑而不需要扩容？\n<!--more-->\n## 二.分析方法及问题点\n由于本次告警问题主要是流量暴涨导致的CPU使用率过大，我们本次重点优化服务的CPU消耗性能。分析CPU消耗的方法有[多种](https://juejin.im/post/5d43a41cf265da03d60ee128),我们选择其中操作比较简单的[v8-profiler](https://www.npmjs.com/package/v8-profiler)方案：安装NPM包v8-profiler，在直出服务中添加监控代码，打包发布到预发布环境进行压测，收集监控数据再进行分析。监控代码如下：\n\n```javascript\nconst profiler = require('v8-profiler');\nconst fs = require('fs');\n(function cpuProf() {\n    setTimeout(function () { \n        console.log('开始收集CPU数据');\n        profiler.startProfiling('CPU profile');\n        setTimeout(function () { \n            const profile = profiler.stopProfiling();\n            profile.export(function (err, result) {\n                fs.writeFileSync('profile.json', result);\n                profile.delete();\n                console.log('CPU数据收集完成');\n            });\n        }, 1000 * 60 * 5);//监控数据采集5分钟\n    }, 1000);\n})();\n```\n\n上述代码会采集服务端5分钟的CPU消耗数据，并生成一个JSON文件，将此文件下载到本地后，导入到在线分析网址https://www.speedscope.app/ （或者用Chrome DevTool也可以），可以看到火焰图如下：\n\n\n![](http://img30.360buyimg.com/jdphoto/jfs/t1/47038/8/11206/219858/5d822841Ef77c142f/5cb0763cbc61ecce.png)\n\n\n从火焰图可以看到函数的调用栈，从上而下就是调用栈，其中横条长度越长代表这占用cpu的时间越长。如果某个横条很长，但是下面又没有很细小的子调用，一般就表示该调用消耗时间比较长，可以考虑做优化。从图中我们可以看到，消耗性能的主要有几个地方：\n1）replace函数\n2）compile函数\n3）parse函数\n4）vue渲染\n\n为了方便后文的分析，我们先了解一下直出服务的处理过程：\n\n<table>\n    <thead>\n        <tr>\n            <th style=\"width: 80px\">步骤</th>\n            <th>处理流程</th>\n            <th style=\"width: 150px\">资源消耗类型</th>\n            <th>备注</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>服务收到请求，解析页面参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>从Redis中读取页面数据(PageData)</td>\n            <td>网络IO</td>\n            <td>PageData包括页面的各种配置信息，如页面头尾模板、页面楼层信息、身份判断要求、组件元数据等</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>解析PageData</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>组装后端请求参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>发起后端请求并等待返回</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>6</td>\n            <td>解析后端接口返回的JSON数据</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>7</td>\n            <td>页面模板构造</td>\n            <td>CPU计算</td>\n            <td>由于存在用户身份判断（如某些组件仅对新人可见）、楼层BI等原因，组件的容器是动态构造的</td>\n        </tr>\n         <tr>\n            <td>8</td>\n            <td>组件渲染</td>\n            <td>CPU计算</td>\n            <td>此处的组件渲染是Vue组件的服务端渲染</td>\n        </tr>\n         <tr>\n            <td>9</td>\n            <td>吐出页面HTML</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n\n## 三.replace函数调用优化\n\n分析具体的replace函数调用之前，我们先详细分析一下上面表格的第7步:页面模板构造。\n\n### 1.页面模板构造\n由于存在用户身份判断（如某些组件仅对新人或者VIP用户可见）、楼层BI（每个用户展示的楼层顺序都不一样）等原因，相同页面对于不同的用户展示的组件数量、顺序都是不一样（即千人千面），因此页面的模板是基于各个组件的模板动态构造的。为方便对组件进行操作，每个组件都有一个div容器，容器构造很简单，示例代码如下：\n\n```html\n<div id='com_1001'>__vue_com_1001_replace__</div>\n<div id='com_1002'>__vue_com_1002_replace__</div>\n<div id='com_1003'>__vue_com_1003_replace__</div>\n<div id='com_1004'>__vue_com_1004_replace__</div>\n```\n其中__vue_com_1001_replace__这种是占位符，需要用相应位置的组件的实际模板来替换。但是这里有个问题，\nVue渲染的时候，使用[Render Function](https://cn.vuejs.org/v2/guide/render-function.html)进行渲染的，并不是普通的字符串模板或者Vue模板。下面是一段模板编译后的Render Function：\n\n```JavaScript\n_c('commontag',{ref:\"__uid__replace__str__\",attrs:{\"uid\":\"__uid__replace__str__\",\"params\":params___uid__replace__str__},inlineTemplate:{render:function(){with(this){return _c('div',[(true)?[(params.transparent != 1)?_c('div',{staticClass:\"vueSeparator\",style:({'background-color':params.color,  height: params.height + 'px'})}):_c('div',{staticClass:\"vueSeparator\",style:({height: params.height + 'px'})})]:_e()],2)}},staticRenderFns:[]}})\n```\n\n若使用的是Vue模板，则会在运行时做一次编译，编译为Render Function，比较耗性能，因此官方推荐的做法是在[构建时预编译](https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91)，并且运行时使用不包含编译函数的[精简版](https://cn.vuejs.org/v2/guide/deployment.html#%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7)。目前MPM每个组件存储到Redis中的也是Render Function，而不是原始的Vue模板。所以现在的问题是，已知子组件编译后的Render Function，并且知道各个组件的DOM结构形式的容器，能否构造出父组件的Render Function？\n\n答案当然是可以：<em>可以通过字符串操作，构造出父组件的Render Function！</em>\n\n我们以下面这段代码为例，看看构造过程（为了简单处理，我们用了内联模板）：\n```HTML\n<ParentComponent>\n    <SubComponent1 inline-template :param=\"data.sub1\">\n        <p>this is SubComponent1{{param.name}}</>\n    </SubComponent1>\n    <SubComponent2 inline-template :param=\"data.sub2\">\n        <p>this is SubComponent2{{param.name}}</>\n    </SubComponent2>\n    <SubComponent3 inline-template :param=\"data.sub3\">\n        <p>this is SubComponent3{{param.name}}</>\n    </SubComponent3>\n</ParentComponent>\n```\n上述代码经过Vue.compile函数编译处理后，会得到一个包含render和staticRenderFns两个属性的对象，我们主要看render属性，它是一个匿名函数，代码如下：\n```JavaScript\nfunction anonymous(\n) {\nwith(this){return _c('ParentComponent',[_c('SubComponent1',{attrs:{\"param\":data.sub1},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent1\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),_c('SubComponent2',{attrs:{\"param\":data.sub2},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent2\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),_c('SubComponent3',{attrs:{\"param\":data.sub3},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent3\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}})],1)}\n}\n```\n将上面的代码再格式化一下：\n```JavaScript\nfunction anonymous() {\nwith(this){return \n_c('ParentComponent',\n[\n_c('SubComponent1',{attrs:{\"param\":data.sub1},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent1\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),\n_c('SubComponent2',{attrs:{\"param\":data.sub2},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent2\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),\n_c('SubComponent3',{attrs:{\"param\":data.sub3},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent3\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}})\n],1)}\n}\n```\n可以看到上面第4、5、6行代码，就是子组件的Render Function，他们包裹在一个数组里。因此，如果知道子组件的Render Function，配合形如下面的模板，就可以反过来构造出父组件的Render Function（当然有一个从字符串到函数的反序列化过程，但是在我们的场景这个不可避免，因为模板是从Redis中读取出来的）。\n```\nfunction anonymous() {\nwith(this){return \n_c('ParentComponent',\n[\n__SubComponent1_replace__,\n__SubComponent2_replace__,\n__SubComponent3_replace__\n],1)}\n}\n```\n再回到我们的问题，我们已知子组件的Render Function，并且已知父组件的容器，需要构造出父组件的Render Function。现在思路就很清晰了，我们只需要把开头那段包含占位符的div容器代码，\n```html\n<div id='com_1001'>__vue_com_1001_replace__</div>\n<div id='com_1002'>__vue_com_1002_replace__</div>\n<div id='com_1003'>__vue_com_1003_replace__</div>\n<div id='com_1004'>__vue_com_1004_replace__</div>\n```\n使用Vue.compile函数将其编译成Render Function，处理成字符串后，再通过正则替换其中的子组件的占位符，变成子组件模板，最后反序列化为父组件的Render Function即可。整体处理逻辑如下：\n![](http://img14.360buyimg.com/jdphoto/jfs/t1/68669/10/8822/43844/5d6a26f2Ee7fef972/26e976b89d95b4b6.png)\n\n### 2.问题代码分析\n了解了上述处理过程，我们再根据火焰图中的调用栈，找到replace函数调用的问题代码：\n```JavaScript\n\nObject.keys(MPM_COM_STYLE_MAP).forEach(function(comId){\n    var styleKey = MPM_COM_STYLE_MAP[comId];\n    var code = '';\n    if(hideComIds.indexOf(comId)!=-1){\n        code = HIDE_TPL;\n    }else if(loadingComs.indexOf(comId)!=-1){\n        code = LOADING_TPL;\n    }else if(MPM_STYLE_TPL_MAP[styleKey]) {\n    \t// 第一次replace替换\n        code = MPM_STYLE_TPL_MAP[styleKey].replace(/__uid__replace__str__/g, comId); \n    } else{\n        console.error('最终替换，发现无模板组件',comId);\n    }\n    if(code) {\n    \t//第二次replace替换\n    \tcompileTpl = compileTpl.replace(`_v(\"__vue__${comId}__replace__\")`,code);\n\t}  \n});\n\n```\n可以看到有两次replace函数调用，第一次是组件ID替换（即uid替换），第二次是组件模板替换。\n\n先分析第一次replace函数调用。\n前面提到，每个组件的模板已经编译为Render Function并存在Redis中。但是同一个组件在页面中可能有多个实例，每个实例需要有一个ID来区分，我们称为uid（unique ID的意思），uid只有在运行的时候才生成，在编译的时候是不知道的，因此用了一个占位符（即下图中的<pre>__uid__replace__str__</pre>），在直出服务中需要做替换，即上面代码中的uid替换。下面是一段编译后的代码：\n\n![](http://img14.360buyimg.com/jdphoto/jfs/t1/50259/1/9401/126883/5d6a2717E0073a113/e036f07b0e515c3b.png)\n\n每个页面会有很多个组件（数十个甚至上百个），每次替换都是在之前替换的结果之上进行的，形成了循环替换，前面导致告警的那个页面用到的编译之后的模版最大的有20+KB，而每次正则替换之后的模版会越来越长，所以这里耗时较多也就不奇怪了。\n\n从逻辑上讲，这段代码是必不可少的，但是又有性能瓶颈，如何优化？\n\n### 3.uid替换优化\n\n我们研究发现：对于比较长的字符串，先用字符串的split方法分割成数组，再用数组的join方法将切割的数组合并为一个字符串，比正则替换的效率要高。此法我们称为数组粘合法。以下为测试代码：\n\n```JavaScript\n\nconst exeCount = 10000000;   //执行次数,此处分别换成1W、10W、100W、1000W\n\n//测试字符串，需要比较长的字符串才能看到效果，下面是从我们的组件模板中摘取的一段\nconst str = `_c('ds',{ref:\"__uid__replace__str__\",attrs:{\"uid\":\"__uid__replace__str__\",\"params\":params___uid__replace__str__,\"tab-index\":\"3\"},inlineTemplate:{render:function(){with(this){return _c('div',{attrs:{\"stylkey\":data.styleKey,\"pc\":data.pc,\"actid\":data.actid,\"areaid\":data.areaid}},[_c('ul',{directives:[{name:\"getskuad\",rawName:\"v-getskuad\",value:({bindObj:data, appendName:'skuAd', show: params.extend.showAds}),expression:\"{bindObj:data, appendName:'skuAd', show: params.extend.showAds}\"}],staticClass:\"pinlei_g3col\"},[(true)?_l((params.fnObj.translate(data.itemList)),function(item,index){return (!params.shownum || index < params.shownum || data.showMore)?_c('li',{class:['pinlei_g3col_col', (params.extend.imgSize == '1' ? 'size_230x230' : 'size_230x320')],attrs:{\"index\":index}},[_c('div',{staticClass:\"pinlei_g3col_img\"},[_c('a',{attrs:{\"href\":params.extend.buttonType == '5' ? addRd(goPingouUrl(item.sUrl),params.ptag) : addRd(item.sUrl,params.ptag)}},[_c('img',{attrs:{\"init_src\":getImgUrl('//img12.360buyimg.com/mcoss/'+ item.sPicturesUrl),\"data-size\":\"230x230\"}})]),((params.extend.sellOut != '0') && (item.dwStock - 0 > 0))?_c('div',{staticClass:\"pinlei_g3col_msk\"},[_m(0,true)]):_e()]),_c('div',{staticClass:\"pinlei_g3col_info\"},[_c('div',{class:['pinlei_g3col_t1', 'red', (params.extend.titleHeight == '1' ? 'oneline' : '')]},[_v(\"\\n                                \"+_s(item.sProductName)+\"\\n                            \")]),(!params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',{staticClass:\"pinlei_g3col_price red\",style:({color: params.extend.isShowTokenPrice == '1' && item.dwTokenPrice && (Number(item.dwTokenPrice) != 0)?'#888':''})},[_v(\"\\n                                ￥\"),_c('b',[_v(_s(item.dwRealTimePrice.split('.')[0]))]),_v(\".\"+_s(item.dwRealTimePrice.split('.')[1])+\"\\n                            \")]):_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',{staticClass:\"pinlei_g3col_price red\",style:({color: params.extend.isShowTokenPrice == '1' && item.dwTokenPrice && (Number(item.dwTokenPrice) != 0)?'#888':''})},[_v(\"\\n                                ￥\"),_c('b',[_v(_s(params.fnObj.getYushouInt(item, params.extend.priceType)))]),_v(_s(params.fnObj.getYushouDecimal(item, params.extend.priceType))+\"\\n                            \")]):_e(),(params.extend.isShowTokenPrice == '1')?[_c('div',{staticClass:\"pinlei_g3col_token\"},[(item.dwTokenPrice && (Number(item.dwTokenPrice) != 0))?_c('div',{staticClass:\"pinlei_g3col_token_price\"},[_v(\"专属价:￥\"),_c('b',[_v(_s(parseFloat(item.dwTokenPrice)))])]):_e()])]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',{staticClass:\"pinlei_g3col_desc red\"},[(item.sBackUpWords[0] && (params.fnObj.getYushouJiaDiff(item,params.extend.priceType) > 0))?[_v(\"比现在买省\"+_s(params.fnObj.getYushouJiaDiff(item,params.extend.priceType))+\"元\")]:(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' && item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',{staticClass:\"pinlei_g3col_desc red\"},[(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' && item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonType == '0')?[(params.extend.priceType == '1')?_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId}),expression:\"{skuId: item.ddwSkuId}\"}],class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e(),(params.extend.priceType == '0')?_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId}),expression:\"{skuId: item.ddwSkuId}\"}],class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e()]:_e(),(params.extend.buttonType == '1')?[_c('a',{attrs:{\"href\":addRd(item.sUrl,params.ptag)}},[_c('div',{class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '5')?[_c('a',{attrs:{\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)}},[_c('div',{class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '2')?[_c('a',{attrs:{\"href\":addRd(item.sUrl,params.ptag)}},[_c('div',{class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                            定金\"+_s(item.sBackUpWords[1].split('+')[0])+\"抵\"+_s(parseFloat((item.sBackUpWords[1].split('+')[1] * item.sBackUpWords[1].split('+')[0]).toFixed(2)))+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '3')?[_c('div',{directives:[{name:\"yuyue\",rawName:\"v-yuyue\",value:({bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}),expression:\"{bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}\"}],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:{\"yuyueid\":params.extend.yuyueID}},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '4' )?[((params.fnObj.getYushouJiaDiff(item,params.extend.priceType)> 0))?_c('div',{directives:[{name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:({bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'},actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3}),expression:\"{bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'},actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3}\"}],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_c('div',{directives:[{name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:({bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'}}),expression:\"{bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'}}\"}],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '6' )?[_c('div',{directives:[{name:\"yuyue\",rawName:\"v-yuyue\",value:({bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}),expression:\"{bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}\"},{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: {skuId: item.ddwSkuId,successTxt:'预约加车成功'}}),expression:\"{skuId: {skuId: item.ddwSkuId,successTxt:'预约加车成功'}}\"}],class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'left': params.fnObj.getCouponInfo(item.sBackUpWords[2])},style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:{\"yuyueid\":params.extend.yuyueID}},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e()]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonActiveType == '0')?[_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId}),expression:\"{skuId: item.ddwSkuId}\"}],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonActiveType == '1')?[_c('a',{attrs:{\"href\":addRd(item.sUrl,params.ptag)}},[_c('div',{staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '2')?[_c('a',{attrs:{\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)}},[_c('div',{staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '4')?[_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true}),expression:\"{skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true}\"},{name:\"quan\",rawName:\"v-quan\",value:({bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:{}, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:{value: params.extend.price, gate: params.extend.gate, name: params.extend.name}}),expression:\"{bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:{}, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:{value: params.extend.price, gate: params.extend.gate, name: params.extend.name}}\"}],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e()]:_e()],2),(params.extend.corner != '0')?[(isRange(params.extend.cornerBegin, params.extend.cornerEnd) && params.extend.cornerDes)?_c('div',{staticClass:\"pinlei_g3col_stamp red\"},[_v(_s(params.extend.cornerDes))]):(item.sCopyWriting)?_c('div',{staticClass:\"pinlei_g3col_stamp red\"},[_v(_s(item.sCopyWriting))]):_e()]:_e()],2):_e()}):_e()],2),(params.shownum && data.itemList.length > params.shownum)?[_c('div',{class:'pinlei_more '+ (data.showMore?'pinlei_more_unfold':''),on:{\"click\":function($event){toggleMore($event)}}},[_v(_s(data.showMore?'收起更多':'展开更多'))])]:_e()],2)}},staticRenderFns:[function(){with(this){return _c('div',{staticClass:\"pinlei_g3col_msk_ico\"},[_c('div',{staticClass:\"pinlei_g3col_msk_text\"},[_v(\"\\n                                        已抢光\\n                                        \"),_c('br'),_v(\"over\\n                                    \")])])}}]}})`\n//正则替换法start\nconst timeStart = new Date().getTime();\nfor(var i = 0; i < exeCount; i++) {\n    str.replace(/__uid__replace__str__/g, 'com_1001');\n}\nconst timeEnd = new Date().getTime();\nconsole.log('正则替换耗时：', timeEnd - timeStart);\n//正则替换法end\n//数组粘合法start\nconst timeStart2 = new Date().getTime();\nconst segs = str.split('__uid__replace__str__');\nfor(var i = 0; i < exeCount; i++) {\n    segs.join('com_1001');\n}\nconst timeEnd2 = new Date().getTime();\nconsole.log('数组粘贴耗时：', timeEnd2 - timeStart2);\n//数组粘合法end\n```\n结果如下：\n<table>\n    <thead>\n        <tr>\n            <th>执行次数</th>\n            <th>正则替换法耗时(ms)</th>\n            <th>数组粘合法耗时(ms)</th>\n            <th>正则替换法耗时/数组粘合法耗时</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1W</td>\n            <td>42</td>\n            <td>25</td>\n            <td>1.68</td>\n        </tr>\n        <tr>\n            <td>10W</td>\n            <td>362</td>\n            <td>179</td>\n            <td>2.01</td>\n        </tr>\n        <tr>\n            <td>100W</td>\n            <td>3555</td>\n            <td>1623</td>\n            <td>2.2</td>\n        </tr>\n        <tr>\n            <td>1000W</td>\n            <td>36449</td>\n            <td>18634</td>\n            <td>1.95</td>\n        </tr>\n    </tbody>\n</table>\n\n可以看到数组粘合法的耗时是正则替换法的一半左右。\n\n考虑到我们的场景就是字符串比较大，存在循环替换，且是海量服务的场景，因此上面第一次替换，直接改成数组粘合法即可。\n\n### 4.组件模板替换优化\n问题代码中的第二次替换，是将容器里的组件占位符替换为子组件的Render Function。即下图所示：\n![](http://img30.360buyimg.com/jdphoto/jfs/t1/74148/30/8785/25337/5d6a2749Ec383dbe6/e17d1fd59ffb9ffb.png)\n子模板替换优化的替换次数其实是跟组件的数量相关的，即使有150个组件，用数组粘合法也不会有明显的性能提升，因此需要考虑别的办法。\n\n我们查了一下vue-template-compiler的源码(Vue的compile能力也是用此模块)，发现Vue.compile的函数有2个参数，第一个参数是待编译的Vue模板，第二个参数是一个option对象，包含一个名为tansformCode钩子函数(参见资料https://github.com/vuejs/vue/blob/dev/flow/compiler.js#L38-L45 ，此参数并未在官网的文档中暴露，关于此函数的用处后面可以再写一篇文章) ，这个钩子函数接受两个参数，第一个是ast节点，第二个是编译该节点之后的render code，而该函数的返回值会就是最终的render code。于是在之前的生成dom函数那里把com占位符替换为一个空的div元素，div元素的id为之前的占位符，然后在编译的时候在transformCode钩子函数这里做一个替换，当发现ast节点为div并且id符合组件占位符的规则，那么就返回该组件对应的编译之后样式模版。具体代码如下：\n\n```javascript\nvar compileTpl = compiler.compile(`<div>${html}</div>`, {\n            modules: {\n                transformCode: function (el, code) {\n                    if (el.attrsMap && el.attrsMap['id'] && el.attrsMap['id'].match(/__vue__com_\\d{4,5}__replace__/)) {\n                        var comId = el.attrsMap['id'].match(/com_\\d{4,5}/)[0];\n                        // console.log('--------------------------------', comId);\n                        var styleTemplate  = compiledComTplMap[comId];\n                        // console.log(styleTemplate);\n                        return styleTemplate;\n                    }\n                    return code;\n                }\n            }\n        }).staticRenderFns.toString();\n```\n\n\n这样一来就完全省去了第二次字符串替换的操作，于是组件编译这里的流程了下面这样：\n\n![](http://img14.360buyimg.com/jdphoto/jfs/t1/38640/40/15928/32002/5d6a292eEaad87937/abc0a5fc367aa1aa.png)\n\n这两次优化之后然后重新压测并收集性能数据，得到的火焰图如下：\n\n![](http://img10.360buyimg.com/jdphoto/jfs/t1/66970/39/8617/181855/5d6a2946E9c484381/74f6f67e08202a17.png)\n\n可以看到createApp函数里面原来的那个replace函数的横条已经消失不见了，说明前面的优化是有效果的，最耗时的操作已经不是replace而是vue的compile方法即模版的编译。从此次优化前后的服务端压测的CPU数据也能说明问题：\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/49916/11/11130/3999/5d822beeE7e542e78/799ef88b1705dca9.png)\n\n## 四.compile函数调用优化\n\ncompile函数调用，就是前面\"组件模板构造\"那一节提到的，将组件的容器模板用Vue.compile函数编译成Render Function，虽然这段容器模板很简单，但是他是一个很耗性能的操作。而且这是Vue自身提供的能力，似乎已经没有多大的优化余地了。有没有其他优化方法呢？\n\n仔细观察一下组件容器dom以及编译之后的代码，似乎是有规律的。如果组件树的结构是下面这样的：\n\n```javascript\n[\n    {id: \"com_1001\"},\n    {\n        id: \"com_1002\",\n        child: [\n            {id: \"com_1003\"},\n            {id: \"com_1004\"}\n        ]\n    }\n];\n```\n\n拼接之后的html内容大概是下面这样的：\n\n\n```html\n<div>\n    <div id=\"com_1001_con\"></div>\n    <div id=\"com_1002_con\"></div>\n    <div mpm_edit_child_box tabpid=\"com_1002\" class=\"childBox\">\n        <div id=\"com_1003_con\"></div>\n        <div id=\"com_1004_con\"></div>\n    </div>\n</div>\n```\n\n这里一般都只是一些简单的模版，编译出来大概是这样的：\n```javascript\n\nwith(this) {\n    return _c('div', [\n        _c('div', {attrs: {\"id\": \"com_1001_con\"}}),\n        _v(\" \"),\n        _c('div', {attrs: {\"id\": \"com_1002_con\"}}),\n        _v(\" \"),\n        _c('div', {staticClass: \"childBox\", attrs: {\"mpm_edit_child_box\": \"\", \"tabpid\": \"com_1002\"}}, [\n            _c('div', {attrs: {\"id\": \"com_1003_con\"}}),\n            _v(\" \"),\n            _c('div', {attrs: {\"id\": \"com_1004_con\"}})\n        ])\n    ])\n}\n```\n\n通过观察可以发现，这里都是生成的div元素，div上的属性都是静态属性，由此我们可以自己实现一个简单的“编译”函数，不用走vue的编译：\n\n\n```javascript\n function simpleCompile(comList) {\n            function genTree(tree) {\n                var html = '';\n                for (var i = 0, len = tree.length; i < len; i++) {\n                    var node = tree[i];\n                    var comId = node.id;\n                    html += `_c('div',{attrs:{\"id\":\"${comId}_con\"}},[`;\n                    html = html + compiledComTplMap[comId] + '])';  //  compiledComTplMap[comId] 该组件对应的编译后的样式模版\n                    if (node.child && node.child.length) {\n                        html += `,_c('div',{staticClass:\"childBox\",attrs:{\"mpm_edit_child_box\":\"\",\"tabpid\":\"${comId}\"}},[` + genTree(node.child) + `])`;\n                    }\n                    html += (i === len - 1)  ? '' : ',';\n                }\n                return html;\n            }\n            return genTree(comList);\n        }\n```\n\n经测试，这样简单“编译”之后生成的代码跟之前编译的代码是一样的，在预发布环境测试了多个页面之后，页面渲染也没有问题。去掉Vue模版编译之后整个组件渲染的逻辑就变成了下面这样：\n\n![](http://img20.360buyimg.com/jdphoto/jfs/t1/82696/9/8802/16350/5d6a29c5E152a9038/4cda63f70692af88.png)\n\nVue编译优化之后收集cpu数据得到的火焰图如下：\n\n![](http://img10.360buyimg.com/jdphoto/jfs/t1/51201/27/9284/168200/5d6a29e0E93bfded2/e1781cb019fc35ae.png)\n\n从火焰图可以看出，原来的那个compile函数调用的横条也消失了，说明优化有效果。再看看压测的CPU消耗情况：\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/48621/32/11050/5538/5d822c1eE5ce6a12b/6a950938fe73d8b9.png)\n\n需要提到的是，由于是自己实现了一个简单版的compile函数，前文中关于compile函数调用优化的代码，也直接去掉了，当然也到达了优化的效果。\n\n## 五.其他优化研究\n经过上面两次优化之后，剩下最耗性能的地方是JSON解析和Vue渲染了。我们也做了一下研究，但是很可惜，暂时没什么成果，不过我们的探索也可以提一下：\n1）JSON解析。我们的服务从Redis中读出来的PageData比较大，一般有100多KB，很需要有一个高性能的JSON反序列化的库(即代替JSON.parse)。目前有一个高性能的库[fast-json-stringify](https://www.npmjs.com/package/fast-json-stringify)，但是可惜他是做序列化的（即做的是JSON.stringify做的事情）。我们测试了多个方案，目前原生的JSON.parse函数性能是最好的。\n2）Vue渲染。有位腾讯的同学提到，[用string-based的模板代替VirtualDom的渲染方案提升性能](https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247485601&amp;idx=1&amp;sn=97a45254a771d13789faed81316b465a),不过他忽略了一点，Vue是完全的组件化的、是有生命周期钩子、方法、计算属性等，不是一个简简单单的模板引擎，按照他的思路是需要把生命周期的钩子、方法、计算属性等全部算好后拿到的数据对象，再跟string-based模板结合才能渲染，这个显然是和组件化的思路背道而驰的。\n\n上面2点，各位看官如果有好的思路，欢迎不吝赐教！\n\n\n## 六.总结\n这次优化总的来说，CPU性能消耗得到了有效优化，整体提升了大概20%，一方面为公司节省了资源，另外一方面也减少了因流量暴涨导致我们要扩容的几率，一举两得。\n","source":"_posts/2019-09/记一次Node-js直出服务的性能优化.md","raw":"---\ntitle: 记一次Node.js直出服务的性能优化\ndate: 2019-09-27 03:06:01\ncover:  https://img14.360buyimg.com/jdphoto/jfs/t1/50740/31/9213/54632/5d6a57bcE69b28e44/8fa1c3c5396e49af.jpg\nthumbnail: https://img14.360buyimg.com/jdphoto/jfs/t1/50740/31/9213/54632/5d6a57bcE69b28e44/8fa1c3c5396e49af.jpg\ntags: \n  - Vue.compile\n  - CPU性能优化\n  - 火焰图\ncategories: Node.js\n---\n\n> 作者：肖睦群、李刚松\n\n## 一.问题背景\n\nMPM（Market Page Maker）是京东社交电商部的组件化的页面可视化搭建平台，于2016年9月份上线，平均每周150+个页面，目前已经成为社交电商部的一个核心系统。系统使用Vue.js作为组件化的基础框架,并于2017年5月份上线了Node.js直出服务。MPM的页面会被运营同学拿到各种渠道投放，整体流量很不稳定，对于流量的暴涨情况要能够及时处理，这对于开发同学来说是一个比较烦的工作。\n\n前几天突然收到告警信息，由于运营同学将某个MPM活动页面投放了外部广告，直出服务流量大涨，服务器CPU使用率达到了80%以上，于是立马申请扩容，问题虽解决，但是留给了我们一个问题：直出服务能否优化，这次量级的流量进来之后，是否可以稳定支撑而不需要扩容？\n<!--more-->\n## 二.分析方法及问题点\n由于本次告警问题主要是流量暴涨导致的CPU使用率过大，我们本次重点优化服务的CPU消耗性能。分析CPU消耗的方法有[多种](https://juejin.im/post/5d43a41cf265da03d60ee128),我们选择其中操作比较简单的[v8-profiler](https://www.npmjs.com/package/v8-profiler)方案：安装NPM包v8-profiler，在直出服务中添加监控代码，打包发布到预发布环境进行压测，收集监控数据再进行分析。监控代码如下：\n\n```javascript\nconst profiler = require('v8-profiler');\nconst fs = require('fs');\n(function cpuProf() {\n    setTimeout(function () { \n        console.log('开始收集CPU数据');\n        profiler.startProfiling('CPU profile');\n        setTimeout(function () { \n            const profile = profiler.stopProfiling();\n            profile.export(function (err, result) {\n                fs.writeFileSync('profile.json', result);\n                profile.delete();\n                console.log('CPU数据收集完成');\n            });\n        }, 1000 * 60 * 5);//监控数据采集5分钟\n    }, 1000);\n})();\n```\n\n上述代码会采集服务端5分钟的CPU消耗数据，并生成一个JSON文件，将此文件下载到本地后，导入到在线分析网址https://www.speedscope.app/ （或者用Chrome DevTool也可以），可以看到火焰图如下：\n\n\n![](http://img30.360buyimg.com/jdphoto/jfs/t1/47038/8/11206/219858/5d822841Ef77c142f/5cb0763cbc61ecce.png)\n\n\n从火焰图可以看到函数的调用栈，从上而下就是调用栈，其中横条长度越长代表这占用cpu的时间越长。如果某个横条很长，但是下面又没有很细小的子调用，一般就表示该调用消耗时间比较长，可以考虑做优化。从图中我们可以看到，消耗性能的主要有几个地方：\n1）replace函数\n2）compile函数\n3）parse函数\n4）vue渲染\n\n为了方便后文的分析，我们先了解一下直出服务的处理过程：\n\n<table>\n    <thead>\n        <tr>\n            <th style=\"width: 80px\">步骤</th>\n            <th>处理流程</th>\n            <th style=\"width: 150px\">资源消耗类型</th>\n            <th>备注</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>服务收到请求，解析页面参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>从Redis中读取页面数据(PageData)</td>\n            <td>网络IO</td>\n            <td>PageData包括页面的各种配置信息，如页面头尾模板、页面楼层信息、身份判断要求、组件元数据等</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>解析PageData</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>组装后端请求参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>发起后端请求并等待返回</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>6</td>\n            <td>解析后端接口返回的JSON数据</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>7</td>\n            <td>页面模板构造</td>\n            <td>CPU计算</td>\n            <td>由于存在用户身份判断（如某些组件仅对新人可见）、楼层BI等原因，组件的容器是动态构造的</td>\n        </tr>\n         <tr>\n            <td>8</td>\n            <td>组件渲染</td>\n            <td>CPU计算</td>\n            <td>此处的组件渲染是Vue组件的服务端渲染</td>\n        </tr>\n         <tr>\n            <td>9</td>\n            <td>吐出页面HTML</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n\n## 三.replace函数调用优化\n\n分析具体的replace函数调用之前，我们先详细分析一下上面表格的第7步:页面模板构造。\n\n### 1.页面模板构造\n由于存在用户身份判断（如某些组件仅对新人或者VIP用户可见）、楼层BI（每个用户展示的楼层顺序都不一样）等原因，相同页面对于不同的用户展示的组件数量、顺序都是不一样（即千人千面），因此页面的模板是基于各个组件的模板动态构造的。为方便对组件进行操作，每个组件都有一个div容器，容器构造很简单，示例代码如下：\n\n```html\n<div id='com_1001'>__vue_com_1001_replace__</div>\n<div id='com_1002'>__vue_com_1002_replace__</div>\n<div id='com_1003'>__vue_com_1003_replace__</div>\n<div id='com_1004'>__vue_com_1004_replace__</div>\n```\n其中__vue_com_1001_replace__这种是占位符，需要用相应位置的组件的实际模板来替换。但是这里有个问题，\nVue渲染的时候，使用[Render Function](https://cn.vuejs.org/v2/guide/render-function.html)进行渲染的，并不是普通的字符串模板或者Vue模板。下面是一段模板编译后的Render Function：\n\n```JavaScript\n_c('commontag',{ref:\"__uid__replace__str__\",attrs:{\"uid\":\"__uid__replace__str__\",\"params\":params___uid__replace__str__},inlineTemplate:{render:function(){with(this){return _c('div',[(true)?[(params.transparent != 1)?_c('div',{staticClass:\"vueSeparator\",style:({'background-color':params.color,  height: params.height + 'px'})}):_c('div',{staticClass:\"vueSeparator\",style:({height: params.height + 'px'})})]:_e()],2)}},staticRenderFns:[]}})\n```\n\n若使用的是Vue模板，则会在运行时做一次编译，编译为Render Function，比较耗性能，因此官方推荐的做法是在[构建时预编译](https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91)，并且运行时使用不包含编译函数的[精简版](https://cn.vuejs.org/v2/guide/deployment.html#%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7)。目前MPM每个组件存储到Redis中的也是Render Function，而不是原始的Vue模板。所以现在的问题是，已知子组件编译后的Render Function，并且知道各个组件的DOM结构形式的容器，能否构造出父组件的Render Function？\n\n答案当然是可以：<em>可以通过字符串操作，构造出父组件的Render Function！</em>\n\n我们以下面这段代码为例，看看构造过程（为了简单处理，我们用了内联模板）：\n```HTML\n<ParentComponent>\n    <SubComponent1 inline-template :param=\"data.sub1\">\n        <p>this is SubComponent1{{param.name}}</>\n    </SubComponent1>\n    <SubComponent2 inline-template :param=\"data.sub2\">\n        <p>this is SubComponent2{{param.name}}</>\n    </SubComponent2>\n    <SubComponent3 inline-template :param=\"data.sub3\">\n        <p>this is SubComponent3{{param.name}}</>\n    </SubComponent3>\n</ParentComponent>\n```\n上述代码经过Vue.compile函数编译处理后，会得到一个包含render和staticRenderFns两个属性的对象，我们主要看render属性，它是一个匿名函数，代码如下：\n```JavaScript\nfunction anonymous(\n) {\nwith(this){return _c('ParentComponent',[_c('SubComponent1',{attrs:{\"param\":data.sub1},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent1\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),_c('SubComponent2',{attrs:{\"param\":data.sub2},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent2\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),_c('SubComponent3',{attrs:{\"param\":data.sub3},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent3\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}})],1)}\n}\n```\n将上面的代码再格式化一下：\n```JavaScript\nfunction anonymous() {\nwith(this){return \n_c('ParentComponent',\n[\n_c('SubComponent1',{attrs:{\"param\":data.sub1},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent1\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),\n_c('SubComponent2',{attrs:{\"param\":data.sub2},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent2\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}}),_v(\" \"),\n_c('SubComponent3',{attrs:{\"param\":data.sub3},inlineTemplate:{render:function(){with(this){return _c('p',[_v(\"this is SubComponent3\"+_s(param.name)+\"\\n\\t\")])}},staticRenderFns:[]}})\n],1)}\n}\n```\n可以看到上面第4、5、6行代码，就是子组件的Render Function，他们包裹在一个数组里。因此，如果知道子组件的Render Function，配合形如下面的模板，就可以反过来构造出父组件的Render Function（当然有一个从字符串到函数的反序列化过程，但是在我们的场景这个不可避免，因为模板是从Redis中读取出来的）。\n```\nfunction anonymous() {\nwith(this){return \n_c('ParentComponent',\n[\n__SubComponent1_replace__,\n__SubComponent2_replace__,\n__SubComponent3_replace__\n],1)}\n}\n```\n再回到我们的问题，我们已知子组件的Render Function，并且已知父组件的容器，需要构造出父组件的Render Function。现在思路就很清晰了，我们只需要把开头那段包含占位符的div容器代码，\n```html\n<div id='com_1001'>__vue_com_1001_replace__</div>\n<div id='com_1002'>__vue_com_1002_replace__</div>\n<div id='com_1003'>__vue_com_1003_replace__</div>\n<div id='com_1004'>__vue_com_1004_replace__</div>\n```\n使用Vue.compile函数将其编译成Render Function，处理成字符串后，再通过正则替换其中的子组件的占位符，变成子组件模板，最后反序列化为父组件的Render Function即可。整体处理逻辑如下：\n![](http://img14.360buyimg.com/jdphoto/jfs/t1/68669/10/8822/43844/5d6a26f2Ee7fef972/26e976b89d95b4b6.png)\n\n### 2.问题代码分析\n了解了上述处理过程，我们再根据火焰图中的调用栈，找到replace函数调用的问题代码：\n```JavaScript\n\nObject.keys(MPM_COM_STYLE_MAP).forEach(function(comId){\n    var styleKey = MPM_COM_STYLE_MAP[comId];\n    var code = '';\n    if(hideComIds.indexOf(comId)!=-1){\n        code = HIDE_TPL;\n    }else if(loadingComs.indexOf(comId)!=-1){\n        code = LOADING_TPL;\n    }else if(MPM_STYLE_TPL_MAP[styleKey]) {\n    \t// 第一次replace替换\n        code = MPM_STYLE_TPL_MAP[styleKey].replace(/__uid__replace__str__/g, comId); \n    } else{\n        console.error('最终替换，发现无模板组件',comId);\n    }\n    if(code) {\n    \t//第二次replace替换\n    \tcompileTpl = compileTpl.replace(`_v(\"__vue__${comId}__replace__\")`,code);\n\t}  \n});\n\n```\n可以看到有两次replace函数调用，第一次是组件ID替换（即uid替换），第二次是组件模板替换。\n\n先分析第一次replace函数调用。\n前面提到，每个组件的模板已经编译为Render Function并存在Redis中。但是同一个组件在页面中可能有多个实例，每个实例需要有一个ID来区分，我们称为uid（unique ID的意思），uid只有在运行的时候才生成，在编译的时候是不知道的，因此用了一个占位符（即下图中的<pre>__uid__replace__str__</pre>），在直出服务中需要做替换，即上面代码中的uid替换。下面是一段编译后的代码：\n\n![](http://img14.360buyimg.com/jdphoto/jfs/t1/50259/1/9401/126883/5d6a2717E0073a113/e036f07b0e515c3b.png)\n\n每个页面会有很多个组件（数十个甚至上百个），每次替换都是在之前替换的结果之上进行的，形成了循环替换，前面导致告警的那个页面用到的编译之后的模版最大的有20+KB，而每次正则替换之后的模版会越来越长，所以这里耗时较多也就不奇怪了。\n\n从逻辑上讲，这段代码是必不可少的，但是又有性能瓶颈，如何优化？\n\n### 3.uid替换优化\n\n我们研究发现：对于比较长的字符串，先用字符串的split方法分割成数组，再用数组的join方法将切割的数组合并为一个字符串，比正则替换的效率要高。此法我们称为数组粘合法。以下为测试代码：\n\n```JavaScript\n\nconst exeCount = 10000000;   //执行次数,此处分别换成1W、10W、100W、1000W\n\n//测试字符串，需要比较长的字符串才能看到效果，下面是从我们的组件模板中摘取的一段\nconst str = `_c('ds',{ref:\"__uid__replace__str__\",attrs:{\"uid\":\"__uid__replace__str__\",\"params\":params___uid__replace__str__,\"tab-index\":\"3\"},inlineTemplate:{render:function(){with(this){return _c('div',{attrs:{\"stylkey\":data.styleKey,\"pc\":data.pc,\"actid\":data.actid,\"areaid\":data.areaid}},[_c('ul',{directives:[{name:\"getskuad\",rawName:\"v-getskuad\",value:({bindObj:data, appendName:'skuAd', show: params.extend.showAds}),expression:\"{bindObj:data, appendName:'skuAd', show: params.extend.showAds}\"}],staticClass:\"pinlei_g3col\"},[(true)?_l((params.fnObj.translate(data.itemList)),function(item,index){return (!params.shownum || index < params.shownum || data.showMore)?_c('li',{class:['pinlei_g3col_col', (params.extend.imgSize == '1' ? 'size_230x230' : 'size_230x320')],attrs:{\"index\":index}},[_c('div',{staticClass:\"pinlei_g3col_img\"},[_c('a',{attrs:{\"href\":params.extend.buttonType == '5' ? addRd(goPingouUrl(item.sUrl),params.ptag) : addRd(item.sUrl,params.ptag)}},[_c('img',{attrs:{\"init_src\":getImgUrl('//img12.360buyimg.com/mcoss/'+ item.sPicturesUrl),\"data-size\":\"230x230\"}})]),((params.extend.sellOut != '0') && (item.dwStock - 0 > 0))?_c('div',{staticClass:\"pinlei_g3col_msk\"},[_m(0,true)]):_e()]),_c('div',{staticClass:\"pinlei_g3col_info\"},[_c('div',{class:['pinlei_g3col_t1', 'red', (params.extend.titleHeight == '1' ? 'oneline' : '')]},[_v(\"\\n                                \"+_s(item.sProductName)+\"\\n                            \")]),(!params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',{staticClass:\"pinlei_g3col_price red\",style:({color: params.extend.isShowTokenPrice == '1' && item.dwTokenPrice && (Number(item.dwTokenPrice) != 0)?'#888':''})},[_v(\"\\n                                ￥\"),_c('b',[_v(_s(item.dwRealTimePrice.split('.')[0]))]),_v(\".\"+_s(item.dwRealTimePrice.split('.')[1])+\"\\n                            \")]):_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',{staticClass:\"pinlei_g3col_price red\",style:({color: params.extend.isShowTokenPrice == '1' && item.dwTokenPrice && (Number(item.dwTokenPrice) != 0)?'#888':''})},[_v(\"\\n                                ￥\"),_c('b',[_v(_s(params.fnObj.getYushouInt(item, params.extend.priceType)))]),_v(_s(params.fnObj.getYushouDecimal(item, params.extend.priceType))+\"\\n                            \")]):_e(),(params.extend.isShowTokenPrice == '1')?[_c('div',{staticClass:\"pinlei_g3col_token\"},[(item.dwTokenPrice && (Number(item.dwTokenPrice) != 0))?_c('div',{staticClass:\"pinlei_g3col_token_price\"},[_v(\"专属价:￥\"),_c('b',[_v(_s(parseFloat(item.dwTokenPrice)))])]):_e()])]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',{staticClass:\"pinlei_g3col_desc red\"},[(item.sBackUpWords[0] && (params.fnObj.getYushouJiaDiff(item,params.extend.priceType) > 0))?[_v(\"比现在买省\"+_s(params.fnObj.getYushouJiaDiff(item,params.extend.priceType))+\"元\")]:(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' && item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',{staticClass:\"pinlei_g3col_desc red\"},[(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' && item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonType == '0')?[(params.extend.priceType == '1')?_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId}),expression:\"{skuId: item.ddwSkuId}\"}],class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e(),(params.extend.priceType == '0')?_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId}),expression:\"{skuId: item.ddwSkuId}\"}],class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e()]:_e(),(params.extend.buttonType == '1')?[_c('a',{attrs:{\"href\":addRd(item.sUrl,params.ptag)}},[_c('div',{class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '5')?[_c('a',{attrs:{\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)}},[_c('div',{class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '2')?[_c('a',{attrs:{\"href\":addRd(item.sUrl,params.ptag)}},[_c('div',{class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)},style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                            定金\"+_s(item.sBackUpWords[1].split('+')[0])+\"抵\"+_s(parseFloat((item.sBackUpWords[1].split('+')[1] * item.sBackUpWords[1].split('+')[0]).toFixed(2)))+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '3')?[_c('div',{directives:[{name:\"yuyue\",rawName:\"v-yuyue\",value:({bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}),expression:\"{bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}\"}],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:{\"yuyueid\":params.extend.yuyueID}},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '4' )?[((params.fnObj.getYushouJiaDiff(item,params.extend.priceType)> 0))?_c('div',{directives:[{name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:({bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'},actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3}),expression:\"{bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'},actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3}\"}],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_c('div',{directives:[{name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:({bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'}}),expression:\"{bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:{success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'}}\"}],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '6' )?[_c('div',{directives:[{name:\"yuyue\",rawName:\"v-yuyue\",value:({bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}),expression:\"{bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]}\"},{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: {skuId: item.ddwSkuId,successTxt:'预约加车成功'}}),expression:\"{skuId: {skuId: item.ddwSkuId,successTxt:'预约加车成功'}}\"}],class:{'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'left': params.fnObj.getCouponInfo(item.sBackUpWords[2])},style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:{\"yuyueid\":params.extend.yuyueID}},[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e()]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonActiveType == '0')?[_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId}),expression:\"{skuId: item.ddwSkuId}\"}],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonActiveType == '1')?[_c('a',{attrs:{\"href\":addRd(item.sUrl,params.ptag)}},[_c('div',{staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '2')?[_c('a',{attrs:{\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)}},[_c('div',{staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '4')?[_c('div',{directives:[{name:\"addcart\",rawName:\"v-addcart\",value:({skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true}),expression:\"{skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true}\"},{name:\"quan\",rawName:\"v-quan\",value:({bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:{}, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:{value: params.extend.price, gate: params.extend.gate, name: params.extend.name}}),expression:\"{bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:{}, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:{value: params.extend.price, gate: params.extend.gate, name: params.extend.name}}\"}],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')},[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e()]:_e()],2),(params.extend.corner != '0')?[(isRange(params.extend.cornerBegin, params.extend.cornerEnd) && params.extend.cornerDes)?_c('div',{staticClass:\"pinlei_g3col_stamp red\"},[_v(_s(params.extend.cornerDes))]):(item.sCopyWriting)?_c('div',{staticClass:\"pinlei_g3col_stamp red\"},[_v(_s(item.sCopyWriting))]):_e()]:_e()],2):_e()}):_e()],2),(params.shownum && data.itemList.length > params.shownum)?[_c('div',{class:'pinlei_more '+ (data.showMore?'pinlei_more_unfold':''),on:{\"click\":function($event){toggleMore($event)}}},[_v(_s(data.showMore?'收起更多':'展开更多'))])]:_e()],2)}},staticRenderFns:[function(){with(this){return _c('div',{staticClass:\"pinlei_g3col_msk_ico\"},[_c('div',{staticClass:\"pinlei_g3col_msk_text\"},[_v(\"\\n                                        已抢光\\n                                        \"),_c('br'),_v(\"over\\n                                    \")])])}}]}})`\n//正则替换法start\nconst timeStart = new Date().getTime();\nfor(var i = 0; i < exeCount; i++) {\n    str.replace(/__uid__replace__str__/g, 'com_1001');\n}\nconst timeEnd = new Date().getTime();\nconsole.log('正则替换耗时：', timeEnd - timeStart);\n//正则替换法end\n//数组粘合法start\nconst timeStart2 = new Date().getTime();\nconst segs = str.split('__uid__replace__str__');\nfor(var i = 0; i < exeCount; i++) {\n    segs.join('com_1001');\n}\nconst timeEnd2 = new Date().getTime();\nconsole.log('数组粘贴耗时：', timeEnd2 - timeStart2);\n//数组粘合法end\n```\n结果如下：\n<table>\n    <thead>\n        <tr>\n            <th>执行次数</th>\n            <th>正则替换法耗时(ms)</th>\n            <th>数组粘合法耗时(ms)</th>\n            <th>正则替换法耗时/数组粘合法耗时</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1W</td>\n            <td>42</td>\n            <td>25</td>\n            <td>1.68</td>\n        </tr>\n        <tr>\n            <td>10W</td>\n            <td>362</td>\n            <td>179</td>\n            <td>2.01</td>\n        </tr>\n        <tr>\n            <td>100W</td>\n            <td>3555</td>\n            <td>1623</td>\n            <td>2.2</td>\n        </tr>\n        <tr>\n            <td>1000W</td>\n            <td>36449</td>\n            <td>18634</td>\n            <td>1.95</td>\n        </tr>\n    </tbody>\n</table>\n\n可以看到数组粘合法的耗时是正则替换法的一半左右。\n\n考虑到我们的场景就是字符串比较大，存在循环替换，且是海量服务的场景，因此上面第一次替换，直接改成数组粘合法即可。\n\n### 4.组件模板替换优化\n问题代码中的第二次替换，是将容器里的组件占位符替换为子组件的Render Function。即下图所示：\n![](http://img30.360buyimg.com/jdphoto/jfs/t1/74148/30/8785/25337/5d6a2749Ec383dbe6/e17d1fd59ffb9ffb.png)\n子模板替换优化的替换次数其实是跟组件的数量相关的，即使有150个组件，用数组粘合法也不会有明显的性能提升，因此需要考虑别的办法。\n\n我们查了一下vue-template-compiler的源码(Vue的compile能力也是用此模块)，发现Vue.compile的函数有2个参数，第一个参数是待编译的Vue模板，第二个参数是一个option对象，包含一个名为tansformCode钩子函数(参见资料https://github.com/vuejs/vue/blob/dev/flow/compiler.js#L38-L45 ，此参数并未在官网的文档中暴露，关于此函数的用处后面可以再写一篇文章) ，这个钩子函数接受两个参数，第一个是ast节点，第二个是编译该节点之后的render code，而该函数的返回值会就是最终的render code。于是在之前的生成dom函数那里把com占位符替换为一个空的div元素，div元素的id为之前的占位符，然后在编译的时候在transformCode钩子函数这里做一个替换，当发现ast节点为div并且id符合组件占位符的规则，那么就返回该组件对应的编译之后样式模版。具体代码如下：\n\n```javascript\nvar compileTpl = compiler.compile(`<div>${html}</div>`, {\n            modules: {\n                transformCode: function (el, code) {\n                    if (el.attrsMap && el.attrsMap['id'] && el.attrsMap['id'].match(/__vue__com_\\d{4,5}__replace__/)) {\n                        var comId = el.attrsMap['id'].match(/com_\\d{4,5}/)[0];\n                        // console.log('--------------------------------', comId);\n                        var styleTemplate  = compiledComTplMap[comId];\n                        // console.log(styleTemplate);\n                        return styleTemplate;\n                    }\n                    return code;\n                }\n            }\n        }).staticRenderFns.toString();\n```\n\n\n这样一来就完全省去了第二次字符串替换的操作，于是组件编译这里的流程了下面这样：\n\n![](http://img14.360buyimg.com/jdphoto/jfs/t1/38640/40/15928/32002/5d6a292eEaad87937/abc0a5fc367aa1aa.png)\n\n这两次优化之后然后重新压测并收集性能数据，得到的火焰图如下：\n\n![](http://img10.360buyimg.com/jdphoto/jfs/t1/66970/39/8617/181855/5d6a2946E9c484381/74f6f67e08202a17.png)\n\n可以看到createApp函数里面原来的那个replace函数的横条已经消失不见了，说明前面的优化是有效果的，最耗时的操作已经不是replace而是vue的compile方法即模版的编译。从此次优化前后的服务端压测的CPU数据也能说明问题：\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/49916/11/11130/3999/5d822beeE7e542e78/799ef88b1705dca9.png)\n\n## 四.compile函数调用优化\n\ncompile函数调用，就是前面\"组件模板构造\"那一节提到的，将组件的容器模板用Vue.compile函数编译成Render Function，虽然这段容器模板很简单，但是他是一个很耗性能的操作。而且这是Vue自身提供的能力，似乎已经没有多大的优化余地了。有没有其他优化方法呢？\n\n仔细观察一下组件容器dom以及编译之后的代码，似乎是有规律的。如果组件树的结构是下面这样的：\n\n```javascript\n[\n    {id: \"com_1001\"},\n    {\n        id: \"com_1002\",\n        child: [\n            {id: \"com_1003\"},\n            {id: \"com_1004\"}\n        ]\n    }\n];\n```\n\n拼接之后的html内容大概是下面这样的：\n\n\n```html\n<div>\n    <div id=\"com_1001_con\"></div>\n    <div id=\"com_1002_con\"></div>\n    <div mpm_edit_child_box tabpid=\"com_1002\" class=\"childBox\">\n        <div id=\"com_1003_con\"></div>\n        <div id=\"com_1004_con\"></div>\n    </div>\n</div>\n```\n\n这里一般都只是一些简单的模版，编译出来大概是这样的：\n```javascript\n\nwith(this) {\n    return _c('div', [\n        _c('div', {attrs: {\"id\": \"com_1001_con\"}}),\n        _v(\" \"),\n        _c('div', {attrs: {\"id\": \"com_1002_con\"}}),\n        _v(\" \"),\n        _c('div', {staticClass: \"childBox\", attrs: {\"mpm_edit_child_box\": \"\", \"tabpid\": \"com_1002\"}}, [\n            _c('div', {attrs: {\"id\": \"com_1003_con\"}}),\n            _v(\" \"),\n            _c('div', {attrs: {\"id\": \"com_1004_con\"}})\n        ])\n    ])\n}\n```\n\n通过观察可以发现，这里都是生成的div元素，div上的属性都是静态属性，由此我们可以自己实现一个简单的“编译”函数，不用走vue的编译：\n\n\n```javascript\n function simpleCompile(comList) {\n            function genTree(tree) {\n                var html = '';\n                for (var i = 0, len = tree.length; i < len; i++) {\n                    var node = tree[i];\n                    var comId = node.id;\n                    html += `_c('div',{attrs:{\"id\":\"${comId}_con\"}},[`;\n                    html = html + compiledComTplMap[comId] + '])';  //  compiledComTplMap[comId] 该组件对应的编译后的样式模版\n                    if (node.child && node.child.length) {\n                        html += `,_c('div',{staticClass:\"childBox\",attrs:{\"mpm_edit_child_box\":\"\",\"tabpid\":\"${comId}\"}},[` + genTree(node.child) + `])`;\n                    }\n                    html += (i === len - 1)  ? '' : ',';\n                }\n                return html;\n            }\n            return genTree(comList);\n        }\n```\n\n经测试，这样简单“编译”之后生成的代码跟之前编译的代码是一样的，在预发布环境测试了多个页面之后，页面渲染也没有问题。去掉Vue模版编译之后整个组件渲染的逻辑就变成了下面这样：\n\n![](http://img20.360buyimg.com/jdphoto/jfs/t1/82696/9/8802/16350/5d6a29c5E152a9038/4cda63f70692af88.png)\n\nVue编译优化之后收集cpu数据得到的火焰图如下：\n\n![](http://img10.360buyimg.com/jdphoto/jfs/t1/51201/27/9284/168200/5d6a29e0E93bfded2/e1781cb019fc35ae.png)\n\n从火焰图可以看出，原来的那个compile函数调用的横条也消失了，说明优化有效果。再看看压测的CPU消耗情况：\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/48621/32/11050/5538/5d822c1eE5ce6a12b/6a950938fe73d8b9.png)\n\n需要提到的是，由于是自己实现了一个简单版的compile函数，前文中关于compile函数调用优化的代码，也直接去掉了，当然也到达了优化的效果。\n\n## 五.其他优化研究\n经过上面两次优化之后，剩下最耗性能的地方是JSON解析和Vue渲染了。我们也做了一下研究，但是很可惜，暂时没什么成果，不过我们的探索也可以提一下：\n1）JSON解析。我们的服务从Redis中读出来的PageData比较大，一般有100多KB，很需要有一个高性能的JSON反序列化的库(即代替JSON.parse)。目前有一个高性能的库[fast-json-stringify](https://www.npmjs.com/package/fast-json-stringify)，但是可惜他是做序列化的（即做的是JSON.stringify做的事情）。我们测试了多个方案，目前原生的JSON.parse函数性能是最好的。\n2）Vue渲染。有位腾讯的同学提到，[用string-based的模板代替VirtualDom的渲染方案提升性能](https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247485601&amp;idx=1&amp;sn=97a45254a771d13789faed81316b465a),不过他忽略了一点，Vue是完全的组件化的、是有生命周期钩子、方法、计算属性等，不是一个简简单单的模板引擎，按照他的思路是需要把生命周期的钩子、方法、计算属性等全部算好后拿到的数据对象，再跟string-based模板结合才能渲染，这个显然是和组件化的思路背道而驰的。\n\n上面2点，各位看官如果有好的思路，欢迎不吝赐教！\n\n\n## 六.总结\n这次优化总的来说，CPU性能消耗得到了有效优化，整体提升了大概20%，一方面为公司节省了资源，另外一方面也减少了因流量暴涨导致我们要扩容的几率，一举两得。\n","slug":"记一次Node-js直出服务的性能优化","published":1,"updated":"2019-11-20T05:53:08.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vflrz0030soyxjuitabk5","content":"<blockquote>\n<p>作者：肖睦群、李刚松</p>\n</blockquote>\n<h2 id=\"一-问题背景\"><a href=\"#一-问题背景\" class=\"headerlink\" title=\"一.问题背景\"></a>一.问题背景</h2><p>MPM（Market Page Maker）是京东社交电商部的组件化的页面可视化搭建平台，于2016年9月份上线，平均每周150+个页面，目前已经成为社交电商部的一个核心系统。系统使用Vue.js作为组件化的基础框架,并于2017年5月份上线了Node.js直出服务。MPM的页面会被运营同学拿到各种渠道投放，整体流量很不稳定，对于流量的暴涨情况要能够及时处理，这对于开发同学来说是一个比较烦的工作。</p>\n<p>前几天突然收到告警信息，由于运营同学将某个MPM活动页面投放了外部广告，直出服务流量大涨，服务器CPU使用率达到了80%以上，于是立马申请扩容，问题虽解决，但是留给了我们一个问题：直出服务能否优化，这次量级的流量进来之后，是否可以稳定支撑而不需要扩容？</p>\n<a id=\"more\"></a>\n<h2 id=\"二-分析方法及问题点\"><a href=\"#二-分析方法及问题点\" class=\"headerlink\" title=\"二.分析方法及问题点\"></a>二.分析方法及问题点</h2><p>由于本次告警问题主要是流量暴涨导致的CPU使用率过大，我们本次重点优化服务的CPU消耗性能。分析CPU消耗的方法有<a href=\"https://juejin.im/post/5d43a41cf265da03d60ee128\" target=\"_blank\" rel=\"noopener\">多种</a>,我们选择其中操作比较简单的<a href=\"https://www.npmjs.com/package/v8-profiler\" target=\"_blank\" rel=\"noopener\">v8-profiler</a>方案：安装NPM包v8-profiler，在直出服务中添加监控代码，打包发布到预发布环境进行压测，收集监控数据再进行分析。监控代码如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> profiler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'v8-profiler'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);</span><br><span class=\"line\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cpuProf</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'开始收集CPU数据'</span>);</span><br><span class=\"line\">        profiler.startProfiling(<span class=\"hljs-string\">'CPU profile'</span>);</span><br><span class=\"line\">        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; </span><br><span class=\"line\">            <span class=\"hljs-keyword\">const</span> profile = profiler.stopProfiling();</span><br><span class=\"line\">            profile.export(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">                fs.writeFileSync(<span class=\"hljs-string\">'profile.json'</span>, result);</span><br><span class=\"line\">                profile.delete();</span><br><span class=\"line\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'CPU数据收集完成'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">//监控数据采集5分钟</span></span><br><span class=\"line\">    &#125;, <span class=\"hljs-number\">1000</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会采集服务端5分钟的CPU消耗数据，并生成一个JSON文件，将此文件下载到本地后，导入到在线分析网址<a href=\"https://www.speedscope.app/\" target=\"_blank\" rel=\"noopener\">https://www.speedscope.app/</a> （或者用Chrome DevTool也可以），可以看到火焰图如下：</p>\n<p><img src=\"http://img30.360buyimg.com/jdphoto/jfs/t1/47038/8/11206/219858/5d822841Ef77c142f/5cb0763cbc61ecce.png\" alt></p>\n<p>从火焰图可以看到函数的调用栈，从上而下就是调用栈，其中横条长度越长代表这占用cpu的时间越长。如果某个横条很长，但是下面又没有很细小的子调用，一般就表示该调用消耗时间比较长，可以考虑做优化。从图中我们可以看到，消耗性能的主要有几个地方：<br>1）replace函数<br>2）compile函数<br>3）parse函数<br>4）vue渲染</p>\n<p>为了方便后文的分析，我们先了解一下直出服务的处理过程：</p>\n<table>\n    <thead>\n        <tr>\n            <th style=\"width: 80px\">步骤</th>\n            <th>处理流程</th>\n            <th style=\"width: 150px\">资源消耗类型</th>\n            <th>备注</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>服务收到请求，解析页面参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>从Redis中读取页面数据(PageData)</td>\n            <td>网络IO</td>\n            <td>PageData包括页面的各种配置信息，如页面头尾模板、页面楼层信息、身份判断要求、组件元数据等</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>解析PageData</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>组装后端请求参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>发起后端请求并等待返回</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>6</td>\n            <td>解析后端接口返回的JSON数据</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>7</td>\n            <td>页面模板构造</td>\n            <td>CPU计算</td>\n            <td>由于存在用户身份判断（如某些组件仅对新人可见）、楼层BI等原因，组件的容器是动态构造的</td>\n        </tr>\n         <tr>\n            <td>8</td>\n            <td>组件渲染</td>\n            <td>CPU计算</td>\n            <td>此处的组件渲染是Vue组件的服务端渲染</td>\n        </tr>\n         <tr>\n            <td>9</td>\n            <td>吐出页面HTML</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n\n<h2 id=\"三-replace函数调用优化\"><a href=\"#三-replace函数调用优化\" class=\"headerlink\" title=\"三.replace函数调用优化\"></a>三.replace函数调用优化</h2><p>分析具体的replace函数调用之前，我们先详细分析一下上面表格的第7步:页面模板构造。</p>\n<h3 id=\"1-页面模板构造\"><a href=\"#1-页面模板构造\" class=\"headerlink\" title=\"1.页面模板构造\"></a>1.页面模板构造</h3><p>由于存在用户身份判断（如某些组件仅对新人或者VIP用户可见）、楼层BI（每个用户展示的楼层顺序都不一样）等原因，相同页面对于不同的用户展示的组件数量、顺序都是不一样（即千人千面），因此页面的模板是基于各个组件的模板动态构造的。为方便对组件进行操作，每个组件都有一个div容器，容器构造很简单，示例代码如下：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1001'</span>&gt;</span>__vue_com_1001_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1002'</span>&gt;</span>__vue_com_1002_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1003'</span>&gt;</span>__vue_com_1003_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1004'</span>&gt;</span>__vue_com_1004_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>vue_com_1001_replace</strong>这种是占位符，需要用相应位置的组件的实际模板来替换。但是这里有个问题，<br>Vue渲染的时候，使用<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">Render Function</a>进行渲染的，并不是普通的字符串模板或者Vue模板。下面是一段模板编译后的Render Function：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_c(<span class=\"hljs-string\">'commontag'</span>,&#123;<span class=\"hljs-attr\">ref</span>:<span class=\"hljs-string\">\"__uid__replace__str__\"</span>,<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"uid\"</span>:<span class=\"hljs-string\">\"__uid__replace__str__\"</span>,<span class=\"hljs-string\">\"params\"</span>:params___uid__replace__str__&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'div'</span>,[(<span class=\"hljs-literal\">true</span>)?[(params.transparent != <span class=\"hljs-number\">1</span>)?_c(<span class=\"hljs-string\">'div'</span>,&#123;<span class=\"hljs-attr\">staticClass</span>:<span class=\"hljs-string\">\"vueSeparator\"</span>,<span class=\"hljs-attr\">style</span>:(&#123;<span class=\"hljs-string\">'background-color'</span>:params.color,  <span class=\"hljs-attr\">height</span>: params.height + <span class=\"hljs-string\">'px'</span>&#125;)&#125;):_c(<span class=\"hljs-string\">'div'</span>,&#123;<span class=\"hljs-attr\">staticClass</span>:<span class=\"hljs-string\">\"vueSeparator\"</span>,<span class=\"hljs-attr\">style</span>:(&#123;<span class=\"hljs-attr\">height</span>: params.height + <span class=\"hljs-string\">'px'</span>&#125;)&#125;)]:_e()],<span class=\"hljs-number\">2</span>)&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>若使用的是Vue模板，则会在运行时做一次编译，编译为Render Function，比较耗性能，因此官方推荐的做法是在<a href=\"https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91\" target=\"_blank\" rel=\"noopener\">构建时预编译</a>，并且运行时使用不包含编译函数的<a href=\"https://cn.vuejs.org/v2/guide/deployment.html#%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\" target=\"_blank\" rel=\"noopener\">精简版</a>。目前MPM每个组件存储到Redis中的也是Render Function，而不是原始的Vue模板。所以现在的问题是，已知子组件编译后的Render Function，并且知道各个组件的DOM结构形式的容器，能否构造出父组件的Render Function？</p>\n<p>答案当然是可以：<em>可以通过字符串操作，构造出父组件的Render Function！</em></p>\n<p>我们以下面这段代码为例，看看构造过程（为了简单处理，我们用了内联模板）：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ParentComponent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SubComponent1</span> <span class=\"hljs-attr\">inline-template</span> <span class=\"hljs-attr\">:param</span>=<span class=\"hljs-string\">\"data.sub1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>this is SubComponent1&#123;&#123;param.name&#125;&#125;<span class=\"hljs-tag\">&lt;/&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SubComponent1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SubComponent2</span> <span class=\"hljs-attr\">inline-template</span> <span class=\"hljs-attr\">:param</span>=<span class=\"hljs-string\">\"data.sub2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>this is SubComponent2&#123;&#123;param.name&#125;&#125;<span class=\"hljs-tag\">&lt;/&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SubComponent2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SubComponent3</span> <span class=\"hljs-attr\">inline-template</span> <span class=\"hljs-attr\">:param</span>=<span class=\"hljs-string\">\"data.sub3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>this is SubComponent3&#123;&#123;param.name&#125;&#125;<span class=\"hljs-tag\">&lt;/&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SubComponent3</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ParentComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码经过Vue.compile函数编译处理后，会得到一个包含render和staticRenderFns两个属性的对象，我们主要看render属性，它是一个匿名函数，代码如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">anonymous</span>(<span class=\"hljs-params\"></span></span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'ParentComponent'</span>,[_c(<span class=\"hljs-string\">'SubComponent1'</span>,&#123;<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"param\"</span>:data.sub1&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'p'</span>,[_v(<span class=\"hljs-string\">\"this is SubComponent1\"</span>+_s(param.name)+<span class=\"hljs-string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"hljs-string\">\" \"</span>),_c(<span class=\"hljs-string\">'SubComponent2'</span>,&#123;<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"param\"</span>:data.sub2&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'p'</span>,[_v(<span class=\"hljs-string\">\"this is SubComponent2\"</span>+_s(param.name)+<span class=\"hljs-string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"hljs-string\">\" \"</span>),_c(<span class=\"hljs-string\">'SubComponent3'</span>,&#123;<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"param\"</span>:data.sub3&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'p'</span>,[_v(<span class=\"hljs-string\">\"this is SubComponent3\"</span>+_s(param.name)+<span class=\"hljs-string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;)],<span class=\"hljs-number\">1</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将上面的代码再格式化一下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">anonymous</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> </span><br><span class=\"line\">_c(<span class=\"hljs-string\">'ParentComponent'</span>,</span><br><span class=\"line\">[</span><br><span class=\"line\">_c(<span class=\"hljs-string\">'SubComponent1'</span>,&#123;<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"param\"</span>:data.sub1&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'p'</span>,[_v(<span class=\"hljs-string\">\"this is SubComponent1\"</span>+_s(param.name)+<span class=\"hljs-string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"hljs-string\">\" \"</span>),</span><br><span class=\"line\">_c(<span class=\"hljs-string\">'SubComponent2'</span>,&#123;<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"param\"</span>:data.sub2&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'p'</span>,[_v(<span class=\"hljs-string\">\"this is SubComponent2\"</span>+_s(param.name)+<span class=\"hljs-string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"hljs-string\">\" \"</span>),</span><br><span class=\"line\">_c(<span class=\"hljs-string\">'SubComponent3'</span>,&#123;<span class=\"hljs-attr\">attrs</span>:&#123;<span class=\"hljs-string\">\"param\"</span>:data.sub3&#125;,<span class=\"hljs-attr\">inlineTemplate</span>:&#123;<span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>)&#123;<span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'p'</span>,[_v(<span class=\"hljs-string\">\"this is SubComponent3\"</span>+_s(param.name)+<span class=\"hljs-string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"hljs-attr\">staticRenderFns</span>:[]&#125;&#125;)</span><br><span class=\"line\">],<span class=\"hljs-number\">1</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到上面第4、5、6行代码，就是子组件的Render Function，他们包裹在一个数组里。因此，如果知道子组件的Render Function，配合形如下面的模板，就可以反过来构造出父组件的Render Function（当然有一个从字符串到函数的反序列化过程，但是在我们的场景这个不可避免，因为模板是从Redis中读取出来的）。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function anonymous() &#123;</span><br><span class=\"line\">with(this)&#123;return </span><br><span class=\"line\">_c(&apos;ParentComponent&apos;,</span><br><span class=\"line\">[</span><br><span class=\"line\">__SubComponent1_replace__,</span><br><span class=\"line\">__SubComponent2_replace__,</span><br><span class=\"line\">__SubComponent3_replace__</span><br><span class=\"line\">],1)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再回到我们的问题，我们已知子组件的Render Function，并且已知父组件的容器，需要构造出父组件的Render Function。现在思路就很清晰了，我们只需要把开头那段包含占位符的div容器代码，</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1001'</span>&gt;</span>__vue_com_1001_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1002'</span>&gt;</span>__vue_com_1002_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1003'</span>&gt;</span>__vue_com_1003_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'com_1004'</span>&gt;</span>__vue_com_1004_replace__<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Vue.compile函数将其编译成Render Function，处理成字符串后，再通过正则替换其中的子组件的占位符，变成子组件模板，最后反序列化为父组件的Render Function即可。整体处理逻辑如下：<br><img src=\"http://img14.360buyimg.com/jdphoto/jfs/t1/68669/10/8822/43844/5d6a26f2Ee7fef972/26e976b89d95b4b6.png\" alt></p>\n<h3 id=\"2-问题代码分析\"><a href=\"#2-问题代码分析\" class=\"headerlink\" title=\"2.问题代码分析\"></a>2.问题代码分析</h3><p>了解了上述处理过程，我们再根据火焰图中的调用栈，找到replace函数调用的问题代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">Object</span>.keys(MPM_COM_STYLE_MAP).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">comId</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> styleKey = MPM_COM_STYLE_MAP[comId];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> code = <span class=\"hljs-string\">''</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(hideComIds.indexOf(comId)!=<span class=\"hljs-number\">-1</span>)&#123;</span><br><span class=\"line\">        code = HIDE_TPL;</span><br><span class=\"line\">    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(loadingComs.indexOf(comId)!=<span class=\"hljs-number\">-1</span>)&#123;</span><br><span class=\"line\">        code = LOADING_TPL;</span><br><span class=\"line\">    &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(MPM_STYLE_TPL_MAP[styleKey]) &#123;</span><br><span class=\"line\">    \t<span class=\"hljs-comment\">// 第一次replace替换</span></span><br><span class=\"line\">        code = MPM_STYLE_TPL_MAP[styleKey].replace(<span class=\"hljs-regexp\">/__uid__replace__str__/g</span>, comId); </span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'最终替换，发现无模板组件'</span>,comId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(code) &#123;</span><br><span class=\"line\">    \t<span class=\"hljs-comment\">//第二次replace替换</span></span><br><span class=\"line\">    \tcompileTpl = compileTpl.replace(<span class=\"hljs-string\">`_v(\"__vue__<span class=\"hljs-subst\">$&#123;comId&#125;</span>__replace__\")`</span>,code);</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到有两次replace函数调用，第一次是组件ID替换（即uid替换），第二次是组件模板替换。</p>\n<p>先分析第一次replace函数调用。<br>前面提到，每个组件的模板已经编译为Render Function并存在Redis中。但是同一个组件在页面中可能有多个实例，每个实例需要有一个ID来区分，我们称为uid（unique ID的意思），uid只有在运行的时候才生成，在编译的时候是不知道的，因此用了一个占位符（即下图中的<pre><strong>uid</strong>replace__str__</pre>），在直出服务中需要做替换，即上面代码中的uid替换。下面是一段编译后的代码：</p>\n<p><img src=\"http://img14.360buyimg.com/jdphoto/jfs/t1/50259/1/9401/126883/5d6a2717E0073a113/e036f07b0e515c3b.png\" alt></p>\n<p>每个页面会有很多个组件（数十个甚至上百个），每次替换都是在之前替换的结果之上进行的，形成了循环替换，前面导致告警的那个页面用到的编译之后的模版最大的有20+KB，而每次正则替换之后的模版会越来越长，所以这里耗时较多也就不奇怪了。</p>\n<p>从逻辑上讲，这段代码是必不可少的，但是又有性能瓶颈，如何优化？</p>\n<h3 id=\"3-uid替换优化\"><a href=\"#3-uid替换优化\" class=\"headerlink\" title=\"3.uid替换优化\"></a>3.uid替换优化</h3><p>我们研究发现：对于比较长的字符串，先用字符串的split方法分割成数组，再用数组的join方法将切割的数组合并为一个字符串，比正则替换的效率要高。此法我们称为数组粘合法。以下为测试代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> exeCount = <span class=\"hljs-number\">10000000</span>;   <span class=\"hljs-comment\">//执行次数,此处分别换成1W、10W、100W、1000W</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">//测试字符串，需要比较长的字符串才能看到效果，下面是从我们的组件模板中摘取的一段</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">`_c('ds',&#123;ref:\"__uid__replace__str__\",attrs:&#123;\"uid\":\"__uid__replace__str__\",\"params\":params___uid__replace__str__,\"tab-index\":\"3\"&#125;,inlineTemplate:&#123;render:function()&#123;with(this)&#123;return _c('div',&#123;attrs:&#123;\"stylkey\":data.styleKey,\"pc\":data.pc,\"actid\":data.actid,\"areaid\":data.areaid&#125;&#125;,[_c('ul',&#123;directives:[&#123;name:\"getskuad\",rawName:\"v-getskuad\",value:(&#123;bindObj:data, appendName:'skuAd', show: params.extend.showAds&#125;),expression:\"&#123;bindObj:data, appendName:'skuAd', show: params.extend.showAds&#125;\"&#125;],staticClass:\"pinlei_g3col\"&#125;,[(true)?_l((params.fnObj.translate(data.itemList)),function(item,index)&#123;return (!params.shownum || index &lt; params.shownum || data.showMore)?_c('li',&#123;class:['pinlei_g3col_col', (params.extend.imgSize == '1' ? 'size_230x230' : 'size_230x320')],attrs:&#123;\"index\":index&#125;&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_img\"&#125;,[_c('a',&#123;attrs:&#123;\"href\":params.extend.buttonType == '5' ? addRd(goPingouUrl(item.sUrl),params.ptag) : addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('img',&#123;attrs:&#123;\"init_src\":getImgUrl('//img12.360buyimg.com/mcoss/'+ item.sPicturesUrl),\"data-size\":\"230x230\"&#125;&#125;)]),((params.extend.sellOut != '0') &amp;&amp; (item.dwStock - 0 &gt; 0))?_c('div',&#123;staticClass:\"pinlei_g3col_msk\"&#125;,[_m(0,true)]):_e()]),_c('div',&#123;staticClass:\"pinlei_g3col_info\"&#125;,[_c('div',&#123;class:['pinlei_g3col_t1', 'red', (params.extend.titleHeight == '1' ? 'oneline' : '')]&#125;,[_v(\"\\n                                \"+_s(item.sProductName)+\"\\n                            \")]),(!params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',&#123;staticClass:\"pinlei_g3col_price red\",style:(&#123;color: params.extend.isShowTokenPrice == '1' &amp;&amp; item.dwTokenPrice &amp;&amp; (Number(item.dwTokenPrice) != 0)?'#888':''&#125;)&#125;,[_v(\"\\n                                ￥\"),_c('b',[_v(_s(item.dwRealTimePrice.split('.')[0]))]),_v(\".\"+_s(item.dwRealTimePrice.split('.')[1])+\"\\n                            \")]):_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',&#123;staticClass:\"pinlei_g3col_price red\",style:(&#123;color: params.extend.isShowTokenPrice == '1' &amp;&amp; item.dwTokenPrice &amp;&amp; (Number(item.dwTokenPrice) != 0)?'#888':''&#125;)&#125;,[_v(\"\\n                                ￥\"),_c('b',[_v(_s(params.fnObj.getYushouInt(item, params.extend.priceType)))]),_v(_s(params.fnObj.getYushouDecimal(item, params.extend.priceType))+\"\\n                            \")]):_e(),(params.extend.isShowTokenPrice == '1')?[_c('div',&#123;staticClass:\"pinlei_g3col_token\"&#125;,[(item.dwTokenPrice &amp;&amp; (Number(item.dwTokenPrice) != 0))?_c('div',&#123;staticClass:\"pinlei_g3col_token_price\"&#125;,[_v(\"专属价:￥\"),_c('b',[_v(_s(parseFloat(item.dwTokenPrice)))])]):_e()])]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',&#123;staticClass:\"pinlei_g3col_desc red\"&#125;,[(item.sBackUpWords[0] &amp;&amp; (params.fnObj.getYushouJiaDiff(item,params.extend.priceType) &gt; 0))?[_v(\"比现在买省\"+_s(params.fnObj.getYushouJiaDiff(item,params.extend.priceType))+\"元\")]:(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' &amp;&amp; item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',&#123;staticClass:\"pinlei_g3col_desc red\"&#125;,[(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' &amp;&amp; item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonType == '0')?[(params.extend.priceType == '1')?_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId&#125;),expression:\"&#123;skuId: item.ddwSkuId&#125;\"&#125;],class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e(),(params.extend.priceType == '0')?_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId&#125;),expression:\"&#123;skuId: item.ddwSkuId&#125;\"&#125;],class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e()]:_e(),(params.extend.buttonType == '1')?[_c('a',&#123;attrs:&#123;\"href\":addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('div',&#123;class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '5')?[_c('a',&#123;attrs:&#123;\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)&#125;&#125;,[_c('div',&#123;class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '2')?[_c('a',&#123;attrs:&#123;\"href\":addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('div',&#123;class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                            定金\"+_s(item.sBackUpWords[1].split('+')[0])+\"抵\"+_s(parseFloat((item.sBackUpWords[1].split('+')[1] * item.sBackUpWords[1].split('+')[0]).toFixed(2)))+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '3')?[_c('div',&#123;directives:[&#123;name:\"yuyue\",rawName:\"v-yuyue\",value:(&#123;bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;),expression:\"&#123;bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;\"&#125;],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:&#123;\"yuyueid\":params.extend.yuyueID&#125;&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '4' )?[((params.fnObj.getYushouJiaDiff(item,params.extend.priceType)&gt; 0))?_c('div',&#123;directives:[&#123;name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:(&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;,actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3&#125;),expression:\"&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;,actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3&#125;\"&#125;],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_c('div',&#123;directives:[&#123;name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:(&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;&#125;),expression:\"&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;&#125;\"&#125;],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '6' )?[_c('div',&#123;directives:[&#123;name:\"yuyue\",rawName:\"v-yuyue\",value:(&#123;bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;),expression:\"&#123;bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;\"&#125;,&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: &#123;skuId: item.ddwSkuId,successTxt:'预约加车成功'&#125;&#125;),expression:\"&#123;skuId: &#123;skuId: item.ddwSkuId,successTxt:'预约加车成功'&#125;&#125;\"&#125;],class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'left': params.fnObj.getCouponInfo(item.sBackUpWords[2])&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:&#123;\"yuyueid\":params.extend.yuyueID&#125;&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e()]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonActiveType == '0')?[_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId&#125;),expression:\"&#123;skuId: item.ddwSkuId&#125;\"&#125;],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonActiveType == '1')?[_c('a',&#123;attrs:&#123;\"href\":addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '2')?[_c('a',&#123;attrs:&#123;\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)&#125;&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '4')?[_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true&#125;),expression:\"&#123;skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true&#125;\"&#125;,&#123;name:\"quan\",rawName:\"v-quan\",value:(&#123;bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:&#123;&#125;, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:&#123;value: params.extend.price, gate: params.extend.gate, name: params.extend.name&#125;&#125;),expression:\"&#123;bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:&#123;&#125;, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:&#123;value: params.extend.price, gate: params.extend.gate, name: params.extend.name&#125;&#125;\"&#125;],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e()]:_e()],2),(params.extend.corner != '0')?[(isRange(params.extend.cornerBegin, params.extend.cornerEnd) &amp;&amp; params.extend.cornerDes)?_c('div',&#123;staticClass:\"pinlei_g3col_stamp red\"&#125;,[_v(_s(params.extend.cornerDes))]):(item.sCopyWriting)?_c('div',&#123;staticClass:\"pinlei_g3col_stamp red\"&#125;,[_v(_s(item.sCopyWriting))]):_e()]:_e()],2):_e()&#125;):_e()],2),(params.shownum &amp;&amp; data.itemList.length &gt; params.shownum)?[_c('div',&#123;class:'pinlei_more '+ (data.showMore?'pinlei_more_unfold':''),on:&#123;\"click\":function($event)&#123;toggleMore($event)&#125;&#125;&#125;,[_v(_s(data.showMore?'收起更多':'展开更多'))])]:_e()],2)&#125;&#125;,staticRenderFns:[function()&#123;with(this)&#123;return _c('div',&#123;staticClass:\"pinlei_g3col_msk_ico\"&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_msk_text\"&#125;,[_v(\"\\n                                        已抢光\\n                                        \"),_c('br'),_v(\"over\\n                                    \")])])&#125;&#125;]&#125;&#125;)`</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//正则替换法start</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> timeStart = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; exeCount; i++) &#123;</span><br><span class=\"line\">    str.replace(<span class=\"hljs-regexp\">/__uid__replace__str__/g</span>, <span class=\"hljs-string\">'com_1001'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> timeEnd = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'正则替换耗时：'</span>, timeEnd - timeStart);</span><br><span class=\"line\"><span class=\"hljs-comment\">//正则替换法end</span></span><br><span class=\"line\"><span class=\"hljs-comment\">//数组粘合法start</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> timeStart2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> segs = str.split(<span class=\"hljs-string\">'__uid__replace__str__'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; exeCount; i++) &#123;</span><br><span class=\"line\">    segs.join(<span class=\"hljs-string\">'com_1001'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> timeEnd2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'数组粘贴耗时：'</span>, timeEnd2 - timeStart2);</span><br><span class=\"line\"><span class=\"hljs-comment\">//数组粘合法end</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<table>\n    <thead>\n        <tr>\n            <th>执行次数</th>\n            <th>正则替换法耗时(ms)</th>\n            <th>数组粘合法耗时(ms)</th>\n            <th>正则替换法耗时/数组粘合法耗时</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1W</td>\n            <td>42</td>\n            <td>25</td>\n            <td>1.68</td>\n        </tr>\n        <tr>\n            <td>10W</td>\n            <td>362</td>\n            <td>179</td>\n            <td>2.01</td>\n        </tr>\n        <tr>\n            <td>100W</td>\n            <td>3555</td>\n            <td>1623</td>\n            <td>2.2</td>\n        </tr>\n        <tr>\n            <td>1000W</td>\n            <td>36449</td>\n            <td>18634</td>\n            <td>1.95</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>可以看到数组粘合法的耗时是正则替换法的一半左右。</p>\n<p>考虑到我们的场景就是字符串比较大，存在循环替换，且是海量服务的场景，因此上面第一次替换，直接改成数组粘合法即可。</p>\n<h3 id=\"4-组件模板替换优化\"><a href=\"#4-组件模板替换优化\" class=\"headerlink\" title=\"4.组件模板替换优化\"></a>4.组件模板替换优化</h3><p>问题代码中的第二次替换，是将容器里的组件占位符替换为子组件的Render Function。即下图所示：<br><img src=\"http://img30.360buyimg.com/jdphoto/jfs/t1/74148/30/8785/25337/5d6a2749Ec383dbe6/e17d1fd59ffb9ffb.png\" alt><br>子模板替换优化的替换次数其实是跟组件的数量相关的，即使有150个组件，用数组粘合法也不会有明显的性能提升，因此需要考虑别的办法。</p>\n<p>我们查了一下vue-template-compiler的源码(Vue的compile能力也是用此模块)，发现Vue.compile的函数有2个参数，第一个参数是待编译的Vue模板，第二个参数是一个option对象，包含一个名为tansformCode钩子函数(参见资料<a href=\"https://github.com/vuejs/vue/blob/dev/flow/compiler.js#L38-L45\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue/blob/dev/flow/compiler.js#L38-L45</a> ，此参数并未在官网的文档中暴露，关于此函数的用处后面可以再写一篇文章) ，这个钩子函数接受两个参数，第一个是ast节点，第二个是编译该节点之后的render code，而该函数的返回值会就是最终的render code。于是在之前的生成dom函数那里把com占位符替换为一个空的div元素，div元素的id为之前的占位符，然后在编译的时候在transformCode钩子函数这里做一个替换，当发现ast节点为div并且id符合组件占位符的规则，那么就返回该组件对应的编译之后样式模版。具体代码如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> compileTpl = compiler.compile(<span class=\"hljs-string\">`&lt;div&gt;<span class=\"hljs-subst\">$&#123;html&#125;</span>&lt;/div&gt;`</span>, &#123;</span><br><span class=\"line\">            modules: &#123;</span><br><span class=\"line\">                transformCode: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, code</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"hljs-keyword\">if</span> (el.attrsMap &amp;&amp; el.attrsMap[<span class=\"hljs-string\">'id'</span>] &amp;&amp; el.attrsMap[<span class=\"hljs-string\">'id'</span>].match(<span class=\"hljs-regexp\">/__vue__com_\\d&#123;4,5&#125;__replace__/</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"hljs-keyword\">var</span> comId = el.attrsMap[<span class=\"hljs-string\">'id'</span>].match(<span class=\"hljs-regexp\">/com_\\d&#123;4,5&#125;/</span>)[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">                        <span class=\"hljs-comment\">// console.log('--------------------------------', comId);</span></span><br><span class=\"line\">                        <span class=\"hljs-keyword\">var</span> styleTemplate  = compiledComTplMap[comId];</span><br><span class=\"line\">                        <span class=\"hljs-comment\">// console.log(styleTemplate);</span></span><br><span class=\"line\">                        <span class=\"hljs-keyword\">return</span> styleTemplate;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"hljs-keyword\">return</span> code;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).staticRenderFns.toString();</span><br></pre></td></tr></table></figure>\n\n<p>这样一来就完全省去了第二次字符串替换的操作，于是组件编译这里的流程了下面这样：</p>\n<p><img src=\"http://img14.360buyimg.com/jdphoto/jfs/t1/38640/40/15928/32002/5d6a292eEaad87937/abc0a5fc367aa1aa.png\" alt></p>\n<p>这两次优化之后然后重新压测并收集性能数据，得到的火焰图如下：</p>\n<p><img src=\"http://img10.360buyimg.com/jdphoto/jfs/t1/66970/39/8617/181855/5d6a2946E9c484381/74f6f67e08202a17.png\" alt></p>\n<p>可以看到createApp函数里面原来的那个replace函数的横条已经消失不见了，说明前面的优化是有效果的，最耗时的操作已经不是replace而是vue的compile方法即模版的编译。从此次优化前后的服务端压测的CPU数据也能说明问题：</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/49916/11/11130/3999/5d822beeE7e542e78/799ef88b1705dca9.png\" alt></p>\n<h2 id=\"四-compile函数调用优化\"><a href=\"#四-compile函数调用优化\" class=\"headerlink\" title=\"四.compile函数调用优化\"></a>四.compile函数调用优化</h2><p>compile函数调用，就是前面”组件模板构造”那一节提到的，将组件的容器模板用Vue.compile函数编译成Render Function，虽然这段容器模板很简单，但是他是一个很耗性能的操作。而且这是Vue自身提供的能力，似乎已经没有多大的优化余地了。有没有其他优化方法呢？</p>\n<p>仔细观察一下组件容器dom以及编译之后的代码，似乎是有规律的。如果组件树的结构是下面这样的：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"com_1001\"</span>&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"hljs-string\">\"com_1002\"</span>,</span><br><span class=\"line\">        child: [</span><br><span class=\"line\">            &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"com_1003\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">\"com_1004\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>拼接之后的html内容大概是下面这样的：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"com_1001_con\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"com_1002_con\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">mpm_edit_child_box</span> <span class=\"hljs-attr\">tabpid</span>=<span class=\"hljs-string\">\"com_1002\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"childBox\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"com_1003_con\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"com_1004_con\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里一般都只是一些简单的模版，编译出来大概是这样的：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">with</span>(<span class=\"hljs-keyword\">this</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> _c(<span class=\"hljs-string\">'div'</span>, [</span><br><span class=\"line\">        _c(<span class=\"hljs-string\">'div'</span>, &#123;<span class=\"hljs-attr\">attrs</span>: &#123;<span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"com_1001_con\"</span>&#125;&#125;),</span><br><span class=\"line\">        _v(<span class=\"hljs-string\">\" \"</span>),</span><br><span class=\"line\">        _c(<span class=\"hljs-string\">'div'</span>, &#123;<span class=\"hljs-attr\">attrs</span>: &#123;<span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"com_1002_con\"</span>&#125;&#125;),</span><br><span class=\"line\">        _v(<span class=\"hljs-string\">\" \"</span>),</span><br><span class=\"line\">        _c(<span class=\"hljs-string\">'div'</span>, &#123;<span class=\"hljs-attr\">staticClass</span>: <span class=\"hljs-string\">\"childBox\"</span>, <span class=\"hljs-attr\">attrs</span>: &#123;<span class=\"hljs-string\">\"mpm_edit_child_box\"</span>: <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"tabpid\"</span>: <span class=\"hljs-string\">\"com_1002\"</span>&#125;&#125;, [</span><br><span class=\"line\">            _c(<span class=\"hljs-string\">'div'</span>, &#123;<span class=\"hljs-attr\">attrs</span>: &#123;<span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"com_1003_con\"</span>&#125;&#125;),</span><br><span class=\"line\">            _v(<span class=\"hljs-string\">\" \"</span>),</span><br><span class=\"line\">            _c(<span class=\"hljs-string\">'div'</span>, &#123;<span class=\"hljs-attr\">attrs</span>: &#123;<span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"com_1004_con\"</span>&#125;&#125;)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过观察可以发现，这里都是生成的div元素，div上的属性都是静态属性，由此我们可以自己实现一个简单的“编译”函数，不用走vue的编译：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">simpleCompile</span>(<span class=\"hljs-params\">comList</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">genTree</span>(<span class=\"hljs-params\">tree</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">''</span>;</span><br><span class=\"line\">               <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = tree.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                   <span class=\"hljs-keyword\">var</span> node = tree[i];</span><br><span class=\"line\">                   <span class=\"hljs-keyword\">var</span> comId = node.id;</span><br><span class=\"line\">                   html += <span class=\"hljs-string\">`_c('div',&#123;attrs:&#123;\"id\":\"<span class=\"hljs-subst\">$&#123;comId&#125;</span>_con\"&#125;&#125;,[`</span>;</span><br><span class=\"line\">                   html = html + compiledComTplMap[comId] + <span class=\"hljs-string\">'])'</span>;  <span class=\"hljs-comment\">//  compiledComTplMap[comId] 该组件对应的编译后的样式模版</span></span><br><span class=\"line\">                   <span class=\"hljs-keyword\">if</span> (node.child &amp;&amp; node.child.length) &#123;</span><br><span class=\"line\">                       html += <span class=\"hljs-string\">`,_c('div',&#123;staticClass:\"childBox\",attrs:&#123;\"mpm_edit_child_box\":\"\",\"tabpid\":\"<span class=\"hljs-subst\">$&#123;comId&#125;</span>\"&#125;&#125;,[`</span> + genTree(node.child) + <span class=\"hljs-string\">`])`</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   html += (i === len - <span class=\"hljs-number\">1</span>)  ? <span class=\"hljs-string\">''</span> : <span class=\"hljs-string\">','</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"hljs-keyword\">return</span> html;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"hljs-keyword\">return</span> genTree(comList);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经测试，这样简单“编译”之后生成的代码跟之前编译的代码是一样的，在预发布环境测试了多个页面之后，页面渲染也没有问题。去掉Vue模版编译之后整个组件渲染的逻辑就变成了下面这样：</p>\n<p><img src=\"http://img20.360buyimg.com/jdphoto/jfs/t1/82696/9/8802/16350/5d6a29c5E152a9038/4cda63f70692af88.png\" alt></p>\n<p>Vue编译优化之后收集cpu数据得到的火焰图如下：</p>\n<p><img src=\"http://img10.360buyimg.com/jdphoto/jfs/t1/51201/27/9284/168200/5d6a29e0E93bfded2/e1781cb019fc35ae.png\" alt></p>\n<p>从火焰图可以看出，原来的那个compile函数调用的横条也消失了，说明优化有效果。再看看压测的CPU消耗情况：</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/48621/32/11050/5538/5d822c1eE5ce6a12b/6a950938fe73d8b9.png\" alt></p>\n<p>需要提到的是，由于是自己实现了一个简单版的compile函数，前文中关于compile函数调用优化的代码，也直接去掉了，当然也到达了优化的效果。</p>\n<h2 id=\"五-其他优化研究\"><a href=\"#五-其他优化研究\" class=\"headerlink\" title=\"五.其他优化研究\"></a>五.其他优化研究</h2><p>经过上面两次优化之后，剩下最耗性能的地方是JSON解析和Vue渲染了。我们也做了一下研究，但是很可惜，暂时没什么成果，不过我们的探索也可以提一下：<br>1）JSON解析。我们的服务从Redis中读出来的PageData比较大，一般有100多KB，很需要有一个高性能的JSON反序列化的库(即代替JSON.parse)。目前有一个高性能的库<a href=\"https://www.npmjs.com/package/fast-json-stringify\" target=\"_blank\" rel=\"noopener\">fast-json-stringify</a>，但是可惜他是做序列化的（即做的是JSON.stringify做的事情）。我们测试了多个方案，目前原生的JSON.parse函数性能是最好的。<br>2）Vue渲染。有位腾讯的同学提到，<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247485601&amp;idx=1&amp;sn=97a45254a771d13789faed81316b465a\" target=\"_blank\" rel=\"noopener\">用string-based的模板代替VirtualDom的渲染方案提升性能</a>,不过他忽略了一点，Vue是完全的组件化的、是有生命周期钩子、方法、计算属性等，不是一个简简单单的模板引擎，按照他的思路是需要把生命周期的钩子、方法、计算属性等全部算好后拿到的数据对象，再跟string-based模板结合才能渲染，这个显然是和组件化的思路背道而驰的。</p>\n<p>上面2点，各位看官如果有好的思路，欢迎不吝赐教！</p>\n<h2 id=\"六-总结\"><a href=\"#六-总结\" class=\"headerlink\" title=\"六.总结\"></a>六.总结</h2><p>这次优化总的来说，CPU性能消耗得到了有效优化，整体提升了大概20%，一方面为公司节省了资源，另外一方面也减少了因流量暴涨导致我们要扩容的几率，一举两得。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：肖睦群、李刚松</p>\n</blockquote>\n<h2 id=\"一-问题背景\"><a href=\"#一-问题背景\" class=\"headerlink\" title=\"一.问题背景\"></a>一.问题背景</h2><p>MPM（Market Page Maker）是京东社交电商部的组件化的页面可视化搭建平台，于2016年9月份上线，平均每周150+个页面，目前已经成为社交电商部的一个核心系统。系统使用Vue.js作为组件化的基础框架,并于2017年5月份上线了Node.js直出服务。MPM的页面会被运营同学拿到各种渠道投放，整体流量很不稳定，对于流量的暴涨情况要能够及时处理，这对于开发同学来说是一个比较烦的工作。</p>\n<p>前几天突然收到告警信息，由于运营同学将某个MPM活动页面投放了外部广告，直出服务流量大涨，服务器CPU使用率达到了80%以上，于是立马申请扩容，问题虽解决，但是留给了我们一个问题：直出服务能否优化，这次量级的流量进来之后，是否可以稳定支撑而不需要扩容？</p>","more":"<h2 id=\"二-分析方法及问题点\"><a href=\"#二-分析方法及问题点\" class=\"headerlink\" title=\"二.分析方法及问题点\"></a>二.分析方法及问题点</h2><p>由于本次告警问题主要是流量暴涨导致的CPU使用率过大，我们本次重点优化服务的CPU消耗性能。分析CPU消耗的方法有<a href=\"https://juejin.im/post/5d43a41cf265da03d60ee128\" target=\"_blank\" rel=\"noopener\">多种</a>,我们选择其中操作比较简单的<a href=\"https://www.npmjs.com/package/v8-profiler\" target=\"_blank\" rel=\"noopener\">v8-profiler</a>方案：安装NPM包v8-profiler，在直出服务中添加监控代码，打包发布到预发布环境进行压测，收集监控数据再进行分析。监控代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> profiler = <span class=\"built_in\">require</span>(<span class=\"string\">'v8-profiler'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cpuProf</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'开始收集CPU数据'</span>);</span><br><span class=\"line\">        profiler.startProfiling(<span class=\"string\">'CPU profile'</span>);</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">const</span> profile = profiler.stopProfiling();</span><br><span class=\"line\">            profile.export(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">                fs.writeFileSync(<span class=\"string\">'profile.json'</span>, result);</span><br><span class=\"line\">                profile.delete();</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'CPU数据收集完成'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">5</span>);<span class=\"comment\">//监控数据采集5分钟</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>上述代码会采集服务端5分钟的CPU消耗数据，并生成一个JSON文件，将此文件下载到本地后，导入到在线分析网址<a href=\"https://www.speedscope.app/\" target=\"_blank\" rel=\"noopener\">https://www.speedscope.app/</a> （或者用Chrome DevTool也可以），可以看到火焰图如下：</p>\n<p><img src=\"http://img30.360buyimg.com/jdphoto/jfs/t1/47038/8/11206/219858/5d822841Ef77c142f/5cb0763cbc61ecce.png\" alt></p>\n<p>从火焰图可以看到函数的调用栈，从上而下就是调用栈，其中横条长度越长代表这占用cpu的时间越长。如果某个横条很长，但是下面又没有很细小的子调用，一般就表示该调用消耗时间比较长，可以考虑做优化。从图中我们可以看到，消耗性能的主要有几个地方：<br>1）replace函数<br>2）compile函数<br>3）parse函数<br>4）vue渲染</p>\n<p>为了方便后文的分析，我们先了解一下直出服务的处理过程：</p>\n<table>\n    <thead>\n        <tr>\n            <th style=\"width: 80px\">步骤</th>\n            <th>处理流程</th>\n            <th style=\"width: 150px\">资源消耗类型</th>\n            <th>备注</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1</td>\n            <td>服务收到请求，解析页面参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>从Redis中读取页面数据(PageData)</td>\n            <td>网络IO</td>\n            <td>PageData包括页面的各种配置信息，如页面头尾模板、页面楼层信息、身份判断要求、组件元数据等</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>解析PageData</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>4</td>\n            <td>组装后端请求参数</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n        <tr>\n            <td>5</td>\n            <td>发起后端请求并等待返回</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>6</td>\n            <td>解析后端接口返回的JSON数据</td>\n            <td>CPU计算</td>\n            <td></td>\n        </tr>\n         <tr>\n            <td>7</td>\n            <td>页面模板构造</td>\n            <td>CPU计算</td>\n            <td>由于存在用户身份判断（如某些组件仅对新人可见）、楼层BI等原因，组件的容器是动态构造的</td>\n        </tr>\n         <tr>\n            <td>8</td>\n            <td>组件渲染</td>\n            <td>CPU计算</td>\n            <td>此处的组件渲染是Vue组件的服务端渲染</td>\n        </tr>\n         <tr>\n            <td>9</td>\n            <td>吐出页面HTML</td>\n            <td>网络IO</td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n\n<h2 id=\"三-replace函数调用优化\"><a href=\"#三-replace函数调用优化\" class=\"headerlink\" title=\"三.replace函数调用优化\"></a>三.replace函数调用优化</h2><p>分析具体的replace函数调用之前，我们先详细分析一下上面表格的第7步:页面模板构造。</p>\n<h3 id=\"1-页面模板构造\"><a href=\"#1-页面模板构造\" class=\"headerlink\" title=\"1.页面模板构造\"></a>1.页面模板构造</h3><p>由于存在用户身份判断（如某些组件仅对新人或者VIP用户可见）、楼层BI（每个用户展示的楼层顺序都不一样）等原因，相同页面对于不同的用户展示的组件数量、顺序都是不一样（即千人千面），因此页面的模板是基于各个组件的模板动态构造的。为方便对组件进行操作，每个组件都有一个div容器，容器构造很简单，示例代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1001'</span>&gt;</span>__vue_com_1001_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1002'</span>&gt;</span>__vue_com_1002_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1003'</span>&gt;</span>__vue_com_1003_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1004'</span>&gt;</span>__vue_com_1004_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>vue_com_1001_replace</strong>这种是占位符，需要用相应位置的组件的实际模板来替换。但是这里有个问题，<br>Vue渲染的时候，使用<a href=\"https://cn.vuejs.org/v2/guide/render-function.html\" target=\"_blank\" rel=\"noopener\">Render Function</a>进行渲染的，并不是普通的字符串模板或者Vue模板。下面是一段模板编译后的Render Function：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_c(<span class=\"string\">'commontag'</span>,&#123;<span class=\"attr\">ref</span>:<span class=\"string\">\"__uid__replace__str__\"</span>,<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"uid\"</span>:<span class=\"string\">\"__uid__replace__str__\"</span>,<span class=\"string\">\"params\"</span>:params___uid__replace__str__&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'div'</span>,[(<span class=\"literal\">true</span>)?[(params.transparent != <span class=\"number\">1</span>)?_c(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">staticClass</span>:<span class=\"string\">\"vueSeparator\"</span>,<span class=\"attr\">style</span>:(&#123;<span class=\"string\">'background-color'</span>:params.color,  <span class=\"attr\">height</span>: params.height + <span class=\"string\">'px'</span>&#125;)&#125;):_c(<span class=\"string\">'div'</span>,&#123;<span class=\"attr\">staticClass</span>:<span class=\"string\">\"vueSeparator\"</span>,<span class=\"attr\">style</span>:(&#123;<span class=\"attr\">height</span>: params.height + <span class=\"string\">'px'</span>&#125;)&#125;)]:_e()],<span class=\"number\">2</span>)&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>若使用的是Vue模板，则会在运行时做一次编译，编译为Render Function，比较耗性能，因此官方推荐的做法是在<a href=\"https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91\" target=\"_blank\" rel=\"noopener\">构建时预编译</a>，并且运行时使用不包含编译函数的<a href=\"https://cn.vuejs.org/v2/guide/deployment.html#%E4%B8%8D%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\" target=\"_blank\" rel=\"noopener\">精简版</a>。目前MPM每个组件存储到Redis中的也是Render Function，而不是原始的Vue模板。所以现在的问题是，已知子组件编译后的Render Function，并且知道各个组件的DOM结构形式的容器，能否构造出父组件的Render Function？</p>\n<p>答案当然是可以：<em>可以通过字符串操作，构造出父组件的Render Function！</em></p>\n<p>我们以下面这段代码为例，看看构造过程（为了简单处理，我们用了内联模板）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ParentComponent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SubComponent1</span> <span class=\"attr\">inline-template</span> <span class=\"attr\">:param</span>=<span class=\"string\">\"data.sub1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is SubComponent1&#123;&#123;param.name&#125;&#125;<span class=\"tag\">&lt;/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">SubComponent1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SubComponent2</span> <span class=\"attr\">inline-template</span> <span class=\"attr\">:param</span>=<span class=\"string\">\"data.sub2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is SubComponent2&#123;&#123;param.name&#125;&#125;<span class=\"tag\">&lt;/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">SubComponent2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SubComponent3</span> <span class=\"attr\">inline-template</span> <span class=\"attr\">:param</span>=<span class=\"string\">\"data.sub3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is SubComponent3&#123;&#123;param.name&#125;&#125;<span class=\"tag\">&lt;/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">SubComponent3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ParentComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码经过Vue.compile函数编译处理后，会得到一个包含render和staticRenderFns两个属性的对象，我们主要看render属性，它是一个匿名函数，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'ParentComponent'</span>,[_c(<span class=\"string\">'SubComponent1'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"param\"</span>:data.sub1&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(<span class=\"string\">\"this is SubComponent1\"</span>+_s(param.name)+<span class=\"string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"string\">\" \"</span>),_c(<span class=\"string\">'SubComponent2'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"param\"</span>:data.sub2&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(<span class=\"string\">\"this is SubComponent2\"</span>+_s(param.name)+<span class=\"string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"string\">\" \"</span>),_c(<span class=\"string\">'SubComponent3'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"param\"</span>:data.sub3&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(<span class=\"string\">\"this is SubComponent3\"</span>+_s(param.name)+<span class=\"string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;)],<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将上面的代码再格式化一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> </span><br><span class=\"line\">_c(<span class=\"string\">'ParentComponent'</span>,</span><br><span class=\"line\">[</span><br><span class=\"line\">_c(<span class=\"string\">'SubComponent1'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"param\"</span>:data.sub1&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(<span class=\"string\">\"this is SubComponent1\"</span>+_s(param.name)+<span class=\"string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">_c(<span class=\"string\">'SubComponent2'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"param\"</span>:data.sub2&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(<span class=\"string\">\"this is SubComponent2\"</span>+_s(param.name)+<span class=\"string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;),_v(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">_c(<span class=\"string\">'SubComponent3'</span>,&#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">\"param\"</span>:data.sub3&#125;,<span class=\"attr\">inlineTemplate</span>:&#123;<span class=\"attr\">render</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _c(<span class=\"string\">'p'</span>,[_v(<span class=\"string\">\"this is SubComponent3\"</span>+_s(param.name)+<span class=\"string\">\"\\n\\t\"</span>)])&#125;&#125;,<span class=\"attr\">staticRenderFns</span>:[]&#125;&#125;)</span><br><span class=\"line\">],<span class=\"number\">1</span>)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到上面第4、5、6行代码，就是子组件的Render Function，他们包裹在一个数组里。因此，如果知道子组件的Render Function，配合形如下面的模板，就可以反过来构造出父组件的Render Function（当然有一个从字符串到函数的反序列化过程，但是在我们的场景这个不可避免，因为模板是从Redis中读取出来的）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function anonymous() &#123;</span><br><span class=\"line\">with(this)&#123;return </span><br><span class=\"line\">_c(&apos;ParentComponent&apos;,</span><br><span class=\"line\">[</span><br><span class=\"line\">__SubComponent1_replace__,</span><br><span class=\"line\">__SubComponent2_replace__,</span><br><span class=\"line\">__SubComponent3_replace__</span><br><span class=\"line\">],1)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再回到我们的问题，我们已知子组件的Render Function，并且已知父组件的容器，需要构造出父组件的Render Function。现在思路就很清晰了，我们只需要把开头那段包含占位符的div容器代码，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1001'</span>&gt;</span>__vue_com_1001_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1002'</span>&gt;</span>__vue_com_1002_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1003'</span>&gt;</span>__vue_com_1003_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'com_1004'</span>&gt;</span>__vue_com_1004_replace__<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Vue.compile函数将其编译成Render Function，处理成字符串后，再通过正则替换其中的子组件的占位符，变成子组件模板，最后反序列化为父组件的Render Function即可。整体处理逻辑如下：<br><img src=\"http://img14.360buyimg.com/jdphoto/jfs/t1/68669/10/8822/43844/5d6a26f2Ee7fef972/26e976b89d95b4b6.png\" alt></p>\n<h3 id=\"2-问题代码分析\"><a href=\"#2-问题代码分析\" class=\"headerlink\" title=\"2.问题代码分析\"></a>2.问题代码分析</h3><p>了解了上述处理过程，我们再根据火焰图中的调用栈，找到replace函数调用的问题代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(MPM_COM_STYLE_MAP).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">comId</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> styleKey = MPM_COM_STYLE_MAP[comId];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> code = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hideComIds.indexOf(comId)!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        code = HIDE_TPL;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(loadingComs.indexOf(comId)!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        code = LOADING_TPL;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(MPM_STYLE_TPL_MAP[styleKey]) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 第一次replace替换</span></span><br><span class=\"line\">        code = MPM_STYLE_TPL_MAP[styleKey].replace(<span class=\"regexp\">/__uid__replace__str__/g</span>, comId); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">'最终替换，发现无模板组件'</span>,comId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(code) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//第二次replace替换</span></span><br><span class=\"line\">    \tcompileTpl = compileTpl.replace(<span class=\"string\">`_v(\"__vue__<span class=\"subst\">$&#123;comId&#125;</span>__replace__\")`</span>,code);</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到有两次replace函数调用，第一次是组件ID替换（即uid替换），第二次是组件模板替换。</p>\n<p>先分析第一次replace函数调用。<br>前面提到，每个组件的模板已经编译为Render Function并存在Redis中。但是同一个组件在页面中可能有多个实例，每个实例需要有一个ID来区分，我们称为uid（unique ID的意思），uid只有在运行的时候才生成，在编译的时候是不知道的，因此用了一个占位符（即下图中的<pre><strong>uid</strong>replace__str__</pre>），在直出服务中需要做替换，即上面代码中的uid替换。下面是一段编译后的代码：</p>\n<p><img src=\"http://img14.360buyimg.com/jdphoto/jfs/t1/50259/1/9401/126883/5d6a2717E0073a113/e036f07b0e515c3b.png\" alt></p>\n<p>每个页面会有很多个组件（数十个甚至上百个），每次替换都是在之前替换的结果之上进行的，形成了循环替换，前面导致告警的那个页面用到的编译之后的模版最大的有20+KB，而每次正则替换之后的模版会越来越长，所以这里耗时较多也就不奇怪了。</p>\n<p>从逻辑上讲，这段代码是必不可少的，但是又有性能瓶颈，如何优化？</p>\n<h3 id=\"3-uid替换优化\"><a href=\"#3-uid替换优化\" class=\"headerlink\" title=\"3.uid替换优化\"></a>3.uid替换优化</h3><p>我们研究发现：对于比较长的字符串，先用字符串的split方法分割成数组，再用数组的join方法将切割的数组合并为一个字符串，比正则替换的效率要高。此法我们称为数组粘合法。以下为测试代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> exeCount = <span class=\"number\">10000000</span>;   <span class=\"comment\">//执行次数,此处分别换成1W、10W、100W、1000W</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试字符串，需要比较长的字符串才能看到效果，下面是从我们的组件模板中摘取的一段</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`_c('ds',&#123;ref:\"__uid__replace__str__\",attrs:&#123;\"uid\":\"__uid__replace__str__\",\"params\":params___uid__replace__str__,\"tab-index\":\"3\"&#125;,inlineTemplate:&#123;render:function()&#123;with(this)&#123;return _c('div',&#123;attrs:&#123;\"stylkey\":data.styleKey,\"pc\":data.pc,\"actid\":data.actid,\"areaid\":data.areaid&#125;&#125;,[_c('ul',&#123;directives:[&#123;name:\"getskuad\",rawName:\"v-getskuad\",value:(&#123;bindObj:data, appendName:'skuAd', show: params.extend.showAds&#125;),expression:\"&#123;bindObj:data, appendName:'skuAd', show: params.extend.showAds&#125;\"&#125;],staticClass:\"pinlei_g3col\"&#125;,[(true)?_l((params.fnObj.translate(data.itemList)),function(item,index)&#123;return (!params.shownum || index &lt; params.shownum || data.showMore)?_c('li',&#123;class:['pinlei_g3col_col', (params.extend.imgSize == '1' ? 'size_230x230' : 'size_230x320')],attrs:&#123;\"index\":index&#125;&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_img\"&#125;,[_c('a',&#123;attrs:&#123;\"href\":params.extend.buttonType == '5' ? addRd(goPingouUrl(item.sUrl),params.ptag) : addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('img',&#123;attrs:&#123;\"init_src\":getImgUrl('//img12.360buyimg.com/mcoss/'+ item.sPicturesUrl),\"data-size\":\"230x230\"&#125;&#125;)]),((params.extend.sellOut != '0') &amp;&amp; (item.dwStock - 0 &gt; 0))?_c('div',&#123;staticClass:\"pinlei_g3col_msk\"&#125;,[_m(0,true)]):_e()]),_c('div',&#123;staticClass:\"pinlei_g3col_info\"&#125;,[_c('div',&#123;class:['pinlei_g3col_t1', 'red', (params.extend.titleHeight == '1' ? 'oneline' : '')]&#125;,[_v(\"\\n                                \"+_s(item.sProductName)+\"\\n                            \")]),(!params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',&#123;staticClass:\"pinlei_g3col_price red\",style:(&#123;color: params.extend.isShowTokenPrice == '1' &amp;&amp; item.dwTokenPrice &amp;&amp; (Number(item.dwTokenPrice) != 0)?'#888':''&#125;)&#125;,[_v(\"\\n                                ￥\"),_c('b',[_v(_s(item.dwRealTimePrice.split('.')[0]))]),_v(\".\"+_s(item.dwRealTimePrice.split('.')[1])+\"\\n                            \")]):_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?_c('div',&#123;staticClass:\"pinlei_g3col_price red\",style:(&#123;color: params.extend.isShowTokenPrice == '1' &amp;&amp; item.dwTokenPrice &amp;&amp; (Number(item.dwTokenPrice) != 0)?'#888':''&#125;)&#125;,[_v(\"\\n                                ￥\"),_c('b',[_v(_s(params.fnObj.getYushouInt(item, params.extend.priceType)))]),_v(_s(params.fnObj.getYushouDecimal(item, params.extend.priceType))+\"\\n                            \")]):_e(),(params.extend.isShowTokenPrice == '1')?[_c('div',&#123;staticClass:\"pinlei_g3col_token\"&#125;,[(item.dwTokenPrice &amp;&amp; (Number(item.dwTokenPrice) != 0))?_c('div',&#123;staticClass:\"pinlei_g3col_token_price\"&#125;,[_v(\"专属价:￥\"),_c('b',[_v(_s(parseFloat(item.dwTokenPrice)))])]):_e()])]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',&#123;staticClass:\"pinlei_g3col_desc red\"&#125;,[(item.sBackUpWords[0] &amp;&amp; (params.fnObj.getYushouJiaDiff(item,params.extend.priceType) &gt; 0))?[_v(\"比现在买省\"+_s(params.fnObj.getYushouJiaDiff(item,params.extend.priceType))+\"元\")]:(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' &amp;&amp; item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[_c('div',&#123;staticClass:\"pinlei_g3col_desc red\"&#125;,[(item.sTag)?[_v(_s(item.sTag.split('|')[0]))]:(params.extend.showAds == '1' &amp;&amp; item.skuAd)?[_v(_s(item.skuAd))]:_e()],2)]:_e(),(params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonType == '0')?[(params.extend.priceType == '1')?_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId&#125;),expression:\"&#123;skuId: item.ddwSkuId&#125;\"&#125;],class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e(),(params.extend.priceType == '0')?_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId&#125;),expression:\"&#123;skuId: item.ddwSkuId&#125;\"&#125;],class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'right': item.sBackUpWords[2]&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_e()]:_e(),(params.extend.buttonType == '1')?[_c('a',&#123;attrs:&#123;\"href\":addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('div',&#123;class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '5')?[_c('a',&#123;attrs:&#123;\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)&#125;&#125;,[_c('div',&#123;class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '2')?[_c('a',&#123;attrs:&#123;\"href\":addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('div',&#123;class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime)&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                            定金\"+_s(item.sBackUpWords[1].split('+')[0])+\"抵\"+_s(parseFloat((item.sBackUpWords[1].split('+')[1] * item.sBackUpWords[1].split('+')[0]).toFixed(2)))+\"\\n                                        \")])])]:_e(),(params.extend.buttonType == '3')?[_c('div',&#123;directives:[&#123;name:\"yuyue\",rawName:\"v-yuyue\",value:(&#123;bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;),expression:\"&#123;bindObj:data,stop:true, activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;\"&#125;],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:&#123;\"yuyueid\":params.extend.yuyueID&#125;&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '4' )?[((params.fnObj.getYushouJiaDiff(item,params.extend.priceType)&gt; 0))?_c('div',&#123;directives:[&#123;name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:(&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;,actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3&#125;),expression:\"&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,appendTo:item,ignoreHistory:true,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;,actPrice:params.fnObj.getYushouInt(item, params.extend.priceType)+params.fnObj.getYushouDecimal(item, params.extend.priceType),classId:item.classId1+'_'+item.classId2+'_'+item.classId3&#125;\"&#125;],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")]):_c('div',&#123;directives:[&#123;name:\"skuyuyue\",rawName:\"v-skuyuyue\",value:(&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;&#125;),expression:\"&#123;bindObj:data,stop:true, skuId:item.ddwSkuId,ignoreHistory:true,appendTo:item,msg:&#123;success: '预约成功，请留意京东JD.COM服务号的活动提醒',exist: '已设置预约，无需再进行设置',systemError: '该商品不是预约活动商品'&#125;&#125;\"&#125;],class:['pinlei_g3col_btn','blue', item.state == 1 ? 'disabled' : ''],style:(params.extend.priceType == 0?'border-radius: 24px;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonType == '6' )?[_c('div',&#123;directives:[&#123;name:\"yuyue\",rawName:\"v-yuyue\",value:(&#123;bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;),expression:\"&#123;bindObj:data,stop:true,noTip:true,activeId:params.extend.yuyueID,appendTo:item,appendName:'state',msg:[]&#125;\"&#125;,&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: &#123;skuId: item.ddwSkuId,successTxt:'预约加车成功'&#125;&#125;),expression:\"&#123;skuId: &#123;skuId: item.ddwSkuId,successTxt:'预约加车成功'&#125;&#125;\"&#125;],class:&#123;'pinlei_g3col_btn':true, 'blue':params.extend.beginTime, 'red':(!params.extend.beginTime), 'left': params.fnObj.getCouponInfo(item.sBackUpWords[2])&#125;,style:(params.extend.priceType == 0?'border-radius: 24px;':''),attrs:&#123;\"yuyueid\":params.extend.yuyueID&#125;&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonWording)+\"\\n                                    \")])]:_e()]:_e(),(!params.fnObj.isBeforeActive(params.extend.beginTime))?[(params.extend.buttonActiveType == '0')?[_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId&#125;),expression:\"&#123;skuId: item.ddwSkuId&#125;\"&#125;],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e(),(params.extend.buttonActiveType == '1')?[_c('a',&#123;attrs:&#123;\"href\":addRd(item.sUrl,params.ptag)&#125;&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '2')?[_c('a',&#123;attrs:&#123;\"href\":addRd(goPingouUrl(item.sUrl),params.ptag)&#125;&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_btn red\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                            \"+_s(params.extend.buttonActiveWording)+\"\\n                                        \")])])]:_e(),(params.extend.buttonActiveType == '4')?[_c('div',&#123;directives:[&#123;name:\"addcart\",rawName:\"v-addcart\",value:(&#123;skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true&#125;),expression:\"&#123;skuId: item.ddwSkuId, bindObject: item, bindPropertyName: 'addCartMsg', isPullQuan: true&#125;\"&#125;,&#123;name:\"quan\",rawName:\"v-quan\",value:(&#123;bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:&#123;&#125;, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:&#123;value: params.extend.price, gate: params.extend.gate, name: params.extend.name&#125;&#125;),expression:\"&#123;bindObj:data,key:params.extend.key, level:params.extend.level, num:1, msg:&#123;&#125;, appendTo:item, appendName:'status', ignoreHistory:false, style:2, successUrl:item.successUrl, type:1, coupondes:&#123;value: params.extend.price, gate: params.extend.gate, name: params.extend.name&#125;&#125;\"&#125;],staticClass:\"pinlei_g3col_btn\",style:(params.extend.priceType == 0?'border-radius: 24px;background-color: #ea1e54;':'')&#125;,[_v(\"\\n                                        \"+_s(params.extend.buttonActiveWording)+\"\\n                                    \")])]:_e()]:_e()],2),(params.extend.corner != '0')?[(isRange(params.extend.cornerBegin, params.extend.cornerEnd) &amp;&amp; params.extend.cornerDes)?_c('div',&#123;staticClass:\"pinlei_g3col_stamp red\"&#125;,[_v(_s(params.extend.cornerDes))]):(item.sCopyWriting)?_c('div',&#123;staticClass:\"pinlei_g3col_stamp red\"&#125;,[_v(_s(item.sCopyWriting))]):_e()]:_e()],2):_e()&#125;):_e()],2),(params.shownum &amp;&amp; data.itemList.length &gt; params.shownum)?[_c('div',&#123;class:'pinlei_more '+ (data.showMore?'pinlei_more_unfold':''),on:&#123;\"click\":function($event)&#123;toggleMore($event)&#125;&#125;&#125;,[_v(_s(data.showMore?'收起更多':'展开更多'))])]:_e()],2)&#125;&#125;,staticRenderFns:[function()&#123;with(this)&#123;return _c('div',&#123;staticClass:\"pinlei_g3col_msk_ico\"&#125;,[_c('div',&#123;staticClass:\"pinlei_g3col_msk_text\"&#125;,[_v(\"\\n                                        已抢光\\n                                        \"),_c('br'),_v(\"over\\n                                    \")])])&#125;&#125;]&#125;&#125;)`</span></span><br><span class=\"line\"><span class=\"comment\">//正则替换法start</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeStart = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; exeCount; i++) &#123;</span><br><span class=\"line\">    str.replace(<span class=\"regexp\">/__uid__replace__str__/g</span>, <span class=\"string\">'com_1001'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> timeEnd = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'正则替换耗时：'</span>, timeEnd - timeStart);</span><br><span class=\"line\"><span class=\"comment\">//正则替换法end</span></span><br><span class=\"line\"><span class=\"comment\">//数组粘合法start</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeStart2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"keyword\">const</span> segs = str.split(<span class=\"string\">'__uid__replace__str__'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; exeCount; i++) &#123;</span><br><span class=\"line\">    segs.join(<span class=\"string\">'com_1001'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> timeEnd2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'数组粘贴耗时：'</span>, timeEnd2 - timeStart2);</span><br><span class=\"line\"><span class=\"comment\">//数组粘合法end</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<table>\n    <thead>\n        <tr>\n            <th>执行次数</th>\n            <th>正则替换法耗时(ms)</th>\n            <th>数组粘合法耗时(ms)</th>\n            <th>正则替换法耗时/数组粘合法耗时</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>1W</td>\n            <td>42</td>\n            <td>25</td>\n            <td>1.68</td>\n        </tr>\n        <tr>\n            <td>10W</td>\n            <td>362</td>\n            <td>179</td>\n            <td>2.01</td>\n        </tr>\n        <tr>\n            <td>100W</td>\n            <td>3555</td>\n            <td>1623</td>\n            <td>2.2</td>\n        </tr>\n        <tr>\n            <td>1000W</td>\n            <td>36449</td>\n            <td>18634</td>\n            <td>1.95</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>可以看到数组粘合法的耗时是正则替换法的一半左右。</p>\n<p>考虑到我们的场景就是字符串比较大，存在循环替换，且是海量服务的场景，因此上面第一次替换，直接改成数组粘合法即可。</p>\n<h3 id=\"4-组件模板替换优化\"><a href=\"#4-组件模板替换优化\" class=\"headerlink\" title=\"4.组件模板替换优化\"></a>4.组件模板替换优化</h3><p>问题代码中的第二次替换，是将容器里的组件占位符替换为子组件的Render Function。即下图所示：<br><img src=\"http://img30.360buyimg.com/jdphoto/jfs/t1/74148/30/8785/25337/5d6a2749Ec383dbe6/e17d1fd59ffb9ffb.png\" alt><br>子模板替换优化的替换次数其实是跟组件的数量相关的，即使有150个组件，用数组粘合法也不会有明显的性能提升，因此需要考虑别的办法。</p>\n<p>我们查了一下vue-template-compiler的源码(Vue的compile能力也是用此模块)，发现Vue.compile的函数有2个参数，第一个参数是待编译的Vue模板，第二个参数是一个option对象，包含一个名为tansformCode钩子函数(参见资料<a href=\"https://github.com/vuejs/vue/blob/dev/flow/compiler.js#L38-L45\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue/blob/dev/flow/compiler.js#L38-L45</a> ，此参数并未在官网的文档中暴露，关于此函数的用处后面可以再写一篇文章) ，这个钩子函数接受两个参数，第一个是ast节点，第二个是编译该节点之后的render code，而该函数的返回值会就是最终的render code。于是在之前的生成dom函数那里把com占位符替换为一个空的div元素，div元素的id为之前的占位符，然后在编译的时候在transformCode钩子函数这里做一个替换，当发现ast节点为div并且id符合组件占位符的规则，那么就返回该组件对应的编译之后样式模版。具体代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compileTpl = compiler.compile(<span class=\"string\">`&lt;div&gt;<span class=\"subst\">$&#123;html&#125;</span>&lt;/div&gt;`</span>, &#123;</span><br><span class=\"line\">            modules: &#123;</span><br><span class=\"line\">                transformCode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, code</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (el.attrsMap &amp;&amp; el.attrsMap[<span class=\"string\">'id'</span>] &amp;&amp; el.attrsMap[<span class=\"string\">'id'</span>].match(<span class=\"regexp\">/__vue__com_\\d&#123;4,5&#125;__replace__/</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> comId = el.attrsMap[<span class=\"string\">'id'</span>].match(<span class=\"regexp\">/com_\\d&#123;4,5&#125;/</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                        <span class=\"comment\">// console.log('--------------------------------', comId);</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> styleTemplate  = compiledComTplMap[comId];</span><br><span class=\"line\">                        <span class=\"comment\">// console.log(styleTemplate);</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> styleTemplate;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).staticRenderFns.toString();</span><br></pre></td></tr></table></figure>\n\n<p>这样一来就完全省去了第二次字符串替换的操作，于是组件编译这里的流程了下面这样：</p>\n<p><img src=\"http://img14.360buyimg.com/jdphoto/jfs/t1/38640/40/15928/32002/5d6a292eEaad87937/abc0a5fc367aa1aa.png\" alt></p>\n<p>这两次优化之后然后重新压测并收集性能数据，得到的火焰图如下：</p>\n<p><img src=\"http://img10.360buyimg.com/jdphoto/jfs/t1/66970/39/8617/181855/5d6a2946E9c484381/74f6f67e08202a17.png\" alt></p>\n<p>可以看到createApp函数里面原来的那个replace函数的横条已经消失不见了，说明前面的优化是有效果的，最耗时的操作已经不是replace而是vue的compile方法即模版的编译。从此次优化前后的服务端压测的CPU数据也能说明问题：</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/49916/11/11130/3999/5d822beeE7e542e78/799ef88b1705dca9.png\" alt></p>\n<h2 id=\"四-compile函数调用优化\"><a href=\"#四-compile函数调用优化\" class=\"headerlink\" title=\"四.compile函数调用优化\"></a>四.compile函数调用优化</h2><p>compile函数调用，就是前面”组件模板构造”那一节提到的，将组件的容器模板用Vue.compile函数编译成Render Function，虽然这段容器模板很简单，但是他是一个很耗性能的操作。而且这是Vue自身提供的能力，似乎已经没有多大的优化余地了。有没有其他优化方法呢？</p>\n<p>仔细观察一下组件容器dom以及编译之后的代码，似乎是有规律的。如果组件树的结构是下面这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"string\">\"com_1001\"</span>&#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"string\">\"com_1002\"</span>,</span><br><span class=\"line\">        child: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"string\">\"com_1003\"</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"string\">\"com_1004\"</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>拼接之后的html内容大概是下面这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"com_1001_con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"com_1002_con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">mpm_edit_child_box</span> <span class=\"attr\">tabpid</span>=<span class=\"string\">\"com_1002\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"childBox\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"com_1003_con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"com_1004_con\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里一般都只是一些简单的模版，编译出来大概是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _c(<span class=\"string\">'div'</span>, [</span><br><span class=\"line\">        _c(<span class=\"string\">'div'</span>, &#123;<span class=\"attr\">attrs</span>: &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"com_1001_con\"</span>&#125;&#125;),</span><br><span class=\"line\">        _v(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">        _c(<span class=\"string\">'div'</span>, &#123;<span class=\"attr\">attrs</span>: &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"com_1002_con\"</span>&#125;&#125;),</span><br><span class=\"line\">        _v(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">        _c(<span class=\"string\">'div'</span>, &#123;<span class=\"attr\">staticClass</span>: <span class=\"string\">\"childBox\"</span>, <span class=\"attr\">attrs</span>: &#123;<span class=\"string\">\"mpm_edit_child_box\"</span>: <span class=\"string\">\"\"</span>, <span class=\"string\">\"tabpid\"</span>: <span class=\"string\">\"com_1002\"</span>&#125;&#125;, [</span><br><span class=\"line\">            _c(<span class=\"string\">'div'</span>, &#123;<span class=\"attr\">attrs</span>: &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"com_1003_con\"</span>&#125;&#125;),</span><br><span class=\"line\">            _v(<span class=\"string\">\" \"</span>),</span><br><span class=\"line\">            _c(<span class=\"string\">'div'</span>, &#123;<span class=\"attr\">attrs</span>: &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"com_1004_con\"</span>&#125;&#125;)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过观察可以发现，这里都是生成的div元素，div上的属性都是静态属性，由此我们可以自己实现一个简单的“编译”函数，不用走vue的编译：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">simpleCompile</span>(<span class=\"params\">comList</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">genTree</span>(<span class=\"params\">tree</span>) </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = tree.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> node = tree[i];</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> comId = node.id;</span><br><span class=\"line\">                   html += <span class=\"string\">`_c('div',&#123;attrs:&#123;\"id\":\"<span class=\"subst\">$&#123;comId&#125;</span>_con\"&#125;&#125;,[`</span>;</span><br><span class=\"line\">                   html = html + compiledComTplMap[comId] + <span class=\"string\">'])'</span>;  <span class=\"comment\">//  compiledComTplMap[comId] 该组件对应的编译后的样式模版</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (node.child &amp;&amp; node.child.length) &#123;</span><br><span class=\"line\">                       html += <span class=\"string\">`,_c('div',&#123;staticClass:\"childBox\",attrs:&#123;\"mpm_edit_child_box\":\"\",\"tabpid\":\"<span class=\"subst\">$&#123;comId&#125;</span>\"&#125;&#125;,[`</span> + genTree(node.child) + <span class=\"string\">`])`</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   html += (i === len - <span class=\"number\">1</span>)  ? <span class=\"string\">''</span> : <span class=\"string\">','</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> html;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> genTree(comList);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<p>经测试，这样简单“编译”之后生成的代码跟之前编译的代码是一样的，在预发布环境测试了多个页面之后，页面渲染也没有问题。去掉Vue模版编译之后整个组件渲染的逻辑就变成了下面这样：</p>\n<p><img src=\"http://img20.360buyimg.com/jdphoto/jfs/t1/82696/9/8802/16350/5d6a29c5E152a9038/4cda63f70692af88.png\" alt></p>\n<p>Vue编译优化之后收集cpu数据得到的火焰图如下：</p>\n<p><img src=\"http://img10.360buyimg.com/jdphoto/jfs/t1/51201/27/9284/168200/5d6a29e0E93bfded2/e1781cb019fc35ae.png\" alt></p>\n<p>从火焰图可以看出，原来的那个compile函数调用的横条也消失了，说明优化有效果。再看看压测的CPU消耗情况：</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/48621/32/11050/5538/5d822c1eE5ce6a12b/6a950938fe73d8b9.png\" alt></p>\n<p>需要提到的是，由于是自己实现了一个简单版的compile函数，前文中关于compile函数调用优化的代码，也直接去掉了，当然也到达了优化的效果。</p>\n<h2 id=\"五-其他优化研究\"><a href=\"#五-其他优化研究\" class=\"headerlink\" title=\"五.其他优化研究\"></a>五.其他优化研究</h2><p>经过上面两次优化之后，剩下最耗性能的地方是JSON解析和Vue渲染了。我们也做了一下研究，但是很可惜，暂时没什么成果，不过我们的探索也可以提一下：<br>1）JSON解析。我们的服务从Redis中读出来的PageData比较大，一般有100多KB，很需要有一个高性能的JSON反序列化的库(即代替JSON.parse)。目前有一个高性能的库<a href=\"https://www.npmjs.com/package/fast-json-stringify\" target=\"_blank\" rel=\"noopener\">fast-json-stringify</a>，但是可惜他是做序列化的（即做的是JSON.stringify做的事情）。我们测试了多个方案，目前原生的JSON.parse函数性能是最好的。<br>2）Vue渲染。有位腾讯的同学提到，<a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247485601&amp;idx=1&amp;sn=97a45254a771d13789faed81316b465a\" target=\"_blank\" rel=\"noopener\">用string-based的模板代替VirtualDom的渲染方案提升性能</a>,不过他忽略了一点，Vue是完全的组件化的、是有生命周期钩子、方法、计算属性等，不是一个简简单单的模板引擎，按照他的思路是需要把生命周期的钩子、方法、计算属性等全部算好后拿到的数据对象，再跟string-based模板结合才能渲染，这个显然是和组件化的思路背道而驰的。</p>\n<p>上面2点，各位看官如果有好的思路，欢迎不吝赐教！</p>\n<h2 id=\"六-总结\"><a href=\"#六-总结\" class=\"headerlink\" title=\"六.总结\"></a>六.总结</h2><p>这次优化总的来说，CPU性能消耗得到了有效优化，整体提升了大概20%，一方面为公司节省了资源，另外一方面也减少了因流量暴涨导致我们要扩容的几率，一举两得。</p>"},{"title":"【译】Interection Observer如何观察变化","date":"2019-10-17T03:44:05.000Z","cover":"https://tva1.sinaimg.cn/large/006y8mN6gy1g812gp34euj31900u077e.jpg","thumbnail":"https://tva1.sinaimg.cn/large/006y8mN6gy1g812gp34euj31900u077e.jpg","_content":"\n> 原文地址：https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\n> 原文作者：Travis Almand\n> 翻译：刘辉\n\n有几篇精彩的文章探讨了如何使用`Intersection Observer API`，包括Phil Hawksworth，Preethi和Mateusz Rybczonek等。 我这篇文章将讲一些不一样的东西。 我在今年早些时候有幸向达拉斯VueJS聚会介绍了VueJS过渡组件，我在CSS-Tricks的第一篇文章就是以此为基础的。 在演讲的问答环节中，有人问我基于滚动事件触发过渡怎么样 - 我说当然可以，但是一些听众建议我了解一下`Intersection Observer`。\n\n这让我开始思考。我对`Intersection Observer`有基本的了解，并且能够用其完成简单的示例。 我是否知道它的工作原理而不仅仅是使用它？它到底为我们开发人员提供了什么？ 作为一个资深开发者，我如何向新手甚至不知道它存在的开发者解释它的工作原理？\n<!--more-->\n\n在花了一些时间进行研究，测试和验证后，我决定分享自己学到的东西。\n\n# Intersection Observer 简述\n\nW3C公共工作草案摘要（日期为2017年9月14日的初稿）将`Intersection Observer API`描述为：\n\n> 本规范描述了一个API，可用于了解DOM元素（`targets`）相对于包含元素或顶级视口（`root`）的可见性和位置。 该位置是异步传递的，对于理解元素的可见性以及实现DOM内容的预加载和延迟加载很有用。\n\n这个API的总体思路是提供一种观察子元素并在其进入其父元素之一的边界框内时得到通知的方法。 目标元素滚动到根元素视图中时最常用。 在引入`Intersection Observer`之前，此类功能是通过侦听滚动事件来完成的。\n\n尽管`Intersection Observer`是针对此类功能的更高性能的解决方案，但我不建议我们将其视为滚动事件的替代品。 相反，我建议我们将此API视为与滚动事件在功能上互补的额外工具。 在某些情况下，两者可以一起解决特定的问题。\n\n# 基本示例\n\n我知道我有可能重复其他文章中已经讲过的内容，不过还是让我们先来看一个`Intersection Observer`的基本示例及其提供的能力。\n\nObserver由四部分组成：\n\n1. `root`，是观察者所绑定的父元素，可以是viewport\n2. `target`，它是被观察的子元素，可以有多个\n3. `options`对象，它定义了观察者某些方面的行为\n4. 回调函数，每次观察到父子元素的交集变化时都会调用\n\n\n基本示例的代码如下所示：\n\n```js\nconst options = {\n  root: document.body,\n  rootMargin: '0px',\n  threshold: 0\n}\n\nfunction callback (entries, observer) {\n  console.log(observer);\n  \n  entries.forEach(entry => {\n    console.log(entry);\n  });\n}\n\nlet observer = new IntersectionObserver(callback, options);\nobserver.observe(targetElement);\n\n```\n代码的第一部分是`options`对象，它具有`root`，`rootMargin`和`threshold`属性。\n\n`root`是父元素，一般是有滚动条的元素，其中包含被观察的元素。根据需要，这几乎可以是页面上的任何单个元素。如果不提供该属性，或者该值设置为null，跟元素就是viewport。\n\n`rootMargin`描述了根元素的外边距，由`rootMargin`规定的矩形的每一边都会被添加至root元素的边框盒(bounding box)的相应边。它的行为很像CSS margin属性。你可以使用类似10px 15px 20px的值，这使我们的顶部边距为10px，左侧和右侧边距为15px，底部边距为20px。仅边界框受影响，元素本身不受影响。请记住，唯一允许的长度是像素和百分比值，可以是负数或正数。另请注意，如果root元素不是页面上的实际元素（例如viewport），则`rootMargin`无效。\n\n`threshold`是用于确定何时触发交集改变事件的值。数组中可以包含多个值，以便同一目标可以多次触发交集改变事件。不同的值是使用0到1的百分比，非常类似于CSS中的不透明度，因此将0.5的值视为50％，依此类推。这些值与目标的交叉比例有关，稍后将对其进行说明。阈值为0时，目标元素的第一个像素与根元素相交就会触发交集改变事件。阈值为1时，整个目标元素都在根元素内部时才会触发交集改变事件。\n\n\n代码的第二部分是回调函数，只要观察到交集改变，就会调用该函数。传递了两个参数；`entries`是个数组，代表触发交集更改的每个目标元素。这提供了很多信息为开发人员所用。第二个参数是有关观察者本身的信息。如果目标绑定到多个观察者，可以通过此参数识别是哪个观察者。\n\n代码的第三部分是观察者本身的创建以及观察对象。创建观察者时，回调函数和`options`对象可以放在观察者外部。 如果需要，可以在多个观察者之间使用相同的回调和`options`对象。然后，将需要观察的目标元素传递给`observe()`方法。它只能接受一个目标，但是可以在同一观察者上针对多个目标重复调用该方法。\n\n注意代码中的console.log,可以看看控制台输出了什么。\n\n## 观察者对象\n\n传递给回调函数的观察者数据如下：\n\n```js\nIntersectionObserver\n  root: null\n  rootMargin: \"0px 0px 0px 0px\"\n  thresholds: Array [ 0 ]\n  <prototype>: IntersectionObserverPrototype { }\n\n```\n\n...本质上是创建对象时传递给观察者的选`options`对象。 这可用于确定相交所绑定的根元素。 注意即使原始选项对象的`rootMargin`值为0px，该对象也将其转为0px 0px 0px 0px，这是CSS边距规范所需要的。然后是观察者正在使用的一系列阈值。\n\n## entry对象\n\n传递给回调函数的`entry`对象数据如下：\n\n```js\nIntersectionObserverEntry\n  boundingClientRect: DOMRect\n    bottom: 923.3999938964844, top: 771\n    height: 152.39999389648438, width: 411\n    left: 9, right: 420\n    x: 9, y: 771\n    <prototype>: DOMRectPrototype { }\n  intersectionRatio: 0\n  intersectionRect: DOMRect\n    bottom: 0, top: 0\n    height: 0, width: 0\n    left: 0, right: 0\n    x: 0, y: 0\n    <prototype>: DOMRectPrototype { }\n  isIntersecting: false\n  rootBounds: null\n  target: <div class=\"item\">\n  time: 522\n  <prototype>: IntersectionObserverEntryPrototype { }\n\n```\n\n可以看到，这里做了很多工作。\n\n对于大多数开发人员而言，最可能有用的两个属性是`intersectionRatio`和`isIntersecting`。 `isIntersecting`属性是一个布尔值，在交集更改时目标元素与根元素是否相交。`intersectionRatio`是当前与根元素相交的目标元素的百分比。它也是零到一之间的百分比表示，非常类似于观察者的`options`对象中`threshold`。\n\n三个属性（`boundingClientRect`，`intersectionRect`和`rootBounds`）表示交集相关的三个方面的具体数据。 `boundingClientRect`属性为目标元素的边界框提供从viewport左上角开始的bottom，left，right和top值，就像`Element.getBoundingClientRect()`一样。然后，将目标元素的高度和宽度作为X和Y坐标提供。 `rootBounds`属性为根元素提供相同形式的数据。`intersectionRect`提供相似的数据，它描述了由目标元素在根元素内部的相交区域形成的矩形，该区域也被用于计算`intersectionRatio`值。传统的滚动事件需要手动完成此计算。\n\n要注意的是，代表这些不同元素的所有这些形状始终都是矩形。无论所涉及元素的实际形状如何，它们总是会缩小到包含该元素的最小矩形。\n\n`target`属性是指正在观察的目标元素。在观察者包含多个目标的情况下，这是确定哪个目标元素触发了此相交更改的简便方法。\n\n`time`属性提供从首次创建观察者到触发此交集改变的时间（以毫秒为单位）。通过这种方式，你可以跟踪观看者遇到特定目标所花费的时间。即使稍后将目标再次滚动到视图中，此属性也会提供新的时间。这可用于跟踪目标进入和离开根元素的时间。\n\n除了每次观察到交集改变时我们可以获得这些信息外，观察者第一次启动时也会向我们提供这些信息。例如，在页面加载时，页面上的观察者将立即调用回调函数，并提供它正在观察的每个目标元素的当前状态。\n\n`Intersection Observer`以非常高效的方式提供了有关页面上元素之间关系的数据。\n\n# Intersection Observer 可用的方法\n\nIntersection Observer 主要有三个方法：observe()，unobserve()和disconnect()。\n\n* observe()：observe方法用来添加观察者要监视的目标元素。 观察者可以具有多个目标元素，但是此方法一次只能接受一个目标。\n* unobserve()：unobserve方法用来从观察的元素列表中移除元素。\n* disconnect()：disconnect方法用来停止观察其所有目标元素。观察者本身仍处于活动状态，但没有目标。在disconnect()之后，目标元素仍然可以通过observe()传递给观察者。\n  \n这些方法提供了监视和取消监视目标元素的功能，但是一旦创建，便无法更改传递给观察者的`options`对象。 如果需要修改，则必须手动重新创建观察者。\n\n# Intersection Observer和滚动事件的性能对比\n\n在探索Intersection Observer以及将其与使用滚动事件进行比较时，我需要进行一些性能测试。我只想大致了解两者之间的性能差异，为此我创建了三个简单的测试。\n\n首先，我创建了一个样本HTML文件，该文件包含一百个设置了高度的div，以此创建一个长滚动页面。把页面放在静态服务器上，然后我用Puppeteer加载了HTML文件，启动了跟踪，让页面以预设的增量向下滚动到底部，一旦到达底部，就停止了跟踪，最后保存跟踪的结果。这样测试可以重复多次并输出每次的结果数据。然后，我复制了样本HTML，并为要运行的每种测试类型在脚本标签中编写了js。每个测试都有两个文件：一个用于`Intersection Observer`，另一个用于滚动事件。\n\n所有测试的目的是检测目标元素何时以25％的增量向上滚动通过视口。每次增加时，都会应用CSS类来更改元素的背景颜色。换句话说，每个元素都应用了DOM修改，这将触发重绘。每次测试都在两台不同的计算机上运行了五次：我的开发用的Mac是最新的设备，而我的个人Windows 7计算机可能是当前的平均水平。记录脚本，渲染，绘画和系统的跟踪结果，然后取平均值。\n\n\n第一个测试有一个观察者或一个滚动事件，每个事件都有一个回调。对于观察者和滚动事件，这是一个相当标准的设置。尽管在这种情况下，滚动事件还有很多工作要做，因为滚动事件试图模仿观察者默认提供的数据。完成所有这些计算后，就像观察者一样，将数据存储在条目数组中。然后，在两者之间删除和应用类的功能完全相同。另外我使用了`requestAnimationFrame`对滚动事件进行了节流处理。\n\n第二个测试有100个观察者或100个滚动事件，每种类型都有一个回调。每个元素都分配有自己的观察者和事件，但回调函数相同。这实际上是低效的，因为每个观察者和事件的行为都完全相同，但是我想要一个简单的压力测试，而不必创建100个唯一的观察者和事件-尽管我已经看到了许多以这种方式使用观察者的示例。\n\n第三次测试具有100个观察者或100个滚动事件，每种类型具有100个回调。这意味着每个元素都有其自己的观察器，事件和回调函数。当然，这是极其低效的，因为这是存储在巨大阵列中的所有重复功能。但是这种低效率是该测试的重点。\n\n![Intersection Observer和滚动事件的压力测试对比](https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1165,f_auto,q_auto/v1568831070/observer-01_wzz6he.png)\n\n\n在上面的图表中，你可以看到，第一列代表我们的基准，根本没有运行JavaScript。接下来的两列代表第一种测试类型。 Mac的运行都非常好，符合我对开发用高端计算机的预期。 Windows机器给了我们一个不一样的结果。对我来说，主要的兴趣点是红色所代表的脚本。在Mac上，观察者的差异约为88毫秒，而滚动事件的差异约为300毫秒。在Mac上，每种测试的总体结果都相当接近，但是脚本在滚动事件方面表现出色。对于Windows机器，它要差得多得多。观察者大约是150毫秒，而第一次和最简单的测试是1400毫秒。\n\n对于第二个测试，我们开始看到滚动测试的效率变得更加明显。 Mac和Windows机器都运行了观察者测试，结果与以前几乎相同。对于滚动事件测试，脚本陷入了更多困境，无法完成给定的任务。 Mac跃升到几乎一整秒的脚本编写时间，而Windows计算机跃升到惊人的3200ms。\n\n对于第三次测试，情况没有变坏。结果与第二项测试大致相同。要注意的一件事是，在所有三个测试中，观察者的结果对于两台计算机都是一致的。尽管没有为提高观察者测试的效率做出任何优化，但`Intersection Observer`的性能表现还是远远超过了滚动事件。\n\n因此，在我自己的两台机器上进行了非科学性测试之后，我感到对滚动事件和`Intersection Observer`之间的性能差异有一个不错的了解。 我敢肯定，我可以通过一些努力使滚动事件更有效，但这值得吗？ 在某些情况下，滚动事件的精度是必需的，但是在大多数情况下，`Intersection Observer`就足够了-尤其是因为它看起来更加高效，而无需付出任何努力。\n\n# 搞清intersectionRatio属性\n\n`IntersectionObserverEntry`给我们提供的`intersectionRatio`属性，表示目标元素在交集更改上的根元素边界内的百分比。 我发现我一开始不太了解这个值的实际含义。 由于某种原因，我认为这是目标元素外观的一种简单的0％到100％的表示形式。 它与创建时传递给观察者的阈值相关。 例如，它可用于确定哪个阈值是刚刚触发相交更改的原因。 但是，它提供的值并不总是很简单。\n\n以这个demo为例：\n\n  [demo](https://codepen.io/talmand/embed/VwZXpaj?height=632&theme-id=1&default-tab=result&user=talmand&slug-hash=VwZXpaj&pen-title=Intersection%20Observer%3A%20intersectionRatio&name=cp_embed_1)\n\n在此demo中，已为观察者分配了父容器作为根元素。 具有目标背景的子元素已分配为目标元素。 已创建阈值数组，其中包含100个条目，其顺序为0、0.01、0.02、0.03，依此类推，直到1。观察者触发目标元素在根元素内部出现或消失的每一个百分比，以便每当比率 更改至少百分之一，此框下方的输出文本将更新。 如果您感到好奇，可以使用以下代码来完成此阈值：\n\n```js\n[...Array(100).keys()].map(x => x / 100) }\n```\n\n我不建议你以这种方式为项目中的具体用途设置阈值。\n\n首先，目标元素完全包含在根元素中，并且按钮上方的输出将显示比率1。它应该是第一次加载的，但是我们很快就会发现该比率并不总是精确的；该数字可能在0.99到1之间。这似乎很奇怪，但是有可能发生，因此，如果你对等于特定值的比率进行检查，请记住这一点。\n\n单击“left”按钮将使目标元素向左转换，以使其一半在根元素中，另一半不在。然后，ratioRatio应该更改为0.5，或者接近0.5。现在我们知道目标元素的一半与根元素相交，但是我们不知道它在哪里。以后再说。\n\n单击“top”按钮具有相同的功能。它将目标元素转换为根元素的顶部，并再次将其移入和移出。再一次，交集比率应该在0.5左右。即使目标元素位于与以前完全不同的位置，结果比率也相同。\n\n再次单击“corner”按钮，会将目标元素转换为根元素的右上角。此时，目标元素中只有四分之一位于根元素内。intersectionRatio应以大约0.25的值反映出来。单击“center”会将目标元素转换回中心并完全包含在根元素中。\n\n如果单击“large”按钮，则将目标元素的高度更改为高于根元素。相交比应为0.8左右。这是依赖intersectionRatio的棘手部分。根据提供给观察者的阈值创建代码可以使阈值永远不会触发。在此“large”示例中，基于阈值1的任何代码都将无法执行。还要考虑可以调整根元素大小的情况，例如将视口从纵向旋转为横向。\n\n\n# 查找位置\n\n那么，我们如何知道目标元素相对于根元素的位置呢？此数据由`IntersectionObserverEntry`提供，因此我们只需要进行简单的比较即可。\n\n看这个demo:\n\n[demo2](https://codepen.io/talmand/embed/dybmvZN?height=631&theme-id=1&default-tab=result&user=talmand&slug-hash=dybmvZN&pen-title=Intersection%20Observer%3A%20Finding%20the%20Position&name=cp_embed_2)\n\n\n该演示的设置与之前的设置大致相同。 父容器是根元素，内部具有目标背景的子容器是目标元素。 阈值是一个0、0.5和1的数组。在根元素中滚动时，将出现目标，并且其位置将在按钮上方的输出中报告。\n\n下面执行这些检查的代码：\n\n```js\nconst output = document.querySelector('#output pre');\n\nfunction io_callback (entries) {\n  const ratio = entries[0].intersectionRatio;\n  const boundingRect = entries[0].boundingClientRect;\n  const intersectionRect = entries[0].intersectionRect;\n\n  if (ratio === 0) {\n    output.innerText = 'outside';\n  } else if (ratio < 1) {\n    if (boundingRect.top < intersectionRect.top) {\n      output.innerText = 'on the top';\n    } else {\n      output.innerText = 'on the bottom';\n    }\n  } else {\n    output.innerText = 'inside';\n  }\n}\n\n```\n\n我应该指出，我没有遍历entrys数组，因为我知道总是只有一个条目，因为只有一个目标。我走了捷径，使用`entries[0]`。\n\n您会发现比率为零会将目标置于“外部”。小于1的比率将其放在顶部或底部。这样一来，我们就可以查看目标的“顶部”是否小于交集矩形的顶部，这实际上意味着目标在页面上更高，并被视为“顶部”。实际上，检查根元素的“顶部”也可以解决此问题。从逻辑上讲，如果目标不在顶部，则它必须在底部。如果比率恰好等于1，则它在根元素“内部”。除了使用left或right属性检查水平位置外，其他检查方法相同。\n\n这是高效使用`Intersection Observer`的一部分。开发人员无需在节流的滚动事件上从多处请求此数据，然后进行计算。它是由观察者提供的，所需要的只是一个简单的if检查。\n\n首先，目标元素要比根元素高，因此永远不会将其报告为“内部”。单击“切换目标大小”按钮以使其小于根。现在，上下滚动时目标元素可以位于根元素内部。\n\n通过再次单击“toggle target size”，然后单击“toggle root size”按钮，将目标元素恢复为其原始大小。这将调整根元素的大小，使其比目标元素高。再次，当上下滚动时，目标元素可能位于根元素内部。\n\n此demo演示了有关`Intersection Observer`的两件事：如何确定目标元素相对于根元素的位置以及调整两个元素的大小时会发生什么。这种对调整大小的响应让我们看到了`Intersection Observer`相对于滚动事件的另一个优势-不用再单独处理resize事件。\n\n\n# 创建位置粘性事件\n\n[CSS position属性的“sticky”](https://css-tricks.com/almanac/properties/p/position/#article-header-id-3)是一个有用的功能，但在CSS和JavaScript方面却有一些限制。粘性节点的样式只能是一种设计，无论是处于其正常状态还是处于其粘性状态内。没办法让js知道这些变化。到目前为止，还没有伪类或js事件使我们知道元素的状态变化。\n\n我已经看到了使用滚动事件和`Intersection Observer`进行粘性定位事件的示例。使用滚动事件的解决方案始终存在与将滚动事件用于其他目的相似的问题。观察者的通常解决方案是用一个定位元素，仅作为观察者的目标元素使用。我喜欢避免使用诸如此类的单一目的的元素，因此我决定修改这个特定的想法。\n\n在此demo中，上下滚动以查看章节标题对各自章节的粘性反应。\n\n[demo3](https://codepen.io/talmand/embed/ExYLayz?height=400&theme-id=1&default-tab=result&user=talmand&slug-hash=ExYLayz&pen-title=Intersection%20Observer%3A%20Position%20Sticky%20Event&name=cp_embed_3)\n\n这个示例检测粘性元素何时位于滚动容器顶部，然后给其添加一个css类。 这是通过在给观察者特定的`rootMargin`时利用DOM的一个有趣的特性来实现的。 给出的值是：\n\n```js\nrootMargin: '0px 0px -100% 0px'\n```\n\n这样会将根边界的底部边缘推到根元素的顶部，从而留下一小部分可用于相交检测的零像素区域。 可以说，即使目标元素碰触到零像素区域，也会触发相交变化，即使它不存在于数字中也是如此。 考虑一下，我们可以在DOM中具有折叠高度为零的元素。\n\n该解决方案通过识别粘性元素始终位于根元素顶部的“粘性”位置来利用这一优势。 随着滚动的继续，粘性元素最终移出视野，并且相交停止。 因此，我们根据输入对象的`isIntersecting`属性添加和删除类。\n\n下面是HTML：\n\n```HTML\n<section>\n  <div class=\"sticky-container\">\n    <div class=\"sticky-content\">\n      <span>&sect;</span>\n      <h2>Section 1</h2>\n    </div>\n  </div>\n\n  {{ content here }}\n  \n</section>\n\n```\n\nclass为`sticky-container`的外部div是观察者的目标。 该div将被设置为粘性元素并充当容器。 用于根据粘性状态设置样式和更改元素的元素是class为`sticky-content`的div及其子元素。 这样可以确保实际的粘性元素始终与根元素顶部缩小的`rootMargin`接触。\n\n下面是CSS：\n\n```css\n.sticky-content {\n  position: relative;\n  transition: 0.25s;\n}\n\n.sticky-content span {\n  display: inline-block;\n  font-size: 20px;\n  opacity: 0;\n  overflow: hidden;\n  transition: 0.25s;\n  width: 0;\n}\n\n.sticky-content h2 {\n  display: inline-block;\n}\n  \n.sticky-container {\n  position: sticky;\n  top: 0;\n}\n\n.sticky-container.active .sticky-content {\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  padding: 10px;\n}\n\n.sticky-container.active .sticky-content span {\n  opacity: 1;\n  transition: 0.25s 0.5s;\n  width: 20px;\n}\n```\n\n你会看到`.sticky-container`在top为0的位置创建了我们的粘滞元素。 其余部分是`.sticky-content`中的常规状态和`.active .sticky-content`中的粘滞状态样式的混合。 同样，您几乎可以在粘性内容div中做任何您想做的事情。 在此demo中，当粘滞状态处于活动状态时，在延迟的过渡中会出现一个隐藏的章节符号。没有`Intersection Observer`之类的辅助手段，很难达到这种效果。\n\nJavaScript：\n\n```js\nconst stickyContainers = document.querySelectorAll('.sticky-container');\nconst io_options = {\n  root: document.body,\n  rootMargin: '0px 0px -100% 0px',\n  threshold: 0\n};\nconst io_observer = new IntersectionObserver(io_callback, io_options);\n\nstickyContainers.forEach(element => {\n  io_observer.observe(element);\n});\n\nfunction io_callback (entries, observer) {\n  entries.forEach(entry => {\n    entry.target.classList.toggle('active', entry.isIntersecting);\n  });\n}\n```\n\n这实际上是使用`Intersection Observer`完成此任务的非常简单的示例。 唯一的例外是`rootMargin`中的-100％值。 请注意，这对于其他三个方面也可以重复； 它只需要一个具有自己独特的`rootMargin`的新观察者，对于相应方面，它具有-100％的值。 将会有更多独特的粘性容器，它们具有自己的类，例如`sticky-container-top`和`sticky-container-bottom`。\n\n这样做的限制是，粘性元素的top，right，bottom或left属性必须始终为零。 从技术上讲，你可以使用其他值，但随后必须进行数学运算以找出`rootMargin`的正确值。 这很容易做到，但是如果调整大小，不仅需要再次进行数学运算，还必须停止观察者并使用新值重新启动它。 将position属性设置为零，并使用内部元素以所需的方式设置样式更加容易。\n\n# 和滚动事件结合\n\n到目前为止，我们已经在一些演示中看到了，`intersectionRatio`可能不精确且有些局限。使用滚动事件可以更精确，但会降低性能的效率。那把两者结合起来怎么样？\n\n[demo4](https://cdpn.io/talmand/fullembedgrid/wvwjBry?type=embed&animations=run)\n\n在此demo中，我们创建了一个`Intersection Observer`，并且回调函数的唯一目的是添加和删除侦听根元素上的scroll事件的事件侦听器。 当目标首次进入根元素时，将创建滚动事件侦听器，然后在目标离开根元素时将其删除。 滚动时，输出仅显示每个事件的时间戳，以实时显示事件的变化-比单独的观察者要精确得多。\n\n下面是JavaScript。\n\n```js\nconst root = document.querySelector('#root');\nconst target = document.querySelector('#target');\nconst output = document.querySelector('#output pre');\nconst io_options = {\n  root: root,\n  rootMargin: '0px',\n  threshold: 0\n};\nlet io_observer;\n\nfunction scrollingEvents (e) {\n  output.innerText = e.timeStamp;\n}\n\nfunction io_callback (entries) {\n  if (entries[0].isIntersecting) {\n    root.addEventListener('scroll', scrollingEvents);\n  } else {\n    root.removeEventListener('scroll', scrollingEvents);\n    output.innerText = 0;\n  }\n}\n\nio_observer = new IntersectionObserver(io_callback, io_options);\nio_observer.observe(target);\n```\n\n这是一个相当标准的例子。 请注意，我们希望阈值为零，因为如果阈值不止一个，我们将同时获得多个事件监听器。 回调函数是我们感兴趣的，甚至是一个简单的设置：在if-else块中添加和删除事件监听器。 事件的回调函数仅更新输出中的div。 每当目标触发相交变化并且不与根相交时，我们会将输出设置回零。\n\n这个实例利用了`Intersection Observer`和滚动事件的优点。 考虑使用一个滚动动画库，该动画库仅在页面上需要它的部分实际可见时才起作用。 库和滚动事件在整个页面中并非无效地活动。\n\n# 浏览器的有趣差异\n\n您可能想知道`Intersection Observer`有多少浏览器支持。 实际上，还蛮多的！\n\n该浏览器支持数据来自Caniuse，更多信息。 数字表示浏览器支持该版本及更高版本的功能。\n\n![Caniuse](https://img11.360buyimg.com/jdphoto/s939x589_jfs/t1/47754/22/12887/54388/5d9eec58Ea352f2c4/d56f0ccaa8a322a3.png)\n\n所有主要的浏览器都已经支持了一段时间。和预期一样，IE在任何级别都不支持它，但是W3C提供了一个[polyfill](https://github.com/w3c/IntersectionObserver/tree/master/polyfill)来解决这个问题。\n\n当我使用`Intersection Observer`尝试不同的想法时，我确实遇到了两个示例在Firefox和Chrome之间的行为有所不同。我不会在生产站点上使用这些示例，但是这些行为很有趣。\n\n这是第一个示例：\n\n[example1](https://cdpn.io/talmand/fullembedgrid/oNvdQOR?type=embed&animations=run)\n\n目标元素通过CSS transform属性在根元素内移动。 该演示具有CSS动画，该动画可在水平轴上将目标元素移入和移出根元素。 当目标元素进入或离开根元素时，`intersectionRatio`会更新。\n\n如果您在Firefox中查看此演示，则应在目标元素前后滑动时正确地看到`intersectionRatio`更新。 Chrome的行为有所不同，完全不更新`intersectionRatio`。 Chrome似乎没有保留使用CSS转换过的目标元素的标签。 但是，如果我们在目标元素移入和移出根元素时在浏览器中四处移动鼠标，则`intersectionRatio`确实会更新。 我的猜测是，只有在存在某种形式的用户交互时，Chrome才会“激活”观察者。\n\n这是第二个示例：\n\n[example2](https://cdpn.io/talmand/fullembedgrid/mdbLQZJ?type=embed&animations=run)\n\n这次，我们[对一个剪裁路径进行动画处理](https://css-tricks.com/animating-with-clip-path/)，该剪裁路径将一个正方形变成重复循环中的一个圆形。正方形与根元素的大小相同，因此我们得到的`intersectionRatio`将始终小于1。随着剪裁路径的动画化，Firefox根本不会更新`intersectionRatio`。这次移动鼠标不起作用。Firefox只是忽略元素大小的变化。另一方面，Chrome实际上会实时更新`intersectionRatio`显示。即使没有用户交互，也会发生这种情况。\n\n之所以会发生这种情况，是因为规范的一部分指出[交集区域（intersectionRect）的边界](https://www.w3.org/TR/intersection-observer/#calculate-intersection-rect-algo)应包括剪裁目标元素。\n\n> 如果容器具有溢出剪裁或css[剪裁路径](https://www.w3.org/TR/css-masking-1/#propdef-clip-path)属性，请通过应用容器的剪裁来更新intersectionRect。\n\n因此，当剪裁目标时，将重新计算相交区域的边界。 Firefox显然尚未实现。\n\n# Intersection Observer, version 2\n\n那么，该API的未来前景如何？\n\n[Google提供了一些建议](https://developers.google.com/web/updates/2019/02/intersectionobserver-v2)，这些建议会为观察者添加一个有趣的功能。 即使Intersection Observer告诉我们目标元素何时跨越根元素的边界，也不一定意味着该元素实际上对用户是可见的。 它可能具有零不透明度，或者可能被页面上的另一个元素覆盖。 观察者能不能被用来确定这些事情？\n\n请记住，我们仍在早期阶段才使用此功能，因此不应在生产代码中使用它。 这是[更新后的提案](https://szager-chromium.github.io/IntersectionObserver/)，其中突出显示了与规范第一个版本的差异。\n\n如果您一直在使用Chrome浏览本文中的演示，则可能已经注意到控制台中的几件事-例如Firefox中未出现的`entries`对象属性。 这是Firefox在控制台中打印内容的示例：\n\n```js\nIntersectionObserver\n  root: null\n  rootMargin: \"0px 0px 0px 0px\"\n  thresholds: Array [ 0 ]\n  <prototype>: IntersectionObserverPrototype { }\n\nIntersectionObserverEntry\n  boundingClientRect: DOMRect { x: 9, y: 779, width: 707, ... }\n  intersectionRatio: 0\n  intersectionRect: DOMRect { x: 0, y: 0, width: 0, ... }\n  isIntersecting: false\n  rootBounds: null\n  target: <div class=\"item\">\n  time: 261\n  <prototype>: IntersectionObserverEntryPrototype { }\n\n  ```\n  现在，这是来自Chrome中相同控制台代码的输出：\n\n  ```js\n\n  IntersectionObserver\n  delay: 500\n  root: null\n  rootMargin: \"0px 0px 0px 0px\"\n  thresholds: [0]\n  trackVisibility: true\n  __proto__: IntersectionObserver\n\nIntersectionObserverEntry\n  boundingClientRect: DOMRectReadOnly {x: 9, y: 740, width: 914, height: 146, top: 740, ...}\n  intersectionRatio: 0\n  intersectionRect: DOMRectReadOnly {x: 0, y: 0, width: 0, height: 0, top: 0, ...}\n  isIntersecting: false\n  isVisible: false\n  rootBounds: null\n  target: div.item\n  time: 355.6550000066636\n  __proto__: IntersectionObserverEntry\n\n  ```\n\n在一些属性（例如`target`和`prototype`）的显示方式上存在一些差异，但是它们在两种浏览器中的操作相同。区别在于Chrome具有Firefox中不会显示的一些其他属性。`observer`对象具有一个称为`trackVisibility`的布尔值，一个称为`delay`的数字，并且`entry`对象具有一个称为`isVisible`的布尔值。这些是新提议的属性，这些属性试图确定目标元素是否实际上对用户可见。\n\n我将对这些属性进行简要说明，但如果您需要更多详细信息，请阅读[此文章](https://developers.google.com/web/updates/2019/02/intersectionobserver-v2)。\n\n`trackVisibility`属性是在`options`对象中提供给观察者的布尔值。此属性可以使浏览器承担确定目标元素的真实可见性的任务。\n\n`delay`属性用途的猜测：它将交集改变的回调方法延迟指定的时间（以毫秒为单位）。这有点类似于将回调函数的代码包装在`setTimeout`中。为了使`trackVisibility`起作用，该值是必需的，并且必须至少为100。如果未提供适当的值，则控制台将显示此错误，并且将不会创建观察者。\n\n```\nUncaught DOMException: Failed to construct 'IntersectionObserver': To enable the \n'trackVisibility' option, you must also use a 'delay' option with a value of at\nleast 100. Visibility is more expensive to compute than the basic intersection;\nenabling this option may negatively affect your page's performance.\nPlease make sure you really need visibility tracking before enabling the\n'trackVisibility' option.\n```\n\n目标`entry`对象中的`isVisible`属性是报告可见性跟踪输出的布尔值。可以将它用作任何代码的一部分，就像使用`isIntersecting`一样。\n\n在我使用这些功能进行的所有实验中，看到它实际上有时候有效有时候无效。 例如，当元素清晰可见时，延迟始终有效，但是isVisible并不总是报告true（至少对我而言）。 有时这是设计使然，因为规范确实允许出现[第二类错误](https://szager-chromium.github.io/IntersectionObserver/#calculate-visibility-algo)。这将有助于解释不一致的结果。\n\n我个人迫不及待地希望这项功能尽快完成，并在所有支持`Intersection Observer`的浏览器中都能正常工作。\n\n# 写在最后\n\n我对`Intersection Observer`的研究到此结束。 我花了很多晚上研究，试验和构建示例，以了解其工作原理。 这篇文章涉及了一些有关如何利用观察者的不同功能的新想法。除此之外，我觉得我可以清晰的解释观察者的工作原理。希望本文对你有所帮助。","source":"_posts/2019-10/【译】interection-observer如何观察变化.md","raw":"---\ntitle: 【译】Interection Observer如何观察变化\ndate: 2019-10-17 11:44:05\ncover: https://tva1.sinaimg.cn/large/006y8mN6gy1g812gp34euj31900u077e.jpg\nthumbnail: https://tva1.sinaimg.cn/large/006y8mN6gy1g812gp34euj31900u077e.jpg\ntags: \n  - Interection Observer\n  - 滚动优化\ncategories: Web前端\n---\n\n> 原文地址：https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\n> 原文作者：Travis Almand\n> 翻译：刘辉\n\n有几篇精彩的文章探讨了如何使用`Intersection Observer API`，包括Phil Hawksworth，Preethi和Mateusz Rybczonek等。 我这篇文章将讲一些不一样的东西。 我在今年早些时候有幸向达拉斯VueJS聚会介绍了VueJS过渡组件，我在CSS-Tricks的第一篇文章就是以此为基础的。 在演讲的问答环节中，有人问我基于滚动事件触发过渡怎么样 - 我说当然可以，但是一些听众建议我了解一下`Intersection Observer`。\n\n这让我开始思考。我对`Intersection Observer`有基本的了解，并且能够用其完成简单的示例。 我是否知道它的工作原理而不仅仅是使用它？它到底为我们开发人员提供了什么？ 作为一个资深开发者，我如何向新手甚至不知道它存在的开发者解释它的工作原理？\n<!--more-->\n\n在花了一些时间进行研究，测试和验证后，我决定分享自己学到的东西。\n\n# Intersection Observer 简述\n\nW3C公共工作草案摘要（日期为2017年9月14日的初稿）将`Intersection Observer API`描述为：\n\n> 本规范描述了一个API，可用于了解DOM元素（`targets`）相对于包含元素或顶级视口（`root`）的可见性和位置。 该位置是异步传递的，对于理解元素的可见性以及实现DOM内容的预加载和延迟加载很有用。\n\n这个API的总体思路是提供一种观察子元素并在其进入其父元素之一的边界框内时得到通知的方法。 目标元素滚动到根元素视图中时最常用。 在引入`Intersection Observer`之前，此类功能是通过侦听滚动事件来完成的。\n\n尽管`Intersection Observer`是针对此类功能的更高性能的解决方案，但我不建议我们将其视为滚动事件的替代品。 相反，我建议我们将此API视为与滚动事件在功能上互补的额外工具。 在某些情况下，两者可以一起解决特定的问题。\n\n# 基本示例\n\n我知道我有可能重复其他文章中已经讲过的内容，不过还是让我们先来看一个`Intersection Observer`的基本示例及其提供的能力。\n\nObserver由四部分组成：\n\n1. `root`，是观察者所绑定的父元素，可以是viewport\n2. `target`，它是被观察的子元素，可以有多个\n3. `options`对象，它定义了观察者某些方面的行为\n4. 回调函数，每次观察到父子元素的交集变化时都会调用\n\n\n基本示例的代码如下所示：\n\n```js\nconst options = {\n  root: document.body,\n  rootMargin: '0px',\n  threshold: 0\n}\n\nfunction callback (entries, observer) {\n  console.log(observer);\n  \n  entries.forEach(entry => {\n    console.log(entry);\n  });\n}\n\nlet observer = new IntersectionObserver(callback, options);\nobserver.observe(targetElement);\n\n```\n代码的第一部分是`options`对象，它具有`root`，`rootMargin`和`threshold`属性。\n\n`root`是父元素，一般是有滚动条的元素，其中包含被观察的元素。根据需要，这几乎可以是页面上的任何单个元素。如果不提供该属性，或者该值设置为null，跟元素就是viewport。\n\n`rootMargin`描述了根元素的外边距，由`rootMargin`规定的矩形的每一边都会被添加至root元素的边框盒(bounding box)的相应边。它的行为很像CSS margin属性。你可以使用类似10px 15px 20px的值，这使我们的顶部边距为10px，左侧和右侧边距为15px，底部边距为20px。仅边界框受影响，元素本身不受影响。请记住，唯一允许的长度是像素和百分比值，可以是负数或正数。另请注意，如果root元素不是页面上的实际元素（例如viewport），则`rootMargin`无效。\n\n`threshold`是用于确定何时触发交集改变事件的值。数组中可以包含多个值，以便同一目标可以多次触发交集改变事件。不同的值是使用0到1的百分比，非常类似于CSS中的不透明度，因此将0.5的值视为50％，依此类推。这些值与目标的交叉比例有关，稍后将对其进行说明。阈值为0时，目标元素的第一个像素与根元素相交就会触发交集改变事件。阈值为1时，整个目标元素都在根元素内部时才会触发交集改变事件。\n\n\n代码的第二部分是回调函数，只要观察到交集改变，就会调用该函数。传递了两个参数；`entries`是个数组，代表触发交集更改的每个目标元素。这提供了很多信息为开发人员所用。第二个参数是有关观察者本身的信息。如果目标绑定到多个观察者，可以通过此参数识别是哪个观察者。\n\n代码的第三部分是观察者本身的创建以及观察对象。创建观察者时，回调函数和`options`对象可以放在观察者外部。 如果需要，可以在多个观察者之间使用相同的回调和`options`对象。然后，将需要观察的目标元素传递给`observe()`方法。它只能接受一个目标，但是可以在同一观察者上针对多个目标重复调用该方法。\n\n注意代码中的console.log,可以看看控制台输出了什么。\n\n## 观察者对象\n\n传递给回调函数的观察者数据如下：\n\n```js\nIntersectionObserver\n  root: null\n  rootMargin: \"0px 0px 0px 0px\"\n  thresholds: Array [ 0 ]\n  <prototype>: IntersectionObserverPrototype { }\n\n```\n\n...本质上是创建对象时传递给观察者的选`options`对象。 这可用于确定相交所绑定的根元素。 注意即使原始选项对象的`rootMargin`值为0px，该对象也将其转为0px 0px 0px 0px，这是CSS边距规范所需要的。然后是观察者正在使用的一系列阈值。\n\n## entry对象\n\n传递给回调函数的`entry`对象数据如下：\n\n```js\nIntersectionObserverEntry\n  boundingClientRect: DOMRect\n    bottom: 923.3999938964844, top: 771\n    height: 152.39999389648438, width: 411\n    left: 9, right: 420\n    x: 9, y: 771\n    <prototype>: DOMRectPrototype { }\n  intersectionRatio: 0\n  intersectionRect: DOMRect\n    bottom: 0, top: 0\n    height: 0, width: 0\n    left: 0, right: 0\n    x: 0, y: 0\n    <prototype>: DOMRectPrototype { }\n  isIntersecting: false\n  rootBounds: null\n  target: <div class=\"item\">\n  time: 522\n  <prototype>: IntersectionObserverEntryPrototype { }\n\n```\n\n可以看到，这里做了很多工作。\n\n对于大多数开发人员而言，最可能有用的两个属性是`intersectionRatio`和`isIntersecting`。 `isIntersecting`属性是一个布尔值，在交集更改时目标元素与根元素是否相交。`intersectionRatio`是当前与根元素相交的目标元素的百分比。它也是零到一之间的百分比表示，非常类似于观察者的`options`对象中`threshold`。\n\n三个属性（`boundingClientRect`，`intersectionRect`和`rootBounds`）表示交集相关的三个方面的具体数据。 `boundingClientRect`属性为目标元素的边界框提供从viewport左上角开始的bottom，left，right和top值，就像`Element.getBoundingClientRect()`一样。然后，将目标元素的高度和宽度作为X和Y坐标提供。 `rootBounds`属性为根元素提供相同形式的数据。`intersectionRect`提供相似的数据，它描述了由目标元素在根元素内部的相交区域形成的矩形，该区域也被用于计算`intersectionRatio`值。传统的滚动事件需要手动完成此计算。\n\n要注意的是，代表这些不同元素的所有这些形状始终都是矩形。无论所涉及元素的实际形状如何，它们总是会缩小到包含该元素的最小矩形。\n\n`target`属性是指正在观察的目标元素。在观察者包含多个目标的情况下，这是确定哪个目标元素触发了此相交更改的简便方法。\n\n`time`属性提供从首次创建观察者到触发此交集改变的时间（以毫秒为单位）。通过这种方式，你可以跟踪观看者遇到特定目标所花费的时间。即使稍后将目标再次滚动到视图中，此属性也会提供新的时间。这可用于跟踪目标进入和离开根元素的时间。\n\n除了每次观察到交集改变时我们可以获得这些信息外，观察者第一次启动时也会向我们提供这些信息。例如，在页面加载时，页面上的观察者将立即调用回调函数，并提供它正在观察的每个目标元素的当前状态。\n\n`Intersection Observer`以非常高效的方式提供了有关页面上元素之间关系的数据。\n\n# Intersection Observer 可用的方法\n\nIntersection Observer 主要有三个方法：observe()，unobserve()和disconnect()。\n\n* observe()：observe方法用来添加观察者要监视的目标元素。 观察者可以具有多个目标元素，但是此方法一次只能接受一个目标。\n* unobserve()：unobserve方法用来从观察的元素列表中移除元素。\n* disconnect()：disconnect方法用来停止观察其所有目标元素。观察者本身仍处于活动状态，但没有目标。在disconnect()之后，目标元素仍然可以通过observe()传递给观察者。\n  \n这些方法提供了监视和取消监视目标元素的功能，但是一旦创建，便无法更改传递给观察者的`options`对象。 如果需要修改，则必须手动重新创建观察者。\n\n# Intersection Observer和滚动事件的性能对比\n\n在探索Intersection Observer以及将其与使用滚动事件进行比较时，我需要进行一些性能测试。我只想大致了解两者之间的性能差异，为此我创建了三个简单的测试。\n\n首先，我创建了一个样本HTML文件，该文件包含一百个设置了高度的div，以此创建一个长滚动页面。把页面放在静态服务器上，然后我用Puppeteer加载了HTML文件，启动了跟踪，让页面以预设的增量向下滚动到底部，一旦到达底部，就停止了跟踪，最后保存跟踪的结果。这样测试可以重复多次并输出每次的结果数据。然后，我复制了样本HTML，并为要运行的每种测试类型在脚本标签中编写了js。每个测试都有两个文件：一个用于`Intersection Observer`，另一个用于滚动事件。\n\n所有测试的目的是检测目标元素何时以25％的增量向上滚动通过视口。每次增加时，都会应用CSS类来更改元素的背景颜色。换句话说，每个元素都应用了DOM修改，这将触发重绘。每次测试都在两台不同的计算机上运行了五次：我的开发用的Mac是最新的设备，而我的个人Windows 7计算机可能是当前的平均水平。记录脚本，渲染，绘画和系统的跟踪结果，然后取平均值。\n\n\n第一个测试有一个观察者或一个滚动事件，每个事件都有一个回调。对于观察者和滚动事件，这是一个相当标准的设置。尽管在这种情况下，滚动事件还有很多工作要做，因为滚动事件试图模仿观察者默认提供的数据。完成所有这些计算后，就像观察者一样，将数据存储在条目数组中。然后，在两者之间删除和应用类的功能完全相同。另外我使用了`requestAnimationFrame`对滚动事件进行了节流处理。\n\n第二个测试有100个观察者或100个滚动事件，每种类型都有一个回调。每个元素都分配有自己的观察者和事件，但回调函数相同。这实际上是低效的，因为每个观察者和事件的行为都完全相同，但是我想要一个简单的压力测试，而不必创建100个唯一的观察者和事件-尽管我已经看到了许多以这种方式使用观察者的示例。\n\n第三次测试具有100个观察者或100个滚动事件，每种类型具有100个回调。这意味着每个元素都有其自己的观察器，事件和回调函数。当然，这是极其低效的，因为这是存储在巨大阵列中的所有重复功能。但是这种低效率是该测试的重点。\n\n![Intersection Observer和滚动事件的压力测试对比](https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1165,f_auto,q_auto/v1568831070/observer-01_wzz6he.png)\n\n\n在上面的图表中，你可以看到，第一列代表我们的基准，根本没有运行JavaScript。接下来的两列代表第一种测试类型。 Mac的运行都非常好，符合我对开发用高端计算机的预期。 Windows机器给了我们一个不一样的结果。对我来说，主要的兴趣点是红色所代表的脚本。在Mac上，观察者的差异约为88毫秒，而滚动事件的差异约为300毫秒。在Mac上，每种测试的总体结果都相当接近，但是脚本在滚动事件方面表现出色。对于Windows机器，它要差得多得多。观察者大约是150毫秒，而第一次和最简单的测试是1400毫秒。\n\n对于第二个测试，我们开始看到滚动测试的效率变得更加明显。 Mac和Windows机器都运行了观察者测试，结果与以前几乎相同。对于滚动事件测试，脚本陷入了更多困境，无法完成给定的任务。 Mac跃升到几乎一整秒的脚本编写时间，而Windows计算机跃升到惊人的3200ms。\n\n对于第三次测试，情况没有变坏。结果与第二项测试大致相同。要注意的一件事是，在所有三个测试中，观察者的结果对于两台计算机都是一致的。尽管没有为提高观察者测试的效率做出任何优化，但`Intersection Observer`的性能表现还是远远超过了滚动事件。\n\n因此，在我自己的两台机器上进行了非科学性测试之后，我感到对滚动事件和`Intersection Observer`之间的性能差异有一个不错的了解。 我敢肯定，我可以通过一些努力使滚动事件更有效，但这值得吗？ 在某些情况下，滚动事件的精度是必需的，但是在大多数情况下，`Intersection Observer`就足够了-尤其是因为它看起来更加高效，而无需付出任何努力。\n\n# 搞清intersectionRatio属性\n\n`IntersectionObserverEntry`给我们提供的`intersectionRatio`属性，表示目标元素在交集更改上的根元素边界内的百分比。 我发现我一开始不太了解这个值的实际含义。 由于某种原因，我认为这是目标元素外观的一种简单的0％到100％的表示形式。 它与创建时传递给观察者的阈值相关。 例如，它可用于确定哪个阈值是刚刚触发相交更改的原因。 但是，它提供的值并不总是很简单。\n\n以这个demo为例：\n\n  [demo](https://codepen.io/talmand/embed/VwZXpaj?height=632&theme-id=1&default-tab=result&user=talmand&slug-hash=VwZXpaj&pen-title=Intersection%20Observer%3A%20intersectionRatio&name=cp_embed_1)\n\n在此demo中，已为观察者分配了父容器作为根元素。 具有目标背景的子元素已分配为目标元素。 已创建阈值数组，其中包含100个条目，其顺序为0、0.01、0.02、0.03，依此类推，直到1。观察者触发目标元素在根元素内部出现或消失的每一个百分比，以便每当比率 更改至少百分之一，此框下方的输出文本将更新。 如果您感到好奇，可以使用以下代码来完成此阈值：\n\n```js\n[...Array(100).keys()].map(x => x / 100) }\n```\n\n我不建议你以这种方式为项目中的具体用途设置阈值。\n\n首先，目标元素完全包含在根元素中，并且按钮上方的输出将显示比率1。它应该是第一次加载的，但是我们很快就会发现该比率并不总是精确的；该数字可能在0.99到1之间。这似乎很奇怪，但是有可能发生，因此，如果你对等于特定值的比率进行检查，请记住这一点。\n\n单击“left”按钮将使目标元素向左转换，以使其一半在根元素中，另一半不在。然后，ratioRatio应该更改为0.5，或者接近0.5。现在我们知道目标元素的一半与根元素相交，但是我们不知道它在哪里。以后再说。\n\n单击“top”按钮具有相同的功能。它将目标元素转换为根元素的顶部，并再次将其移入和移出。再一次，交集比率应该在0.5左右。即使目标元素位于与以前完全不同的位置，结果比率也相同。\n\n再次单击“corner”按钮，会将目标元素转换为根元素的右上角。此时，目标元素中只有四分之一位于根元素内。intersectionRatio应以大约0.25的值反映出来。单击“center”会将目标元素转换回中心并完全包含在根元素中。\n\n如果单击“large”按钮，则将目标元素的高度更改为高于根元素。相交比应为0.8左右。这是依赖intersectionRatio的棘手部分。根据提供给观察者的阈值创建代码可以使阈值永远不会触发。在此“large”示例中，基于阈值1的任何代码都将无法执行。还要考虑可以调整根元素大小的情况，例如将视口从纵向旋转为横向。\n\n\n# 查找位置\n\n那么，我们如何知道目标元素相对于根元素的位置呢？此数据由`IntersectionObserverEntry`提供，因此我们只需要进行简单的比较即可。\n\n看这个demo:\n\n[demo2](https://codepen.io/talmand/embed/dybmvZN?height=631&theme-id=1&default-tab=result&user=talmand&slug-hash=dybmvZN&pen-title=Intersection%20Observer%3A%20Finding%20the%20Position&name=cp_embed_2)\n\n\n该演示的设置与之前的设置大致相同。 父容器是根元素，内部具有目标背景的子容器是目标元素。 阈值是一个0、0.5和1的数组。在根元素中滚动时，将出现目标，并且其位置将在按钮上方的输出中报告。\n\n下面执行这些检查的代码：\n\n```js\nconst output = document.querySelector('#output pre');\n\nfunction io_callback (entries) {\n  const ratio = entries[0].intersectionRatio;\n  const boundingRect = entries[0].boundingClientRect;\n  const intersectionRect = entries[0].intersectionRect;\n\n  if (ratio === 0) {\n    output.innerText = 'outside';\n  } else if (ratio < 1) {\n    if (boundingRect.top < intersectionRect.top) {\n      output.innerText = 'on the top';\n    } else {\n      output.innerText = 'on the bottom';\n    }\n  } else {\n    output.innerText = 'inside';\n  }\n}\n\n```\n\n我应该指出，我没有遍历entrys数组，因为我知道总是只有一个条目，因为只有一个目标。我走了捷径，使用`entries[0]`。\n\n您会发现比率为零会将目标置于“外部”。小于1的比率将其放在顶部或底部。这样一来，我们就可以查看目标的“顶部”是否小于交集矩形的顶部，这实际上意味着目标在页面上更高，并被视为“顶部”。实际上，检查根元素的“顶部”也可以解决此问题。从逻辑上讲，如果目标不在顶部，则它必须在底部。如果比率恰好等于1，则它在根元素“内部”。除了使用left或right属性检查水平位置外，其他检查方法相同。\n\n这是高效使用`Intersection Observer`的一部分。开发人员无需在节流的滚动事件上从多处请求此数据，然后进行计算。它是由观察者提供的，所需要的只是一个简单的if检查。\n\n首先，目标元素要比根元素高，因此永远不会将其报告为“内部”。单击“切换目标大小”按钮以使其小于根。现在，上下滚动时目标元素可以位于根元素内部。\n\n通过再次单击“toggle target size”，然后单击“toggle root size”按钮，将目标元素恢复为其原始大小。这将调整根元素的大小，使其比目标元素高。再次，当上下滚动时，目标元素可能位于根元素内部。\n\n此demo演示了有关`Intersection Observer`的两件事：如何确定目标元素相对于根元素的位置以及调整两个元素的大小时会发生什么。这种对调整大小的响应让我们看到了`Intersection Observer`相对于滚动事件的另一个优势-不用再单独处理resize事件。\n\n\n# 创建位置粘性事件\n\n[CSS position属性的“sticky”](https://css-tricks.com/almanac/properties/p/position/#article-header-id-3)是一个有用的功能，但在CSS和JavaScript方面却有一些限制。粘性节点的样式只能是一种设计，无论是处于其正常状态还是处于其粘性状态内。没办法让js知道这些变化。到目前为止，还没有伪类或js事件使我们知道元素的状态变化。\n\n我已经看到了使用滚动事件和`Intersection Observer`进行粘性定位事件的示例。使用滚动事件的解决方案始终存在与将滚动事件用于其他目的相似的问题。观察者的通常解决方案是用一个定位元素，仅作为观察者的目标元素使用。我喜欢避免使用诸如此类的单一目的的元素，因此我决定修改这个特定的想法。\n\n在此demo中，上下滚动以查看章节标题对各自章节的粘性反应。\n\n[demo3](https://codepen.io/talmand/embed/ExYLayz?height=400&theme-id=1&default-tab=result&user=talmand&slug-hash=ExYLayz&pen-title=Intersection%20Observer%3A%20Position%20Sticky%20Event&name=cp_embed_3)\n\n这个示例检测粘性元素何时位于滚动容器顶部，然后给其添加一个css类。 这是通过在给观察者特定的`rootMargin`时利用DOM的一个有趣的特性来实现的。 给出的值是：\n\n```js\nrootMargin: '0px 0px -100% 0px'\n```\n\n这样会将根边界的底部边缘推到根元素的顶部，从而留下一小部分可用于相交检测的零像素区域。 可以说，即使目标元素碰触到零像素区域，也会触发相交变化，即使它不存在于数字中也是如此。 考虑一下，我们可以在DOM中具有折叠高度为零的元素。\n\n该解决方案通过识别粘性元素始终位于根元素顶部的“粘性”位置来利用这一优势。 随着滚动的继续，粘性元素最终移出视野，并且相交停止。 因此，我们根据输入对象的`isIntersecting`属性添加和删除类。\n\n下面是HTML：\n\n```HTML\n<section>\n  <div class=\"sticky-container\">\n    <div class=\"sticky-content\">\n      <span>&sect;</span>\n      <h2>Section 1</h2>\n    </div>\n  </div>\n\n  {{ content here }}\n  \n</section>\n\n```\n\nclass为`sticky-container`的外部div是观察者的目标。 该div将被设置为粘性元素并充当容器。 用于根据粘性状态设置样式和更改元素的元素是class为`sticky-content`的div及其子元素。 这样可以确保实际的粘性元素始终与根元素顶部缩小的`rootMargin`接触。\n\n下面是CSS：\n\n```css\n.sticky-content {\n  position: relative;\n  transition: 0.25s;\n}\n\n.sticky-content span {\n  display: inline-block;\n  font-size: 20px;\n  opacity: 0;\n  overflow: hidden;\n  transition: 0.25s;\n  width: 0;\n}\n\n.sticky-content h2 {\n  display: inline-block;\n}\n  \n.sticky-container {\n  position: sticky;\n  top: 0;\n}\n\n.sticky-container.active .sticky-content {\n  background-color: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  padding: 10px;\n}\n\n.sticky-container.active .sticky-content span {\n  opacity: 1;\n  transition: 0.25s 0.5s;\n  width: 20px;\n}\n```\n\n你会看到`.sticky-container`在top为0的位置创建了我们的粘滞元素。 其余部分是`.sticky-content`中的常规状态和`.active .sticky-content`中的粘滞状态样式的混合。 同样，您几乎可以在粘性内容div中做任何您想做的事情。 在此demo中，当粘滞状态处于活动状态时，在延迟的过渡中会出现一个隐藏的章节符号。没有`Intersection Observer`之类的辅助手段，很难达到这种效果。\n\nJavaScript：\n\n```js\nconst stickyContainers = document.querySelectorAll('.sticky-container');\nconst io_options = {\n  root: document.body,\n  rootMargin: '0px 0px -100% 0px',\n  threshold: 0\n};\nconst io_observer = new IntersectionObserver(io_callback, io_options);\n\nstickyContainers.forEach(element => {\n  io_observer.observe(element);\n});\n\nfunction io_callback (entries, observer) {\n  entries.forEach(entry => {\n    entry.target.classList.toggle('active', entry.isIntersecting);\n  });\n}\n```\n\n这实际上是使用`Intersection Observer`完成此任务的非常简单的示例。 唯一的例外是`rootMargin`中的-100％值。 请注意，这对于其他三个方面也可以重复； 它只需要一个具有自己独特的`rootMargin`的新观察者，对于相应方面，它具有-100％的值。 将会有更多独特的粘性容器，它们具有自己的类，例如`sticky-container-top`和`sticky-container-bottom`。\n\n这样做的限制是，粘性元素的top，right，bottom或left属性必须始终为零。 从技术上讲，你可以使用其他值，但随后必须进行数学运算以找出`rootMargin`的正确值。 这很容易做到，但是如果调整大小，不仅需要再次进行数学运算，还必须停止观察者并使用新值重新启动它。 将position属性设置为零，并使用内部元素以所需的方式设置样式更加容易。\n\n# 和滚动事件结合\n\n到目前为止，我们已经在一些演示中看到了，`intersectionRatio`可能不精确且有些局限。使用滚动事件可以更精确，但会降低性能的效率。那把两者结合起来怎么样？\n\n[demo4](https://cdpn.io/talmand/fullembedgrid/wvwjBry?type=embed&animations=run)\n\n在此demo中，我们创建了一个`Intersection Observer`，并且回调函数的唯一目的是添加和删除侦听根元素上的scroll事件的事件侦听器。 当目标首次进入根元素时，将创建滚动事件侦听器，然后在目标离开根元素时将其删除。 滚动时，输出仅显示每个事件的时间戳，以实时显示事件的变化-比单独的观察者要精确得多。\n\n下面是JavaScript。\n\n```js\nconst root = document.querySelector('#root');\nconst target = document.querySelector('#target');\nconst output = document.querySelector('#output pre');\nconst io_options = {\n  root: root,\n  rootMargin: '0px',\n  threshold: 0\n};\nlet io_observer;\n\nfunction scrollingEvents (e) {\n  output.innerText = e.timeStamp;\n}\n\nfunction io_callback (entries) {\n  if (entries[0].isIntersecting) {\n    root.addEventListener('scroll', scrollingEvents);\n  } else {\n    root.removeEventListener('scroll', scrollingEvents);\n    output.innerText = 0;\n  }\n}\n\nio_observer = new IntersectionObserver(io_callback, io_options);\nio_observer.observe(target);\n```\n\n这是一个相当标准的例子。 请注意，我们希望阈值为零，因为如果阈值不止一个，我们将同时获得多个事件监听器。 回调函数是我们感兴趣的，甚至是一个简单的设置：在if-else块中添加和删除事件监听器。 事件的回调函数仅更新输出中的div。 每当目标触发相交变化并且不与根相交时，我们会将输出设置回零。\n\n这个实例利用了`Intersection Observer`和滚动事件的优点。 考虑使用一个滚动动画库，该动画库仅在页面上需要它的部分实际可见时才起作用。 库和滚动事件在整个页面中并非无效地活动。\n\n# 浏览器的有趣差异\n\n您可能想知道`Intersection Observer`有多少浏览器支持。 实际上，还蛮多的！\n\n该浏览器支持数据来自Caniuse，更多信息。 数字表示浏览器支持该版本及更高版本的功能。\n\n![Caniuse](https://img11.360buyimg.com/jdphoto/s939x589_jfs/t1/47754/22/12887/54388/5d9eec58Ea352f2c4/d56f0ccaa8a322a3.png)\n\n所有主要的浏览器都已经支持了一段时间。和预期一样，IE在任何级别都不支持它，但是W3C提供了一个[polyfill](https://github.com/w3c/IntersectionObserver/tree/master/polyfill)来解决这个问题。\n\n当我使用`Intersection Observer`尝试不同的想法时，我确实遇到了两个示例在Firefox和Chrome之间的行为有所不同。我不会在生产站点上使用这些示例，但是这些行为很有趣。\n\n这是第一个示例：\n\n[example1](https://cdpn.io/talmand/fullembedgrid/oNvdQOR?type=embed&animations=run)\n\n目标元素通过CSS transform属性在根元素内移动。 该演示具有CSS动画，该动画可在水平轴上将目标元素移入和移出根元素。 当目标元素进入或离开根元素时，`intersectionRatio`会更新。\n\n如果您在Firefox中查看此演示，则应在目标元素前后滑动时正确地看到`intersectionRatio`更新。 Chrome的行为有所不同，完全不更新`intersectionRatio`。 Chrome似乎没有保留使用CSS转换过的目标元素的标签。 但是，如果我们在目标元素移入和移出根元素时在浏览器中四处移动鼠标，则`intersectionRatio`确实会更新。 我的猜测是，只有在存在某种形式的用户交互时，Chrome才会“激活”观察者。\n\n这是第二个示例：\n\n[example2](https://cdpn.io/talmand/fullembedgrid/mdbLQZJ?type=embed&animations=run)\n\n这次，我们[对一个剪裁路径进行动画处理](https://css-tricks.com/animating-with-clip-path/)，该剪裁路径将一个正方形变成重复循环中的一个圆形。正方形与根元素的大小相同，因此我们得到的`intersectionRatio`将始终小于1。随着剪裁路径的动画化，Firefox根本不会更新`intersectionRatio`。这次移动鼠标不起作用。Firefox只是忽略元素大小的变化。另一方面，Chrome实际上会实时更新`intersectionRatio`显示。即使没有用户交互，也会发生这种情况。\n\n之所以会发生这种情况，是因为规范的一部分指出[交集区域（intersectionRect）的边界](https://www.w3.org/TR/intersection-observer/#calculate-intersection-rect-algo)应包括剪裁目标元素。\n\n> 如果容器具有溢出剪裁或css[剪裁路径](https://www.w3.org/TR/css-masking-1/#propdef-clip-path)属性，请通过应用容器的剪裁来更新intersectionRect。\n\n因此，当剪裁目标时，将重新计算相交区域的边界。 Firefox显然尚未实现。\n\n# Intersection Observer, version 2\n\n那么，该API的未来前景如何？\n\n[Google提供了一些建议](https://developers.google.com/web/updates/2019/02/intersectionobserver-v2)，这些建议会为观察者添加一个有趣的功能。 即使Intersection Observer告诉我们目标元素何时跨越根元素的边界，也不一定意味着该元素实际上对用户是可见的。 它可能具有零不透明度，或者可能被页面上的另一个元素覆盖。 观察者能不能被用来确定这些事情？\n\n请记住，我们仍在早期阶段才使用此功能，因此不应在生产代码中使用它。 这是[更新后的提案](https://szager-chromium.github.io/IntersectionObserver/)，其中突出显示了与规范第一个版本的差异。\n\n如果您一直在使用Chrome浏览本文中的演示，则可能已经注意到控制台中的几件事-例如Firefox中未出现的`entries`对象属性。 这是Firefox在控制台中打印内容的示例：\n\n```js\nIntersectionObserver\n  root: null\n  rootMargin: \"0px 0px 0px 0px\"\n  thresholds: Array [ 0 ]\n  <prototype>: IntersectionObserverPrototype { }\n\nIntersectionObserverEntry\n  boundingClientRect: DOMRect { x: 9, y: 779, width: 707, ... }\n  intersectionRatio: 0\n  intersectionRect: DOMRect { x: 0, y: 0, width: 0, ... }\n  isIntersecting: false\n  rootBounds: null\n  target: <div class=\"item\">\n  time: 261\n  <prototype>: IntersectionObserverEntryPrototype { }\n\n  ```\n  现在，这是来自Chrome中相同控制台代码的输出：\n\n  ```js\n\n  IntersectionObserver\n  delay: 500\n  root: null\n  rootMargin: \"0px 0px 0px 0px\"\n  thresholds: [0]\n  trackVisibility: true\n  __proto__: IntersectionObserver\n\nIntersectionObserverEntry\n  boundingClientRect: DOMRectReadOnly {x: 9, y: 740, width: 914, height: 146, top: 740, ...}\n  intersectionRatio: 0\n  intersectionRect: DOMRectReadOnly {x: 0, y: 0, width: 0, height: 0, top: 0, ...}\n  isIntersecting: false\n  isVisible: false\n  rootBounds: null\n  target: div.item\n  time: 355.6550000066636\n  __proto__: IntersectionObserverEntry\n\n  ```\n\n在一些属性（例如`target`和`prototype`）的显示方式上存在一些差异，但是它们在两种浏览器中的操作相同。区别在于Chrome具有Firefox中不会显示的一些其他属性。`observer`对象具有一个称为`trackVisibility`的布尔值，一个称为`delay`的数字，并且`entry`对象具有一个称为`isVisible`的布尔值。这些是新提议的属性，这些属性试图确定目标元素是否实际上对用户可见。\n\n我将对这些属性进行简要说明，但如果您需要更多详细信息，请阅读[此文章](https://developers.google.com/web/updates/2019/02/intersectionobserver-v2)。\n\n`trackVisibility`属性是在`options`对象中提供给观察者的布尔值。此属性可以使浏览器承担确定目标元素的真实可见性的任务。\n\n`delay`属性用途的猜测：它将交集改变的回调方法延迟指定的时间（以毫秒为单位）。这有点类似于将回调函数的代码包装在`setTimeout`中。为了使`trackVisibility`起作用，该值是必需的，并且必须至少为100。如果未提供适当的值，则控制台将显示此错误，并且将不会创建观察者。\n\n```\nUncaught DOMException: Failed to construct 'IntersectionObserver': To enable the \n'trackVisibility' option, you must also use a 'delay' option with a value of at\nleast 100. Visibility is more expensive to compute than the basic intersection;\nenabling this option may negatively affect your page's performance.\nPlease make sure you really need visibility tracking before enabling the\n'trackVisibility' option.\n```\n\n目标`entry`对象中的`isVisible`属性是报告可见性跟踪输出的布尔值。可以将它用作任何代码的一部分，就像使用`isIntersecting`一样。\n\n在我使用这些功能进行的所有实验中，看到它实际上有时候有效有时候无效。 例如，当元素清晰可见时，延迟始终有效，但是isVisible并不总是报告true（至少对我而言）。 有时这是设计使然，因为规范确实允许出现[第二类错误](https://szager-chromium.github.io/IntersectionObserver/#calculate-visibility-algo)。这将有助于解释不一致的结果。\n\n我个人迫不及待地希望这项功能尽快完成，并在所有支持`Intersection Observer`的浏览器中都能正常工作。\n\n# 写在最后\n\n我对`Intersection Observer`的研究到此结束。 我花了很多晚上研究，试验和构建示例，以了解其工作原理。 这篇文章涉及了一些有关如何利用观察者的不同功能的新想法。除此之外，我觉得我可以清晰的解释观察者的工作原理。希望本文对你有所帮助。","slug":"【译】interection-observer如何观察变化","published":1,"updated":"2019-11-20T05:13:20.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vfls00031soyx2r37ripk","content":"<blockquote>\n<p>原文地址：<a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/</a><br>原文作者：Travis Almand<br>翻译：刘辉</p>\n</blockquote>\n<p>有几篇精彩的文章探讨了如何使用<code>Intersection Observer API</code>，包括Phil Hawksworth，Preethi和Mateusz Rybczonek等。 我这篇文章将讲一些不一样的东西。 我在今年早些时候有幸向达拉斯VueJS聚会介绍了VueJS过渡组件，我在CSS-Tricks的第一篇文章就是以此为基础的。 在演讲的问答环节中，有人问我基于滚动事件触发过渡怎么样 - 我说当然可以，但是一些听众建议我了解一下<code>Intersection Observer</code>。</p>\n<p>这让我开始思考。我对<code>Intersection Observer</code>有基本的了解，并且能够用其完成简单的示例。 我是否知道它的工作原理而不仅仅是使用它？它到底为我们开发人员提供了什么？ 作为一个资深开发者，我如何向新手甚至不知道它存在的开发者解释它的工作原理？</p>\n<a id=\"more\"></a>\n\n<p>在花了一些时间进行研究，测试和验证后，我决定分享自己学到的东西。</p>\n<h1 id=\"Intersection-Observer-简述\"><a href=\"#Intersection-Observer-简述\" class=\"headerlink\" title=\"Intersection Observer 简述\"></a>Intersection Observer 简述</h1><p>W3C公共工作草案摘要（日期为2017年9月14日的初稿）将<code>Intersection Observer API</code>描述为：</p>\n<blockquote>\n<p>本规范描述了一个API，可用于了解DOM元素（<code>targets</code>）相对于包含元素或顶级视口（<code>root</code>）的可见性和位置。 该位置是异步传递的，对于理解元素的可见性以及实现DOM内容的预加载和延迟加载很有用。</p>\n</blockquote>\n<p>这个API的总体思路是提供一种观察子元素并在其进入其父元素之一的边界框内时得到通知的方法。 目标元素滚动到根元素视图中时最常用。 在引入<code>Intersection Observer</code>之前，此类功能是通过侦听滚动事件来完成的。</p>\n<p>尽管<code>Intersection Observer</code>是针对此类功能的更高性能的解决方案，但我不建议我们将其视为滚动事件的替代品。 相反，我建议我们将此API视为与滚动事件在功能上互补的额外工具。 在某些情况下，两者可以一起解决特定的问题。</p>\n<h1 id=\"基本示例\"><a href=\"#基本示例\" class=\"headerlink\" title=\"基本示例\"></a>基本示例</h1><p>我知道我有可能重复其他文章中已经讲过的内容，不过还是让我们先来看一个<code>Intersection Observer</code>的基本示例及其提供的能力。</p>\n<p>Observer由四部分组成：</p>\n<ol>\n<li><code>root</code>，是观察者所绑定的父元素，可以是viewport</li>\n<li><code>target</code>，它是被观察的子元素，可以有多个</li>\n<li><code>options</code>对象，它定义了观察者某些方面的行为</li>\n<li>回调函数，每次观察到父子元素的交集变化时都会调用</li>\n</ol>\n<p>基本示例的代码如下所示：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> options = &#123;</span><br><span class=\"line\">  root: <span class=\"hljs-built_in\">document</span>.body,</span><br><span class=\"line\">  rootMargin: <span class=\"hljs-string\">'0px'</span>,</span><br><span class=\"line\">  threshold: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callback</span> (<span class=\"hljs-params\">entries, observer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(observer);</span><br><span class=\"line\">  </span><br><span class=\"line\">  entries.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">entry</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(entry);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> observer = <span class=\"hljs-keyword\">new</span> IntersectionObserver(callback, options);</span><br><span class=\"line\">observer.observe(targetElement);</span><br></pre></td></tr></table></figure>\n\n<p>代码的第一部分是<code>options</code>对象，它具有<code>root</code>，<code>rootMargin</code>和<code>threshold</code>属性。</p>\n<p><code>root</code>是父元素，一般是有滚动条的元素，其中包含被观察的元素。根据需要，这几乎可以是页面上的任何单个元素。如果不提供该属性，或者该值设置为null，跟元素就是viewport。</p>\n<p><code>rootMargin</code>描述了根元素的外边距，由<code>rootMargin</code>规定的矩形的每一边都会被添加至root元素的边框盒(bounding box)的相应边。它的行为很像CSS margin属性。你可以使用类似10px 15px 20px的值，这使我们的顶部边距为10px，左侧和右侧边距为15px，底部边距为20px。仅边界框受影响，元素本身不受影响。请记住，唯一允许的长度是像素和百分比值，可以是负数或正数。另请注意，如果root元素不是页面上的实际元素（例如viewport），则<code>rootMargin</code>无效。</p>\n<p><code>threshold</code>是用于确定何时触发交集改变事件的值。数组中可以包含多个值，以便同一目标可以多次触发交集改变事件。不同的值是使用0到1的百分比，非常类似于CSS中的不透明度，因此将0.5的值视为50％，依此类推。这些值与目标的交叉比例有关，稍后将对其进行说明。阈值为0时，目标元素的第一个像素与根元素相交就会触发交集改变事件。阈值为1时，整个目标元素都在根元素内部时才会触发交集改变事件。</p>\n<p>代码的第二部分是回调函数，只要观察到交集改变，就会调用该函数。传递了两个参数；<code>entries</code>是个数组，代表触发交集更改的每个目标元素。这提供了很多信息为开发人员所用。第二个参数是有关观察者本身的信息。如果目标绑定到多个观察者，可以通过此参数识别是哪个观察者。</p>\n<p>代码的第三部分是观察者本身的创建以及观察对象。创建观察者时，回调函数和<code>options</code>对象可以放在观察者外部。 如果需要，可以在多个观察者之间使用相同的回调和<code>options</code>对象。然后，将需要观察的目标元素传递给<code>observe()</code>方法。它只能接受一个目标，但是可以在同一观察者上针对多个目标重复调用该方法。</p>\n<p>注意代码中的console.log,可以看看控制台输出了什么。</p>\n<h2 id=\"观察者对象\"><a href=\"#观察者对象\" class=\"headerlink\" title=\"观察者对象\"></a>观察者对象</h2><p>传递给回调函数的观察者数据如下：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntersectionObserver</span><br><span class=\"line\">  root: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">  rootMargin: <span class=\"hljs-string\">\"0px 0px 0px 0px\"</span></span><br><span class=\"line\">  thresholds: <span class=\"hljs-built_in\">Array</span> [ <span class=\"hljs-number\">0</span> ]</span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverPrototype &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>…本质上是创建对象时传递给观察者的选<code>options</code>对象。 这可用于确定相交所绑定的根元素。 注意即使原始选项对象的<code>rootMargin</code>值为0px，该对象也将其转为0px 0px 0px 0px，这是CSS边距规范所需要的。然后是观察者正在使用的一系列阈值。</p>\n<h2 id=\"entry对象\"><a href=\"#entry对象\" class=\"headerlink\" title=\"entry对象\"></a>entry对象</h2><p>传递给回调函数的<code>entry</code>对象数据如下：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntersectionObserverEntry</span><br><span class=\"line\">  boundingClientRect: DOMRect</span><br><span class=\"line\">    bottom: <span class=\"hljs-number\">923.3999938964844</span>, <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">771</span></span><br><span class=\"line\">    height: <span class=\"hljs-number\">152.39999389648438</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">411</span></span><br><span class=\"line\">    left: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">420</span></span><br><span class=\"line\">    x: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">771</span></span><br><span class=\"line\">    &lt;prototype&gt;: DOMRectPrototype &#123; &#125;</span><br><span class=\"line\">  intersectionRatio: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  intersectionRect: DOMRect</span><br><span class=\"line\">    bottom: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    height: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    left: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    x: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    &lt;prototype&gt;: DOMRectPrototype &#123; &#125;</span><br><span class=\"line\">  isIntersecting: <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  rootBounds: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">  target: <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-xml\">  time: 522</span></span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverEntryPrototype &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里做了很多工作。</p>\n<p>对于大多数开发人员而言，最可能有用的两个属性是<code>intersectionRatio</code>和<code>isIntersecting</code>。 <code>isIntersecting</code>属性是一个布尔值，在交集更改时目标元素与根元素是否相交。<code>intersectionRatio</code>是当前与根元素相交的目标元素的百分比。它也是零到一之间的百分比表示，非常类似于观察者的<code>options</code>对象中<code>threshold</code>。</p>\n<p>三个属性（<code>boundingClientRect</code>，<code>intersectionRect</code>和<code>rootBounds</code>）表示交集相关的三个方面的具体数据。 <code>boundingClientRect</code>属性为目标元素的边界框提供从viewport左上角开始的bottom，left，right和top值，就像<code>Element.getBoundingClientRect()</code>一样。然后，将目标元素的高度和宽度作为X和Y坐标提供。 <code>rootBounds</code>属性为根元素提供相同形式的数据。<code>intersectionRect</code>提供相似的数据，它描述了由目标元素在根元素内部的相交区域形成的矩形，该区域也被用于计算<code>intersectionRatio</code>值。传统的滚动事件需要手动完成此计算。</p>\n<p>要注意的是，代表这些不同元素的所有这些形状始终都是矩形。无论所涉及元素的实际形状如何，它们总是会缩小到包含该元素的最小矩形。</p>\n<p><code>target</code>属性是指正在观察的目标元素。在观察者包含多个目标的情况下，这是确定哪个目标元素触发了此相交更改的简便方法。</p>\n<p><code>time</code>属性提供从首次创建观察者到触发此交集改变的时间（以毫秒为单位）。通过这种方式，你可以跟踪观看者遇到特定目标所花费的时间。即使稍后将目标再次滚动到视图中，此属性也会提供新的时间。这可用于跟踪目标进入和离开根元素的时间。</p>\n<p>除了每次观察到交集改变时我们可以获得这些信息外，观察者第一次启动时也会向我们提供这些信息。例如，在页面加载时，页面上的观察者将立即调用回调函数，并提供它正在观察的每个目标元素的当前状态。</p>\n<p><code>Intersection Observer</code>以非常高效的方式提供了有关页面上元素之间关系的数据。</p>\n<h1 id=\"Intersection-Observer-可用的方法\"><a href=\"#Intersection-Observer-可用的方法\" class=\"headerlink\" title=\"Intersection Observer 可用的方法\"></a>Intersection Observer 可用的方法</h1><p>Intersection Observer 主要有三个方法：observe()，unobserve()和disconnect()。</p>\n<ul>\n<li>observe()：observe方法用来添加观察者要监视的目标元素。 观察者可以具有多个目标元素，但是此方法一次只能接受一个目标。</li>\n<li>unobserve()：unobserve方法用来从观察的元素列表中移除元素。</li>\n<li>disconnect()：disconnect方法用来停止观察其所有目标元素。观察者本身仍处于活动状态，但没有目标。在disconnect()之后，目标元素仍然可以通过observe()传递给观察者。</li>\n</ul>\n<p>这些方法提供了监视和取消监视目标元素的功能，但是一旦创建，便无法更改传递给观察者的<code>options</code>对象。 如果需要修改，则必须手动重新创建观察者。</p>\n<h1 id=\"Intersection-Observer和滚动事件的性能对比\"><a href=\"#Intersection-Observer和滚动事件的性能对比\" class=\"headerlink\" title=\"Intersection Observer和滚动事件的性能对比\"></a>Intersection Observer和滚动事件的性能对比</h1><p>在探索Intersection Observer以及将其与使用滚动事件进行比较时，我需要进行一些性能测试。我只想大致了解两者之间的性能差异，为此我创建了三个简单的测试。</p>\n<p>首先，我创建了一个样本HTML文件，该文件包含一百个设置了高度的div，以此创建一个长滚动页面。把页面放在静态服务器上，然后我用Puppeteer加载了HTML文件，启动了跟踪，让页面以预设的增量向下滚动到底部，一旦到达底部，就停止了跟踪，最后保存跟踪的结果。这样测试可以重复多次并输出每次的结果数据。然后，我复制了样本HTML，并为要运行的每种测试类型在脚本标签中编写了js。每个测试都有两个文件：一个用于<code>Intersection Observer</code>，另一个用于滚动事件。</p>\n<p>所有测试的目的是检测目标元素何时以25％的增量向上滚动通过视口。每次增加时，都会应用CSS类来更改元素的背景颜色。换句话说，每个元素都应用了DOM修改，这将触发重绘。每次测试都在两台不同的计算机上运行了五次：我的开发用的Mac是最新的设备，而我的个人Windows 7计算机可能是当前的平均水平。记录脚本，渲染，绘画和系统的跟踪结果，然后取平均值。</p>\n<p>第一个测试有一个观察者或一个滚动事件，每个事件都有一个回调。对于观察者和滚动事件，这是一个相当标准的设置。尽管在这种情况下，滚动事件还有很多工作要做，因为滚动事件试图模仿观察者默认提供的数据。完成所有这些计算后，就像观察者一样，将数据存储在条目数组中。然后，在两者之间删除和应用类的功能完全相同。另外我使用了<code>requestAnimationFrame</code>对滚动事件进行了节流处理。</p>\n<p>第二个测试有100个观察者或100个滚动事件，每种类型都有一个回调。每个元素都分配有自己的观察者和事件，但回调函数相同。这实际上是低效的，因为每个观察者和事件的行为都完全相同，但是我想要一个简单的压力测试，而不必创建100个唯一的观察者和事件-尽管我已经看到了许多以这种方式使用观察者的示例。</p>\n<p>第三次测试具有100个观察者或100个滚动事件，每种类型具有100个回调。这意味着每个元素都有其自己的观察器，事件和回调函数。当然，这是极其低效的，因为这是存储在巨大阵列中的所有重复功能。但是这种低效率是该测试的重点。</p>\n<p><img src=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1165,f_auto,q_auto/v1568831070/observer-01_wzz6he.png\" alt=\"Intersection Observer和滚动事件的压力测试对比\"></p>\n<p>在上面的图表中，你可以看到，第一列代表我们的基准，根本没有运行JavaScript。接下来的两列代表第一种测试类型。 Mac的运行都非常好，符合我对开发用高端计算机的预期。 Windows机器给了我们一个不一样的结果。对我来说，主要的兴趣点是红色所代表的脚本。在Mac上，观察者的差异约为88毫秒，而滚动事件的差异约为300毫秒。在Mac上，每种测试的总体结果都相当接近，但是脚本在滚动事件方面表现出色。对于Windows机器，它要差得多得多。观察者大约是150毫秒，而第一次和最简单的测试是1400毫秒。</p>\n<p>对于第二个测试，我们开始看到滚动测试的效率变得更加明显。 Mac和Windows机器都运行了观察者测试，结果与以前几乎相同。对于滚动事件测试，脚本陷入了更多困境，无法完成给定的任务。 Mac跃升到几乎一整秒的脚本编写时间，而Windows计算机跃升到惊人的3200ms。</p>\n<p>对于第三次测试，情况没有变坏。结果与第二项测试大致相同。要注意的一件事是，在所有三个测试中，观察者的结果对于两台计算机都是一致的。尽管没有为提高观察者测试的效率做出任何优化，但<code>Intersection Observer</code>的性能表现还是远远超过了滚动事件。</p>\n<p>因此，在我自己的两台机器上进行了非科学性测试之后，我感到对滚动事件和<code>Intersection Observer</code>之间的性能差异有一个不错的了解。 我敢肯定，我可以通过一些努力使滚动事件更有效，但这值得吗？ 在某些情况下，滚动事件的精度是必需的，但是在大多数情况下，<code>Intersection Observer</code>就足够了-尤其是因为它看起来更加高效，而无需付出任何努力。</p>\n<h1 id=\"搞清intersectionRatio属性\"><a href=\"#搞清intersectionRatio属性\" class=\"headerlink\" title=\"搞清intersectionRatio属性\"></a>搞清intersectionRatio属性</h1><p><code>IntersectionObserverEntry</code>给我们提供的<code>intersectionRatio</code>属性，表示目标元素在交集更改上的根元素边界内的百分比。 我发现我一开始不太了解这个值的实际含义。 由于某种原因，我认为这是目标元素外观的一种简单的0％到100％的表示形式。 它与创建时传递给观察者的阈值相关。 例如，它可用于确定哪个阈值是刚刚触发相交更改的原因。 但是，它提供的值并不总是很简单。</p>\n<p>以这个demo为例：</p>\n<p>  <a href=\"https://codepen.io/talmand/embed/VwZXpaj?height=632&theme-id=1&default-tab=result&user=talmand&slug-hash=VwZXpaj&pen-title=Intersection%20Observer%3A%20intersectionRatio&name=cp_embed_1\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>在此demo中，已为观察者分配了父容器作为根元素。 具有目标背景的子元素已分配为目标元素。 已创建阈值数组，其中包含100个条目，其顺序为0、0.01、0.02、0.03，依此类推，直到1。观察者触发目标元素在根元素内部出现或消失的每一个百分比，以便每当比率 更改至少百分之一，此框下方的输出文本将更新。 如果您感到好奇，可以使用以下代码来完成此阈值：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...Array(<span class=\"hljs-number\">100</span>).keys()].map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x / <span class=\"hljs-number\">100</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我不建议你以这种方式为项目中的具体用途设置阈值。</p>\n<p>首先，目标元素完全包含在根元素中，并且按钮上方的输出将显示比率1。它应该是第一次加载的，但是我们很快就会发现该比率并不总是精确的；该数字可能在0.99到1之间。这似乎很奇怪，但是有可能发生，因此，如果你对等于特定值的比率进行检查，请记住这一点。</p>\n<p>单击“left”按钮将使目标元素向左转换，以使其一半在根元素中，另一半不在。然后，ratioRatio应该更改为0.5，或者接近0.5。现在我们知道目标元素的一半与根元素相交，但是我们不知道它在哪里。以后再说。</p>\n<p>单击“top”按钮具有相同的功能。它将目标元素转换为根元素的顶部，并再次将其移入和移出。再一次，交集比率应该在0.5左右。即使目标元素位于与以前完全不同的位置，结果比率也相同。</p>\n<p>再次单击“corner”按钮，会将目标元素转换为根元素的右上角。此时，目标元素中只有四分之一位于根元素内。intersectionRatio应以大约0.25的值反映出来。单击“center”会将目标元素转换回中心并完全包含在根元素中。</p>\n<p>如果单击“large”按钮，则将目标元素的高度更改为高于根元素。相交比应为0.8左右。这是依赖intersectionRatio的棘手部分。根据提供给观察者的阈值创建代码可以使阈值永远不会触发。在此“large”示例中，基于阈值1的任何代码都将无法执行。还要考虑可以调整根元素大小的情况，例如将视口从纵向旋转为横向。</p>\n<h1 id=\"查找位置\"><a href=\"#查找位置\" class=\"headerlink\" title=\"查找位置\"></a>查找位置</h1><p>那么，我们如何知道目标元素相对于根元素的位置呢？此数据由<code>IntersectionObserverEntry</code>提供，因此我们只需要进行简单的比较即可。</p>\n<p>看这个demo:</p>\n<p><a href=\"https://codepen.io/talmand/embed/dybmvZN?height=631&theme-id=1&default-tab=result&user=talmand&slug-hash=dybmvZN&pen-title=Intersection%20Observer%3A%20Finding%20the%20Position&name=cp_embed_2\" target=\"_blank\" rel=\"noopener\">demo2</a></p>\n<p>该演示的设置与之前的设置大致相同。 父容器是根元素，内部具有目标背景的子容器是目标元素。 阈值是一个0、0.5和1的数组。在根元素中滚动时，将出现目标，并且其位置将在按钮上方的输出中报告。</p>\n<p>下面执行这些检查的代码：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#output pre'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">io_callback</span> (<span class=\"hljs-params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> ratio = entries[<span class=\"hljs-number\">0</span>].intersectionRatio;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> boundingRect = entries[<span class=\"hljs-number\">0</span>].boundingClientRect;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> intersectionRect = entries[<span class=\"hljs-number\">0</span>].intersectionRect;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (ratio === <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">    output.innerText = <span class=\"hljs-string\">'outside'</span>;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ratio &lt; <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (boundingRect.top &lt; intersectionRect.top) &#123;</span><br><span class=\"line\">      output.innerText = <span class=\"hljs-string\">'on the top'</span>;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      output.innerText = <span class=\"hljs-string\">'on the bottom'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    output.innerText = <span class=\"hljs-string\">'inside'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我应该指出，我没有遍历entrys数组，因为我知道总是只有一个条目，因为只有一个目标。我走了捷径，使用<code>entries[0]</code>。</p>\n<p>您会发现比率为零会将目标置于“外部”。小于1的比率将其放在顶部或底部。这样一来，我们就可以查看目标的“顶部”是否小于交集矩形的顶部，这实际上意味着目标在页面上更高，并被视为“顶部”。实际上，检查根元素的“顶部”也可以解决此问题。从逻辑上讲，如果目标不在顶部，则它必须在底部。如果比率恰好等于1，则它在根元素“内部”。除了使用left或right属性检查水平位置外，其他检查方法相同。</p>\n<p>这是高效使用<code>Intersection Observer</code>的一部分。开发人员无需在节流的滚动事件上从多处请求此数据，然后进行计算。它是由观察者提供的，所需要的只是一个简单的if检查。</p>\n<p>首先，目标元素要比根元素高，因此永远不会将其报告为“内部”。单击“切换目标大小”按钮以使其小于根。现在，上下滚动时目标元素可以位于根元素内部。</p>\n<p>通过再次单击“toggle target size”，然后单击“toggle root size”按钮，将目标元素恢复为其原始大小。这将调整根元素的大小，使其比目标元素高。再次，当上下滚动时，目标元素可能位于根元素内部。</p>\n<p>此demo演示了有关<code>Intersection Observer</code>的两件事：如何确定目标元素相对于根元素的位置以及调整两个元素的大小时会发生什么。这种对调整大小的响应让我们看到了<code>Intersection Observer</code>相对于滚动事件的另一个优势-不用再单独处理resize事件。</p>\n<h1 id=\"创建位置粘性事件\"><a href=\"#创建位置粘性事件\" class=\"headerlink\" title=\"创建位置粘性事件\"></a>创建位置粘性事件</h1><p><a href=\"https://css-tricks.com/almanac/properties/p/position/#article-header-id-3\" target=\"_blank\" rel=\"noopener\">CSS position属性的“sticky”</a>是一个有用的功能，但在CSS和JavaScript方面却有一些限制。粘性节点的样式只能是一种设计，无论是处于其正常状态还是处于其粘性状态内。没办法让js知道这些变化。到目前为止，还没有伪类或js事件使我们知道元素的状态变化。</p>\n<p>我已经看到了使用滚动事件和<code>Intersection Observer</code>进行粘性定位事件的示例。使用滚动事件的解决方案始终存在与将滚动事件用于其他目的相似的问题。观察者的通常解决方案是用一个定位元素，仅作为观察者的目标元素使用。我喜欢避免使用诸如此类的单一目的的元素，因此我决定修改这个特定的想法。</p>\n<p>在此demo中，上下滚动以查看章节标题对各自章节的粘性反应。</p>\n<p><a href=\"https://codepen.io/talmand/embed/ExYLayz?height=400&theme-id=1&default-tab=result&user=talmand&slug-hash=ExYLayz&pen-title=Intersection%20Observer%3A%20Position%20Sticky%20Event&name=cp_embed_3\" target=\"_blank\" rel=\"noopener\">demo3</a></p>\n<p>这个示例检测粘性元素何时位于滚动容器顶部，然后给其添加一个css类。 这是通过在给观察者特定的<code>rootMargin</code>时利用DOM的一个有趣的特性来实现的。 给出的值是：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rootMargin: <span class=\"hljs-string\">'0px 0px -100% 0px'</span></span><br></pre></td></tr></table></figure>\n\n<p>这样会将根边界的底部边缘推到根元素的顶部，从而留下一小部分可用于相交检测的零像素区域。 可以说，即使目标元素碰触到零像素区域，也会触发相交变化，即使它不存在于数字中也是如此。 考虑一下，我们可以在DOM中具有折叠高度为零的元素。</p>\n<p>该解决方案通过识别粘性元素始终位于根元素顶部的“粘性”位置来利用这一优势。 随着滚动的继续，粘性元素最终移出视野，并且相交停止。 因此，我们根据输入对象的<code>isIntersecting</code>属性添加和删除类。</p>\n<p>下面是HTML：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"sticky-container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"sticky-content\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&amp;sect;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Section 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;&#123; content here &#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>class为<code>sticky-container</code>的外部div是观察者的目标。 该div将被设置为粘性元素并充当容器。 用于根据粘性状态设置样式和更改元素的元素是class为<code>sticky-content</code>的div及其子元素。 这样可以确保实际的粘性元素始终与根元素顶部缩小的<code>rootMargin</code>接触。</p>\n<p>下面是CSS：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.sticky-content</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transition</span>: <span class=\"hljs-number\">0.25s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.sticky-content</span> <span class=\"hljs-selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transition</span>: <span class=\"hljs-number\">0.25s</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.sticky-content</span> <span class=\"hljs-selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"hljs-selector-class\">.sticky-container</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.sticky-container</span><span class=\"hljs-selector-class\">.active</span> <span class=\"hljs-selector-class\">.sticky-content</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(0, 0, 0, 0.8);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-selector-class\">.sticky-container</span><span class=\"hljs-selector-class\">.active</span> <span class=\"hljs-selector-class\">.sticky-content</span> <span class=\"hljs-selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">transition</span>: <span class=\"hljs-number\">0.25s</span> <span class=\"hljs-number\">0.5s</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你会看到<code>.sticky-container</code>在top为0的位置创建了我们的粘滞元素。 其余部分是<code>.sticky-content</code>中的常规状态和<code>.active .sticky-content</code>中的粘滞状态样式的混合。 同样，您几乎可以在粘性内容div中做任何您想做的事情。 在此demo中，当粘滞状态处于活动状态时，在延迟的过渡中会出现一个隐藏的章节符号。没有<code>Intersection Observer</code>之类的辅助手段，很难达到这种效果。</p>\n<p>JavaScript：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> stickyContainers = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.sticky-container'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> io_options = &#123;</span><br><span class=\"line\">  root: <span class=\"hljs-built_in\">document</span>.body,</span><br><span class=\"line\">  rootMargin: <span class=\"hljs-string\">'0px 0px -100% 0px'</span>,</span><br><span class=\"line\">  threshold: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> io_observer = <span class=\"hljs-keyword\">new</span> IntersectionObserver(io_callback, io_options);</span><br><span class=\"line\"></span><br><span class=\"line\">stickyContainers.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">  io_observer.observe(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">io_callback</span> (<span class=\"hljs-params\">entries, observer</span>) </span>&#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">entry</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entry.target.classList.toggle(<span class=\"hljs-string\">'active'</span>, entry.isIntersecting);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这实际上是使用<code>Intersection Observer</code>完成此任务的非常简单的示例。 唯一的例外是<code>rootMargin</code>中的-100％值。 请注意，这对于其他三个方面也可以重复； 它只需要一个具有自己独特的<code>rootMargin</code>的新观察者，对于相应方面，它具有-100％的值。 将会有更多独特的粘性容器，它们具有自己的类，例如<code>sticky-container-top</code>和<code>sticky-container-bottom</code>。</p>\n<p>这样做的限制是，粘性元素的top，right，bottom或left属性必须始终为零。 从技术上讲，你可以使用其他值，但随后必须进行数学运算以找出<code>rootMargin</code>的正确值。 这很容易做到，但是如果调整大小，不仅需要再次进行数学运算，还必须停止观察者并使用新值重新启动它。 将position属性设置为零，并使用内部元素以所需的方式设置样式更加容易。</p>\n<h1 id=\"和滚动事件结合\"><a href=\"#和滚动事件结合\" class=\"headerlink\" title=\"和滚动事件结合\"></a>和滚动事件结合</h1><p>到目前为止，我们已经在一些演示中看到了，<code>intersectionRatio</code>可能不精确且有些局限。使用滚动事件可以更精确，但会降低性能的效率。那把两者结合起来怎么样？</p>\n<p><a href=\"https://cdpn.io/talmand/fullembedgrid/wvwjBry?type=embed&animations=run\" target=\"_blank\" rel=\"noopener\">demo4</a></p>\n<p>在此demo中，我们创建了一个<code>Intersection Observer</code>，并且回调函数的唯一目的是添加和删除侦听根元素上的scroll事件的事件侦听器。 当目标首次进入根元素时，将创建滚动事件侦听器，然后在目标离开根元素时将其删除。 滚动时，输出仅显示每个事件的时间戳，以实时显示事件的变化-比单独的观察者要精确得多。</p>\n<p>下面是JavaScript。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#root'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> target = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#target'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#output pre'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> io_options = &#123;</span><br><span class=\"line\">  root: root,</span><br><span class=\"line\">  rootMargin: <span class=\"hljs-string\">'0px'</span>,</span><br><span class=\"line\">  threshold: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> io_observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scrollingEvents</span> (<span class=\"hljs-params\">e</span>) </span>&#123;</span><br><span class=\"line\">  output.innerText = e.timeStamp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">io_callback</span> (<span class=\"hljs-params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (entries[<span class=\"hljs-number\">0</span>].isIntersecting) &#123;</span><br><span class=\"line\">    root.addEventListener(<span class=\"hljs-string\">'scroll'</span>, scrollingEvents);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    root.removeEventListener(<span class=\"hljs-string\">'scroll'</span>, scrollingEvents);</span><br><span class=\"line\">    output.innerText = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">io_observer = <span class=\"hljs-keyword\">new</span> IntersectionObserver(io_callback, io_options);</span><br><span class=\"line\">io_observer.observe(target);</span><br></pre></td></tr></table></figure>\n\n<p>这是一个相当标准的例子。 请注意，我们希望阈值为零，因为如果阈值不止一个，我们将同时获得多个事件监听器。 回调函数是我们感兴趣的，甚至是一个简单的设置：在if-else块中添加和删除事件监听器。 事件的回调函数仅更新输出中的div。 每当目标触发相交变化并且不与根相交时，我们会将输出设置回零。</p>\n<p>这个实例利用了<code>Intersection Observer</code>和滚动事件的优点。 考虑使用一个滚动动画库，该动画库仅在页面上需要它的部分实际可见时才起作用。 库和滚动事件在整个页面中并非无效地活动。</p>\n<h1 id=\"浏览器的有趣差异\"><a href=\"#浏览器的有趣差异\" class=\"headerlink\" title=\"浏览器的有趣差异\"></a>浏览器的有趣差异</h1><p>您可能想知道<code>Intersection Observer</code>有多少浏览器支持。 实际上，还蛮多的！</p>\n<p>该浏览器支持数据来自Caniuse，更多信息。 数字表示浏览器支持该版本及更高版本的功能。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s939x589_jfs/t1/47754/22/12887/54388/5d9eec58Ea352f2c4/d56f0ccaa8a322a3.png\" alt=\"Caniuse\"></p>\n<p>所有主要的浏览器都已经支持了一段时间。和预期一样，IE在任何级别都不支持它，但是W3C提供了一个<a href=\"https://github.com/w3c/IntersectionObserver/tree/master/polyfill\" target=\"_blank\" rel=\"noopener\">polyfill</a>来解决这个问题。</p>\n<p>当我使用<code>Intersection Observer</code>尝试不同的想法时，我确实遇到了两个示例在Firefox和Chrome之间的行为有所不同。我不会在生产站点上使用这些示例，但是这些行为很有趣。</p>\n<p>这是第一个示例：</p>\n<p><a href=\"https://cdpn.io/talmand/fullembedgrid/oNvdQOR?type=embed&animations=run\" target=\"_blank\" rel=\"noopener\">example1</a></p>\n<p>目标元素通过CSS transform属性在根元素内移动。 该演示具有CSS动画，该动画可在水平轴上将目标元素移入和移出根元素。 当目标元素进入或离开根元素时，<code>intersectionRatio</code>会更新。</p>\n<p>如果您在Firefox中查看此演示，则应在目标元素前后滑动时正确地看到<code>intersectionRatio</code>更新。 Chrome的行为有所不同，完全不更新<code>intersectionRatio</code>。 Chrome似乎没有保留使用CSS转换过的目标元素的标签。 但是，如果我们在目标元素移入和移出根元素时在浏览器中四处移动鼠标，则<code>intersectionRatio</code>确实会更新。 我的猜测是，只有在存在某种形式的用户交互时，Chrome才会“激活”观察者。</p>\n<p>这是第二个示例：</p>\n<p><a href=\"https://cdpn.io/talmand/fullembedgrid/mdbLQZJ?type=embed&animations=run\" target=\"_blank\" rel=\"noopener\">example2</a></p>\n<p>这次，我们<a href=\"https://css-tricks.com/animating-with-clip-path/\" target=\"_blank\" rel=\"noopener\">对一个剪裁路径进行动画处理</a>，该剪裁路径将一个正方形变成重复循环中的一个圆形。正方形与根元素的大小相同，因此我们得到的<code>intersectionRatio</code>将始终小于1。随着剪裁路径的动画化，Firefox根本不会更新<code>intersectionRatio</code>。这次移动鼠标不起作用。Firefox只是忽略元素大小的变化。另一方面，Chrome实际上会实时更新<code>intersectionRatio</code>显示。即使没有用户交互，也会发生这种情况。</p>\n<p>之所以会发生这种情况，是因为规范的一部分指出<a href=\"https://www.w3.org/TR/intersection-observer/#calculate-intersection-rect-algo\" target=\"_blank\" rel=\"noopener\">交集区域（intersectionRect）的边界</a>应包括剪裁目标元素。</p>\n<blockquote>\n<p>如果容器具有溢出剪裁或css<a href=\"https://www.w3.org/TR/css-masking-1/#propdef-clip-path\" target=\"_blank\" rel=\"noopener\">剪裁路径</a>属性，请通过应用容器的剪裁来更新intersectionRect。</p>\n</blockquote>\n<p>因此，当剪裁目标时，将重新计算相交区域的边界。 Firefox显然尚未实现。</p>\n<h1 id=\"Intersection-Observer-version-2\"><a href=\"#Intersection-Observer-version-2\" class=\"headerlink\" title=\"Intersection Observer, version 2\"></a>Intersection Observer, version 2</h1><p>那么，该API的未来前景如何？</p>\n<p><a href=\"https://developers.google.com/web/updates/2019/02/intersectionobserver-v2\" target=\"_blank\" rel=\"noopener\">Google提供了一些建议</a>，这些建议会为观察者添加一个有趣的功能。 即使Intersection Observer告诉我们目标元素何时跨越根元素的边界，也不一定意味着该元素实际上对用户是可见的。 它可能具有零不透明度，或者可能被页面上的另一个元素覆盖。 观察者能不能被用来确定这些事情？</p>\n<p>请记住，我们仍在早期阶段才使用此功能，因此不应在生产代码中使用它。 这是<a href=\"https://szager-chromium.github.io/IntersectionObserver/\" target=\"_blank\" rel=\"noopener\">更新后的提案</a>，其中突出显示了与规范第一个版本的差异。</p>\n<p>如果您一直在使用Chrome浏览本文中的演示，则可能已经注意到控制台中的几件事-例如Firefox中未出现的<code>entries</code>对象属性。 这是Firefox在控制台中打印内容的示例：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntersectionObserver</span><br><span class=\"line\">  root: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">  rootMargin: <span class=\"hljs-string\">\"0px 0px 0px 0px\"</span></span><br><span class=\"line\">  thresholds: <span class=\"hljs-built_in\">Array</span> [ <span class=\"hljs-number\">0</span> ]</span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverPrototype &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">IntersectionObserverEntry</span><br><span class=\"line\">  boundingClientRect: DOMRect &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">779</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">707</span>, ... &#125;</span><br><span class=\"line\">  intersectionRatio: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  intersectionRect: DOMRect &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>, ... &#125;</span><br><span class=\"line\">  isIntersecting: <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  rootBounds: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">  target: <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"hljs-xml\">  time: 261</span></span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverEntryPrototype &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  现在，这是来自Chrome中相同控制台代码的输出：</p>\n  <figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  IntersectionObserver</span><br><span class=\"line\">  delay: <span class=\"hljs-number\">500</span></span><br><span class=\"line\">  root: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">  rootMargin: <span class=\"hljs-string\">\"0px 0px 0px 0px\"</span></span><br><span class=\"line\">  thresholds: [<span class=\"hljs-number\">0</span>]</span><br><span class=\"line\">  trackVisibility: <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  __proto__: IntersectionObserver</span><br><span class=\"line\"></span><br><span class=\"line\">IntersectionObserverEntry</span><br><span class=\"line\">  boundingClientRect: DOMRectReadOnly &#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">740</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">914</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">146</span>, <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">740</span>, ...&#125;</span><br><span class=\"line\">  intersectionRatio: <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  intersectionRect: DOMRectReadOnly &#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span>, ...&#125;</span><br><span class=\"line\">  isIntersecting: <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  isVisible: <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  rootBounds: <span class=\"hljs-literal\">null</span></span><br><span class=\"line\">  target: div.item</span><br><span class=\"line\">  time: <span class=\"hljs-number\">355.6550000066636</span></span><br><span class=\"line\">  __proto__: IntersectionObserverEntry</span><br></pre></td></tr></table></figure>\n\n<p>在一些属性（例如<code>target</code>和<code>prototype</code>）的显示方式上存在一些差异，但是它们在两种浏览器中的操作相同。区别在于Chrome具有Firefox中不会显示的一些其他属性。<code>observer</code>对象具有一个称为<code>trackVisibility</code>的布尔值，一个称为<code>delay</code>的数字，并且<code>entry</code>对象具有一个称为<code>isVisible</code>的布尔值。这些是新提议的属性，这些属性试图确定目标元素是否实际上对用户可见。</p>\n<p>我将对这些属性进行简要说明，但如果您需要更多详细信息，请阅读<a href=\"https://developers.google.com/web/updates/2019/02/intersectionobserver-v2\" target=\"_blank\" rel=\"noopener\">此文章</a>。</p>\n<p><code>trackVisibility</code>属性是在<code>options</code>对象中提供给观察者的布尔值。此属性可以使浏览器承担确定目标元素的真实可见性的任务。</p>\n<p><code>delay</code>属性用途的猜测：它将交集改变的回调方法延迟指定的时间（以毫秒为单位）。这有点类似于将回调函数的代码包装在<code>setTimeout</code>中。为了使<code>trackVisibility</code>起作用，该值是必需的，并且必须至少为100。如果未提供适当的值，则控制台将显示此错误，并且将不会创建观察者。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uncaught DOMException: Failed to construct &apos;IntersectionObserver&apos;: To enable the </span><br><span class=\"line\">&apos;trackVisibility&apos; option, you must also use a &apos;delay&apos; option with a value of at</span><br><span class=\"line\">least 100. Visibility is more expensive to compute than the basic intersection;</span><br><span class=\"line\">enabling this option may negatively affect your page&apos;s performance.</span><br><span class=\"line\">Please make sure you really need visibility tracking before enabling the</span><br><span class=\"line\">&apos;trackVisibility&apos; option.</span><br></pre></td></tr></table></figure>\n\n<p>目标<code>entry</code>对象中的<code>isVisible</code>属性是报告可见性跟踪输出的布尔值。可以将它用作任何代码的一部分，就像使用<code>isIntersecting</code>一样。</p>\n<p>在我使用这些功能进行的所有实验中，看到它实际上有时候有效有时候无效。 例如，当元素清晰可见时，延迟始终有效，但是isVisible并不总是报告true（至少对我而言）。 有时这是设计使然，因为规范确实允许出现<a href=\"https://szager-chromium.github.io/IntersectionObserver/#calculate-visibility-algo\" target=\"_blank\" rel=\"noopener\">第二类错误</a>。这将有助于解释不一致的结果。</p>\n<p>我个人迫不及待地希望这项功能尽快完成，并在所有支持<code>Intersection Observer</code>的浏览器中都能正常工作。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>我对<code>Intersection Observer</code>的研究到此结束。 我花了很多晚上研究，试验和构建示例，以了解其工作原理。 这篇文章涉及了一些有关如何利用观察者的不同功能的新想法。除此之外，我觉得我可以清晰的解释观察者的工作原理。希望本文对你有所帮助。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文地址：<a href=\"https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\" target=\"_blank\" rel=\"noopener\">https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/</a><br>原文作者：Travis Almand<br>翻译：刘辉</p>\n</blockquote>\n<p>有几篇精彩的文章探讨了如何使用<code>Intersection Observer API</code>，包括Phil Hawksworth，Preethi和Mateusz Rybczonek等。 我这篇文章将讲一些不一样的东西。 我在今年早些时候有幸向达拉斯VueJS聚会介绍了VueJS过渡组件，我在CSS-Tricks的第一篇文章就是以此为基础的。 在演讲的问答环节中，有人问我基于滚动事件触发过渡怎么样 - 我说当然可以，但是一些听众建议我了解一下<code>Intersection Observer</code>。</p>\n<p>这让我开始思考。我对<code>Intersection Observer</code>有基本的了解，并且能够用其完成简单的示例。 我是否知道它的工作原理而不仅仅是使用它？它到底为我们开发人员提供了什么？ 作为一个资深开发者，我如何向新手甚至不知道它存在的开发者解释它的工作原理？</p>","more":"<p>在花了一些时间进行研究，测试和验证后，我决定分享自己学到的东西。</p>\n<h1 id=\"Intersection-Observer-简述\"><a href=\"#Intersection-Observer-简述\" class=\"headerlink\" title=\"Intersection Observer 简述\"></a>Intersection Observer 简述</h1><p>W3C公共工作草案摘要（日期为2017年9月14日的初稿）将<code>Intersection Observer API</code>描述为：</p>\n<blockquote>\n<p>本规范描述了一个API，可用于了解DOM元素（<code>targets</code>）相对于包含元素或顶级视口（<code>root</code>）的可见性和位置。 该位置是异步传递的，对于理解元素的可见性以及实现DOM内容的预加载和延迟加载很有用。</p>\n</blockquote>\n<p>这个API的总体思路是提供一种观察子元素并在其进入其父元素之一的边界框内时得到通知的方法。 目标元素滚动到根元素视图中时最常用。 在引入<code>Intersection Observer</code>之前，此类功能是通过侦听滚动事件来完成的。</p>\n<p>尽管<code>Intersection Observer</code>是针对此类功能的更高性能的解决方案，但我不建议我们将其视为滚动事件的替代品。 相反，我建议我们将此API视为与滚动事件在功能上互补的额外工具。 在某些情况下，两者可以一起解决特定的问题。</p>\n<h1 id=\"基本示例\"><a href=\"#基本示例\" class=\"headerlink\" title=\"基本示例\"></a>基本示例</h1><p>我知道我有可能重复其他文章中已经讲过的内容，不过还是让我们先来看一个<code>Intersection Observer</code>的基本示例及其提供的能力。</p>\n<p>Observer由四部分组成：</p>\n<ol>\n<li><code>root</code>，是观察者所绑定的父元素，可以是viewport</li>\n<li><code>target</code>，它是被观察的子元素，可以有多个</li>\n<li><code>options</code>对象，它定义了观察者某些方面的行为</li>\n<li>回调函数，每次观察到父子元素的交集变化时都会调用</li>\n</ol>\n<p>基本示例的代码如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  root: <span class=\"built_in\">document</span>.body,</span><br><span class=\"line\">  rootMargin: <span class=\"string\">'0px'</span>,</span><br><span class=\"line\">  threshold: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span> (<span class=\"params\">entries, observer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(observer);</span><br><span class=\"line\">  </span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">entry</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(entry);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(callback, options);</span><br><span class=\"line\">observer.observe(targetElement);</span><br></pre></td></tr></table></figure>\n\n<p>代码的第一部分是<code>options</code>对象，它具有<code>root</code>，<code>rootMargin</code>和<code>threshold</code>属性。</p>\n<p><code>root</code>是父元素，一般是有滚动条的元素，其中包含被观察的元素。根据需要，这几乎可以是页面上的任何单个元素。如果不提供该属性，或者该值设置为null，跟元素就是viewport。</p>\n<p><code>rootMargin</code>描述了根元素的外边距，由<code>rootMargin</code>规定的矩形的每一边都会被添加至root元素的边框盒(bounding box)的相应边。它的行为很像CSS margin属性。你可以使用类似10px 15px 20px的值，这使我们的顶部边距为10px，左侧和右侧边距为15px，底部边距为20px。仅边界框受影响，元素本身不受影响。请记住，唯一允许的长度是像素和百分比值，可以是负数或正数。另请注意，如果root元素不是页面上的实际元素（例如viewport），则<code>rootMargin</code>无效。</p>\n<p><code>threshold</code>是用于确定何时触发交集改变事件的值。数组中可以包含多个值，以便同一目标可以多次触发交集改变事件。不同的值是使用0到1的百分比，非常类似于CSS中的不透明度，因此将0.5的值视为50％，依此类推。这些值与目标的交叉比例有关，稍后将对其进行说明。阈值为0时，目标元素的第一个像素与根元素相交就会触发交集改变事件。阈值为1时，整个目标元素都在根元素内部时才会触发交集改变事件。</p>\n<p>代码的第二部分是回调函数，只要观察到交集改变，就会调用该函数。传递了两个参数；<code>entries</code>是个数组，代表触发交集更改的每个目标元素。这提供了很多信息为开发人员所用。第二个参数是有关观察者本身的信息。如果目标绑定到多个观察者，可以通过此参数识别是哪个观察者。</p>\n<p>代码的第三部分是观察者本身的创建以及观察对象。创建观察者时，回调函数和<code>options</code>对象可以放在观察者外部。 如果需要，可以在多个观察者之间使用相同的回调和<code>options</code>对象。然后，将需要观察的目标元素传递给<code>observe()</code>方法。它只能接受一个目标，但是可以在同一观察者上针对多个目标重复调用该方法。</p>\n<p>注意代码中的console.log,可以看看控制台输出了什么。</p>\n<h2 id=\"观察者对象\"><a href=\"#观察者对象\" class=\"headerlink\" title=\"观察者对象\"></a>观察者对象</h2><p>传递给回调函数的观察者数据如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntersectionObserver</span><br><span class=\"line\">  root: <span class=\"literal\">null</span></span><br><span class=\"line\">  rootMargin: <span class=\"string\">\"0px 0px 0px 0px\"</span></span><br><span class=\"line\">  thresholds: <span class=\"built_in\">Array</span> [ <span class=\"number\">0</span> ]</span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverPrototype &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>…本质上是创建对象时传递给观察者的选<code>options</code>对象。 这可用于确定相交所绑定的根元素。 注意即使原始选项对象的<code>rootMargin</code>值为0px，该对象也将其转为0px 0px 0px 0px，这是CSS边距规范所需要的。然后是观察者正在使用的一系列阈值。</p>\n<h2 id=\"entry对象\"><a href=\"#entry对象\" class=\"headerlink\" title=\"entry对象\"></a>entry对象</h2><p>传递给回调函数的<code>entry</code>对象数据如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntersectionObserverEntry</span><br><span class=\"line\">  boundingClientRect: DOMRect</span><br><span class=\"line\">    bottom: <span class=\"number\">923.3999938964844</span>, <span class=\"attr\">top</span>: <span class=\"number\">771</span></span><br><span class=\"line\">    height: <span class=\"number\">152.39999389648438</span>, <span class=\"attr\">width</span>: <span class=\"number\">411</span></span><br><span class=\"line\">    left: <span class=\"number\">9</span>, <span class=\"attr\">right</span>: <span class=\"number\">420</span></span><br><span class=\"line\">    x: <span class=\"number\">9</span>, <span class=\"attr\">y</span>: <span class=\"number\">771</span></span><br><span class=\"line\">    &lt;prototype&gt;: DOMRectPrototype &#123; &#125;</span><br><span class=\"line\">  intersectionRatio: <span class=\"number\">0</span></span><br><span class=\"line\">  intersectionRect: DOMRect</span><br><span class=\"line\">    bottom: <span class=\"number\">0</span>, <span class=\"attr\">top</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    height: <span class=\"number\">0</span>, <span class=\"attr\">width</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    left: <span class=\"number\">0</span>, <span class=\"attr\">right</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    x: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &lt;prototype&gt;: DOMRectPrototype &#123; &#125;</span><br><span class=\"line\">  isIntersecting: <span class=\"literal\">false</span></span><br><span class=\"line\">  rootBounds: <span class=\"literal\">null</span></span><br><span class=\"line\">  target: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  time: 522</span></span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverEntryPrototype &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里做了很多工作。</p>\n<p>对于大多数开发人员而言，最可能有用的两个属性是<code>intersectionRatio</code>和<code>isIntersecting</code>。 <code>isIntersecting</code>属性是一个布尔值，在交集更改时目标元素与根元素是否相交。<code>intersectionRatio</code>是当前与根元素相交的目标元素的百分比。它也是零到一之间的百分比表示，非常类似于观察者的<code>options</code>对象中<code>threshold</code>。</p>\n<p>三个属性（<code>boundingClientRect</code>，<code>intersectionRect</code>和<code>rootBounds</code>）表示交集相关的三个方面的具体数据。 <code>boundingClientRect</code>属性为目标元素的边界框提供从viewport左上角开始的bottom，left，right和top值，就像<code>Element.getBoundingClientRect()</code>一样。然后，将目标元素的高度和宽度作为X和Y坐标提供。 <code>rootBounds</code>属性为根元素提供相同形式的数据。<code>intersectionRect</code>提供相似的数据，它描述了由目标元素在根元素内部的相交区域形成的矩形，该区域也被用于计算<code>intersectionRatio</code>值。传统的滚动事件需要手动完成此计算。</p>\n<p>要注意的是，代表这些不同元素的所有这些形状始终都是矩形。无论所涉及元素的实际形状如何，它们总是会缩小到包含该元素的最小矩形。</p>\n<p><code>target</code>属性是指正在观察的目标元素。在观察者包含多个目标的情况下，这是确定哪个目标元素触发了此相交更改的简便方法。</p>\n<p><code>time</code>属性提供从首次创建观察者到触发此交集改变的时间（以毫秒为单位）。通过这种方式，你可以跟踪观看者遇到特定目标所花费的时间。即使稍后将目标再次滚动到视图中，此属性也会提供新的时间。这可用于跟踪目标进入和离开根元素的时间。</p>\n<p>除了每次观察到交集改变时我们可以获得这些信息外，观察者第一次启动时也会向我们提供这些信息。例如，在页面加载时，页面上的观察者将立即调用回调函数，并提供它正在观察的每个目标元素的当前状态。</p>\n<p><code>Intersection Observer</code>以非常高效的方式提供了有关页面上元素之间关系的数据。</p>\n<h1 id=\"Intersection-Observer-可用的方法\"><a href=\"#Intersection-Observer-可用的方法\" class=\"headerlink\" title=\"Intersection Observer 可用的方法\"></a>Intersection Observer 可用的方法</h1><p>Intersection Observer 主要有三个方法：observe()，unobserve()和disconnect()。</p>\n<ul>\n<li>observe()：observe方法用来添加观察者要监视的目标元素。 观察者可以具有多个目标元素，但是此方法一次只能接受一个目标。</li>\n<li>unobserve()：unobserve方法用来从观察的元素列表中移除元素。</li>\n<li>disconnect()：disconnect方法用来停止观察其所有目标元素。观察者本身仍处于活动状态，但没有目标。在disconnect()之后，目标元素仍然可以通过observe()传递给观察者。</li>\n</ul>\n<p>这些方法提供了监视和取消监视目标元素的功能，但是一旦创建，便无法更改传递给观察者的<code>options</code>对象。 如果需要修改，则必须手动重新创建观察者。</p>\n<h1 id=\"Intersection-Observer和滚动事件的性能对比\"><a href=\"#Intersection-Observer和滚动事件的性能对比\" class=\"headerlink\" title=\"Intersection Observer和滚动事件的性能对比\"></a>Intersection Observer和滚动事件的性能对比</h1><p>在探索Intersection Observer以及将其与使用滚动事件进行比较时，我需要进行一些性能测试。我只想大致了解两者之间的性能差异，为此我创建了三个简单的测试。</p>\n<p>首先，我创建了一个样本HTML文件，该文件包含一百个设置了高度的div，以此创建一个长滚动页面。把页面放在静态服务器上，然后我用Puppeteer加载了HTML文件，启动了跟踪，让页面以预设的增量向下滚动到底部，一旦到达底部，就停止了跟踪，最后保存跟踪的结果。这样测试可以重复多次并输出每次的结果数据。然后，我复制了样本HTML，并为要运行的每种测试类型在脚本标签中编写了js。每个测试都有两个文件：一个用于<code>Intersection Observer</code>，另一个用于滚动事件。</p>\n<p>所有测试的目的是检测目标元素何时以25％的增量向上滚动通过视口。每次增加时，都会应用CSS类来更改元素的背景颜色。换句话说，每个元素都应用了DOM修改，这将触发重绘。每次测试都在两台不同的计算机上运行了五次：我的开发用的Mac是最新的设备，而我的个人Windows 7计算机可能是当前的平均水平。记录脚本，渲染，绘画和系统的跟踪结果，然后取平均值。</p>\n<p>第一个测试有一个观察者或一个滚动事件，每个事件都有一个回调。对于观察者和滚动事件，这是一个相当标准的设置。尽管在这种情况下，滚动事件还有很多工作要做，因为滚动事件试图模仿观察者默认提供的数据。完成所有这些计算后，就像观察者一样，将数据存储在条目数组中。然后，在两者之间删除和应用类的功能完全相同。另外我使用了<code>requestAnimationFrame</code>对滚动事件进行了节流处理。</p>\n<p>第二个测试有100个观察者或100个滚动事件，每种类型都有一个回调。每个元素都分配有自己的观察者和事件，但回调函数相同。这实际上是低效的，因为每个观察者和事件的行为都完全相同，但是我想要一个简单的压力测试，而不必创建100个唯一的观察者和事件-尽管我已经看到了许多以这种方式使用观察者的示例。</p>\n<p>第三次测试具有100个观察者或100个滚动事件，每种类型具有100个回调。这意味着每个元素都有其自己的观察器，事件和回调函数。当然，这是极其低效的，因为这是存储在巨大阵列中的所有重复功能。但是这种低效率是该测试的重点。</p>\n<p><img src=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1165,f_auto,q_auto/v1568831070/observer-01_wzz6he.png\" alt=\"Intersection Observer和滚动事件的压力测试对比\"></p>\n<p>在上面的图表中，你可以看到，第一列代表我们的基准，根本没有运行JavaScript。接下来的两列代表第一种测试类型。 Mac的运行都非常好，符合我对开发用高端计算机的预期。 Windows机器给了我们一个不一样的结果。对我来说，主要的兴趣点是红色所代表的脚本。在Mac上，观察者的差异约为88毫秒，而滚动事件的差异约为300毫秒。在Mac上，每种测试的总体结果都相当接近，但是脚本在滚动事件方面表现出色。对于Windows机器，它要差得多得多。观察者大约是150毫秒，而第一次和最简单的测试是1400毫秒。</p>\n<p>对于第二个测试，我们开始看到滚动测试的效率变得更加明显。 Mac和Windows机器都运行了观察者测试，结果与以前几乎相同。对于滚动事件测试，脚本陷入了更多困境，无法完成给定的任务。 Mac跃升到几乎一整秒的脚本编写时间，而Windows计算机跃升到惊人的3200ms。</p>\n<p>对于第三次测试，情况没有变坏。结果与第二项测试大致相同。要注意的一件事是，在所有三个测试中，观察者的结果对于两台计算机都是一致的。尽管没有为提高观察者测试的效率做出任何优化，但<code>Intersection Observer</code>的性能表现还是远远超过了滚动事件。</p>\n<p>因此，在我自己的两台机器上进行了非科学性测试之后，我感到对滚动事件和<code>Intersection Observer</code>之间的性能差异有一个不错的了解。 我敢肯定，我可以通过一些努力使滚动事件更有效，但这值得吗？ 在某些情况下，滚动事件的精度是必需的，但是在大多数情况下，<code>Intersection Observer</code>就足够了-尤其是因为它看起来更加高效，而无需付出任何努力。</p>\n<h1 id=\"搞清intersectionRatio属性\"><a href=\"#搞清intersectionRatio属性\" class=\"headerlink\" title=\"搞清intersectionRatio属性\"></a>搞清intersectionRatio属性</h1><p><code>IntersectionObserverEntry</code>给我们提供的<code>intersectionRatio</code>属性，表示目标元素在交集更改上的根元素边界内的百分比。 我发现我一开始不太了解这个值的实际含义。 由于某种原因，我认为这是目标元素外观的一种简单的0％到100％的表示形式。 它与创建时传递给观察者的阈值相关。 例如，它可用于确定哪个阈值是刚刚触发相交更改的原因。 但是，它提供的值并不总是很简单。</p>\n<p>以这个demo为例：</p>\n<p>  <a href=\"https://codepen.io/talmand/embed/VwZXpaj?height=632&theme-id=1&default-tab=result&user=talmand&slug-hash=VwZXpaj&pen-title=Intersection%20Observer%3A%20intersectionRatio&name=cp_embed_1\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n<p>在此demo中，已为观察者分配了父容器作为根元素。 具有目标背景的子元素已分配为目标元素。 已创建阈值数组，其中包含100个条目，其顺序为0、0.01、0.02、0.03，依此类推，直到1。观察者触发目标元素在根元素内部出现或消失的每一个百分比，以便每当比率 更改至少百分之一，此框下方的输出文本将更新。 如果您感到好奇，可以使用以下代码来完成此阈值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...Array(<span class=\"number\">100</span>).keys()].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x / <span class=\"number\">100</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我不建议你以这种方式为项目中的具体用途设置阈值。</p>\n<p>首先，目标元素完全包含在根元素中，并且按钮上方的输出将显示比率1。它应该是第一次加载的，但是我们很快就会发现该比率并不总是精确的；该数字可能在0.99到1之间。这似乎很奇怪，但是有可能发生，因此，如果你对等于特定值的比率进行检查，请记住这一点。</p>\n<p>单击“left”按钮将使目标元素向左转换，以使其一半在根元素中，另一半不在。然后，ratioRatio应该更改为0.5，或者接近0.5。现在我们知道目标元素的一半与根元素相交，但是我们不知道它在哪里。以后再说。</p>\n<p>单击“top”按钮具有相同的功能。它将目标元素转换为根元素的顶部，并再次将其移入和移出。再一次，交集比率应该在0.5左右。即使目标元素位于与以前完全不同的位置，结果比率也相同。</p>\n<p>再次单击“corner”按钮，会将目标元素转换为根元素的右上角。此时，目标元素中只有四分之一位于根元素内。intersectionRatio应以大约0.25的值反映出来。单击“center”会将目标元素转换回中心并完全包含在根元素中。</p>\n<p>如果单击“large”按钮，则将目标元素的高度更改为高于根元素。相交比应为0.8左右。这是依赖intersectionRatio的棘手部分。根据提供给观察者的阈值创建代码可以使阈值永远不会触发。在此“large”示例中，基于阈值1的任何代码都将无法执行。还要考虑可以调整根元素大小的情况，例如将视口从纵向旋转为横向。</p>\n<h1 id=\"查找位置\"><a href=\"#查找位置\" class=\"headerlink\" title=\"查找位置\"></a>查找位置</h1><p>那么，我们如何知道目标元素相对于根元素的位置呢？此数据由<code>IntersectionObserverEntry</code>提供，因此我们只需要进行简单的比较即可。</p>\n<p>看这个demo:</p>\n<p><a href=\"https://codepen.io/talmand/embed/dybmvZN?height=631&theme-id=1&default-tab=result&user=talmand&slug-hash=dybmvZN&pen-title=Intersection%20Observer%3A%20Finding%20the%20Position&name=cp_embed_2\" target=\"_blank\" rel=\"noopener\">demo2</a></p>\n<p>该演示的设置与之前的设置大致相同。 父容器是根元素，内部具有目标背景的子容器是目标元素。 阈值是一个0、0.5和1的数组。在根元素中滚动时，将出现目标，并且其位置将在按钮上方的输出中报告。</p>\n<p>下面执行这些检查的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> output = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#output pre'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">io_callback</span> (<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ratio = entries[<span class=\"number\">0</span>].intersectionRatio;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundingRect = entries[<span class=\"number\">0</span>].boundingClientRect;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> intersectionRect = entries[<span class=\"number\">0</span>].intersectionRect;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ratio === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    output.innerText = <span class=\"string\">'outside'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ratio &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (boundingRect.top &lt; intersectionRect.top) &#123;</span><br><span class=\"line\">      output.innerText = <span class=\"string\">'on the top'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      output.innerText = <span class=\"string\">'on the bottom'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    output.innerText = <span class=\"string\">'inside'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我应该指出，我没有遍历entrys数组，因为我知道总是只有一个条目，因为只有一个目标。我走了捷径，使用<code>entries[0]</code>。</p>\n<p>您会发现比率为零会将目标置于“外部”。小于1的比率将其放在顶部或底部。这样一来，我们就可以查看目标的“顶部”是否小于交集矩形的顶部，这实际上意味着目标在页面上更高，并被视为“顶部”。实际上，检查根元素的“顶部”也可以解决此问题。从逻辑上讲，如果目标不在顶部，则它必须在底部。如果比率恰好等于1，则它在根元素“内部”。除了使用left或right属性检查水平位置外，其他检查方法相同。</p>\n<p>这是高效使用<code>Intersection Observer</code>的一部分。开发人员无需在节流的滚动事件上从多处请求此数据，然后进行计算。它是由观察者提供的，所需要的只是一个简单的if检查。</p>\n<p>首先，目标元素要比根元素高，因此永远不会将其报告为“内部”。单击“切换目标大小”按钮以使其小于根。现在，上下滚动时目标元素可以位于根元素内部。</p>\n<p>通过再次单击“toggle target size”，然后单击“toggle root size”按钮，将目标元素恢复为其原始大小。这将调整根元素的大小，使其比目标元素高。再次，当上下滚动时，目标元素可能位于根元素内部。</p>\n<p>此demo演示了有关<code>Intersection Observer</code>的两件事：如何确定目标元素相对于根元素的位置以及调整两个元素的大小时会发生什么。这种对调整大小的响应让我们看到了<code>Intersection Observer</code>相对于滚动事件的另一个优势-不用再单独处理resize事件。</p>\n<h1 id=\"创建位置粘性事件\"><a href=\"#创建位置粘性事件\" class=\"headerlink\" title=\"创建位置粘性事件\"></a>创建位置粘性事件</h1><p><a href=\"https://css-tricks.com/almanac/properties/p/position/#article-header-id-3\" target=\"_blank\" rel=\"noopener\">CSS position属性的“sticky”</a>是一个有用的功能，但在CSS和JavaScript方面却有一些限制。粘性节点的样式只能是一种设计，无论是处于其正常状态还是处于其粘性状态内。没办法让js知道这些变化。到目前为止，还没有伪类或js事件使我们知道元素的状态变化。</p>\n<p>我已经看到了使用滚动事件和<code>Intersection Observer</code>进行粘性定位事件的示例。使用滚动事件的解决方案始终存在与将滚动事件用于其他目的相似的问题。观察者的通常解决方案是用一个定位元素，仅作为观察者的目标元素使用。我喜欢避免使用诸如此类的单一目的的元素，因此我决定修改这个特定的想法。</p>\n<p>在此demo中，上下滚动以查看章节标题对各自章节的粘性反应。</p>\n<p><a href=\"https://codepen.io/talmand/embed/ExYLayz?height=400&theme-id=1&default-tab=result&user=talmand&slug-hash=ExYLayz&pen-title=Intersection%20Observer%3A%20Position%20Sticky%20Event&name=cp_embed_3\" target=\"_blank\" rel=\"noopener\">demo3</a></p>\n<p>这个示例检测粘性元素何时位于滚动容器顶部，然后给其添加一个css类。 这是通过在给观察者特定的<code>rootMargin</code>时利用DOM的一个有趣的特性来实现的。 给出的值是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rootMargin: <span class=\"string\">'0px 0px -100% 0px'</span></span><br></pre></td></tr></table></figure>\n\n<p>这样会将根边界的底部边缘推到根元素的顶部，从而留下一小部分可用于相交检测的零像素区域。 可以说，即使目标元素碰触到零像素区域，也会触发相交变化，即使它不存在于数字中也是如此。 考虑一下，我们可以在DOM中具有折叠高度为零的元素。</p>\n<p>该解决方案通过识别粘性元素始终位于根元素顶部的“粘性”位置来利用这一优势。 随着滚动的继续，粘性元素最终移出视野，并且相交停止。 因此，我们根据输入对象的<code>isIntersecting</code>属性添加和删除类。</p>\n<p>下面是HTML：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky-container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sticky-content\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&amp;sect;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Section 1<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;&#123; content here &#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>class为<code>sticky-container</code>的外部div是观察者的目标。 该div将被设置为粘性元素并充当容器。 用于根据粘性状态设置样式和更改元素的元素是class为<code>sticky-content</code>的div及其子元素。 这样可以确保实际的粘性元素始终与根元素顶部缩小的<code>rootMargin</code>接触。</p>\n<p>下面是CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sticky-content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sticky-content</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sticky-content</span> <span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"selector-class\">.sticky-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sticky-container</span><span class=\"selector-class\">.active</span> <span class=\"selector-class\">.sticky-content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0.8);</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sticky-container</span><span class=\"selector-class\">.active</span> <span class=\"selector-class\">.sticky-content</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">0.25s</span> <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你会看到<code>.sticky-container</code>在top为0的位置创建了我们的粘滞元素。 其余部分是<code>.sticky-content</code>中的常规状态和<code>.active .sticky-content</code>中的粘滞状态样式的混合。 同样，您几乎可以在粘性内容div中做任何您想做的事情。 在此demo中，当粘滞状态处于活动状态时，在延迟的过渡中会出现一个隐藏的章节符号。没有<code>Intersection Observer</code>之类的辅助手段，很难达到这种效果。</p>\n<p>JavaScript：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stickyContainers = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.sticky-container'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> io_options = &#123;</span><br><span class=\"line\">  root: <span class=\"built_in\">document</span>.body,</span><br><span class=\"line\">  rootMargin: <span class=\"string\">'0px 0px -100% 0px'</span>,</span><br><span class=\"line\">  threshold: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> io_observer = <span class=\"keyword\">new</span> IntersectionObserver(io_callback, io_options);</span><br><span class=\"line\"></span><br><span class=\"line\">stickyContainers.forEach(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">  io_observer.observe(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">io_callback</span> (<span class=\"params\">entries, observer</span>) </span>&#123;</span><br><span class=\"line\">  entries.forEach(<span class=\"function\"><span class=\"params\">entry</span> =&gt;</span> &#123;</span><br><span class=\"line\">    entry.target.classList.toggle(<span class=\"string\">'active'</span>, entry.isIntersecting);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这实际上是使用<code>Intersection Observer</code>完成此任务的非常简单的示例。 唯一的例外是<code>rootMargin</code>中的-100％值。 请注意，这对于其他三个方面也可以重复； 它只需要一个具有自己独特的<code>rootMargin</code>的新观察者，对于相应方面，它具有-100％的值。 将会有更多独特的粘性容器，它们具有自己的类，例如<code>sticky-container-top</code>和<code>sticky-container-bottom</code>。</p>\n<p>这样做的限制是，粘性元素的top，right，bottom或left属性必须始终为零。 从技术上讲，你可以使用其他值，但随后必须进行数学运算以找出<code>rootMargin</code>的正确值。 这很容易做到，但是如果调整大小，不仅需要再次进行数学运算，还必须停止观察者并使用新值重新启动它。 将position属性设置为零，并使用内部元素以所需的方式设置样式更加容易。</p>\n<h1 id=\"和滚动事件结合\"><a href=\"#和滚动事件结合\" class=\"headerlink\" title=\"和滚动事件结合\"></a>和滚动事件结合</h1><p>到目前为止，我们已经在一些演示中看到了，<code>intersectionRatio</code>可能不精确且有些局限。使用滚动事件可以更精确，但会降低性能的效率。那把两者结合起来怎么样？</p>\n<p><a href=\"https://cdpn.io/talmand/fullembedgrid/wvwjBry?type=embed&animations=run\" target=\"_blank\" rel=\"noopener\">demo4</a></p>\n<p>在此demo中，我们创建了一个<code>Intersection Observer</code>，并且回调函数的唯一目的是添加和删除侦听根元素上的scroll事件的事件侦听器。 当目标首次进入根元素时，将创建滚动事件侦听器，然后在目标离开根元素时将其删除。 滚动时，输出仅显示每个事件的时间戳，以实时显示事件的变化-比单独的观察者要精确得多。</p>\n<p>下面是JavaScript。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#root'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#target'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> output = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#output pre'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> io_options = &#123;</span><br><span class=\"line\">  root: root,</span><br><span class=\"line\">  rootMargin: <span class=\"string\">'0px'</span>,</span><br><span class=\"line\">  threshold: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> io_observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scrollingEvents</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  output.innerText = e.timeStamp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">io_callback</span> (<span class=\"params\">entries</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entries[<span class=\"number\">0</span>].isIntersecting) &#123;</span><br><span class=\"line\">    root.addEventListener(<span class=\"string\">'scroll'</span>, scrollingEvents);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    root.removeEventListener(<span class=\"string\">'scroll'</span>, scrollingEvents);</span><br><span class=\"line\">    output.innerText = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">io_observer = <span class=\"keyword\">new</span> IntersectionObserver(io_callback, io_options);</span><br><span class=\"line\">io_observer.observe(target);</span><br></pre></td></tr></table></figure>\n\n<p>这是一个相当标准的例子。 请注意，我们希望阈值为零，因为如果阈值不止一个，我们将同时获得多个事件监听器。 回调函数是我们感兴趣的，甚至是一个简单的设置：在if-else块中添加和删除事件监听器。 事件的回调函数仅更新输出中的div。 每当目标触发相交变化并且不与根相交时，我们会将输出设置回零。</p>\n<p>这个实例利用了<code>Intersection Observer</code>和滚动事件的优点。 考虑使用一个滚动动画库，该动画库仅在页面上需要它的部分实际可见时才起作用。 库和滚动事件在整个页面中并非无效地活动。</p>\n<h1 id=\"浏览器的有趣差异\"><a href=\"#浏览器的有趣差异\" class=\"headerlink\" title=\"浏览器的有趣差异\"></a>浏览器的有趣差异</h1><p>您可能想知道<code>Intersection Observer</code>有多少浏览器支持。 实际上，还蛮多的！</p>\n<p>该浏览器支持数据来自Caniuse，更多信息。 数字表示浏览器支持该版本及更高版本的功能。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s939x589_jfs/t1/47754/22/12887/54388/5d9eec58Ea352f2c4/d56f0ccaa8a322a3.png\" alt=\"Caniuse\"></p>\n<p>所有主要的浏览器都已经支持了一段时间。和预期一样，IE在任何级别都不支持它，但是W3C提供了一个<a href=\"https://github.com/w3c/IntersectionObserver/tree/master/polyfill\" target=\"_blank\" rel=\"noopener\">polyfill</a>来解决这个问题。</p>\n<p>当我使用<code>Intersection Observer</code>尝试不同的想法时，我确实遇到了两个示例在Firefox和Chrome之间的行为有所不同。我不会在生产站点上使用这些示例，但是这些行为很有趣。</p>\n<p>这是第一个示例：</p>\n<p><a href=\"https://cdpn.io/talmand/fullembedgrid/oNvdQOR?type=embed&animations=run\" target=\"_blank\" rel=\"noopener\">example1</a></p>\n<p>目标元素通过CSS transform属性在根元素内移动。 该演示具有CSS动画，该动画可在水平轴上将目标元素移入和移出根元素。 当目标元素进入或离开根元素时，<code>intersectionRatio</code>会更新。</p>\n<p>如果您在Firefox中查看此演示，则应在目标元素前后滑动时正确地看到<code>intersectionRatio</code>更新。 Chrome的行为有所不同，完全不更新<code>intersectionRatio</code>。 Chrome似乎没有保留使用CSS转换过的目标元素的标签。 但是，如果我们在目标元素移入和移出根元素时在浏览器中四处移动鼠标，则<code>intersectionRatio</code>确实会更新。 我的猜测是，只有在存在某种形式的用户交互时，Chrome才会“激活”观察者。</p>\n<p>这是第二个示例：</p>\n<p><a href=\"https://cdpn.io/talmand/fullembedgrid/mdbLQZJ?type=embed&animations=run\" target=\"_blank\" rel=\"noopener\">example2</a></p>\n<p>这次，我们<a href=\"https://css-tricks.com/animating-with-clip-path/\" target=\"_blank\" rel=\"noopener\">对一个剪裁路径进行动画处理</a>，该剪裁路径将一个正方形变成重复循环中的一个圆形。正方形与根元素的大小相同，因此我们得到的<code>intersectionRatio</code>将始终小于1。随着剪裁路径的动画化，Firefox根本不会更新<code>intersectionRatio</code>。这次移动鼠标不起作用。Firefox只是忽略元素大小的变化。另一方面，Chrome实际上会实时更新<code>intersectionRatio</code>显示。即使没有用户交互，也会发生这种情况。</p>\n<p>之所以会发生这种情况，是因为规范的一部分指出<a href=\"https://www.w3.org/TR/intersection-observer/#calculate-intersection-rect-algo\" target=\"_blank\" rel=\"noopener\">交集区域（intersectionRect）的边界</a>应包括剪裁目标元素。</p>\n<blockquote>\n<p>如果容器具有溢出剪裁或css<a href=\"https://www.w3.org/TR/css-masking-1/#propdef-clip-path\" target=\"_blank\" rel=\"noopener\">剪裁路径</a>属性，请通过应用容器的剪裁来更新intersectionRect。</p>\n</blockquote>\n<p>因此，当剪裁目标时，将重新计算相交区域的边界。 Firefox显然尚未实现。</p>\n<h1 id=\"Intersection-Observer-version-2\"><a href=\"#Intersection-Observer-version-2\" class=\"headerlink\" title=\"Intersection Observer, version 2\"></a>Intersection Observer, version 2</h1><p>那么，该API的未来前景如何？</p>\n<p><a href=\"https://developers.google.com/web/updates/2019/02/intersectionobserver-v2\" target=\"_blank\" rel=\"noopener\">Google提供了一些建议</a>，这些建议会为观察者添加一个有趣的功能。 即使Intersection Observer告诉我们目标元素何时跨越根元素的边界，也不一定意味着该元素实际上对用户是可见的。 它可能具有零不透明度，或者可能被页面上的另一个元素覆盖。 观察者能不能被用来确定这些事情？</p>\n<p>请记住，我们仍在早期阶段才使用此功能，因此不应在生产代码中使用它。 这是<a href=\"https://szager-chromium.github.io/IntersectionObserver/\" target=\"_blank\" rel=\"noopener\">更新后的提案</a>，其中突出显示了与规范第一个版本的差异。</p>\n<p>如果您一直在使用Chrome浏览本文中的演示，则可能已经注意到控制台中的几件事-例如Firefox中未出现的<code>entries</code>对象属性。 这是Firefox在控制台中打印内容的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntersectionObserver</span><br><span class=\"line\">  root: <span class=\"literal\">null</span></span><br><span class=\"line\">  rootMargin: <span class=\"string\">\"0px 0px 0px 0px\"</span></span><br><span class=\"line\">  thresholds: <span class=\"built_in\">Array</span> [ <span class=\"number\">0</span> ]</span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverPrototype &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">IntersectionObserverEntry</span><br><span class=\"line\">  boundingClientRect: DOMRect &#123; <span class=\"attr\">x</span>: <span class=\"number\">9</span>, <span class=\"attr\">y</span>: <span class=\"number\">779</span>, <span class=\"attr\">width</span>: <span class=\"number\">707</span>, ... &#125;</span><br><span class=\"line\">  intersectionRatio: <span class=\"number\">0</span></span><br><span class=\"line\">  intersectionRect: DOMRect &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>, <span class=\"attr\">width</span>: <span class=\"number\">0</span>, ... &#125;</span><br><span class=\"line\">  isIntersecting: <span class=\"literal\">false</span></span><br><span class=\"line\">  rootBounds: <span class=\"literal\">null</span></span><br><span class=\"line\">  target: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  time: 261</span></span><br><span class=\"line\">  &lt;prototype&gt;: IntersectionObserverEntryPrototype &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  现在，这是来自Chrome中相同控制台代码的输出：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  IntersectionObserver</span><br><span class=\"line\">  delay: <span class=\"number\">500</span></span><br><span class=\"line\">  root: <span class=\"literal\">null</span></span><br><span class=\"line\">  rootMargin: <span class=\"string\">\"0px 0px 0px 0px\"</span></span><br><span class=\"line\">  thresholds: [<span class=\"number\">0</span>]</span><br><span class=\"line\">  trackVisibility: <span class=\"literal\">true</span></span><br><span class=\"line\">  __proto__: IntersectionObserver</span><br><span class=\"line\"></span><br><span class=\"line\">IntersectionObserverEntry</span><br><span class=\"line\">  boundingClientRect: DOMRectReadOnly &#123;<span class=\"attr\">x</span>: <span class=\"number\">9</span>, <span class=\"attr\">y</span>: <span class=\"number\">740</span>, <span class=\"attr\">width</span>: <span class=\"number\">914</span>, <span class=\"attr\">height</span>: <span class=\"number\">146</span>, <span class=\"attr\">top</span>: <span class=\"number\">740</span>, ...&#125;</span><br><span class=\"line\">  intersectionRatio: <span class=\"number\">0</span></span><br><span class=\"line\">  intersectionRect: DOMRectReadOnly &#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>, <span class=\"attr\">width</span>: <span class=\"number\">0</span>, <span class=\"attr\">height</span>: <span class=\"number\">0</span>, <span class=\"attr\">top</span>: <span class=\"number\">0</span>, ...&#125;</span><br><span class=\"line\">  isIntersecting: <span class=\"literal\">false</span></span><br><span class=\"line\">  isVisible: <span class=\"literal\">false</span></span><br><span class=\"line\">  rootBounds: <span class=\"literal\">null</span></span><br><span class=\"line\">  target: div.item</span><br><span class=\"line\">  time: <span class=\"number\">355.6550000066636</span></span><br><span class=\"line\">  __proto__: IntersectionObserverEntry</span><br></pre></td></tr></table></figure>\n\n<p>在一些属性（例如<code>target</code>和<code>prototype</code>）的显示方式上存在一些差异，但是它们在两种浏览器中的操作相同。区别在于Chrome具有Firefox中不会显示的一些其他属性。<code>observer</code>对象具有一个称为<code>trackVisibility</code>的布尔值，一个称为<code>delay</code>的数字，并且<code>entry</code>对象具有一个称为<code>isVisible</code>的布尔值。这些是新提议的属性，这些属性试图确定目标元素是否实际上对用户可见。</p>\n<p>我将对这些属性进行简要说明，但如果您需要更多详细信息，请阅读<a href=\"https://developers.google.com/web/updates/2019/02/intersectionobserver-v2\" target=\"_blank\" rel=\"noopener\">此文章</a>。</p>\n<p><code>trackVisibility</code>属性是在<code>options</code>对象中提供给观察者的布尔值。此属性可以使浏览器承担确定目标元素的真实可见性的任务。</p>\n<p><code>delay</code>属性用途的猜测：它将交集改变的回调方法延迟指定的时间（以毫秒为单位）。这有点类似于将回调函数的代码包装在<code>setTimeout</code>中。为了使<code>trackVisibility</code>起作用，该值是必需的，并且必须至少为100。如果未提供适当的值，则控制台将显示此错误，并且将不会创建观察者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uncaught DOMException: Failed to construct &apos;IntersectionObserver&apos;: To enable the </span><br><span class=\"line\">&apos;trackVisibility&apos; option, you must also use a &apos;delay&apos; option with a value of at</span><br><span class=\"line\">least 100. Visibility is more expensive to compute than the basic intersection;</span><br><span class=\"line\">enabling this option may negatively affect your page&apos;s performance.</span><br><span class=\"line\">Please make sure you really need visibility tracking before enabling the</span><br><span class=\"line\">&apos;trackVisibility&apos; option.</span><br></pre></td></tr></table></figure>\n\n<p>目标<code>entry</code>对象中的<code>isVisible</code>属性是报告可见性跟踪输出的布尔值。可以将它用作任何代码的一部分，就像使用<code>isIntersecting</code>一样。</p>\n<p>在我使用这些功能进行的所有实验中，看到它实际上有时候有效有时候无效。 例如，当元素清晰可见时，延迟始终有效，但是isVisible并不总是报告true（至少对我而言）。 有时这是设计使然，因为规范确实允许出现<a href=\"https://szager-chromium.github.io/IntersectionObserver/#calculate-visibility-algo\" target=\"_blank\" rel=\"noopener\">第二类错误</a>。这将有助于解释不一致的结果。</p>\n<p>我个人迫不及待地希望这项功能尽快完成，并在所有支持<code>Intersection Observer</code>的浏览器中都能正常工作。</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>我对<code>Intersection Observer</code>的研究到此结束。 我花了很多晚上研究，试验和构建示例，以了解其工作原理。 这篇文章涉及了一些有关如何利用观察者的不同功能的新想法。除此之外，我觉得我可以清晰的解释观察者的工作原理。希望本文对你有所帮助。</p>"},{"title":"写一个四则运算表达式转换成AST的方法","date":"2019-10-17T04:15:11.000Z","cover":"https://img11.360buyimg.com/jdphoto/s1756x1080_jfs/t1/53134/34/13167/130483/5da0222eE73e627a9/c480617a5061fa9b.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s1756x1080_jfs/t1/53134/34/13167/130483/5da0222eE73e627a9/c480617a5061fa9b.jpg","_content":"\n> 作者：吴冠禧\n\n## 0 前言\n\n晓强哥在他的上篇文章里介绍了 [Javascript 抽象语法树](https://wecteam.io/2019/07/19/Javascript%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E4%B8%8A%E7%AF%87(%E5%9F%BA%E7%A1%80%E7%AF%87)里面「提到获得抽象语法树的过程为：代码 => 词法分析 => 语法分析 => AST」，抱着深究技术细节的目的，我决定研究这里的词法分析和语法分析，写一个简单的四则运算表达式转换成AST的方法，于是就有了下面的内容。\n\n\n## 1 人类和计算机对于表达式的看法是不同的\n\n人类习惯 `a + b` 这种表达叫做「中序表达式」，优点是比较简单直观，缺点是要用一堆括号来确定优先级 `(a + b) * (c + d)`。\n\n这里说简单直观是相对人类的思维结构来说的，对计算机而言中序表达式是非常复杂的结构。\n\n为了计算机计算方便，我们需要将中序表达式转换成树形结构，也就是「抽象语法树AST」。\n<!--more-->\n## 2 javascript 与抽象语法树 AST\n\n我们知道，几乎任何语言中，代码在 \"编译\"（解释型语言在运行时也有编译的过程） 的过程中，都会生成一种树状的中间状态，这就是 AST。有些语言会直接把类似 AST 的语法暴露给程序员（例如：lisp、elixir、python等）。但是 javascript 并没有这个能力，但是我们可以用 javascript 自身实现这个过程。\n\n获得抽象语法树的过程为：代码（字符串） => 词法分析（Lexer）=> Tokens => 语法分析（Parser） => AST\n\n## 3 词法分析（Lexer）\n\n词法分析有点像中文的分词，就是将字符串流根据规则生成一个一个的有具体意义的 Token ，形成 Token 流，然后流入下一步。\n\n我们看一个简单的例子，\n\n```javascript\n1 + 2.3\n```\n\n很明显这个表达式是可以分成三个 Token ，分别是 `1` , `+` , `2.3`。\n\n词法分析这里，我们可以用有限状态机来解决。\n\n### 3.1 有限状态机\n\n绝大多数语言的词法部分都是用状态机实现的，我们下面就画出有限状态机的图形，然后根据图形直观地写出解析代码，总体图大概是这样。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/71505/36/12619/47435/5da0222fEf7a21a7b/b427472a1c8bbf59.jpg)\n\n下面拆开细看。\n\n### 3.2 开始（start）状态\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/81063/19/12511/29679/5da0222fE1bb0fda7/610bb2041fbb9606.jpg)\n\n状态机的初始状态是 `start` 。\n\n`start` 状态下输入数字（0 ～ 9）就会迁移到 `inInt` 状态。\n\n`start` 状态下输入符号（.）就会迁移到 `inFloat` 状态。\n\n`start` 状态下输入符号（+ - * /）就会输出 `「符号 Token」` ，并回到 `start` 状态。\n\n`start` 状态下输入 EOF 就会输出 `「EOF Token」` ，并回到 `start` 状态。\n\n代码大概是这个样子：\n```javascript\n  start(char) {\n    // 数字\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inInt;\n    }\n    // .\n    if (char === \".\"){\n      this.token.push(char);\n      return this.inFloat;\n    }\n    // 符号\n    if ([\"+\",\"-\",\"*\",\"/\"].includes(char)) {\n      this.emmitToken(\"SIGN\", char);\n      return this.start;\n    }\n    // 结束符\n    if (char === EOF){\n      this.emmitToken(\"EOF\", EOF);\n      return this.start;\n    }\n  }\n```\n\n### 3.3 在整数（inInt）状态\n\n`start` 状态下输入输入数字（0 ～ 9）就会迁移到 `inInt` 状态。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/78804/34/12584/20147/5da0222fEef8f09c4/ed63a73dddac5654.jpg)\n\n`inInt` 状态下输入输入符号（.）就会迁移到 `inFloat` 状态。\n\n`inInt` 状态下输入数字（0 ～ 9）就继续留在 `inInt` 状态。\n\n`inInt` 状态下输入非数字和.（0 ～ 9 .）就会就会输出 `「整数 Token」` ，并迁移到 `start` 状态。\n\n代码：\n```javascript\n  inInt(char) {\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inInt;\n    } else if (char === '.') {\n      this.token.push(char);\n      return this.inFloat;\n    } else {\n      this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n      this.token = [];\n      return this.start(char); // put back char\n    }\n  }\n```\n\n### 3.4 在浮点数（inFloat）状态\n\n`start` 状态下输入符号（.）就会迁移到 `inFloat` 状态。\n\n`inInt` 状态下输入输入符号（.）就会迁移到 `inFloat` 状态。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/47044/1/13068/25868/5da02230Eac0dd5ee/68e1eacf4a087979.jpg)\n\n`inFloat` 状态下输入数字（0 ～ 9）就继续留在 `inFloat` 状态。\n\n`inFloat` 状态下输入非数字（0 ～ 9 ）就会就会输出 `「浮点数 Token」`，并迁移到 `start` 状态。\n\n代码：\n```javascript\n  inFloat(char) {\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inFloat;\n    } else if (char === \".\") {\n      throw new Error(\"不能出现`..`\");\n    } else {\n      if (this.token.length === 1  && this.token[0] === \".\") throw new Error(\"不能单独出现`.`\");\n      this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n      this.token = [];\n      return this.start(char); // put back char\n    }\n  }\n```\n\n### 3.5 输出的 Token 种类 和定义\n\n我将 `「浮点数 Token」` 和 `「整数 Token」` 合并为 `[NUMBER Token]` , 其他的 Token 还有 `「SIGN Token」` 和 `「EOF Token」`。\n\nToken 的 定义：\n\n```javascript\n  interface Token{\n    type:String,\n    value:String,\n  }\n```\n\n### 3.6 完整的 Lexer 代码\n\n```javascript\n  const EOF = Symbol('EOF');\n\n  class Lexer {\n    constructor(){\n      this.token = []; // 临时 token 字符存储\n      this.tokens = []; // 生成的正式 token\n      // state 默认是 start 状态，后面通过 push 函数实现状态迁移\n      this.state = this.start;\n    }\n    start(char) {\n      // 数字\n      if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n        this.token.push(char);\n        return this.inInt;\n      }\n      // .\n      if (char === \".\"){\n        this.token.push(char);\n        return this.inFloat;\n      }\n      // 符号\n      if ([\"+\",\"-\",\"*\",\"/\"].includes(char)) {\n        this.emmitToken(\"SIGN\", char);\n        return this.start;\n      }\n      // 结束符\n      if (char === EOF){\n        this.emmitToken(\"EOF\", EOF);\n        return this.start;\n      }\n    }\n    inInt(char) {\n      if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n        this.token.push(char);\n        return this.inInt;\n      } else if (char === '.') {\n        this.token.push(char);\n        return this.inFloat;\n      } else {\n        this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n        this.token = [];\n        return this.start(char); // put back char\n      }\n    }\n    inFloat(char) {\n      if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n        this.token.push(char);\n        return this.inFloat;\n      } else if (char === \".\") {\n        throw new Error(\"不能出现`..`\");\n      } else {\n        if (this.token.length === 1  && this.token[0] === \".\") throw new Error(\"不能单独出现`.`\");\n        this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n        this.token = [];\n        return this.start(char); // put back char\n      }\n    }\n    emmitToken(type, value) {\n      this.tokens.push({\n        type,\n        value,\n      })\n    }\n    push(char){\n      // 每次执行 state 函数都会返回新的状态函数，实现状态迁移\n      this.state = this.state(char);\n      return this.check();\n    }\n    end(){\n      this.state(EOF);\n      return this.check();\n    }\n    check(){\n      // 检测是否有 token 生成并返回。\n      const _token = [...this.tokens];\n      this.tokens = [];\n      return _token;\n    }\n    clear(){\n      this.token = [];\n      this.tokens = [];\n      this.state = this.start;\n    }\n  }\n\n  const lexer = new lexer();\n\n  const input = `1 + 2.3`;\n\n  let tokens = [];\n\n  for (let c of input.split('')){\n    tokens = [...tokens,...lexer.push(c)];\n  }\n\n  tokens = [...tokens,...lexer.end()];\n```\n\n效果如下图：\n\n![ast](//img11.360buyimg.com/jdphoto/s620x210_jfs/t1/50210/26/13138/29830/5da02230Ea3239b11/7004e567f66d0bb9.jpg)\n\n自此，我们成功实现了词法分析，后面进入到语法分析。\n\n## 4 语法分析（Parser）\n\n前面的词法分析，已经将字符串划分成一个个有意义的 Token 进入到语法分析（Parser）。语法分析在编译原理里面属于比较高深的学问，我是没有怎么看懂。但总的来说就是把 Token流 组装成 AST ，\nAST 的结构是既定的，后面我就通过对不同节点制定不同规则把 AST 组装起来。\n\n### 4.1 定义 AST 结构 和 节点（Node）\n\n简单来说 AST 就是一棵树形结构，由节点（Node）和 叶子（字面量 Literal ）组成，节点 下面可以连接 其他节点 或者 字面量。最顶端的节点就是 根节点。\n\n![ast](//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/68355/21/12670/13784/5da02230E361eb32a/7b2301d29bdc640c.jpg)\n\n节点的定义就是一个简单的 javascript Object\n\n```javascript\ninterface Node {\n  type:string,\n  children:[],// children栈 里面可以是 Node 或者 Literal\n  maxChildren:number,\n}\n```\n\n### 4.2 栈 和 根节点（Root）\n\n语法分析（Parser）这里，我使用的是一个栈结构，每来一个 Token 就入栈，然后通过一定的规则组装 AST。\n\n第一步就是压入 根节点 `<Root>`。\n\n```javascript\nfunction RootNode(){\n  return {\n    type:\"ROOT\",\n    children:[],\n    maxChildren:0,\n  }\n}\n\nconst stack = [RootNode()];\n```\n\n![ast](//img11.360buyimg.com/jdphoto/s318x318_jfs/t1/73107/24/12672/9710/5da02230E50b4ed71/548c3b28fcbcb2b0.jpg)\n\n### 4.3 通用规则\n\n在说明不同类型节点的规则前，先说一下通用规则。\n\n- 1. 没有后代的节点（NoChildrenNode），就是节点的 maxChildren 属性为 0。\n- 2. 非满的节点（NotFullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length < maxChildren。\n- 3. 满的节点（FullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length >= maxChildren。\n\n对应的3个函数:\n\n```javascript\n  function isFullNode(node){\n    if (isNoChildrenNode(node)) return false;\n    return node && node.children && node.children.length >= node.maxChildren;\n  }\n\n  function isNotFullNode(node){\n    if (isNoChildrenNode(node)) return false;\n    return node && node.children && node.children.length < node.maxChildren;\n  }\n\n  function isNoChildrenNode(node){\n    return node.maxChildren === 0;\n  }\n```\n\n### 4.4 数字节点（Number）\n\n定义一个数字节点，其children就是 数字字面量。\n\n```javascript\nfunction NumberNode(){\n  return {\n    type:\"NUMBER\",\n    children:[...arguments],\n    maxChildren:1, // 只能有一个 child\n  }\n}\n```\n\n![ast](//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/82038/8/12501/7509/5da02230E34905adc/e6feb28340e73f83.jpg)\n\n### 4.5 数字节点的规则\n\n- 1. 找到栈顶 top\n- 2. 和数字节点 number\n- 3. top 不能是满项\n- 4. 如果 top 为非满的节点，number push 到 top.children\n- 5. 否则（top 是没有后代的节点），number 压栈\n\n```javascript\n  const top = stack[stack.length - 1]; // 栈顶\n  if (token.type === \"NUMBER\") {\n    //  1 1 \n    //  1 + 1 1\n    if (isFullNode(top)) throw new Error(\"数字前一项不能是满项\")\n    const number = CreateTypeNode(token.type)(token.value);\n    if (isNotFullNode(top)){\n      return topChildPush(number);\n    } else {\n      return stackPush(number);\n    }\n  }\n```\n\n![ast](//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/69734/3/12678/10873/5da02230E362bad15/4fe7b27ee9fd7e8d.jpg)\n\n### 4.6 符号节点（Sign + - * /）\n\n定义一个符号节点，其 children 可以是 字面量 或者 其他节点。\n\n```javascript\nfunction AddNode(){\n  return {\n    type:\"+\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\nfunction SubNode(){\n  return {\n    type:\"-\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\nfunction MulNode(){\n  return {\n    type:\"*\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\nfunction DivNode(){\n  return {\n    type:\"/\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\n```\n\n### 4.7 节点的优先级\n\n大家都知道，运算符有优先级，例如 `* /` 的优先级就比 `+ -` 要高。我把这个优先级扩展到全部节点，所有节点都有一个优先级数值。\n\n```javascript\n  const operatorValue = {\n    \"ROOT\" : 0, \n    \"+\" : 1,\n    \"-\" : 1,\n    \"*\" : 2,\n    \"/\" : 2,\n    \"NUMBER\" : 3,\n  }\n```\n\n这个数值后面马上就会用到。\n\n### 4.8 retire 操作\n\n我们回到 `1 + 2.3` 这个算术表达式。前面说到 `1` 这个 Token 已经压入栈了，现在轮到 `+` Token 。\n\n- 1. 栈顶 top （就是 number 1）\n- 2. 符号节点 add\n- 3. top 是满的节点，所以 add 是后置符号，进入后置符号规则\n- 4. 比较 top 节点与 符号 add 节点 的优先级数值\n- 5. top < add 执行 rob 操作 ，否则 执行 retire 操作 \n\n```javascript\n // 后置符号\n  if (isFullNode(top)) {\n    if (operatorValue[token.value] > operatorValue[top.type]){\n        // 1 + 2 * \n        return rob(token.value,top.children);\n      } else {\n        //  1 +\n        //  1 + 2 + \n        link(token.value);\n        return retire(token.value);\n      }\n  }\n```\n\n先说 retire 操作，retire 有退休的意思。我是想表达，这当前条件下，栈顶节点可以退下来了，把栈顶的位置让给新节点。\n\n步骤是把的旧栈顶节点出栈，新节点入栈，然后旧栈顶压进新节点的 children 栈里。\n\n```javascript\nconst retire = (type) => {\n  stack.push(CreateTypeNode(type)(stack.pop()));\n}\n```\n\n然后到`2.3` Token，根据前面的规则，因为栈顶的 add 节点是非满节点，`2.3` 构建成 number 节点 后，直接 push 到 add 节点的 children 栈里。\n\n文字有点干，我们配合图一起看。\n\n![ast](//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/66140/36/12635/60553/5da02231Ebfa5ea7d/feded00b2bef2b71.jpg)\n\n\n### 4.9 rob 操作\n\n前面提到 retire 操作的反向条件是 rob 操作。先来看一个例子`1 + 2.3 * 4`。\n\n接上一节，现在栈里是`<Root>,<+ 1 2.3>`，现需要压入新节点 mul，同样的 mul 节点和栈顶 add 节点比较， 优先级 mul > add，执行 rob 操作。\n\nrob 操作 很好理解，因为乘法比加法的优先级要高，所以本来属于 add 节点 下的 number(2.3) 要被 mul 节点抢走了。\n\n```javascript\n  const rob = (type,children) =>{\n    const child = children.pop();\n    stack.push(CreateTypeNode(type)(child));\n  }\n  rob(token.value,top.children);\n```\nmul 节点抢走 number(2.3) 后放压进自己的 children 栈里，然后 mul 节点入栈，成为新的栈顶。\n\n然后到`4` Token，根据前面的规则，因为栈顶的 mul 节点是非满节点，`4` 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。\n\n文字还是有点干，我们配合图一起看。\n\n![ast](//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/49440/4/13086/71879/5da02231Ed7a47f3c/c8b65dbdb4135e7a.jpg)\n\n### 4.10 link 操作\n\n细心的朋友应该会发现，在执行 retire 操作之前还执行了一个 link 操作。这个 link 是做啥的呢？我们来看一个例子`1 + 2.3 * 4 - 5`。\n\n接上一节，栈里现在是`<Root>,<+ 1>,<* 2.3 4>`，现在准备压入 sub 节点，因为优先级上 sub < mul ，如果先忽略 link 直接走 retire 操作，就会变成`<Root>,<+ 1>,<- <* 2.3 4>>`。这个不是我想要的结果，因为`+`和`-`优先级是相同的，相同优先级应该先计算先出现的符号，理想的操作下，栈里应该变成`<Root>,<- <+ 1 <* 2.3 4>>>`。所以我引入了 link 操作。\n\nlink 操作会先将栈顶的满项节点 push 到前一项的 childen 栈里（如果前一项是非满节点），而且这是一个循环操作 直到 前一项是满节点 或者 前一项节点的优先级比新节点的还要低。\n\n回看上面的例子，栈里现在是 `<Root>,<+ 1>,<* 2.3 4>` ，现在准备压入 sub 节点，因为优先级上 sub < mul ，先在 link 操作下变成 `<Root>,<+ 1 <* 2.3 4>>` ，然后执行 retire ，\n变成 `<Root>,<- <+ 1 <* 2.3 4>>>` 。\n\n```javascript\n  function typeValue(node){\n    if (node === undefined) throw new Error(\"node is undefined\");\n    return operatorValue[node.type];\n  }\n  const link = (type) =>{\n    const value = operatorValue[type];\n    while(isFullNode(stack[stack.length -1]) &&  isNotFullNode(stack[stack.length - 2]) && (value <= typeValue(stack[stack.length -1])) && (value <= typeValue(stack[stack.length -2])) ) {\n      stack[stack.length - 2].children.push(stack.pop());\n    }\n  }\n```\n\n然后到 `5` Token，根据前面的规则，因为栈顶的 sub 节点是非满节点，`5` 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。\n\n继续上图。\n\n![ast](//img11.360buyimg.com/jdphoto/s800x1280_jfs/t1/50267/24/13151/117159/5da02231E865ce1c0/63754ed2b9a0ec0f.jpg)\n\n### 4.13 增加负数\n\n负数可以说是开了一个比较坏的先河，因为和减号公用一个 `-` 符号，导致代码逻辑的增加。负号和减号的区别在于，负号的取值是在它的右侧 `1 + - 1` ，减号是从左到右 `1 - 1` 。这里可以通过判断栈顶节点的情况来确定究竟是 负号 还是 减号。我将 负号这种取值在右边的符号称为 前置符号 ，加减乘除这种左到右取值的符号称为 后置符号。前置符号直接压栈。\n\n```javascript\n  // 定义负数节点\n  function NegNode(){\n    return {\n      type:\"NEGATE\",\n      children:[...arguments],\n      maxChildren:1,\n    }\n  }\n  if (token.type === \"SIGN\") {\n      // 后置符号\n    if (isFullNode(top)) {\n      if (operatorValue[token.value] > operatorValue[top.type]){\n          // 1 + 2 * \n          // console.log(\"rob\");\n          return rob(token.value,top.children);\n        } else {\n          //  1 +\n          //  1 + 2 + \n          link(token.value);\n          return retire(token.value);\n        }\n    }\n    // 前置符号\n    if (\n      (isNoChildrenNode(top)) || // (-\n      (isNotFullNode(top)) // 1 + -\n    ){\n      if (token.value === \"-\") return stackPush(CreateTypeNode(\"NEGATE\")()); // 取负公用符号 - \n      if (token.value === \"+\") return ; // + 号静默\n      throw new Error(token.value + \"符号不能前置\");\n    }\n  }\n```\n\n例子 `- 1` 。 `- 1` 这里开始栈 `<Root>` ，然后准备压入 `-` ，因为 Root 节点是没有后代的节点（NoChildrenNode），所以这里判断`-`是前置符号，生成 NE（NEGATE） 节点直接入栈 `<Root><NE>` 。然后是 `1` , `<Root><NE 1>` 。\n\n例子 `1 - - 1` 。这里第一个 `-` 时 `<Root><1>` ，因为 栈顶 number 节点是满的节点（FullNode），所以第一个 `-` 是后置符号，生成 sub 节点。第二个 `-` 时 `<Root><- 1>`，\n栈顶的 sub 节点是未满的节点（NotFullNode），判定为前置符号，生成 NE（NEGATE） 节点直接入栈 `<Root><- 1><NE>` 。然后是 `1` , `<Root><- 1><NE 1>` 。\n\n![ast](//img11.360buyimg.com/jdphoto/s800x320_jfs/t1/63999/20/12649/26253/5da02231E721980b2/53acee89c75d3d62.jpg)\n\n### 4.14 增加括号\n\n括号 `(` 可以改变表达式里的优先级，先定义括号节点。\n\n首先需要在 词法分析 的时候加入 `(` 。\n\n```javascript\n// start 状态里\n// 符号\nif ([\"+\",\"-\",\"*\",\"/\",\"(\"].includes(char)) {\n  this.emmitToken(\"SIGN\", char);\n  return this.start;\n}\n```\n\n```javascript\nfunction ParNode(){\n  return {\n    type:\"(\",\n    children:[],\n    maxChildren:0,\n  }\n}\n```\n\n这里 maxChildren 设为 0 ，当我们将 括号节点 push 到栈里时，就形成一个屏障，使后面节点变动时，不会越过 括号节点 。\n\n看例子 `1 * (2 + 3 * 4)` 。\n\n```javascript\n  `<Root>` \n1 `<Root><1>`\n* `<Root><* 1>`\n( `<Root><* 1><(>` // ( 隔离\n2 `<Root><* 1><(><2>` // 把 2 和 * 隔离\n+ `<Root><* 1><(><+ 2>` \n3 `<Root><* 1><(><+ 2 3>` \n* `<Root><* 1><(><+ 2><* 3>` \n4 `<Root><* 1><(><+ 2><* 3 4>` \n```\n\n参考代码。\n\n```javascript\nif (token.value === \"(\" ) {\n  // 1(\n  // 1 + 1 (\n  if (isFullNode(top)) throw new Error(\"not a function\");\n  // (\n  return stackPush(CreateTypeNode(\"(\")());\n}\n```\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast14_s.gif)\n\n### 4.14 增加反括号 与 remove 操作\n\n反括号 `)` 的作用是将当前括号后面添加的节点收缩成一个稳定节点，具体方法是把 `(` 后面的节点 link 起来( `(` 的优先级设定得比较小，旨在将括号里的节点都连接起来)，并推到一个临时的栈里，然后将 `(` 节点 改写成 `)` 节点 ，再将临时栈的节点出栈 push 到 `)` 节点的 children 里。还因为 `)` 节点的优先级别设置了很高，不用担心会被后面的节点 rob 。\n\n首先需要在 词法分析 的时候加入 `)` 。\n\n```javascript\n// start 状态里\n// 符号\nif ([\"+\",\"-\",\"*\",\"/\",\"(\",\")\"].includes(char)) {\n  this.emmitToken(\"SIGN\", char);\n  return this.start;\n}\n```\n\n```javascript\nif (token.value === \")\" ) {\n  // ()\n  if (isNoChildrenNode(top)) throw new Error(\"Unexpected token )\");\n  // (1+)\n  if (isNotFullNode(top)) throw new Error(\"Unexpected token )\");\n  return remove(\"(\");  // 收拢 (\n}\n\nconst remove = (type) => {\n  link(type);\n  //  找到最近的( 其余push到tempStack\n  while(stack.length > 0 && !(stack[stack.length - 1].type === type && !stack[stack.length - 1].children)){\n    tempStack.push(stack.pop());\n  }\n  // 修改最近的( \n  const top = stack[stack.length - 1];\n  if (top.type === type){\n    top.type = opposite[type];  // 取反 ( => )\n    top.children = [];\n    // tempStack的Node压给(\n    while(tempStack.length > 0){\n      top.children.push(tempStack.pop());\n    }\n    top.maxChildren = top.children.length; // maxChildren 设满\n  } \n}\n\n\nconst operatorValue = {\n  \"ROOT\" : 0, \n  \"(\" : 1, // 括号的优先级低，方便 link\n  \"+\" : 2,\n  \"-\" : 2,\n  \"*\" : 3,\n  \"/\" : 3,\n  \"NEGATE\" : 4, // 取负\n  \"NUMBER\" : 5, // 取正\n  \")\" : 6, // 反括号的优先级高，防止被 rob\n  \"ROOT_END\" : 7,\n}\n\nconst opposite = {\n  \"(\" : \")\" ,\n  \"ROOT\" : \"ROOT_END\",\n}\n```\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast15_s.gif)\n\n### 4.15 EOF\n\n括号的作用是将其内部的节点包裹起来，形成一个稳定的节点，括号 `(` 和反括号 `)` 自成一对。还有一对有同样的功能，就是 `ROOT` 和 `ROOT_END` 。\n\n`ROOT` 和 `ROOT_END` 标示着这个表达式的开始和结束。 `ROOT` 节点是初始化时就添加的，那么 `ROOT_END` 对应就是 `EOF` 这个 Token 了。\n\n```javascript\nif (token.type === \"EOF\") {\n  // EOF\n  return remove(\"ROOT\");\n};\n```\n\n来一个完整的流程gif。\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast16_s.gif)\n\n![ast](//img11.360buyimg.com/jdphoto/s598x470_jfs/t1/58973/16/13042/49291/5da02232Eba090ed2/8876293a6a362b89.jpg)\n\n## 5 计算求值\n\n`EOF` 后，我们就可以得到抽象语法树 AST 了。因为是树形结构，我们可以用递归的方法求值。\n\n```javascript\n`1 * ( 2 + 3 * 4)`\nconst ast = {\n  \"type\": \"ROOT_END\",\n  \"children\": [{\n    \"type\": \"*\",\n    \"children\": [{\n      \"type\": \"NUMBER\",\n      \"children\": [\"1\"],\n    }, {\n      \"type\": \")\",\n      \"children\": [{\n        \"type\": \"+\",\n        \"children\": [{\n          \"type\": \"NUMBER\",\n          \"children\": [\"2\"],\n        }, {\n          \"type\": \"*\",\n          \"children\": [{\n            \"type\": \"NUMBER\",\n            \"children\": [\"3\"],\n          }, {\n            \"type\": \"NUMBER\",\n            \"children\": [\"4\"],\n          }],\n        }],\n      }],\n    }],\n  }],\n}\nfunction evaluate(node){\n  const {type,children} = node;\n  if (type === \"NUMBER\") return Number(children[0]);\n  if (type === \"+\") return evaluate(children[0]) + evaluate(children[1]);\n  if (type === \"-\") return evaluate(children[0]) - evaluate(children[1]);\n  if (type === \"*\") return evaluate(children[0]) * evaluate(children[1]);\n  if (type === \"/\") return evaluate(children[0]) / evaluate(children[1]);\n  if (type === \")\") return evaluate(children[0]);\n  if (type === \"ROOT_END\") return evaluate(children[0]);\n  if (type === \"NEGATE\") return evaluate(children[0]) * -1;\n}\nconsole.log(evaluate(ast)); // 14\n```\n\n## 6 小结\n\n写到这里，一个简单的四则运算解析器总算完成了。一共分 3 大部分。分别是 词法分析（Lexer）、语法分析（Parser）、计算求值（evaluate）。\n\n词法分析（Lexer）是将 表达式 字符串 转化为 Token 流，这里用到有限状态机。\n\n语法分析（Parser）是将 Token 流 转化为 抽象语法树（AST），这里主要是手工写的语法分析，用了 两个栈 ，规定了 4 个方法 link 、 retire 、 rob 、 remove，还有定义了不同节点的入栈规则。\n\n计算求值（evaluate）是将 AST 计算出表达式的 值，这里用了递归求值。\n\n## 7 应用之自定义的向量运算\n\n弄清楚四则运算的解析方法后，我们可以创造自己制定规则的表达式运算了。\n\n因为之前的项目我写过向量运算，但是因为函数调用的写法有点丑陋，我这里就尝试自定义向量运算表达式。\n \n### 7.1 向量表示之引入符号（Sign [ , ]）\n\n这里一个 2维向量 我用 `[1,2]` 来表示。所以先在 词法分析（Lexer）里增加 `[,]` 。\n\n```javascript\n// start 状态里\n// 符号\nif ([\"+\",\"-\",\"*\",\"/\",\"(\",\")\",\"[\",\",\",\"]\"].includes(char)) {\n  this.emmitToken(\"SIGN\", char);\n  return this.start;\n}\n```\n\n`[` 和 `]` 是一对，本质和括号对 `(` `)` 没什么区别。\n\n`,` 其定位就是一个分割符，没有成对子。而且 `,` 出现后，其前面的节点都要 link 起来。\n\n```javascript\nfunction VecNode(){\n  return {\n    type:\"[\",\n    children:[],\n    maxChildren:0,\n  }\n}\nfunction WallNode(){\n  return {\n    type:\",\",\n    children:[],\n    maxChildren:0,\n  }\n}\n\nconst opposite = {\n  \"(\" : \")\" ,\n  \"[\" : \"]\" ,\n  \"ROOT\" : \"ROOT_END\" ,\n}\n\nif (token.value === \"[\" ) {\n  // 1[\n  // 1 + 1 [\n  if (isFullNode(top)) throw new Error(\"非顶端[前面不能有满项\");\n  return stack.push(CreateTypeNode(\"[\")());\n}\n\nif (token.value === \",\" ) {\n  // ,\n  // ,,\n  // (,\n  // [,\n  if (isNoChildrenNode(top)) throw new Error(\",不能接在空符后面\");\n  // [ 1 + ,\n  if (isNotFullNode(top)) throw new Error(\",不能接在非满项后面\");\n  link(\"[\");\n  return stack.push(CreateTypeNode(\",\")());\n}\n\nif (token.value === \"]\" ) {\n  // [1+]\n  if (isNotFullNode(top)) throw new Error(\"]前不能有非满项\");\n  return remove(\"[\");\n}\n```\n\n例子 `[ 1 + 2 * 3 , 4 + 5 * 6 ]` 。\n\n```javascript\n    `<Root>`\n[   `<Root><[>` \n1   `<Root><[><1>` \n+   `<Root><[><+ 1>` \n2   `<Root><[><+ 1 2>` \n*   `<Root><[><+ 1><* 2>` \n3   `<Root><[><+ 1><* 2 3>` \n,   `<Root><[><+ 1 <* 2 3>><,>` \n4   `<Root><[><+ 1 <* 2 3>><,><4>` \n+   `<Root><[><+ 1 <* 2 3>><,><+ 4>` \n5   `<Root><[><+ 1 <* 2 3>><,><+ 4 5>` \n*   `<Root><[><+ 1 <* 2 3>><,><+ 4><* 5>` \n6   `<Root><[><+ 1 <* 2 3>><,><+ 4><* 5 6>` \n]   `<Root><[><+ 1 <* 2 3>><,><+ 4<* 5 6>>` \n    `<Root><] <+ 1 <* 2 3>><,><+ 4<* 5 6>>>` \nEOF `<RootEnd <] <+ 1 <* 2 3>><,><+ 4<* 5 6>>>>` \n```\n \n最后在 evaluate 方法里增加对向量的支持。\n\n```javascript\n// evaluate 里\nif (type === \"]\") {\n  const notWall = children.filter(item => item.type !== \",\");\n  const a = evaluate(notWall[0]);\n  const b = evaluate(notWall[1]);\n  const isNumA = typeof a === \"number\";\n  const isNumB = typeof b === \"number\";\n  if (isNumA && isNumB) {\n    return new Vector2d(a,b);\n  } else {\n    throw new Error(\"只有两个数量才能生成向量\");\n  }\n}\n```\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast18_s.gif)\n\n![ast](//img11.360buyimg.com/jdphoto/s755x660_jfs/t1/51274/9/13256/68924/5da02232Ed7289fd9/2a7ffb17f4a9bb21.jpg)\n\n### 7.2 向量加减乘除法取负\n\n向量加减乘除法取负继续源用 `+` , `-` , `*` , `/` 符号，只需要在 evaluate 方法里做判断就可以了。\n\n```javascript\n// evaluate 里\nif (type === \"+\") {\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  if (Vector2d.is(a) && Vector2d.is(b)){\n    return Vector2d.add(a,b);\n  } else {\n    return a + b;\n  }\n}\nif (type === \"-\") {\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  if (Vector2d.is(a) && Vector2d.is(b)){\n    return Vector2d.sub(a,b);\n  } else {\n    return a - b;\n  }\n}\nif (type === \"*\" || type === \"/\") {\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  const isVecA = Vector2d.is(a);\n  const isVecB = Vector2d.is(b);\n  const isNumA = typeof a === \"number\";\n  const isNumB = typeof b === \"number\";\n  if ( isNumA && isNumB ){\n    if (type === \"*\") return a * b;\n    if (type === \"/\") return a / b;\n  } else if(isVecA && isNumB) {\n    if (type === \"*\") return Vector2d.scale(a,b);\n    if (type === \"/\") return Vector2d.scale(a,1/b);\n  } else if (isVecB && isNumA) {\n    if (type === \"*\") return Vector2d.scale(b,a);\n    if (type === \"/\") return Vector2d.scale(b,1/a);\n  } else {\n    throw new Error(\"两个向量不能相乘，请用@dot\");\n  }\n}\nif (type === \"NEGATE\") {\n  const a = evaluate(children[0]);\n  if (Vector2d.is(a)){\n    return Vector2d.scale(a,-1);\n  } else {\n    return a * -1;\n  }\n}\n```\n\n### 7.3 向量旋转、点乘，角度的单位转换\n\n向量的旋转（`@rot`）、点乘（`@dot`），角度的单位转换（`@deg`），用这3个自定义符号。\n\n这里需要修改一下 词法分析 的状态机，在 start 状态下新增一个跃迁状态 customSgin 用 `@` 为标识。然后 customSgin 状态下输入[a-zA-Z]都回跃迁自身 否则 跃迁回状态 start 并输出 Token。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/69281/39/12809/13086/5da02232Ef5aaefde/6cebfe531f9f4497.jpg)\n\n```javascript\n// Lexer 里\n  start(char) {\n    // 数字\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inInt;\n    }\n    // .\n    if (char === \".\"){\n      this.token.push(char);\n      return this.inFloat;\n    }\n    // 符号\n    if ([\"+\",\"-\",\"*\",\"/\",\"(\",\")\",\"[\",\"]\",\",\",\"<\",\">\"].includes(char)) {\n      this.emmitToken(\"SIGN\", char);\n      return this.start\n    }\n    // 空白字符\n    if ([\" \",\"\\r\",\"\\n\"].includes(char)) {\n      return this.start;\n    }\n    // 结束\n    if (char === EOF){\n      this.emmitToken(\"EOF\", EOF);\n      return this.start\n    }\n    if (char === \"@\"){\n      this.token.push(char);\n      return this.customSgin;\n    }\n  }\n\n  customSgin(char) {\n    if (\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\").includes(char)) {\n      this.token.push(char);\n      return this.customSgin;\n    } else {\n      this.emmitToken(\"SIGN\", this.token.join(\"\"));\n      this.token = [];\n      return this.start(char); // put back char\n    }\n  }\n```\n\n然后定义节点和节点优先级。\n\n```javascript\nfunction DegNode(){\n  return {\n    type:\"@deg\",\n    children:[...arguments],\n    maxChildren:1,\n  }\n}\nfunction DotNode(){\n  return {\n    type:\"@dot\",\n    children:[...arguments],\n    maxChildren:2,\n  }\n}\nfunction RotNode(){\n  return {\n    type:\"@rot\",\n    children:[...arguments],\n    maxChildren:2,\n  }\n}\nconst operatorValue = {\n  \"ROOT\" : 0, \n  \"(\" : 1,\n  \"[\" : 1,\n  \"@dot\" : 2, // 向量点乘\n  \"<\" : 3,\n  \">\" : 3,\n  \"+\" : 4,\n  \"-\" : 4,\n  \"*\" : 5,\n  \"/\" : 5,\n  \"@rot\" : 5, // 向量旋转\n  \"NEGATE\" : 6, // 取负\n  \"@deg\" : 7, // 角度转换\n  \"NUMBER\" : 8, // 取正\n  \")\" : 9,\n  \"]\" : 9,\n  \"ROOT_END\" : 10,\n}\n```\n\n还有在 evaluate 里写对应的方法。\n\n```javascript\nif (type === \"@dot\"){\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  const isVecA = Vector2d.is(a);\n  const isVecB = Vector2d.is(b);\n  if (isVecA && isVecB) {\n    return Vector2d.dot(a,b);\n  } else {\n    throw new Error(\"只有向量和向量能点乘\");\n  }\n}\nif (type === \"@rot\"){\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  const isVecA = Vector2d.is(a);\n  const isVecB = Vector2d.is(b);\n  const isNumA = typeof a === \"number\";\n  const isNumB = typeof b === \"number\";\n  if (isVecA && isNumB) {\n    return Vector2d.rotate(a,b);\n  } else if (isVecB && isNumA) {\n    return Vector2d.rotate(b,a);\n  } else {\n    throw new Error(\"只有向量和数量能旋转\");\n  }\n}\nif (type === \"@deg\"){\n  const a = evaluate(children[0]);\n  const isNumA = typeof a === \"number\";\n  if (isNumA){\n    return a / 180 * Math.PI;\n  } else {\n    throw new Error(\"非数字不能转换deg\");\n  }\n}\n```\n\n来一个例子 `[1, 0] @rot - 90 @deg` ,把 [1,0] 旋转负 90 度。\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast21_s.gif)\n\n![ast](//img11.360buyimg.com/jdphoto/s626x567_jfs/t1/78350/34/12497/62507/5da02232E064c50c9/8d71fa5ebacbd32a.jpg)\n\n## 8 Demo手动玩\n\n最后结合 Vue 写了一个 表达式转 AST 的可视化 demo，支持数字和向量。\n\n[http://rococolate.github.io/blog/ast/index.html](http://rococolate.github.io/blog/ast/index.html)\n\ndemo 源码: [https://github.com/Rococolate/ast_demo](https://github.com/Rococolate/ast_demo)","source":"_posts/2019-10/写一个四则运算表达式转换成AST的方法.md","raw":"---\ntitle: 写一个四则运算表达式转换成AST的方法\ndate: 2019-10-17 12:15:11\ncover: https://img11.360buyimg.com/jdphoto/s1756x1080_jfs/t1/53134/34/13167/130483/5da0222eE73e627a9/c480617a5061fa9b.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s1756x1080_jfs/t1/53134/34/13167/130483/5da0222eE73e627a9/c480617a5061fa9b.jpg\ncategories: Web前端\ntags:\n  - AST\n---\n\n> 作者：吴冠禧\n\n## 0 前言\n\n晓强哥在他的上篇文章里介绍了 [Javascript 抽象语法树](https://wecteam.io/2019/07/19/Javascript%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E4%B8%8A%E7%AF%87(%E5%9F%BA%E7%A1%80%E7%AF%87)里面「提到获得抽象语法树的过程为：代码 => 词法分析 => 语法分析 => AST」，抱着深究技术细节的目的，我决定研究这里的词法分析和语法分析，写一个简单的四则运算表达式转换成AST的方法，于是就有了下面的内容。\n\n\n## 1 人类和计算机对于表达式的看法是不同的\n\n人类习惯 `a + b` 这种表达叫做「中序表达式」，优点是比较简单直观，缺点是要用一堆括号来确定优先级 `(a + b) * (c + d)`。\n\n这里说简单直观是相对人类的思维结构来说的，对计算机而言中序表达式是非常复杂的结构。\n\n为了计算机计算方便，我们需要将中序表达式转换成树形结构，也就是「抽象语法树AST」。\n<!--more-->\n## 2 javascript 与抽象语法树 AST\n\n我们知道，几乎任何语言中，代码在 \"编译\"（解释型语言在运行时也有编译的过程） 的过程中，都会生成一种树状的中间状态，这就是 AST。有些语言会直接把类似 AST 的语法暴露给程序员（例如：lisp、elixir、python等）。但是 javascript 并没有这个能力，但是我们可以用 javascript 自身实现这个过程。\n\n获得抽象语法树的过程为：代码（字符串） => 词法分析（Lexer）=> Tokens => 语法分析（Parser） => AST\n\n## 3 词法分析（Lexer）\n\n词法分析有点像中文的分词，就是将字符串流根据规则生成一个一个的有具体意义的 Token ，形成 Token 流，然后流入下一步。\n\n我们看一个简单的例子，\n\n```javascript\n1 + 2.3\n```\n\n很明显这个表达式是可以分成三个 Token ，分别是 `1` , `+` , `2.3`。\n\n词法分析这里，我们可以用有限状态机来解决。\n\n### 3.1 有限状态机\n\n绝大多数语言的词法部分都是用状态机实现的，我们下面就画出有限状态机的图形，然后根据图形直观地写出解析代码，总体图大概是这样。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/71505/36/12619/47435/5da0222fEf7a21a7b/b427472a1c8bbf59.jpg)\n\n下面拆开细看。\n\n### 3.2 开始（start）状态\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/81063/19/12511/29679/5da0222fE1bb0fda7/610bb2041fbb9606.jpg)\n\n状态机的初始状态是 `start` 。\n\n`start` 状态下输入数字（0 ～ 9）就会迁移到 `inInt` 状态。\n\n`start` 状态下输入符号（.）就会迁移到 `inFloat` 状态。\n\n`start` 状态下输入符号（+ - * /）就会输出 `「符号 Token」` ，并回到 `start` 状态。\n\n`start` 状态下输入 EOF 就会输出 `「EOF Token」` ，并回到 `start` 状态。\n\n代码大概是这个样子：\n```javascript\n  start(char) {\n    // 数字\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inInt;\n    }\n    // .\n    if (char === \".\"){\n      this.token.push(char);\n      return this.inFloat;\n    }\n    // 符号\n    if ([\"+\",\"-\",\"*\",\"/\"].includes(char)) {\n      this.emmitToken(\"SIGN\", char);\n      return this.start;\n    }\n    // 结束符\n    if (char === EOF){\n      this.emmitToken(\"EOF\", EOF);\n      return this.start;\n    }\n  }\n```\n\n### 3.3 在整数（inInt）状态\n\n`start` 状态下输入输入数字（0 ～ 9）就会迁移到 `inInt` 状态。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/78804/34/12584/20147/5da0222fEef8f09c4/ed63a73dddac5654.jpg)\n\n`inInt` 状态下输入输入符号（.）就会迁移到 `inFloat` 状态。\n\n`inInt` 状态下输入数字（0 ～ 9）就继续留在 `inInt` 状态。\n\n`inInt` 状态下输入非数字和.（0 ～ 9 .）就会就会输出 `「整数 Token」` ，并迁移到 `start` 状态。\n\n代码：\n```javascript\n  inInt(char) {\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inInt;\n    } else if (char === '.') {\n      this.token.push(char);\n      return this.inFloat;\n    } else {\n      this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n      this.token = [];\n      return this.start(char); // put back char\n    }\n  }\n```\n\n### 3.4 在浮点数（inFloat）状态\n\n`start` 状态下输入符号（.）就会迁移到 `inFloat` 状态。\n\n`inInt` 状态下输入输入符号（.）就会迁移到 `inFloat` 状态。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/47044/1/13068/25868/5da02230Eac0dd5ee/68e1eacf4a087979.jpg)\n\n`inFloat` 状态下输入数字（0 ～ 9）就继续留在 `inFloat` 状态。\n\n`inFloat` 状态下输入非数字（0 ～ 9 ）就会就会输出 `「浮点数 Token」`，并迁移到 `start` 状态。\n\n代码：\n```javascript\n  inFloat(char) {\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inFloat;\n    } else if (char === \".\") {\n      throw new Error(\"不能出现`..`\");\n    } else {\n      if (this.token.length === 1  && this.token[0] === \".\") throw new Error(\"不能单独出现`.`\");\n      this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n      this.token = [];\n      return this.start(char); // put back char\n    }\n  }\n```\n\n### 3.5 输出的 Token 种类 和定义\n\n我将 `「浮点数 Token」` 和 `「整数 Token」` 合并为 `[NUMBER Token]` , 其他的 Token 还有 `「SIGN Token」` 和 `「EOF Token」`。\n\nToken 的 定义：\n\n```javascript\n  interface Token{\n    type:String,\n    value:String,\n  }\n```\n\n### 3.6 完整的 Lexer 代码\n\n```javascript\n  const EOF = Symbol('EOF');\n\n  class Lexer {\n    constructor(){\n      this.token = []; // 临时 token 字符存储\n      this.tokens = []; // 生成的正式 token\n      // state 默认是 start 状态，后面通过 push 函数实现状态迁移\n      this.state = this.start;\n    }\n    start(char) {\n      // 数字\n      if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n        this.token.push(char);\n        return this.inInt;\n      }\n      // .\n      if (char === \".\"){\n        this.token.push(char);\n        return this.inFloat;\n      }\n      // 符号\n      if ([\"+\",\"-\",\"*\",\"/\"].includes(char)) {\n        this.emmitToken(\"SIGN\", char);\n        return this.start;\n      }\n      // 结束符\n      if (char === EOF){\n        this.emmitToken(\"EOF\", EOF);\n        return this.start;\n      }\n    }\n    inInt(char) {\n      if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n        this.token.push(char);\n        return this.inInt;\n      } else if (char === '.') {\n        this.token.push(char);\n        return this.inFloat;\n      } else {\n        this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n        this.token = [];\n        return this.start(char); // put back char\n      }\n    }\n    inFloat(char) {\n      if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n        this.token.push(char);\n        return this.inFloat;\n      } else if (char === \".\") {\n        throw new Error(\"不能出现`..`\");\n      } else {\n        if (this.token.length === 1  && this.token[0] === \".\") throw new Error(\"不能单独出现`.`\");\n        this.emmitToken(\"NUMBER\", this.token.join(\"\"));\n        this.token = [];\n        return this.start(char); // put back char\n      }\n    }\n    emmitToken(type, value) {\n      this.tokens.push({\n        type,\n        value,\n      })\n    }\n    push(char){\n      // 每次执行 state 函数都会返回新的状态函数，实现状态迁移\n      this.state = this.state(char);\n      return this.check();\n    }\n    end(){\n      this.state(EOF);\n      return this.check();\n    }\n    check(){\n      // 检测是否有 token 生成并返回。\n      const _token = [...this.tokens];\n      this.tokens = [];\n      return _token;\n    }\n    clear(){\n      this.token = [];\n      this.tokens = [];\n      this.state = this.start;\n    }\n  }\n\n  const lexer = new lexer();\n\n  const input = `1 + 2.3`;\n\n  let tokens = [];\n\n  for (let c of input.split('')){\n    tokens = [...tokens,...lexer.push(c)];\n  }\n\n  tokens = [...tokens,...lexer.end()];\n```\n\n效果如下图：\n\n![ast](//img11.360buyimg.com/jdphoto/s620x210_jfs/t1/50210/26/13138/29830/5da02230Ea3239b11/7004e567f66d0bb9.jpg)\n\n自此，我们成功实现了词法分析，后面进入到语法分析。\n\n## 4 语法分析（Parser）\n\n前面的词法分析，已经将字符串划分成一个个有意义的 Token 进入到语法分析（Parser）。语法分析在编译原理里面属于比较高深的学问，我是没有怎么看懂。但总的来说就是把 Token流 组装成 AST ，\nAST 的结构是既定的，后面我就通过对不同节点制定不同规则把 AST 组装起来。\n\n### 4.1 定义 AST 结构 和 节点（Node）\n\n简单来说 AST 就是一棵树形结构，由节点（Node）和 叶子（字面量 Literal ）组成，节点 下面可以连接 其他节点 或者 字面量。最顶端的节点就是 根节点。\n\n![ast](//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/68355/21/12670/13784/5da02230E361eb32a/7b2301d29bdc640c.jpg)\n\n节点的定义就是一个简单的 javascript Object\n\n```javascript\ninterface Node {\n  type:string,\n  children:[],// children栈 里面可以是 Node 或者 Literal\n  maxChildren:number,\n}\n```\n\n### 4.2 栈 和 根节点（Root）\n\n语法分析（Parser）这里，我使用的是一个栈结构，每来一个 Token 就入栈，然后通过一定的规则组装 AST。\n\n第一步就是压入 根节点 `<Root>`。\n\n```javascript\nfunction RootNode(){\n  return {\n    type:\"ROOT\",\n    children:[],\n    maxChildren:0,\n  }\n}\n\nconst stack = [RootNode()];\n```\n\n![ast](//img11.360buyimg.com/jdphoto/s318x318_jfs/t1/73107/24/12672/9710/5da02230E50b4ed71/548c3b28fcbcb2b0.jpg)\n\n### 4.3 通用规则\n\n在说明不同类型节点的规则前，先说一下通用规则。\n\n- 1. 没有后代的节点（NoChildrenNode），就是节点的 maxChildren 属性为 0。\n- 2. 非满的节点（NotFullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length < maxChildren。\n- 3. 满的节点（FullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length >= maxChildren。\n\n对应的3个函数:\n\n```javascript\n  function isFullNode(node){\n    if (isNoChildrenNode(node)) return false;\n    return node && node.children && node.children.length >= node.maxChildren;\n  }\n\n  function isNotFullNode(node){\n    if (isNoChildrenNode(node)) return false;\n    return node && node.children && node.children.length < node.maxChildren;\n  }\n\n  function isNoChildrenNode(node){\n    return node.maxChildren === 0;\n  }\n```\n\n### 4.4 数字节点（Number）\n\n定义一个数字节点，其children就是 数字字面量。\n\n```javascript\nfunction NumberNode(){\n  return {\n    type:\"NUMBER\",\n    children:[...arguments],\n    maxChildren:1, // 只能有一个 child\n  }\n}\n```\n\n![ast](//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/82038/8/12501/7509/5da02230E34905adc/e6feb28340e73f83.jpg)\n\n### 4.5 数字节点的规则\n\n- 1. 找到栈顶 top\n- 2. 和数字节点 number\n- 3. top 不能是满项\n- 4. 如果 top 为非满的节点，number push 到 top.children\n- 5. 否则（top 是没有后代的节点），number 压栈\n\n```javascript\n  const top = stack[stack.length - 1]; // 栈顶\n  if (token.type === \"NUMBER\") {\n    //  1 1 \n    //  1 + 1 1\n    if (isFullNode(top)) throw new Error(\"数字前一项不能是满项\")\n    const number = CreateTypeNode(token.type)(token.value);\n    if (isNotFullNode(top)){\n      return topChildPush(number);\n    } else {\n      return stackPush(number);\n    }\n  }\n```\n\n![ast](//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/69734/3/12678/10873/5da02230E362bad15/4fe7b27ee9fd7e8d.jpg)\n\n### 4.6 符号节点（Sign + - * /）\n\n定义一个符号节点，其 children 可以是 字面量 或者 其他节点。\n\n```javascript\nfunction AddNode(){\n  return {\n    type:\"+\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\nfunction SubNode(){\n  return {\n    type:\"-\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\nfunction MulNode(){\n  return {\n    type:\"*\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\nfunction DivNode(){\n  return {\n    type:\"/\",\n    children:[...arguments],\n    maxChildren:2, // 能有两个 child\n  }\n}\n```\n\n### 4.7 节点的优先级\n\n大家都知道，运算符有优先级，例如 `* /` 的优先级就比 `+ -` 要高。我把这个优先级扩展到全部节点，所有节点都有一个优先级数值。\n\n```javascript\n  const operatorValue = {\n    \"ROOT\" : 0, \n    \"+\" : 1,\n    \"-\" : 1,\n    \"*\" : 2,\n    \"/\" : 2,\n    \"NUMBER\" : 3,\n  }\n```\n\n这个数值后面马上就会用到。\n\n### 4.8 retire 操作\n\n我们回到 `1 + 2.3` 这个算术表达式。前面说到 `1` 这个 Token 已经压入栈了，现在轮到 `+` Token 。\n\n- 1. 栈顶 top （就是 number 1）\n- 2. 符号节点 add\n- 3. top 是满的节点，所以 add 是后置符号，进入后置符号规则\n- 4. 比较 top 节点与 符号 add 节点 的优先级数值\n- 5. top < add 执行 rob 操作 ，否则 执行 retire 操作 \n\n```javascript\n // 后置符号\n  if (isFullNode(top)) {\n    if (operatorValue[token.value] > operatorValue[top.type]){\n        // 1 + 2 * \n        return rob(token.value,top.children);\n      } else {\n        //  1 +\n        //  1 + 2 + \n        link(token.value);\n        return retire(token.value);\n      }\n  }\n```\n\n先说 retire 操作，retire 有退休的意思。我是想表达，这当前条件下，栈顶节点可以退下来了，把栈顶的位置让给新节点。\n\n步骤是把的旧栈顶节点出栈，新节点入栈，然后旧栈顶压进新节点的 children 栈里。\n\n```javascript\nconst retire = (type) => {\n  stack.push(CreateTypeNode(type)(stack.pop()));\n}\n```\n\n然后到`2.3` Token，根据前面的规则，因为栈顶的 add 节点是非满节点，`2.3` 构建成 number 节点 后，直接 push 到 add 节点的 children 栈里。\n\n文字有点干，我们配合图一起看。\n\n![ast](//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/66140/36/12635/60553/5da02231Ebfa5ea7d/feded00b2bef2b71.jpg)\n\n\n### 4.9 rob 操作\n\n前面提到 retire 操作的反向条件是 rob 操作。先来看一个例子`1 + 2.3 * 4`。\n\n接上一节，现在栈里是`<Root>,<+ 1 2.3>`，现需要压入新节点 mul，同样的 mul 节点和栈顶 add 节点比较， 优先级 mul > add，执行 rob 操作。\n\nrob 操作 很好理解，因为乘法比加法的优先级要高，所以本来属于 add 节点 下的 number(2.3) 要被 mul 节点抢走了。\n\n```javascript\n  const rob = (type,children) =>{\n    const child = children.pop();\n    stack.push(CreateTypeNode(type)(child));\n  }\n  rob(token.value,top.children);\n```\nmul 节点抢走 number(2.3) 后放压进自己的 children 栈里，然后 mul 节点入栈，成为新的栈顶。\n\n然后到`4` Token，根据前面的规则，因为栈顶的 mul 节点是非满节点，`4` 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。\n\n文字还是有点干，我们配合图一起看。\n\n![ast](//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/49440/4/13086/71879/5da02231Ed7a47f3c/c8b65dbdb4135e7a.jpg)\n\n### 4.10 link 操作\n\n细心的朋友应该会发现，在执行 retire 操作之前还执行了一个 link 操作。这个 link 是做啥的呢？我们来看一个例子`1 + 2.3 * 4 - 5`。\n\n接上一节，栈里现在是`<Root>,<+ 1>,<* 2.3 4>`，现在准备压入 sub 节点，因为优先级上 sub < mul ，如果先忽略 link 直接走 retire 操作，就会变成`<Root>,<+ 1>,<- <* 2.3 4>>`。这个不是我想要的结果，因为`+`和`-`优先级是相同的，相同优先级应该先计算先出现的符号，理想的操作下，栈里应该变成`<Root>,<- <+ 1 <* 2.3 4>>>`。所以我引入了 link 操作。\n\nlink 操作会先将栈顶的满项节点 push 到前一项的 childen 栈里（如果前一项是非满节点），而且这是一个循环操作 直到 前一项是满节点 或者 前一项节点的优先级比新节点的还要低。\n\n回看上面的例子，栈里现在是 `<Root>,<+ 1>,<* 2.3 4>` ，现在准备压入 sub 节点，因为优先级上 sub < mul ，先在 link 操作下变成 `<Root>,<+ 1 <* 2.3 4>>` ，然后执行 retire ，\n变成 `<Root>,<- <+ 1 <* 2.3 4>>>` 。\n\n```javascript\n  function typeValue(node){\n    if (node === undefined) throw new Error(\"node is undefined\");\n    return operatorValue[node.type];\n  }\n  const link = (type) =>{\n    const value = operatorValue[type];\n    while(isFullNode(stack[stack.length -1]) &&  isNotFullNode(stack[stack.length - 2]) && (value <= typeValue(stack[stack.length -1])) && (value <= typeValue(stack[stack.length -2])) ) {\n      stack[stack.length - 2].children.push(stack.pop());\n    }\n  }\n```\n\n然后到 `5` Token，根据前面的规则，因为栈顶的 sub 节点是非满节点，`5` 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。\n\n继续上图。\n\n![ast](//img11.360buyimg.com/jdphoto/s800x1280_jfs/t1/50267/24/13151/117159/5da02231E865ce1c0/63754ed2b9a0ec0f.jpg)\n\n### 4.13 增加负数\n\n负数可以说是开了一个比较坏的先河，因为和减号公用一个 `-` 符号，导致代码逻辑的增加。负号和减号的区别在于，负号的取值是在它的右侧 `1 + - 1` ，减号是从左到右 `1 - 1` 。这里可以通过判断栈顶节点的情况来确定究竟是 负号 还是 减号。我将 负号这种取值在右边的符号称为 前置符号 ，加减乘除这种左到右取值的符号称为 后置符号。前置符号直接压栈。\n\n```javascript\n  // 定义负数节点\n  function NegNode(){\n    return {\n      type:\"NEGATE\",\n      children:[...arguments],\n      maxChildren:1,\n    }\n  }\n  if (token.type === \"SIGN\") {\n      // 后置符号\n    if (isFullNode(top)) {\n      if (operatorValue[token.value] > operatorValue[top.type]){\n          // 1 + 2 * \n          // console.log(\"rob\");\n          return rob(token.value,top.children);\n        } else {\n          //  1 +\n          //  1 + 2 + \n          link(token.value);\n          return retire(token.value);\n        }\n    }\n    // 前置符号\n    if (\n      (isNoChildrenNode(top)) || // (-\n      (isNotFullNode(top)) // 1 + -\n    ){\n      if (token.value === \"-\") return stackPush(CreateTypeNode(\"NEGATE\")()); // 取负公用符号 - \n      if (token.value === \"+\") return ; // + 号静默\n      throw new Error(token.value + \"符号不能前置\");\n    }\n  }\n```\n\n例子 `- 1` 。 `- 1` 这里开始栈 `<Root>` ，然后准备压入 `-` ，因为 Root 节点是没有后代的节点（NoChildrenNode），所以这里判断`-`是前置符号，生成 NE（NEGATE） 节点直接入栈 `<Root><NE>` 。然后是 `1` , `<Root><NE 1>` 。\n\n例子 `1 - - 1` 。这里第一个 `-` 时 `<Root><1>` ，因为 栈顶 number 节点是满的节点（FullNode），所以第一个 `-` 是后置符号，生成 sub 节点。第二个 `-` 时 `<Root><- 1>`，\n栈顶的 sub 节点是未满的节点（NotFullNode），判定为前置符号，生成 NE（NEGATE） 节点直接入栈 `<Root><- 1><NE>` 。然后是 `1` , `<Root><- 1><NE 1>` 。\n\n![ast](//img11.360buyimg.com/jdphoto/s800x320_jfs/t1/63999/20/12649/26253/5da02231E721980b2/53acee89c75d3d62.jpg)\n\n### 4.14 增加括号\n\n括号 `(` 可以改变表达式里的优先级，先定义括号节点。\n\n首先需要在 词法分析 的时候加入 `(` 。\n\n```javascript\n// start 状态里\n// 符号\nif ([\"+\",\"-\",\"*\",\"/\",\"(\"].includes(char)) {\n  this.emmitToken(\"SIGN\", char);\n  return this.start;\n}\n```\n\n```javascript\nfunction ParNode(){\n  return {\n    type:\"(\",\n    children:[],\n    maxChildren:0,\n  }\n}\n```\n\n这里 maxChildren 设为 0 ，当我们将 括号节点 push 到栈里时，就形成一个屏障，使后面节点变动时，不会越过 括号节点 。\n\n看例子 `1 * (2 + 3 * 4)` 。\n\n```javascript\n  `<Root>` \n1 `<Root><1>`\n* `<Root><* 1>`\n( `<Root><* 1><(>` // ( 隔离\n2 `<Root><* 1><(><2>` // 把 2 和 * 隔离\n+ `<Root><* 1><(><+ 2>` \n3 `<Root><* 1><(><+ 2 3>` \n* `<Root><* 1><(><+ 2><* 3>` \n4 `<Root><* 1><(><+ 2><* 3 4>` \n```\n\n参考代码。\n\n```javascript\nif (token.value === \"(\" ) {\n  // 1(\n  // 1 + 1 (\n  if (isFullNode(top)) throw new Error(\"not a function\");\n  // (\n  return stackPush(CreateTypeNode(\"(\")());\n}\n```\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast14_s.gif)\n\n### 4.14 增加反括号 与 remove 操作\n\n反括号 `)` 的作用是将当前括号后面添加的节点收缩成一个稳定节点，具体方法是把 `(` 后面的节点 link 起来( `(` 的优先级设定得比较小，旨在将括号里的节点都连接起来)，并推到一个临时的栈里，然后将 `(` 节点 改写成 `)` 节点 ，再将临时栈的节点出栈 push 到 `)` 节点的 children 里。还因为 `)` 节点的优先级别设置了很高，不用担心会被后面的节点 rob 。\n\n首先需要在 词法分析 的时候加入 `)` 。\n\n```javascript\n// start 状态里\n// 符号\nif ([\"+\",\"-\",\"*\",\"/\",\"(\",\")\"].includes(char)) {\n  this.emmitToken(\"SIGN\", char);\n  return this.start;\n}\n```\n\n```javascript\nif (token.value === \")\" ) {\n  // ()\n  if (isNoChildrenNode(top)) throw new Error(\"Unexpected token )\");\n  // (1+)\n  if (isNotFullNode(top)) throw new Error(\"Unexpected token )\");\n  return remove(\"(\");  // 收拢 (\n}\n\nconst remove = (type) => {\n  link(type);\n  //  找到最近的( 其余push到tempStack\n  while(stack.length > 0 && !(stack[stack.length - 1].type === type && !stack[stack.length - 1].children)){\n    tempStack.push(stack.pop());\n  }\n  // 修改最近的( \n  const top = stack[stack.length - 1];\n  if (top.type === type){\n    top.type = opposite[type];  // 取反 ( => )\n    top.children = [];\n    // tempStack的Node压给(\n    while(tempStack.length > 0){\n      top.children.push(tempStack.pop());\n    }\n    top.maxChildren = top.children.length; // maxChildren 设满\n  } \n}\n\n\nconst operatorValue = {\n  \"ROOT\" : 0, \n  \"(\" : 1, // 括号的优先级低，方便 link\n  \"+\" : 2,\n  \"-\" : 2,\n  \"*\" : 3,\n  \"/\" : 3,\n  \"NEGATE\" : 4, // 取负\n  \"NUMBER\" : 5, // 取正\n  \")\" : 6, // 反括号的优先级高，防止被 rob\n  \"ROOT_END\" : 7,\n}\n\nconst opposite = {\n  \"(\" : \")\" ,\n  \"ROOT\" : \"ROOT_END\",\n}\n```\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast15_s.gif)\n\n### 4.15 EOF\n\n括号的作用是将其内部的节点包裹起来，形成一个稳定的节点，括号 `(` 和反括号 `)` 自成一对。还有一对有同样的功能，就是 `ROOT` 和 `ROOT_END` 。\n\n`ROOT` 和 `ROOT_END` 标示着这个表达式的开始和结束。 `ROOT` 节点是初始化时就添加的，那么 `ROOT_END` 对应就是 `EOF` 这个 Token 了。\n\n```javascript\nif (token.type === \"EOF\") {\n  // EOF\n  return remove(\"ROOT\");\n};\n```\n\n来一个完整的流程gif。\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast16_s.gif)\n\n![ast](//img11.360buyimg.com/jdphoto/s598x470_jfs/t1/58973/16/13042/49291/5da02232Eba090ed2/8876293a6a362b89.jpg)\n\n## 5 计算求值\n\n`EOF` 后，我们就可以得到抽象语法树 AST 了。因为是树形结构，我们可以用递归的方法求值。\n\n```javascript\n`1 * ( 2 + 3 * 4)`\nconst ast = {\n  \"type\": \"ROOT_END\",\n  \"children\": [{\n    \"type\": \"*\",\n    \"children\": [{\n      \"type\": \"NUMBER\",\n      \"children\": [\"1\"],\n    }, {\n      \"type\": \")\",\n      \"children\": [{\n        \"type\": \"+\",\n        \"children\": [{\n          \"type\": \"NUMBER\",\n          \"children\": [\"2\"],\n        }, {\n          \"type\": \"*\",\n          \"children\": [{\n            \"type\": \"NUMBER\",\n            \"children\": [\"3\"],\n          }, {\n            \"type\": \"NUMBER\",\n            \"children\": [\"4\"],\n          }],\n        }],\n      }],\n    }],\n  }],\n}\nfunction evaluate(node){\n  const {type,children} = node;\n  if (type === \"NUMBER\") return Number(children[0]);\n  if (type === \"+\") return evaluate(children[0]) + evaluate(children[1]);\n  if (type === \"-\") return evaluate(children[0]) - evaluate(children[1]);\n  if (type === \"*\") return evaluate(children[0]) * evaluate(children[1]);\n  if (type === \"/\") return evaluate(children[0]) / evaluate(children[1]);\n  if (type === \")\") return evaluate(children[0]);\n  if (type === \"ROOT_END\") return evaluate(children[0]);\n  if (type === \"NEGATE\") return evaluate(children[0]) * -1;\n}\nconsole.log(evaluate(ast)); // 14\n```\n\n## 6 小结\n\n写到这里，一个简单的四则运算解析器总算完成了。一共分 3 大部分。分别是 词法分析（Lexer）、语法分析（Parser）、计算求值（evaluate）。\n\n词法分析（Lexer）是将 表达式 字符串 转化为 Token 流，这里用到有限状态机。\n\n语法分析（Parser）是将 Token 流 转化为 抽象语法树（AST），这里主要是手工写的语法分析，用了 两个栈 ，规定了 4 个方法 link 、 retire 、 rob 、 remove，还有定义了不同节点的入栈规则。\n\n计算求值（evaluate）是将 AST 计算出表达式的 值，这里用了递归求值。\n\n## 7 应用之自定义的向量运算\n\n弄清楚四则运算的解析方法后，我们可以创造自己制定规则的表达式运算了。\n\n因为之前的项目我写过向量运算，但是因为函数调用的写法有点丑陋，我这里就尝试自定义向量运算表达式。\n \n### 7.1 向量表示之引入符号（Sign [ , ]）\n\n这里一个 2维向量 我用 `[1,2]` 来表示。所以先在 词法分析（Lexer）里增加 `[,]` 。\n\n```javascript\n// start 状态里\n// 符号\nif ([\"+\",\"-\",\"*\",\"/\",\"(\",\")\",\"[\",\",\",\"]\"].includes(char)) {\n  this.emmitToken(\"SIGN\", char);\n  return this.start;\n}\n```\n\n`[` 和 `]` 是一对，本质和括号对 `(` `)` 没什么区别。\n\n`,` 其定位就是一个分割符，没有成对子。而且 `,` 出现后，其前面的节点都要 link 起来。\n\n```javascript\nfunction VecNode(){\n  return {\n    type:\"[\",\n    children:[],\n    maxChildren:0,\n  }\n}\nfunction WallNode(){\n  return {\n    type:\",\",\n    children:[],\n    maxChildren:0,\n  }\n}\n\nconst opposite = {\n  \"(\" : \")\" ,\n  \"[\" : \"]\" ,\n  \"ROOT\" : \"ROOT_END\" ,\n}\n\nif (token.value === \"[\" ) {\n  // 1[\n  // 1 + 1 [\n  if (isFullNode(top)) throw new Error(\"非顶端[前面不能有满项\");\n  return stack.push(CreateTypeNode(\"[\")());\n}\n\nif (token.value === \",\" ) {\n  // ,\n  // ,,\n  // (,\n  // [,\n  if (isNoChildrenNode(top)) throw new Error(\",不能接在空符后面\");\n  // [ 1 + ,\n  if (isNotFullNode(top)) throw new Error(\",不能接在非满项后面\");\n  link(\"[\");\n  return stack.push(CreateTypeNode(\",\")());\n}\n\nif (token.value === \"]\" ) {\n  // [1+]\n  if (isNotFullNode(top)) throw new Error(\"]前不能有非满项\");\n  return remove(\"[\");\n}\n```\n\n例子 `[ 1 + 2 * 3 , 4 + 5 * 6 ]` 。\n\n```javascript\n    `<Root>`\n[   `<Root><[>` \n1   `<Root><[><1>` \n+   `<Root><[><+ 1>` \n2   `<Root><[><+ 1 2>` \n*   `<Root><[><+ 1><* 2>` \n3   `<Root><[><+ 1><* 2 3>` \n,   `<Root><[><+ 1 <* 2 3>><,>` \n4   `<Root><[><+ 1 <* 2 3>><,><4>` \n+   `<Root><[><+ 1 <* 2 3>><,><+ 4>` \n5   `<Root><[><+ 1 <* 2 3>><,><+ 4 5>` \n*   `<Root><[><+ 1 <* 2 3>><,><+ 4><* 5>` \n6   `<Root><[><+ 1 <* 2 3>><,><+ 4><* 5 6>` \n]   `<Root><[><+ 1 <* 2 3>><,><+ 4<* 5 6>>` \n    `<Root><] <+ 1 <* 2 3>><,><+ 4<* 5 6>>>` \nEOF `<RootEnd <] <+ 1 <* 2 3>><,><+ 4<* 5 6>>>>` \n```\n \n最后在 evaluate 方法里增加对向量的支持。\n\n```javascript\n// evaluate 里\nif (type === \"]\") {\n  const notWall = children.filter(item => item.type !== \",\");\n  const a = evaluate(notWall[0]);\n  const b = evaluate(notWall[1]);\n  const isNumA = typeof a === \"number\";\n  const isNumB = typeof b === \"number\";\n  if (isNumA && isNumB) {\n    return new Vector2d(a,b);\n  } else {\n    throw new Error(\"只有两个数量才能生成向量\");\n  }\n}\n```\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast18_s.gif)\n\n![ast](//img11.360buyimg.com/jdphoto/s755x660_jfs/t1/51274/9/13256/68924/5da02232Ed7289fd9/2a7ffb17f4a9bb21.jpg)\n\n### 7.2 向量加减乘除法取负\n\n向量加减乘除法取负继续源用 `+` , `-` , `*` , `/` 符号，只需要在 evaluate 方法里做判断就可以了。\n\n```javascript\n// evaluate 里\nif (type === \"+\") {\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  if (Vector2d.is(a) && Vector2d.is(b)){\n    return Vector2d.add(a,b);\n  } else {\n    return a + b;\n  }\n}\nif (type === \"-\") {\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  if (Vector2d.is(a) && Vector2d.is(b)){\n    return Vector2d.sub(a,b);\n  } else {\n    return a - b;\n  }\n}\nif (type === \"*\" || type === \"/\") {\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  const isVecA = Vector2d.is(a);\n  const isVecB = Vector2d.is(b);\n  const isNumA = typeof a === \"number\";\n  const isNumB = typeof b === \"number\";\n  if ( isNumA && isNumB ){\n    if (type === \"*\") return a * b;\n    if (type === \"/\") return a / b;\n  } else if(isVecA && isNumB) {\n    if (type === \"*\") return Vector2d.scale(a,b);\n    if (type === \"/\") return Vector2d.scale(a,1/b);\n  } else if (isVecB && isNumA) {\n    if (type === \"*\") return Vector2d.scale(b,a);\n    if (type === \"/\") return Vector2d.scale(b,1/a);\n  } else {\n    throw new Error(\"两个向量不能相乘，请用@dot\");\n  }\n}\nif (type === \"NEGATE\") {\n  const a = evaluate(children[0]);\n  if (Vector2d.is(a)){\n    return Vector2d.scale(a,-1);\n  } else {\n    return a * -1;\n  }\n}\n```\n\n### 7.3 向量旋转、点乘，角度的单位转换\n\n向量的旋转（`@rot`）、点乘（`@dot`），角度的单位转换（`@deg`），用这3个自定义符号。\n\n这里需要修改一下 词法分析 的状态机，在 start 状态下新增一个跃迁状态 customSgin 用 `@` 为标识。然后 customSgin 状态下输入[a-zA-Z]都回跃迁自身 否则 跃迁回状态 start 并输出 Token。\n\n![ast](//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/69281/39/12809/13086/5da02232Ef5aaefde/6cebfe531f9f4497.jpg)\n\n```javascript\n// Lexer 里\n  start(char) {\n    // 数字\n    if ([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"].includes(char)) {\n      this.token.push(char);\n      return this.inInt;\n    }\n    // .\n    if (char === \".\"){\n      this.token.push(char);\n      return this.inFloat;\n    }\n    // 符号\n    if ([\"+\",\"-\",\"*\",\"/\",\"(\",\")\",\"[\",\"]\",\",\",\"<\",\">\"].includes(char)) {\n      this.emmitToken(\"SIGN\", char);\n      return this.start\n    }\n    // 空白字符\n    if ([\" \",\"\\r\",\"\\n\"].includes(char)) {\n      return this.start;\n    }\n    // 结束\n    if (char === EOF){\n      this.emmitToken(\"EOF\", EOF);\n      return this.start\n    }\n    if (char === \"@\"){\n      this.token.push(char);\n      return this.customSgin;\n    }\n  }\n\n  customSgin(char) {\n    if (\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\").includes(char)) {\n      this.token.push(char);\n      return this.customSgin;\n    } else {\n      this.emmitToken(\"SIGN\", this.token.join(\"\"));\n      this.token = [];\n      return this.start(char); // put back char\n    }\n  }\n```\n\n然后定义节点和节点优先级。\n\n```javascript\nfunction DegNode(){\n  return {\n    type:\"@deg\",\n    children:[...arguments],\n    maxChildren:1,\n  }\n}\nfunction DotNode(){\n  return {\n    type:\"@dot\",\n    children:[...arguments],\n    maxChildren:2,\n  }\n}\nfunction RotNode(){\n  return {\n    type:\"@rot\",\n    children:[...arguments],\n    maxChildren:2,\n  }\n}\nconst operatorValue = {\n  \"ROOT\" : 0, \n  \"(\" : 1,\n  \"[\" : 1,\n  \"@dot\" : 2, // 向量点乘\n  \"<\" : 3,\n  \">\" : 3,\n  \"+\" : 4,\n  \"-\" : 4,\n  \"*\" : 5,\n  \"/\" : 5,\n  \"@rot\" : 5, // 向量旋转\n  \"NEGATE\" : 6, // 取负\n  \"@deg\" : 7, // 角度转换\n  \"NUMBER\" : 8, // 取正\n  \")\" : 9,\n  \"]\" : 9,\n  \"ROOT_END\" : 10,\n}\n```\n\n还有在 evaluate 里写对应的方法。\n\n```javascript\nif (type === \"@dot\"){\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  const isVecA = Vector2d.is(a);\n  const isVecB = Vector2d.is(b);\n  if (isVecA && isVecB) {\n    return Vector2d.dot(a,b);\n  } else {\n    throw new Error(\"只有向量和向量能点乘\");\n  }\n}\nif (type === \"@rot\"){\n  const a = evaluate(children[0]);\n  const b = evaluate(children[1]);\n  const isVecA = Vector2d.is(a);\n  const isVecB = Vector2d.is(b);\n  const isNumA = typeof a === \"number\";\n  const isNumB = typeof b === \"number\";\n  if (isVecA && isNumB) {\n    return Vector2d.rotate(a,b);\n  } else if (isVecB && isNumA) {\n    return Vector2d.rotate(b,a);\n  } else {\n    throw new Error(\"只有向量和数量能旋转\");\n  }\n}\nif (type === \"@deg\"){\n  const a = evaluate(children[0]);\n  const isNumA = typeof a === \"number\";\n  if (isNumA){\n    return a / 180 * Math.PI;\n  } else {\n    throw new Error(\"非数字不能转换deg\");\n  }\n}\n```\n\n来一个例子 `[1, 0] @rot - 90 @deg` ,把 [1,0] 旋转负 90 度。\n\n![ast](//wq.360buyimg.com/data/ppms/others/ast21_s.gif)\n\n![ast](//img11.360buyimg.com/jdphoto/s626x567_jfs/t1/78350/34/12497/62507/5da02232E064c50c9/8d71fa5ebacbd32a.jpg)\n\n## 8 Demo手动玩\n\n最后结合 Vue 写了一个 表达式转 AST 的可视化 demo，支持数字和向量。\n\n[http://rococolate.github.io/blog/ast/index.html](http://rococolate.github.io/blog/ast/index.html)\n\ndemo 源码: [https://github.com/Rococolate/ast_demo](https://github.com/Rococolate/ast_demo)","slug":"写一个四则运算表达式转换成AST的方法","published":1,"updated":"2019-11-20T05:13:20.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck36vfls20033soyx66s3exsa","content":"<blockquote>\n<p>作者：吴冠禧</p>\n</blockquote>\n<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0 前言\"></a>0 前言</h2><p>晓强哥在他的上篇文章里介绍了 <a href=\"https://wecteam.io/2019/07/19/Javascript%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E4%B8%8A%E7%AF%87(%E5%9F%BA%E7%A1%80%E7%AF%87\">Javascript 抽象语法树</a>里面「提到获得抽象语法树的过程为：代码 =&gt; 词法分析 =&gt; 语法分析 =&gt; AST」，抱着深究技术细节的目的，我决定研究这里的词法分析和语法分析，写一个简单的四则运算表达式转换成AST的方法，于是就有了下面的内容。</p>\n<h2 id=\"1-人类和计算机对于表达式的看法是不同的\"><a href=\"#1-人类和计算机对于表达式的看法是不同的\" class=\"headerlink\" title=\"1 人类和计算机对于表达式的看法是不同的\"></a>1 人类和计算机对于表达式的看法是不同的</h2><p>人类习惯 <code>a + b</code> 这种表达叫做「中序表达式」，优点是比较简单直观，缺点是要用一堆括号来确定优先级 <code>(a + b) * (c + d)</code>。</p>\n<p>这里说简单直观是相对人类的思维结构来说的，对计算机而言中序表达式是非常复杂的结构。</p>\n<p>为了计算机计算方便，我们需要将中序表达式转换成树形结构，也就是「抽象语法树AST」。</p>\n<a id=\"more\"></a>\n<h2 id=\"2-javascript-与抽象语法树-AST\"><a href=\"#2-javascript-与抽象语法树-AST\" class=\"headerlink\" title=\"2 javascript 与抽象语法树 AST\"></a>2 javascript 与抽象语法树 AST</h2><p>我们知道，几乎任何语言中，代码在 “编译”（解释型语言在运行时也有编译的过程） 的过程中，都会生成一种树状的中间状态，这就是 AST。有些语言会直接把类似 AST 的语法暴露给程序员（例如：lisp、elixir、python等）。但是 javascript 并没有这个能力，但是我们可以用 javascript 自身实现这个过程。</p>\n<p>获得抽象语法树的过程为：代码（字符串） =&gt; 词法分析（Lexer）=&gt; Tokens =&gt; 语法分析（Parser） =&gt; AST</p>\n<h2 id=\"3-词法分析（Lexer）\"><a href=\"#3-词法分析（Lexer）\" class=\"headerlink\" title=\"3 词法分析（Lexer）\"></a>3 词法分析（Lexer）</h2><p>词法分析有点像中文的分词，就是将字符串流根据规则生成一个一个的有具体意义的 Token ，形成 Token 流，然后流入下一步。</p>\n<p>我们看一个简单的例子，</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2.3</span></span><br></pre></td></tr></table></figure>\n\n<p>很明显这个表达式是可以分成三个 Token ，分别是 <code>1</code> , <code>+</code> , <code>2.3</code>。</p>\n<p>词法分析这里，我们可以用有限状态机来解决。</p>\n<h3 id=\"3-1-有限状态机\"><a href=\"#3-1-有限状态机\" class=\"headerlink\" title=\"3.1 有限状态机\"></a>3.1 有限状态机</h3><p>绝大多数语言的词法部分都是用状态机实现的，我们下面就画出有限状态机的图形，然后根据图形直观地写出解析代码，总体图大概是这样。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/71505/36/12619/47435/5da0222fEf7a21a7b/b427472a1c8bbf59.jpg\" alt=\"ast\"></p>\n<p>下面拆开细看。</p>\n<h3 id=\"3-2-开始（start）状态\"><a href=\"#3-2-开始（start）状态\" class=\"headerlink\" title=\"3.2 开始（start）状态\"></a>3.2 开始（start）状态</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/81063/19/12511/29679/5da0222fE1bb0fda7/610bb2041fbb9606.jpg\" alt=\"ast\"></p>\n<p>状态机的初始状态是 <code>start</code> 。</p>\n<p><code>start</code> 状态下输入数字（0 ～ 9）就会迁移到 <code>inInt</code> 状态。</p>\n<p><code>start</code> 状态下输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><code>start</code> 状态下输入符号（+ - * /）就会输出 <code>「符号 Token」</code> ，并回到 <code>start</code> 状态。</p>\n<p><code>start</code> 状态下输入 EOF 就会输出 <code>「EOF Token」</code> ，并回到 <code>start</code> 状态。</p>\n<p>代码大概是这个样子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start(char) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 数字</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inInt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// .</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">\".\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 符号</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"+\"</span>,<span class=\"hljs-string\">\"-\"</span>,<span class=\"hljs-string\">\"*\"</span>,<span class=\"hljs-string\">\"/\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 结束符</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (char === EOF)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"EOF\"</span>, EOF);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-在整数（inInt）状态\"><a href=\"#3-3-在整数（inInt）状态\" class=\"headerlink\" title=\"3.3 在整数（inInt）状态\"></a>3.3 在整数（inInt）状态</h3><p><code>start</code> 状态下输入输入数字（0 ～ 9）就会迁移到 <code>inInt</code> 状态。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/78804/34/12584/20147/5da0222fEef8f09c4/ed63a73dddac5654.jpg\" alt=\"ast\"></p>\n<p><code>inInt</code> 状态下输入输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><code>inInt</code> 状态下输入数字（0 ～ 9）就继续留在 <code>inInt</code> 状态。</p>\n<p><code>inInt</code> 状态下输入非数字和.（0 ～ 9 .）就会就会输出 <code>「整数 Token」</code> ，并迁移到 <code>start</code> 状态。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inInt(char) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inInt;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">'.'</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"NUMBER\"</span>, <span class=\"hljs-keyword\">this</span>.token.join(<span class=\"hljs-string\">\"\"</span>));</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start(char); <span class=\"hljs-comment\">// put back char</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-在浮点数（inFloat）状态\"><a href=\"#3-4-在浮点数（inFloat）状态\" class=\"headerlink\" title=\"3.4 在浮点数（inFloat）状态\"></a>3.4 在浮点数（inFloat）状态</h3><p><code>start</code> 状态下输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><code>inInt</code> 状态下输入输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/47044/1/13068/25868/5da02230Eac0dd5ee/68e1eacf4a087979.jpg\" alt=\"ast\"></p>\n<p><code>inFloat</code> 状态下输入数字（0 ～ 9）就继续留在 <code>inFloat</code> 状态。</p>\n<p><code>inFloat</code> 状态下输入非数字（0 ～ 9 ）就会就会输出 <code>「浮点数 Token」</code>，并迁移到 <code>start</code> 状态。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inFloat(char) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">\".\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"不能出现`..`\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.token.length === <span class=\"hljs-number\">1</span>  &amp;&amp; <span class=\"hljs-keyword\">this</span>.token[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">\".\"</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"不能单独出现`.`\"</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"NUMBER\"</span>, <span class=\"hljs-keyword\">this</span>.token.join(<span class=\"hljs-string\">\"\"</span>));</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start(char); <span class=\"hljs-comment\">// put back char</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-输出的-Token-种类-和定义\"><a href=\"#3-5-输出的-Token-种类-和定义\" class=\"headerlink\" title=\"3.5 输出的 Token 种类 和定义\"></a>3.5 输出的 Token 种类 和定义</h3><p>我将 <code>「浮点数 Token」</code> 和 <code>「整数 Token」</code> 合并为 <code>[NUMBER Token]</code> , 其他的 Token 还有 <code>「SIGN Token」</code> 和 <code>「EOF Token」</code>。</p>\n<p>Token 的 定义：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Token&#123;</span><br><span class=\"line\">  type:<span class=\"hljs-built_in\">String</span>,</span><br><span class=\"line\">  value:<span class=\"hljs-built_in\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-完整的-Lexer-代码\"><a href=\"#3-6-完整的-Lexer-代码\" class=\"headerlink\" title=\"3.6 完整的 Lexer 代码\"></a>3.6 完整的 Lexer 代码</h3><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> EOF = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'EOF'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Lexer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token = []; <span class=\"hljs-comment\">// 临时 token 字符存储</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.tokens = []; <span class=\"hljs-comment\">// 生成的正式 token</span></span><br><span class=\"line\">    <span class=\"hljs-comment\">// state 默认是 start 状态，后面通过 push 函数实现状态迁移</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.state = <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start(char) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 数字</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inInt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// .</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">\".\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 符号</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"+\"</span>,<span class=\"hljs-string\">\"-\"</span>,<span class=\"hljs-string\">\"*\"</span>,<span class=\"hljs-string\">\"/\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 结束符</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (char === EOF)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"EOF\"</span>, EOF);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  inInt(char) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inInt;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">'.'</span>) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"NUMBER\"</span>, <span class=\"hljs-keyword\">this</span>.token.join(<span class=\"hljs-string\">\"\"</span>));</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token = [];</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start(char); <span class=\"hljs-comment\">// put back char</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  inFloat(char) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">\".\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"不能出现`..`\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.token.length === <span class=\"hljs-number\">1</span>  &amp;&amp; <span class=\"hljs-keyword\">this</span>.token[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">\".\"</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"不能单独出现`.`\"</span>);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"NUMBER\"</span>, <span class=\"hljs-keyword\">this</span>.token.join(<span class=\"hljs-string\">\"\"</span>));</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token = [];</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start(char); <span class=\"hljs-comment\">// put back char</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  emmitToken(type, value) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.tokens.push(&#123;</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      value,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  push(char)&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 每次执行 state 函数都会返回新的状态函数，实现状态迁移</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.state = <span class=\"hljs-keyword\">this</span>.state(char);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.check();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end()&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.state(EOF);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.check();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  check()&#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 检测是否有 token 生成并返回。</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> _token = [...this.tokens];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.tokens = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> _token;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear()&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.token = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.tokens = [];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.state = <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> lexer = <span class=\"hljs-keyword\">new</span> lexer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-string\">`1 + 2.3`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> tokens = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> c <span class=\"hljs-keyword\">of</span> input.split(<span class=\"hljs-string\">''</span>))&#123;</span><br><span class=\"line\">  tokens = [...tokens,...lexer.push(c)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tokens = [...tokens,...lexer.end()];</span><br></pre></td></tr></table></figure>\n\n<p>效果如下图：</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s620x210_jfs/t1/50210/26/13138/29830/5da02230Ea3239b11/7004e567f66d0bb9.jpg\" alt=\"ast\"></p>\n<p>自此，我们成功实现了词法分析，后面进入到语法分析。</p>\n<h2 id=\"4-语法分析（Parser）\"><a href=\"#4-语法分析（Parser）\" class=\"headerlink\" title=\"4 语法分析（Parser）\"></a>4 语法分析（Parser）</h2><p>前面的词法分析，已经将字符串划分成一个个有意义的 Token 进入到语法分析（Parser）。语法分析在编译原理里面属于比较高深的学问，我是没有怎么看懂。但总的来说就是把 Token流 组装成 AST ，<br>AST 的结构是既定的，后面我就通过对不同节点制定不同规则把 AST 组装起来。</p>\n<h3 id=\"4-1-定义-AST-结构-和-节点（Node）\"><a href=\"#4-1-定义-AST-结构-和-节点（Node）\" class=\"headerlink\" title=\"4.1 定义 AST 结构 和 节点（Node）\"></a>4.1 定义 AST 结构 和 节点（Node）</h3><p>简单来说 AST 就是一棵树形结构，由节点（Node）和 叶子（字面量 Literal ）组成，节点 下面可以连接 其他节点 或者 字面量。最顶端的节点就是 根节点。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/68355/21/12670/13784/5da02230E361eb32a/7b2301d29bdc640c.jpg\" alt=\"ast\"></p>\n<p>节点的定义就是一个简单的 javascript Object</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Node &#123;</span><br><span class=\"line\">  type:string,</span><br><span class=\"line\">  children:[],<span class=\"hljs-comment\">// children栈 里面可以是 Node 或者 Literal</span></span><br><span class=\"line\">  maxChildren:number,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-栈-和-根节点（Root）\"><a href=\"#4-2-栈-和-根节点（Root）\" class=\"headerlink\" title=\"4.2 栈 和 根节点（Root）\"></a>4.2 栈 和 根节点（Root）</h3><p>语法分析（Parser）这里，我使用的是一个栈结构，每来一个 Token 就入栈，然后通过一定的规则组装 AST。</p>\n<p>第一步就是压入 根节点 <code>&lt;Root&gt;</code>。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RootNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"ROOT\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> stack = [RootNode()];</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x318_jfs/t1/73107/24/12672/9710/5da02230E50b4ed71/548c3b28fcbcb2b0.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-3-通用规则\"><a href=\"#4-3-通用规则\" class=\"headerlink\" title=\"4.3 通用规则\"></a>4.3 通用规则</h3><p>在说明不同类型节点的规则前，先说一下通用规则。</p>\n<ul>\n<li><ol>\n<li>没有后代的节点（NoChildrenNode），就是节点的 maxChildren 属性为 0。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>非满的节点（NotFullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length &lt; maxChildren。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>满的节点（FullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length &gt;= maxChildren。</li>\n</ol>\n</li>\n</ul>\n<p>对应的3个函数:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isFullNode</span>(<span class=\"hljs-params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNoChildrenNode(node)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> node &amp;&amp; node.children &amp;&amp; node.children.length &gt;= node.maxChildren;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isNotFullNode</span>(<span class=\"hljs-params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNoChildrenNode(node)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> node &amp;&amp; node.children &amp;&amp; node.children.length &lt; node.maxChildren;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isNoChildrenNode</span>(<span class=\"hljs-params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> node.maxChildren === <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-数字节点（Number）\"><a href=\"#4-4-数字节点（Number）\" class=\"headerlink\" title=\"4.4 数字节点（Number）\"></a>4.4 数字节点（Number）</h3><p>定义一个数字节点，其children就是 数字字面量。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NumberNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"NUMBER\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 只能有一个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/82038/8/12501/7509/5da02230E34905adc/e6feb28340e73f83.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-5-数字节点的规则\"><a href=\"#4-5-数字节点的规则\" class=\"headerlink\" title=\"4.5 数字节点的规则\"></a>4.5 数字节点的规则</h3><ul>\n<li><ol>\n<li>找到栈顶 top</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>和数字节点 number</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>top 不能是满项</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>如果 top 为非满的节点，number push 到 top.children</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>否则（top 是没有后代的节点），number 压栈</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> top = stack[stack.length - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 栈顶</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.type === <span class=\"hljs-string\">\"NUMBER\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">//  1 1 </span></span><br><span class=\"line\">  <span class=\"hljs-comment\">//  1 + 1 1</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isFullNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"数字前一项不能是满项\"</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> number = CreateTypeNode(token.type)(token.value);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNotFullNode(top))&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> topChildPush(number);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> stackPush(number);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/69734/3/12678/10873/5da02230E362bad15/4fe7b27ee9fd7e8d.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-6-符号节点（Sign-）\"><a href=\"#4-6-符号节点（Sign-）\" class=\"headerlink\" title=\"4.6 符号节点（Sign + - * /）\"></a>4.6 符号节点（Sign + - * /）</h3><p>定义一个符号节点，其 children 可以是 字面量 或者 其他节点。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">AddNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"+\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SubNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"-\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MulNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"*\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">DivNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"/\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-7-节点的优先级\"><a href=\"#4-7-节点的优先级\" class=\"headerlink\" title=\"4.7 节点的优先级\"></a>4.7 节点的优先级</h3><p>大家都知道，运算符有优先级，例如 <code>* /</code> 的优先级就比 <code>+ -</code> 要高。我把这个优先级扩展到全部节点，所有节点都有一个优先级数值。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> operatorValue = &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT\"</span> : <span class=\"hljs-number\">0</span>, </span><br><span class=\"line\">  <span class=\"hljs-string\">\"+\"</span> : <span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"-\"</span> : <span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"*\"</span> : <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"/\"</span> : <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"NUMBER\"</span> : <span class=\"hljs-number\">3</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个数值后面马上就会用到。</p>\n<h3 id=\"4-8-retire-操作\"><a href=\"#4-8-retire-操作\" class=\"headerlink\" title=\"4.8 retire 操作\"></a>4.8 retire 操作</h3><p>我们回到 <code>1 + 2.3</code> 这个算术表达式。前面说到 <code>1</code> 这个 Token 已经压入栈了，现在轮到 <code>+</code> Token 。</p>\n<ul>\n<li><ol>\n<li>栈顶 top （就是 number 1）</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>符号节点 add</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>top 是满的节点，所以 add 是后置符号，进入后置符号规则</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>比较 top 节点与 符号 add 节点 的优先级数值</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>top &lt; add 执行 rob 操作 ，否则 执行 retire 操作 </li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 后置符号</span></span><br><span class=\"line\"> <span class=\"hljs-keyword\">if</span> (isFullNode(top)) &#123;</span><br><span class=\"line\">   <span class=\"hljs-keyword\">if</span> (operatorValue[token.value] &gt; operatorValue[top.type])&#123;</span><br><span class=\"line\">       <span class=\"hljs-comment\">// 1 + 2 * </span></span><br><span class=\"line\">       <span class=\"hljs-keyword\">return</span> rob(token.value,top.children);</span><br><span class=\"line\">     &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"hljs-comment\">//  1 +</span></span><br><span class=\"line\">       <span class=\"hljs-comment\">//  1 + 2 + </span></span><br><span class=\"line\">       link(token.value);</span><br><span class=\"line\">       <span class=\"hljs-keyword\">return</span> retire(token.value);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>先说 retire 操作，retire 有退休的意思。我是想表达，这当前条件下，栈顶节点可以退下来了，把栈顶的位置让给新节点。</p>\n<p>步骤是把的旧栈顶节点出栈，新节点入栈，然后旧栈顶压进新节点的 children 栈里。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> retire = <span class=\"hljs-function\">(<span class=\"hljs-params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  stack.push(CreateTypeNode(type)(stack.pop()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后到<code>2.3</code> Token，根据前面的规则，因为栈顶的 add 节点是非满节点，<code>2.3</code> 构建成 number 节点 后，直接 push 到 add 节点的 children 栈里。</p>\n<p>文字有点干，我们配合图一起看。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/66140/36/12635/60553/5da02231Ebfa5ea7d/feded00b2bef2b71.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-9-rob-操作\"><a href=\"#4-9-rob-操作\" class=\"headerlink\" title=\"4.9 rob 操作\"></a>4.9 rob 操作</h3><p>前面提到 retire 操作的反向条件是 rob 操作。先来看一个例子<code>1 + 2.3 * 4</code>。</p>\n<p>接上一节，现在栈里是<code>&lt;Root&gt;,&lt;+ 1 2.3&gt;</code>，现需要压入新节点 mul，同样的 mul 节点和栈顶 add 节点比较， 优先级 mul &gt; add，执行 rob 操作。</p>\n<p>rob 操作 很好理解，因为乘法比加法的优先级要高，所以本来属于 add 节点 下的 number(2.3) 要被 mul 节点抢走了。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> rob = <span class=\"hljs-function\">(<span class=\"hljs-params\">type,children</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> child = children.pop();</span><br><span class=\"line\">  stack.push(CreateTypeNode(type)(child));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">rob(token.value,top.children);</span><br></pre></td></tr></table></figure>\n\n<p>mul 节点抢走 number(2.3) 后放压进自己的 children 栈里，然后 mul 节点入栈，成为新的栈顶。</p>\n<p>然后到<code>4</code> Token，根据前面的规则，因为栈顶的 mul 节点是非满节点，<code>4</code> 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。</p>\n<p>文字还是有点干，我们配合图一起看。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/49440/4/13086/71879/5da02231Ed7a47f3c/c8b65dbdb4135e7a.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-10-link-操作\"><a href=\"#4-10-link-操作\" class=\"headerlink\" title=\"4.10 link 操作\"></a>4.10 link 操作</h3><p>细心的朋友应该会发现，在执行 retire 操作之前还执行了一个 link 操作。这个 link 是做啥的呢？我们来看一个例子<code>1 + 2.3 * 4 - 5</code>。</p>\n<p>接上一节，栈里现在是<code>&lt;Root&gt;,&lt;+ 1&gt;,&lt;* 2.3 4&gt;</code>，现在准备压入 sub 节点，因为优先级上 sub &lt; mul ，如果先忽略 link 直接走 retire 操作，就会变成<code>&lt;Root&gt;,&lt;+ 1&gt;,&lt;- &lt;* 2.3 4&gt;&gt;</code>。这个不是我想要的结果，因为<code>+</code>和<code>-</code>优先级是相同的，相同优先级应该先计算先出现的符号，理想的操作下，栈里应该变成<code>&lt;Root&gt;,&lt;- &lt;+ 1 &lt;* 2.3 4&gt;&gt;&gt;</code>。所以我引入了 link 操作。</p>\n<p>link 操作会先将栈顶的满项节点 push 到前一项的 childen 栈里（如果前一项是非满节点），而且这是一个循环操作 直到 前一项是满节点 或者 前一项节点的优先级比新节点的还要低。</p>\n<p>回看上面的例子，栈里现在是 <code>&lt;Root&gt;,&lt;+ 1&gt;,&lt;* 2.3 4&gt;</code> ，现在准备压入 sub 节点，因为优先级上 sub &lt; mul ，先在 link 操作下变成 <code>&lt;Root&gt;,&lt;+ 1 &lt;* 2.3 4&gt;&gt;</code> ，然后执行 retire ，<br>变成 <code>&lt;Root&gt;,&lt;- &lt;+ 1 &lt;* 2.3 4&gt;&gt;&gt;</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">typeValue</span>(<span class=\"hljs-params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"node is undefined\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> operatorValue[node.type];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> link = <span class=\"hljs-function\">(<span class=\"hljs-params\">type</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> value = operatorValue[type];</span><br><span class=\"line\">  <span class=\"hljs-keyword\">while</span>(isFullNode(stack[stack.length <span class=\"hljs-number\">-1</span>]) &amp;&amp;  isNotFullNode(stack[stack.length - <span class=\"hljs-number\">2</span>]) &amp;&amp; (value &lt;= typeValue(stack[stack.length <span class=\"hljs-number\">-1</span>])) &amp;&amp; (value &lt;= typeValue(stack[stack.length <span class=\"hljs-number\">-2</span>])) ) &#123;</span><br><span class=\"line\">    stack[stack.length - <span class=\"hljs-number\">2</span>].children.push(stack.pop());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后到 <code>5</code> Token，根据前面的规则，因为栈顶的 sub 节点是非满节点，<code>5</code> 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。</p>\n<p>继续上图。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s800x1280_jfs/t1/50267/24/13151/117159/5da02231E865ce1c0/63754ed2b9a0ec0f.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-13-增加负数\"><a href=\"#4-13-增加负数\" class=\"headerlink\" title=\"4.13 增加负数\"></a>4.13 增加负数</h3><p>负数可以说是开了一个比较坏的先河，因为和减号公用一个 <code>-</code> 符号，导致代码逻辑的增加。负号和减号的区别在于，负号的取值是在它的右侧 <code>1 + - 1</code> ，减号是从左到右 <code>1 - 1</code> 。这里可以通过判断栈顶节点的情况来确定究竟是 负号 还是 减号。我将 负号这种取值在右边的符号称为 前置符号 ，加减乘除这种左到右取值的符号称为 后置符号。前置符号直接压栈。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 定义负数节点</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NegNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"NEGATE\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.type === <span class=\"hljs-string\">\"SIGN\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 后置符号</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isFullNode(top)) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (operatorValue[token.value] &gt; operatorValue[top.type])&#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">// 1 + 2 * </span></span><br><span class=\"line\">        <span class=\"hljs-comment\">// console.log(\"rob\");</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> rob(token.value,top.children);</span><br><span class=\"line\">      &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">//  1 +</span></span><br><span class=\"line\">        <span class=\"hljs-comment\">//  1 + 2 + </span></span><br><span class=\"line\">        link(token.value);</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> retire(token.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 前置符号</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (</span><br><span class=\"line\">    (isNoChildrenNode(top)) || <span class=\"hljs-comment\">// (-</span></span><br><span class=\"line\">    (isNotFullNode(top)) <span class=\"hljs-comment\">// 1 + -</span></span><br><span class=\"line\">  )&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\"-\"</span>) <span class=\"hljs-keyword\">return</span> stackPush(CreateTypeNode(<span class=\"hljs-string\">\"NEGATE\"</span>)()); <span class=\"hljs-comment\">// 取负公用符号 - </span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\"+\"</span>) <span class=\"hljs-keyword\">return</span> ; <span class=\"hljs-comment\">// + 号静默</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(token.value + <span class=\"hljs-string\">\"符号不能前置\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子 <code>- 1</code> 。 <code>- 1</code> 这里开始栈 <code>&lt;Root&gt;</code> ，然后准备压入 <code>-</code> ，因为 Root 节点是没有后代的节点（NoChildrenNode），所以这里判断<code>-</code>是前置符号，生成 NE（NEGATE） 节点直接入栈 <code>&lt;Root&gt;&lt;NE&gt;</code> 。然后是 <code>1</code> , <code>&lt;Root&gt;&lt;NE 1&gt;</code> 。</p>\n<p>例子 <code>1 - - 1</code> 。这里第一个 <code>-</code> 时 <code>&lt;Root&gt;&lt;1&gt;</code> ，因为 栈顶 number 节点是满的节点（FullNode），所以第一个 <code>-</code> 是后置符号，生成 sub 节点。第二个 <code>-</code> 时 <code>&lt;Root&gt;&lt;- 1&gt;</code>，<br>栈顶的 sub 节点是未满的节点（NotFullNode），判定为前置符号，生成 NE（NEGATE） 节点直接入栈 <code>&lt;Root&gt;&lt;- 1&gt;&lt;NE&gt;</code> 。然后是 <code>1</code> , <code>&lt;Root&gt;&lt;- 1&gt;&lt;NE 1&gt;</code> 。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s800x320_jfs/t1/63999/20/12649/26253/5da02231E721980b2/53acee89c75d3d62.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-14-增加括号\"><a href=\"#4-14-增加括号\" class=\"headerlink\" title=\"4.14 增加括号\"></a>4.14 增加括号</h3><p>括号 <code>(</code> 可以改变表达式里的优先级，先定义括号节点。</p>\n<p>首先需要在 词法分析 的时候加入 <code>(</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// start 状态里</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 符号</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"+\"</span>,<span class=\"hljs-string\">\"-\"</span>,<span class=\"hljs-string\">\"*\"</span>,<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"(\"</span>].includes(char)) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ParNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"(\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里 maxChildren 设为 0 ，当我们将 括号节点 push 到栈里时，就形成一个屏障，使后面节点变动时，不会越过 括号节点 。</p>\n<p>看例子 <code>1 * (2 + 3 * 4)</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-string\">`&lt;Root&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">1</span> <span class=\"hljs-string\">`&lt;Root&gt;&lt;1&gt;`</span></span><br><span class=\"line\">* <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;`</span></span><br><span class=\"line\">( <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;`</span> <span class=\"hljs-comment\">// ( 隔离</span></span><br><span class=\"line\"><span class=\"hljs-number\">2</span> <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;2&gt;`</span> <span class=\"hljs-comment\">// 把 2 和 * 隔离</span></span><br><span class=\"line\">+ <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">3</span> <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2 3&gt;`</span> </span><br><span class=\"line\">* <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2&gt;&lt;* 3&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">4</span> <span class=\"hljs-string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2&gt;&lt;* 3 4&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<p>参考代码。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\"(\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1(</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1 + 1 (</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isFullNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"not a function\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-comment\">// (</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> stackPush(CreateTypeNode(<span class=\"hljs-string\">\"(\"</span>)());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast14_s.gif\" alt=\"ast\"></p>\n<h3 id=\"4-14-增加反括号-与-remove-操作\"><a href=\"#4-14-增加反括号-与-remove-操作\" class=\"headerlink\" title=\"4.14 增加反括号 与 remove 操作\"></a>4.14 增加反括号 与 remove 操作</h3><p>反括号 <code>)</code> 的作用是将当前括号后面添加的节点收缩成一个稳定节点，具体方法是把 <code>(</code> 后面的节点 link 起来( <code>(</code> 的优先级设定得比较小，旨在将括号里的节点都连接起来)，并推到一个临时的栈里，然后将 <code>(</code> 节点 改写成 <code>)</code> 节点 ，再将临时栈的节点出栈 push 到 <code>)</code> 节点的 children 里。还因为 <code>)</code> 节点的优先级别设置了很高，不用担心会被后面的节点 rob 。</p>\n<p>首先需要在 词法分析 的时候加入 <code>)</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// start 状态里</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 符号</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"+\"</span>,<span class=\"hljs-string\">\"-\"</span>,<span class=\"hljs-string\">\"*\"</span>,<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"(\"</span>,<span class=\"hljs-string\">\")\"</span>].includes(char)) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\")\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ()</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNoChildrenNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Unexpected token )\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-comment\">// (1+)</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNotFullNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Unexpected token )\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-string\">\"(\"</span>);  <span class=\"hljs-comment\">// 收拢 (</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> remove = <span class=\"hljs-function\">(<span class=\"hljs-params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  link(type);</span><br><span class=\"line\">  <span class=\"hljs-comment\">//  找到最近的( 其余push到tempStack</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">while</span>(stack.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; !(stack[stack.length - <span class=\"hljs-number\">1</span>].type === type &amp;&amp; !stack[stack.length - <span class=\"hljs-number\">1</span>].children))&#123;</span><br><span class=\"line\">    tempStack.push(stack.pop());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 修改最近的( </span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> top = stack[stack.length - <span class=\"hljs-number\">1</span>];</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (top.type === type)&#123;</span><br><span class=\"line\">    top.type = opposite[type];  <span class=\"hljs-comment\">// 取反 ( =&gt; )</span></span><br><span class=\"line\">    top.children = [];</span><br><span class=\"line\">    <span class=\"hljs-comment\">// tempStack的Node压给(</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">while</span>(tempStack.length &gt; <span class=\"hljs-number\">0</span>)&#123;</span><br><span class=\"line\">      top.children.push(tempStack.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    top.maxChildren = top.children.length; <span class=\"hljs-comment\">// maxChildren 设满</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> operatorValue = &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT\"</span> : <span class=\"hljs-number\">0</span>, </span><br><span class=\"line\">  <span class=\"hljs-string\">\"(\"</span> : <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 括号的优先级低，方便 link</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"+\"</span> : <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"-\"</span> : <span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"*\"</span> : <span class=\"hljs-number\">3</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"/\"</span> : <span class=\"hljs-number\">3</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"NEGATE\"</span> : <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">// 取负</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"NUMBER\"</span> : <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">// 取正</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\")\"</span> : <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">// 反括号的优先级高，防止被 rob</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT_END\"</span> : <span class=\"hljs-number\">7</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> opposite = &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"(\"</span> : <span class=\"hljs-string\">\")\"</span> ,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT\"</span> : <span class=\"hljs-string\">\"ROOT_END\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast15_s.gif\" alt=\"ast\"></p>\n<h3 id=\"4-15-EOF\"><a href=\"#4-15-EOF\" class=\"headerlink\" title=\"4.15 EOF\"></a>4.15 EOF</h3><p>括号的作用是将其内部的节点包裹起来，形成一个稳定的节点，括号 <code>(</code> 和反括号 <code>)</code> 自成一对。还有一对有同样的功能，就是 <code>ROOT</code> 和 <code>ROOT_END</code> 。</p>\n<p><code>ROOT</code> 和 <code>ROOT_END</code> 标示着这个表达式的开始和结束。 <code>ROOT</code> 节点是初始化时就添加的，那么 <code>ROOT_END</code> 对应就是 <code>EOF</code> 这个 Token 了。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.type === <span class=\"hljs-string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// EOF</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-string\">\"ROOT\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>来一个完整的流程gif。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast16_s.gif\" alt=\"ast\"></p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s598x470_jfs/t1/58973/16/13042/49291/5da02232Eba090ed2/8876293a6a362b89.jpg\" alt=\"ast\"></p>\n<h2 id=\"5-计算求值\"><a href=\"#5-计算求值\" class=\"headerlink\" title=\"5 计算求值\"></a>5 计算求值</h2><p><code>EOF</code> 后，我们就可以得到抽象语法树 AST 了。因为是树形结构，我们可以用递归的方法求值。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">`1 * ( 2 + 3 * 4)`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> ast = &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"ROOT_END\"</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"*\"</span>,</span><br><span class=\"line\">    <span class=\"hljs-string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"NUMBER\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">\"children\"</span>: [<span class=\"hljs-string\">\"1\"</span>],</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\")\"</span>,</span><br><span class=\"line\">      <span class=\"hljs-string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"+\"</span>,</span><br><span class=\"line\">        <span class=\"hljs-string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"NUMBER\"</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"children\"</span>: [<span class=\"hljs-string\">\"2\"</span>],</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"*\"</span>,</span><br><span class=\"line\">          <span class=\"hljs-string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"NUMBER\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"children\"</span>: [<span class=\"hljs-string\">\"3\"</span>],</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"NUMBER\"</span>,</span><br><span class=\"line\">            <span class=\"hljs-string\">\"children\"</span>: [<span class=\"hljs-string\">\"4\"</span>],</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">      &#125;],</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">evaluate</span>(<span class=\"hljs-params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> &#123;type,children&#125; = node;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"NUMBER\"</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Number</span>(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"+\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]) + evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"-\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]) - evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"*\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]) * evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"/\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]) / evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\")\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"ROOT_END\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"NEGATE\"</span>) <span class=\"hljs-keyword\">return</span> evaluate(children[<span class=\"hljs-number\">0</span>]) * <span class=\"hljs-number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(evaluate(ast)); <span class=\"hljs-comment\">// 14</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h2><p>写到这里，一个简单的四则运算解析器总算完成了。一共分 3 大部分。分别是 词法分析（Lexer）、语法分析（Parser）、计算求值（evaluate）。</p>\n<p>词法分析（Lexer）是将 表达式 字符串 转化为 Token 流，这里用到有限状态机。</p>\n<p>语法分析（Parser）是将 Token 流 转化为 抽象语法树（AST），这里主要是手工写的语法分析，用了 两个栈 ，规定了 4 个方法 link 、 retire 、 rob 、 remove，还有定义了不同节点的入栈规则。</p>\n<p>计算求值（evaluate）是将 AST 计算出表达式的 值，这里用了递归求值。</p>\n<h2 id=\"7-应用之自定义的向量运算\"><a href=\"#7-应用之自定义的向量运算\" class=\"headerlink\" title=\"7 应用之自定义的向量运算\"></a>7 应用之自定义的向量运算</h2><p>弄清楚四则运算的解析方法后，我们可以创造自己制定规则的表达式运算了。</p>\n<p>因为之前的项目我写过向量运算，但是因为函数调用的写法有点丑陋，我这里就尝试自定义向量运算表达式。</p>\n<h3 id=\"7-1-向量表示之引入符号（Sign-）\"><a href=\"#7-1-向量表示之引入符号（Sign-）\" class=\"headerlink\" title=\"7.1 向量表示之引入符号（Sign [ , ]）\"></a>7.1 向量表示之引入符号（Sign [ , ]）</h3><p>这里一个 2维向量 我用 <code>[1,2]</code> 来表示。所以先在 词法分析（Lexer）里增加 <code>[,]</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// start 状态里</span></span><br><span class=\"line\"><span class=\"hljs-comment\">// 符号</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"+\"</span>,<span class=\"hljs-string\">\"-\"</span>,<span class=\"hljs-string\">\"*\"</span>,<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"(\"</span>,<span class=\"hljs-string\">\")\"</span>,<span class=\"hljs-string\">\"[\"</span>,<span class=\"hljs-string\">\",\"</span>,<span class=\"hljs-string\">\"]\"</span>].includes(char)) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[</code> 和 <code>]</code> 是一对，本质和括号对 <code>(</code> <code>)</code> 没什么区别。</p>\n<p><code>,</code> 其定位就是一个分割符，没有成对子。而且 <code>,</code> 出现后，其前面的节点都要 link 起来。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">VecNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"[\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">WallNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\",\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> opposite = &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"(\"</span> : <span class=\"hljs-string\">\")\"</span> ,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"[\"</span> : <span class=\"hljs-string\">\"]\"</span> ,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT\"</span> : <span class=\"hljs-string\">\"ROOT_END\"</span> ,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\"[\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1[</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// 1 + 1 [</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isFullNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"非顶端[前面不能有满项\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> stack.push(CreateTypeNode(<span class=\"hljs-string\">\"[\"</span>)());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\",\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// ,</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// ,,</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// (,</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// [,</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNoChildrenNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\",不能接在空符后面\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-comment\">// [ 1 + ,</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNotFullNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\",不能接在非满项后面\"</span>);</span><br><span class=\"line\">  link(<span class=\"hljs-string\">\"[\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> stack.push(CreateTypeNode(<span class=\"hljs-string\">\",\"</span>)());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (token.value === <span class=\"hljs-string\">\"]\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// [1+]</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNotFullNode(top)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"]前不能有非满项\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-string\">\"[\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子 <code>[ 1 + 2 * 3 , 4 + 5 * 6 ]</code> 。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-string\">`&lt;Root&gt;`</span></span><br><span class=\"line\">[   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">1</span>   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;1&gt;`</span> </span><br><span class=\"line\">+   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">2</span>   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 2&gt;`</span> </span><br><span class=\"line\">*   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1&gt;&lt;* 2&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">3</span>   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1&gt;&lt;* 2 3&gt;`</span> </span><br><span class=\"line\">,   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">4</span>   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;4&gt;`</span> </span><br><span class=\"line\">+   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">5</span>   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4 5&gt;`</span> </span><br><span class=\"line\">*   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&gt;&lt;* 5&gt;`</span> </span><br><span class=\"line\"><span class=\"hljs-number\">6</span>   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&gt;&lt;* 5 6&gt;`</span> </span><br><span class=\"line\">]   <span class=\"hljs-string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&lt;* 5 6&gt;&gt;`</span> </span><br><span class=\"line\">    <span class=\"hljs-string\">`&lt;Root&gt;&lt;] &lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&lt;* 5 6&gt;&gt;&gt;`</span> </span><br><span class=\"line\">EOF <span class=\"hljs-string\">`&lt;RootEnd &lt;] &lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&lt;* 5 6&gt;&gt;&gt;&gt;`</span></span><br></pre></td></tr></table></figure>\n\n\n<p>最后在 evaluate 方法里增加对向量的支持。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// evaluate 里</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"]\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> notWall = children.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.type !== <span class=\"hljs-string\">\",\"</span>);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(notWall[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> b = evaluate(notWall[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumA = <span class=\"hljs-keyword\">typeof</span> a === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumB = <span class=\"hljs-keyword\">typeof</span> b === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNumA &amp;&amp; isNumB) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(a,b);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"只有两个数量才能生成向量\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast18_s.gif\" alt=\"ast\"></p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s755x660_jfs/t1/51274/9/13256/68924/5da02232Ed7289fd9/2a7ffb17f4a9bb21.jpg\" alt=\"ast\"></p>\n<h3 id=\"7-2-向量加减乘除法取负\"><a href=\"#7-2-向量加减乘除法取负\" class=\"headerlink\" title=\"7.2 向量加减乘除法取负\"></a>7.2 向量加减乘除法取负</h3><p>向量加减乘除法取负继续源用 <code>+</code> , <code>-</code> , <code>*</code> , <code>/</code> 符号，只需要在 evaluate 方法里做判断就可以了。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// evaluate 里</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"+\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> b = evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (Vector2d.is(a) &amp;&amp; Vector2d.is(b))&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> Vector2d.add(a,b);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"-\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> b = evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (Vector2d.is(a) &amp;&amp; Vector2d.is(b))&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> Vector2d.sub(a,b);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> a - b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"*\"</span> || type === <span class=\"hljs-string\">\"/\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> b = evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isVecA = Vector2d.is(a);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isVecB = Vector2d.is(b);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumA = <span class=\"hljs-keyword\">typeof</span> a === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumB = <span class=\"hljs-keyword\">typeof</span> b === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> ( isNumA &amp;&amp; isNumB )&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"*\"</span>) <span class=\"hljs-keyword\">return</span> a * b;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"/\"</span>) <span class=\"hljs-keyword\">return</span> a / b;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(isVecA &amp;&amp; isNumB) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"*\"</span>) <span class=\"hljs-keyword\">return</span> Vector2d.scale(a,b);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"/\"</span>) <span class=\"hljs-keyword\">return</span> Vector2d.scale(a,<span class=\"hljs-number\">1</span>/b);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isVecB &amp;&amp; isNumA) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"*\"</span>) <span class=\"hljs-keyword\">return</span> Vector2d.scale(b,a);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"/\"</span>) <span class=\"hljs-keyword\">return</span> Vector2d.scale(b,<span class=\"hljs-number\">1</span>/a);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"两个向量不能相乘，请用@dot\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"NEGATE\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (Vector2d.is(a))&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> Vector2d.scale(a,<span class=\"hljs-number\">-1</span>);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> a * <span class=\"hljs-number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-向量旋转、点乘，角度的单位转换\"><a href=\"#7-3-向量旋转、点乘，角度的单位转换\" class=\"headerlink\" title=\"7.3 向量旋转、点乘，角度的单位转换\"></a>7.3 向量旋转、点乘，角度的单位转换</h3><p>向量的旋转（<code>@rot</code>）、点乘（<code>@dot</code>），角度的单位转换（<code>@deg</code>），用这3个自定义符号。</p>\n<p>这里需要修改一下 词法分析 的状态机，在 start 状态下新增一个跃迁状态 customSgin 用 <code>@</code> 为标识。然后 customSgin 状态下输入[a-zA-Z]都回跃迁自身 否则 跃迁回状态 start 并输出 Token。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/69281/39/12809/13086/5da02232Ef5aaefde/6cebfe531f9f4497.jpg\" alt=\"ast\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// Lexer 里</span></span><br><span class=\"line\">  start(char) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 数字</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inInt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// .</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">\".\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 符号</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\"+\"</span>,<span class=\"hljs-string\">\"-\"</span>,<span class=\"hljs-string\">\"*\"</span>,<span class=\"hljs-string\">\"/\"</span>,<span class=\"hljs-string\">\"(\"</span>,<span class=\"hljs-string\">\")\"</span>,<span class=\"hljs-string\">\"[\"</span>,<span class=\"hljs-string\">\"]\"</span>,<span class=\"hljs-string\">\",\"</span>,<span class=\"hljs-string\">\"&lt;\"</span>,<span class=\"hljs-string\">\"&gt;\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 空白字符</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">\" \"</span>,<span class=\"hljs-string\">\"\\r\"</span>,<span class=\"hljs-string\">\"\\n\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// 结束</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (char === EOF)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"EOF\"</span>, EOF);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (char === <span class=\"hljs-string\">\"@\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.customSgin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  customSgin(char) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>.split(<span class=\"hljs-string\">\"\"</span>).includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.customSgin;</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.emmitToken(<span class=\"hljs-string\">\"SIGN\"</span>, <span class=\"hljs-keyword\">this</span>.token.join(<span class=\"hljs-string\">\"\"</span>));</span><br><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.token = [];</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.start(char); <span class=\"hljs-comment\">// put back char</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后定义节点和节点优先级。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">DegNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"@deg\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">DotNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"@dot\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RotNode</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"hljs-string\">\"@rot\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"hljs-number\">2</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> operatorValue = &#123;</span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT\"</span> : <span class=\"hljs-number\">0</span>, </span><br><span class=\"line\">  <span class=\"hljs-string\">\"(\"</span> : <span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"[\"</span> : <span class=\"hljs-number\">1</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"@dot\"</span> : <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">// 向量点乘</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"&lt;\"</span> : <span class=\"hljs-number\">3</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"&gt;\"</span> : <span class=\"hljs-number\">3</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"+\"</span> : <span class=\"hljs-number\">4</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"-\"</span> : <span class=\"hljs-number\">4</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"*\"</span> : <span class=\"hljs-number\">5</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"/\"</span> : <span class=\"hljs-number\">5</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"@rot\"</span> : <span class=\"hljs-number\">5</span>, <span class=\"hljs-comment\">// 向量旋转</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"NEGATE\"</span> : <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">// 取负</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"@deg\"</span> : <span class=\"hljs-number\">7</span>, <span class=\"hljs-comment\">// 角度转换</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\"NUMBER\"</span> : <span class=\"hljs-number\">8</span>, <span class=\"hljs-comment\">// 取正</span></span><br><span class=\"line\">  <span class=\"hljs-string\">\")\"</span> : <span class=\"hljs-number\">9</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"]\"</span> : <span class=\"hljs-number\">9</span>,</span><br><span class=\"line\">  <span class=\"hljs-string\">\"ROOT_END\"</span> : <span class=\"hljs-number\">10</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有在 evaluate 里写对应的方法。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"@dot\"</span>)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> b = evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isVecA = Vector2d.is(a);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isVecB = Vector2d.is(b);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isVecA &amp;&amp; isVecB) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> Vector2d.dot(a,b);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"只有向量和向量能点乘\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"@rot\"</span>)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> b = evaluate(children[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isVecA = Vector2d.is(a);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isVecB = Vector2d.is(b);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumA = <span class=\"hljs-keyword\">typeof</span> a === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumB = <span class=\"hljs-keyword\">typeof</span> b === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isVecA &amp;&amp; isNumB) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> Vector2d.rotate(a,b);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isVecB &amp;&amp; isNumA) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> Vector2d.rotate(b,a);</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"只有向量和数量能旋转\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">\"@deg\"</span>)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> a = evaluate(children[<span class=\"hljs-number\">0</span>]);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> isNumA = <span class=\"hljs-keyword\">typeof</span> a === <span class=\"hljs-string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (isNumA)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> a / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI;</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"非数字不能转换deg\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来一个例子 <code>[1, 0] @rot - 90 @deg</code> ,把 [1,0] 旋转负 90 度。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast21_s.gif\" alt=\"ast\"></p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s626x567_jfs/t1/78350/34/12497/62507/5da02232E064c50c9/8d71fa5ebacbd32a.jpg\" alt=\"ast\"></p>\n<h2 id=\"8-Demo手动玩\"><a href=\"#8-Demo手动玩\" class=\"headerlink\" title=\"8 Demo手动玩\"></a>8 Demo手动玩</h2><p>最后结合 Vue 写了一个 表达式转 AST 的可视化 demo，支持数字和向量。</p>\n<p><a href=\"http://rococolate.github.io/blog/ast/index.html\" target=\"_blank\" rel=\"noopener\">http://rococolate.github.io/blog/ast/index.html</a></p>\n<p>demo 源码: <a href=\"https://github.com/Rococolate/ast_demo\" target=\"_blank\" rel=\"noopener\">https://github.com/Rococolate/ast_demo</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>作者：吴冠禧</p>\n</blockquote>\n<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0 前言\"></a>0 前言</h2><p>晓强哥在他的上篇文章里介绍了 <a href=\"https://wecteam.io/2019/07/19/Javascript%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91%E4%B8%8A%E7%AF%87(%E5%9F%BA%E7%A1%80%E7%AF%87\">Javascript 抽象语法树</a>里面「提到获得抽象语法树的过程为：代码 =&gt; 词法分析 =&gt; 语法分析 =&gt; AST」，抱着深究技术细节的目的，我决定研究这里的词法分析和语法分析，写一个简单的四则运算表达式转换成AST的方法，于是就有了下面的内容。</p>\n<h2 id=\"1-人类和计算机对于表达式的看法是不同的\"><a href=\"#1-人类和计算机对于表达式的看法是不同的\" class=\"headerlink\" title=\"1 人类和计算机对于表达式的看法是不同的\"></a>1 人类和计算机对于表达式的看法是不同的</h2><p>人类习惯 <code>a + b</code> 这种表达叫做「中序表达式」，优点是比较简单直观，缺点是要用一堆括号来确定优先级 <code>(a + b) * (c + d)</code>。</p>\n<p>这里说简单直观是相对人类的思维结构来说的，对计算机而言中序表达式是非常复杂的结构。</p>\n<p>为了计算机计算方便，我们需要将中序表达式转换成树形结构，也就是「抽象语法树AST」。</p>","more":"<h2 id=\"2-javascript-与抽象语法树-AST\"><a href=\"#2-javascript-与抽象语法树-AST\" class=\"headerlink\" title=\"2 javascript 与抽象语法树 AST\"></a>2 javascript 与抽象语法树 AST</h2><p>我们知道，几乎任何语言中，代码在 “编译”（解释型语言在运行时也有编译的过程） 的过程中，都会生成一种树状的中间状态，这就是 AST。有些语言会直接把类似 AST 的语法暴露给程序员（例如：lisp、elixir、python等）。但是 javascript 并没有这个能力，但是我们可以用 javascript 自身实现这个过程。</p>\n<p>获得抽象语法树的过程为：代码（字符串） =&gt; 词法分析（Lexer）=&gt; Tokens =&gt; 语法分析（Parser） =&gt; AST</p>\n<h2 id=\"3-词法分析（Lexer）\"><a href=\"#3-词法分析（Lexer）\" class=\"headerlink\" title=\"3 词法分析（Lexer）\"></a>3 词法分析（Lexer）</h2><p>词法分析有点像中文的分词，就是将字符串流根据规则生成一个一个的有具体意义的 Token ，形成 Token 流，然后流入下一步。</p>\n<p>我们看一个简单的例子，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2.3</span></span><br></pre></td></tr></table></figure>\n\n<p>很明显这个表达式是可以分成三个 Token ，分别是 <code>1</code> , <code>+</code> , <code>2.3</code>。</p>\n<p>词法分析这里，我们可以用有限状态机来解决。</p>\n<h3 id=\"3-1-有限状态机\"><a href=\"#3-1-有限状态机\" class=\"headerlink\" title=\"3.1 有限状态机\"></a>3.1 有限状态机</h3><p>绝大多数语言的词法部分都是用状态机实现的，我们下面就画出有限状态机的图形，然后根据图形直观地写出解析代码，总体图大概是这样。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/71505/36/12619/47435/5da0222fEf7a21a7b/b427472a1c8bbf59.jpg\" alt=\"ast\"></p>\n<p>下面拆开细看。</p>\n<h3 id=\"3-2-开始（start）状态\"><a href=\"#3-2-开始（start）状态\" class=\"headerlink\" title=\"3.2 开始（start）状态\"></a>3.2 开始（start）状态</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/81063/19/12511/29679/5da0222fE1bb0fda7/610bb2041fbb9606.jpg\" alt=\"ast\"></p>\n<p>状态机的初始状态是 <code>start</code> 。</p>\n<p><code>start</code> 状态下输入数字（0 ～ 9）就会迁移到 <code>inInt</code> 状态。</p>\n<p><code>start</code> 状态下输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><code>start</code> 状态下输入符号（+ - * /）就会输出 <code>「符号 Token」</code> ，并回到 <code>start</code> 状态。</p>\n<p><code>start</code> 状态下输入 EOF 就会输出 <code>「EOF Token」</code> ，并回到 <code>start</code> 状态。</p>\n<p>代码大概是这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start(char) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数字</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inInt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// .</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === <span class=\"string\">\".\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 符号</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"*\"</span>,<span class=\"string\">\"/\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 结束符</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (char === EOF)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"EOF\"</span>, EOF);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-在整数（inInt）状态\"><a href=\"#3-3-在整数（inInt）状态\" class=\"headerlink\" title=\"3.3 在整数（inInt）状态\"></a>3.3 在整数（inInt）状态</h3><p><code>start</code> 状态下输入输入数字（0 ～ 9）就会迁移到 <code>inInt</code> 状态。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/78804/34/12584/20147/5da0222fEef8f09c4/ed63a73dddac5654.jpg\" alt=\"ast\"></p>\n<p><code>inInt</code> 状态下输入输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><code>inInt</code> 状态下输入数字（0 ～ 9）就继续留在 <code>inInt</code> 状态。</p>\n<p><code>inInt</code> 状态下输入非数字和.（0 ～ 9 .）就会就会输出 <code>「整数 Token」</code> ，并迁移到 <code>start</code> 状态。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inInt(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inInt;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"NUMBER\"</span>, <span class=\"keyword\">this</span>.token.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start(char); <span class=\"comment\">// put back char</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-在浮点数（inFloat）状态\"><a href=\"#3-4-在浮点数（inFloat）状态\" class=\"headerlink\" title=\"3.4 在浮点数（inFloat）状态\"></a>3.4 在浮点数（inFloat）状态</h3><p><code>start</code> 状态下输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><code>inInt</code> 状态下输入输入符号（.）就会迁移到 <code>inFloat</code> 状态。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/47044/1/13068/25868/5da02230Eac0dd5ee/68e1eacf4a087979.jpg\" alt=\"ast\"></p>\n<p><code>inFloat</code> 状态下输入数字（0 ～ 9）就继续留在 <code>inFloat</code> 状态。</p>\n<p><code>inFloat</code> 状态下输入非数字（0 ～ 9 ）就会就会输出 <code>「浮点数 Token」</code>，并迁移到 <code>start</code> 状态。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inFloat(char) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能出现`..`\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.token.length === <span class=\"number\">1</span>  &amp;&amp; <span class=\"keyword\">this</span>.token[<span class=\"number\">0</span>] === <span class=\"string\">\".\"</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能单独出现`.`\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"NUMBER\"</span>, <span class=\"keyword\">this</span>.token.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start(char); <span class=\"comment\">// put back char</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-输出的-Token-种类-和定义\"><a href=\"#3-5-输出的-Token-种类-和定义\" class=\"headerlink\" title=\"3.5 输出的 Token 种类 和定义\"></a>3.5 输出的 Token 种类 和定义</h3><p>我将 <code>「浮点数 Token」</code> 和 <code>「整数 Token」</code> 合并为 <code>[NUMBER Token]</code> , 其他的 Token 还有 <code>「SIGN Token」</code> 和 <code>「EOF Token」</code>。</p>\n<p>Token 的 定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Token&#123;</span><br><span class=\"line\">  type:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">  value:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-6-完整的-Lexer-代码\"><a href=\"#3-6-完整的-Lexer-代码\" class=\"headerlink\" title=\"3.6 完整的 Lexer 代码\"></a>3.6 完整的 Lexer 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EOF = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'EOF'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lexer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token = []; <span class=\"comment\">// 临时 token 字符存储</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tokens = []; <span class=\"comment\">// 生成的正式 token</span></span><br><span class=\"line\">    <span class=\"comment\">// state 默认是 start 状态，后面通过 push 函数实现状态迁移</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  start(char) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inInt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// .</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">\".\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 符号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"*\"</span>,<span class=\"string\">\"/\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 结束符</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === EOF)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"EOF\"</span>, EOF);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  inInt(char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inInt;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"NUMBER\"</span>, <span class=\"keyword\">this</span>.token.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token = [];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start(char); <span class=\"comment\">// put back char</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  inFloat(char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">\".\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能出现`..`\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.token.length === <span class=\"number\">1</span>  &amp;&amp; <span class=\"keyword\">this</span>.token[<span class=\"number\">0</span>] === <span class=\"string\">\".\"</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"不能单独出现`.`\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"NUMBER\"</span>, <span class=\"keyword\">this</span>.token.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token = [];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start(char); <span class=\"comment\">// put back char</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  emmitToken(type, value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tokens.push(&#123;</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      value,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  push(char)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每次执行 state 函数都会返回新的状态函数，实现状态迁移</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.state(char);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.check();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  end()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state(EOF);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.check();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  check()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检测是否有 token 生成并返回。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _token = [...this.tokens];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tokens = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _token;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.token = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tokens = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> lexer = <span class=\"keyword\">new</span> lexer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"string\">`1 + 2.3`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tokens = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> c <span class=\"keyword\">of</span> input.split(<span class=\"string\">''</span>))&#123;</span><br><span class=\"line\">  tokens = [...tokens,...lexer.push(c)];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tokens = [...tokens,...lexer.end()];</span><br></pre></td></tr></table></figure>\n\n<p>效果如下图：</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s620x210_jfs/t1/50210/26/13138/29830/5da02230Ea3239b11/7004e567f66d0bb9.jpg\" alt=\"ast\"></p>\n<p>自此，我们成功实现了词法分析，后面进入到语法分析。</p>\n<h2 id=\"4-语法分析（Parser）\"><a href=\"#4-语法分析（Parser）\" class=\"headerlink\" title=\"4 语法分析（Parser）\"></a>4 语法分析（Parser）</h2><p>前面的词法分析，已经将字符串划分成一个个有意义的 Token 进入到语法分析（Parser）。语法分析在编译原理里面属于比较高深的学问，我是没有怎么看懂。但总的来说就是把 Token流 组装成 AST ，<br>AST 的结构是既定的，后面我就通过对不同节点制定不同规则把 AST 组装起来。</p>\n<h3 id=\"4-1-定义-AST-结构-和-节点（Node）\"><a href=\"#4-1-定义-AST-结构-和-节点（Node）\" class=\"headerlink\" title=\"4.1 定义 AST 结构 和 节点（Node）\"></a>4.1 定义 AST 结构 和 节点（Node）</h3><p>简单来说 AST 就是一棵树形结构，由节点（Node）和 叶子（字面量 Literal ）组成，节点 下面可以连接 其他节点 或者 字面量。最顶端的节点就是 根节点。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/68355/21/12670/13784/5da02230E361eb32a/7b2301d29bdc640c.jpg\" alt=\"ast\"></p>\n<p>节点的定义就是一个简单的 javascript Object</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Node &#123;</span><br><span class=\"line\">  type:string,</span><br><span class=\"line\">  children:[],<span class=\"comment\">// children栈 里面可以是 Node 或者 Literal</span></span><br><span class=\"line\">  maxChildren:number,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-栈-和-根节点（Root）\"><a href=\"#4-2-栈-和-根节点（Root）\" class=\"headerlink\" title=\"4.2 栈 和 根节点（Root）\"></a>4.2 栈 和 根节点（Root）</h3><p>语法分析（Parser）这里，我使用的是一个栈结构，每来一个 Token 就入栈，然后通过一定的规则组装 AST。</p>\n<p>第一步就是压入 根节点 <code>&lt;Root&gt;</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RootNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"ROOT\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stack = [RootNode()];</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x318_jfs/t1/73107/24/12672/9710/5da02230E50b4ed71/548c3b28fcbcb2b0.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-3-通用规则\"><a href=\"#4-3-通用规则\" class=\"headerlink\" title=\"4.3 通用规则\"></a>4.3 通用规则</h3><p>在说明不同类型节点的规则前，先说一下通用规则。</p>\n<ul>\n<li><ol>\n<li>没有后代的节点（NoChildrenNode），就是节点的 maxChildren 属性为 0。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>非满的节点（NotFullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length &lt; maxChildren。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>满的节点（FullNode），就是节点的 maxChildren 属性大于 0，而且其 children.length &gt;= maxChildren。</li>\n</ol>\n</li>\n</ul>\n<p>对应的3个函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFullNode</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNoChildrenNode(node)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node &amp;&amp; node.children &amp;&amp; node.children.length &gt;= node.maxChildren;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNotFullNode</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNoChildrenNode(node)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node &amp;&amp; node.children &amp;&amp; node.children.length &lt; node.maxChildren;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNoChildrenNode</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node.maxChildren === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-数字节点（Number）\"><a href=\"#4-4-数字节点（Number）\" class=\"headerlink\" title=\"4.4 数字节点（Number）\"></a>4.4 数字节点（Number）</h3><p>定义一个数字节点，其children就是 数字字面量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumberNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"NUMBER\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">1</span>, <span class=\"comment\">// 只能有一个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/82038/8/12501/7509/5da02230E34905adc/e6feb28340e73f83.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-5-数字节点的规则\"><a href=\"#4-5-数字节点的规则\" class=\"headerlink\" title=\"4.5 数字节点的规则\"></a>4.5 数字节点的规则</h3><ul>\n<li><ol>\n<li>找到栈顶 top</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>和数字节点 number</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>top 不能是满项</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>如果 top 为非满的节点，number push 到 top.children</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>否则（top 是没有后代的节点），number 压栈</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> top = stack[stack.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 栈顶</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (token.type === <span class=\"string\">\"NUMBER\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//  1 1 </span></span><br><span class=\"line\">  <span class=\"comment\">//  1 + 1 1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFullNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"数字前一项不能是满项\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> number = CreateTypeNode(token.type)(token.value);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNotFullNode(top))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topChildPush(number);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stackPush(number);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x320_jfs/t1/69734/3/12678/10873/5da02230E362bad15/4fe7b27ee9fd7e8d.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-6-符号节点（Sign-）\"><a href=\"#4-6-符号节点（Sign-）\" class=\"headerlink\" title=\"4.6 符号节点（Sign + - * /）\"></a>4.6 符号节点（Sign + - * /）</h3><p>定义一个符号节点，其 children 可以是 字面量 或者 其他节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AddNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"+\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">2</span>, <span class=\"comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"-\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">2</span>, <span class=\"comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MulNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">2</span>, <span class=\"comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DivNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">2</span>, <span class=\"comment\">// 能有两个 child</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-7-节点的优先级\"><a href=\"#4-7-节点的优先级\" class=\"headerlink\" title=\"4.7 节点的优先级\"></a>4.7 节点的优先级</h3><p>大家都知道，运算符有优先级，例如 <code>* /</code> 的优先级就比 <code>+ -</code> 要高。我把这个优先级扩展到全部节点，所有节点都有一个优先级数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> operatorValue = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"ROOT\"</span> : <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">\"+\"</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"-\"</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"*\"</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"/\"</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"NUMBER\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个数值后面马上就会用到。</p>\n<h3 id=\"4-8-retire-操作\"><a href=\"#4-8-retire-操作\" class=\"headerlink\" title=\"4.8 retire 操作\"></a>4.8 retire 操作</h3><p>我们回到 <code>1 + 2.3</code> 这个算术表达式。前面说到 <code>1</code> 这个 Token 已经压入栈了，现在轮到 <code>+</code> Token 。</p>\n<ul>\n<li><ol>\n<li>栈顶 top （就是 number 1）</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>符号节点 add</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>top 是满的节点，所以 add 是后置符号，进入后置符号规则</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>比较 top 节点与 符号 add 节点 的优先级数值</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>top &lt; add 执行 rob 操作 ，否则 执行 retire 操作 </li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后置符号</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (isFullNode(top)) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (operatorValue[token.value] &gt; operatorValue[top.type])&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 1 + 2 * </span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> rob(token.value,top.children);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//  1 +</span></span><br><span class=\"line\">       <span class=\"comment\">//  1 + 2 + </span></span><br><span class=\"line\">       link(token.value);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> retire(token.value);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>先说 retire 操作，retire 有退休的意思。我是想表达，这当前条件下，栈顶节点可以退下来了，把栈顶的位置让给新节点。</p>\n<p>步骤是把的旧栈顶节点出栈，新节点入栈，然后旧栈顶压进新节点的 children 栈里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> retire = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  stack.push(CreateTypeNode(type)(stack.pop()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后到<code>2.3</code> Token，根据前面的规则，因为栈顶的 add 节点是非满节点，<code>2.3</code> 构建成 number 节点 后，直接 push 到 add 节点的 children 栈里。</p>\n<p>文字有点干，我们配合图一起看。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/66140/36/12635/60553/5da02231Ebfa5ea7d/feded00b2bef2b71.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-9-rob-操作\"><a href=\"#4-9-rob-操作\" class=\"headerlink\" title=\"4.9 rob 操作\"></a>4.9 rob 操作</h3><p>前面提到 retire 操作的反向条件是 rob 操作。先来看一个例子<code>1 + 2.3 * 4</code>。</p>\n<p>接上一节，现在栈里是<code>&lt;Root&gt;,&lt;+ 1 2.3&gt;</code>，现需要压入新节点 mul，同样的 mul 节点和栈顶 add 节点比较， 优先级 mul &gt; add，执行 rob 操作。</p>\n<p>rob 操作 很好理解，因为乘法比加法的优先级要高，所以本来属于 add 节点 下的 number(2.3) 要被 mul 节点抢走了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rob = <span class=\"function\">(<span class=\"params\">type,children</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> child = children.pop();</span><br><span class=\"line\">  stack.push(CreateTypeNode(type)(child));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">rob(token.value,top.children);</span><br></pre></td></tr></table></figure>\n\n<p>mul 节点抢走 number(2.3) 后放压进自己的 children 栈里，然后 mul 节点入栈，成为新的栈顶。</p>\n<p>然后到<code>4</code> Token，根据前面的规则，因为栈顶的 mul 节点是非满节点，<code>4</code> 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。</p>\n<p>文字还是有点干，我们配合图一起看。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s400x1280_jfs/t1/49440/4/13086/71879/5da02231Ed7a47f3c/c8b65dbdb4135e7a.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-10-link-操作\"><a href=\"#4-10-link-操作\" class=\"headerlink\" title=\"4.10 link 操作\"></a>4.10 link 操作</h3><p>细心的朋友应该会发现，在执行 retire 操作之前还执行了一个 link 操作。这个 link 是做啥的呢？我们来看一个例子<code>1 + 2.3 * 4 - 5</code>。</p>\n<p>接上一节，栈里现在是<code>&lt;Root&gt;,&lt;+ 1&gt;,&lt;* 2.3 4&gt;</code>，现在准备压入 sub 节点，因为优先级上 sub &lt; mul ，如果先忽略 link 直接走 retire 操作，就会变成<code>&lt;Root&gt;,&lt;+ 1&gt;,&lt;- &lt;* 2.3 4&gt;&gt;</code>。这个不是我想要的结果，因为<code>+</code>和<code>-</code>优先级是相同的，相同优先级应该先计算先出现的符号，理想的操作下，栈里应该变成<code>&lt;Root&gt;,&lt;- &lt;+ 1 &lt;* 2.3 4&gt;&gt;&gt;</code>。所以我引入了 link 操作。</p>\n<p>link 操作会先将栈顶的满项节点 push 到前一项的 childen 栈里（如果前一项是非满节点），而且这是一个循环操作 直到 前一项是满节点 或者 前一项节点的优先级比新节点的还要低。</p>\n<p>回看上面的例子，栈里现在是 <code>&lt;Root&gt;,&lt;+ 1&gt;,&lt;* 2.3 4&gt;</code> ，现在准备压入 sub 节点，因为优先级上 sub &lt; mul ，先在 link 操作下变成 <code>&lt;Root&gt;,&lt;+ 1 &lt;* 2.3 4&gt;&gt;</code> ，然后执行 retire ，<br>变成 <code>&lt;Root&gt;,&lt;- &lt;+ 1 &lt;* 2.3 4&gt;&gt;&gt;</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typeValue</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node === <span class=\"literal\">undefined</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"node is undefined\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> operatorValue[node.type];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> link = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = operatorValue[type];</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(isFullNode(stack[stack.length <span class=\"number\">-1</span>]) &amp;&amp;  isNotFullNode(stack[stack.length - <span class=\"number\">2</span>]) &amp;&amp; (value &lt;= typeValue(stack[stack.length <span class=\"number\">-1</span>])) &amp;&amp; (value &lt;= typeValue(stack[stack.length <span class=\"number\">-2</span>])) ) &#123;</span><br><span class=\"line\">    stack[stack.length - <span class=\"number\">2</span>].children.push(stack.pop());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后到 <code>5</code> Token，根据前面的规则，因为栈顶的 sub 节点是非满节点，<code>5</code> 构建成 number 节点 后，直接 push 到 mul 节点的 children 栈里。</p>\n<p>继续上图。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s800x1280_jfs/t1/50267/24/13151/117159/5da02231E865ce1c0/63754ed2b9a0ec0f.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-13-增加负数\"><a href=\"#4-13-增加负数\" class=\"headerlink\" title=\"4.13 增加负数\"></a>4.13 增加负数</h3><p>负数可以说是开了一个比较坏的先河，因为和减号公用一个 <code>-</code> 符号，导致代码逻辑的增加。负号和减号的区别在于，负号的取值是在它的右侧 <code>1 + - 1</code> ，减号是从左到右 <code>1 - 1</code> 。这里可以通过判断栈顶节点的情况来确定究竟是 负号 还是 减号。我将 负号这种取值在右边的符号称为 前置符号 ，加减乘除这种左到右取值的符号称为 后置符号。前置符号直接压栈。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义负数节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NegNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"NEGATE\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (token.type === <span class=\"string\">\"SIGN\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 后置符号</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFullNode(top)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (operatorValue[token.value] &gt; operatorValue[top.type])&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 + 2 * </span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(\"rob\");</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rob(token.value,top.children);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//  1 +</span></span><br><span class=\"line\">        <span class=\"comment\">//  1 + 2 + </span></span><br><span class=\"line\">        link(token.value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retire(token.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 前置符号</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (isNoChildrenNode(top)) || <span class=\"comment\">// (-</span></span><br><span class=\"line\">    (isNotFullNode(top)) <span class=\"comment\">// 1 + -</span></span><br><span class=\"line\">  )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.value === <span class=\"string\">\"-\"</span>) <span class=\"keyword\">return</span> stackPush(CreateTypeNode(<span class=\"string\">\"NEGATE\"</span>)()); <span class=\"comment\">// 取负公用符号 - </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.value === <span class=\"string\">\"+\"</span>) <span class=\"keyword\">return</span> ; <span class=\"comment\">// + 号静默</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(token.value + <span class=\"string\">\"符号不能前置\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子 <code>- 1</code> 。 <code>- 1</code> 这里开始栈 <code>&lt;Root&gt;</code> ，然后准备压入 <code>-</code> ，因为 Root 节点是没有后代的节点（NoChildrenNode），所以这里判断<code>-</code>是前置符号，生成 NE（NEGATE） 节点直接入栈 <code>&lt;Root&gt;&lt;NE&gt;</code> 。然后是 <code>1</code> , <code>&lt;Root&gt;&lt;NE 1&gt;</code> 。</p>\n<p>例子 <code>1 - - 1</code> 。这里第一个 <code>-</code> 时 <code>&lt;Root&gt;&lt;1&gt;</code> ，因为 栈顶 number 节点是满的节点（FullNode），所以第一个 <code>-</code> 是后置符号，生成 sub 节点。第二个 <code>-</code> 时 <code>&lt;Root&gt;&lt;- 1&gt;</code>，<br>栈顶的 sub 节点是未满的节点（NotFullNode），判定为前置符号，生成 NE（NEGATE） 节点直接入栈 <code>&lt;Root&gt;&lt;- 1&gt;&lt;NE&gt;</code> 。然后是 <code>1</code> , <code>&lt;Root&gt;&lt;- 1&gt;&lt;NE 1&gt;</code> 。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s800x320_jfs/t1/63999/20/12649/26253/5da02231E721980b2/53acee89c75d3d62.jpg\" alt=\"ast\"></p>\n<h3 id=\"4-14-增加括号\"><a href=\"#4-14-增加括号\" class=\"headerlink\" title=\"4.14 增加括号\"></a>4.14 增加括号</h3><p>括号 <code>(</code> 可以改变表达式里的优先级，先定义括号节点。</p>\n<p>首先需要在 词法分析 的时候加入 <code>(</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// start 状态里</span></span><br><span class=\"line\"><span class=\"comment\">// 符号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"*\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"(\"</span>].includes(char)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ParNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"(\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里 maxChildren 设为 0 ，当我们将 括号节点 push 到栈里时，就形成一个屏障，使后面节点变动时，不会越过 括号节点 。</p>\n<p>看例子 <code>1 * (2 + 3 * 4)</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"string\">`&lt;Root&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"string\">`&lt;Root&gt;&lt;1&gt;`</span></span><br><span class=\"line\">* <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;`</span></span><br><span class=\"line\">( <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;`</span> <span class=\"comment\">// ( 隔离</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;2&gt;`</span> <span class=\"comment\">// 把 2 和 * 隔离</span></span><br><span class=\"line\">+ <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2 3&gt;`</span> </span><br><span class=\"line\">* <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2&gt;&lt;* 3&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"string\">`&lt;Root&gt;&lt;* 1&gt;&lt;(&gt;&lt;+ 2&gt;&lt;* 3 4&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<p>参考代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (token.value === <span class=\"string\">\"(\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1(</span></span><br><span class=\"line\">  <span class=\"comment\">// 1 + 1 (</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFullNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"not a function\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// (</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> stackPush(CreateTypeNode(<span class=\"string\">\"(\"</span>)());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast14_s.gif\" alt=\"ast\"></p>\n<h3 id=\"4-14-增加反括号-与-remove-操作\"><a href=\"#4-14-增加反括号-与-remove-操作\" class=\"headerlink\" title=\"4.14 增加反括号 与 remove 操作\"></a>4.14 增加反括号 与 remove 操作</h3><p>反括号 <code>)</code> 的作用是将当前括号后面添加的节点收缩成一个稳定节点，具体方法是把 <code>(</code> 后面的节点 link 起来( <code>(</code> 的优先级设定得比较小，旨在将括号里的节点都连接起来)，并推到一个临时的栈里，然后将 <code>(</code> 节点 改写成 <code>)</code> 节点 ，再将临时栈的节点出栈 push 到 <code>)</code> 节点的 children 里。还因为 <code>)</code> 节点的优先级别设置了很高，不用担心会被后面的节点 rob 。</p>\n<p>首先需要在 词法分析 的时候加入 <code>)</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// start 状态里</span></span><br><span class=\"line\"><span class=\"comment\">// 符号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"*\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"(\"</span>,<span class=\"string\">\")\"</span>].includes(char)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (token.value === <span class=\"string\">\")\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ()</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNoChildrenNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unexpected token )\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// (1+)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNotFullNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unexpected token )\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> remove(<span class=\"string\">\"(\"</span>);  <span class=\"comment\">// 收拢 (</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> remove = <span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  link(type);</span><br><span class=\"line\">  <span class=\"comment\">//  找到最近的( 其余push到tempStack</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(stack.length &gt; <span class=\"number\">0</span> &amp;&amp; !(stack[stack.length - <span class=\"number\">1</span>].type === type &amp;&amp; !stack[stack.length - <span class=\"number\">1</span>].children))&#123;</span><br><span class=\"line\">    tempStack.push(stack.pop());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 修改最近的( </span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> top = stack[stack.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (top.type === type)&#123;</span><br><span class=\"line\">    top.type = opposite[type];  <span class=\"comment\">// 取反 ( =&gt; )</span></span><br><span class=\"line\">    top.children = [];</span><br><span class=\"line\">    <span class=\"comment\">// tempStack的Node压给(</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tempStack.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      top.children.push(tempStack.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    top.maxChildren = top.children.length; <span class=\"comment\">// maxChildren 设满</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> operatorValue = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"ROOT\"</span> : <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">\"(\"</span> : <span class=\"number\">1</span>, <span class=\"comment\">// 括号的优先级低，方便 link</span></span><br><span class=\"line\">  <span class=\"string\">\"+\"</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"-\"</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"string\">\"*\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"/\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"NEGATE\"</span> : <span class=\"number\">4</span>, <span class=\"comment\">// 取负</span></span><br><span class=\"line\">  <span class=\"string\">\"NUMBER\"</span> : <span class=\"number\">5</span>, <span class=\"comment\">// 取正</span></span><br><span class=\"line\">  <span class=\"string\">\")\"</span> : <span class=\"number\">6</span>, <span class=\"comment\">// 反括号的优先级高，防止被 rob</span></span><br><span class=\"line\">  <span class=\"string\">\"ROOT_END\"</span> : <span class=\"number\">7</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> opposite = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"(\"</span> : <span class=\"string\">\")\"</span> ,</span><br><span class=\"line\">  <span class=\"string\">\"ROOT\"</span> : <span class=\"string\">\"ROOT_END\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast15_s.gif\" alt=\"ast\"></p>\n<h3 id=\"4-15-EOF\"><a href=\"#4-15-EOF\" class=\"headerlink\" title=\"4.15 EOF\"></a>4.15 EOF</h3><p>括号的作用是将其内部的节点包裹起来，形成一个稳定的节点，括号 <code>(</code> 和反括号 <code>)</code> 自成一对。还有一对有同样的功能，就是 <code>ROOT</code> 和 <code>ROOT_END</code> 。</p>\n<p><code>ROOT</code> 和 <code>ROOT_END</code> 标示着这个表达式的开始和结束。 <code>ROOT</code> 节点是初始化时就添加的，那么 <code>ROOT_END</code> 对应就是 <code>EOF</code> 这个 Token 了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (token.type === <span class=\"string\">\"EOF\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// EOF</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> remove(<span class=\"string\">\"ROOT\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>来一个完整的流程gif。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast16_s.gif\" alt=\"ast\"></p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s598x470_jfs/t1/58973/16/13042/49291/5da02232Eba090ed2/8876293a6a362b89.jpg\" alt=\"ast\"></p>\n<h2 id=\"5-计算求值\"><a href=\"#5-计算求值\" class=\"headerlink\" title=\"5 计算求值\"></a>5 计算求值</h2><p><code>EOF</code> 后，我们就可以得到抽象语法树 AST 了。因为是树形结构，我们可以用递归的方法求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`1 * ( 2 + 3 * 4)`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ast = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"type\"</span>: <span class=\"string\">\"ROOT_END\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"NUMBER\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"children\"</span>: [<span class=\"string\">\"1\"</span>],</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\")\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"+\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"NUMBER\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"children\"</span>: [<span class=\"string\">\"2\"</span>],</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">          <span class=\"string\">\"type\"</span>: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"NUMBER\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"children\"</span>: [<span class=\"string\">\"3\"</span>],</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"NUMBER\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"children\"</span>: [<span class=\"string\">\"4\"</span>],</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">      &#125;],</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">evaluate</span>(<span class=\"params\">node</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;type,children&#125; = node;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"NUMBER\"</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"+\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]) + evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"-\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]) - evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"*\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]) * evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"/\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]) / evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\")\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"ROOT_END\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">\"NEGATE\"</span>) <span class=\"keyword\">return</span> evaluate(children[<span class=\"number\">0</span>]) * <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(evaluate(ast)); <span class=\"comment\">// 14</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h2><p>写到这里，一个简单的四则运算解析器总算完成了。一共分 3 大部分。分别是 词法分析（Lexer）、语法分析（Parser）、计算求值（evaluate）。</p>\n<p>词法分析（Lexer）是将 表达式 字符串 转化为 Token 流，这里用到有限状态机。</p>\n<p>语法分析（Parser）是将 Token 流 转化为 抽象语法树（AST），这里主要是手工写的语法分析，用了 两个栈 ，规定了 4 个方法 link 、 retire 、 rob 、 remove，还有定义了不同节点的入栈规则。</p>\n<p>计算求值（evaluate）是将 AST 计算出表达式的 值，这里用了递归求值。</p>\n<h2 id=\"7-应用之自定义的向量运算\"><a href=\"#7-应用之自定义的向量运算\" class=\"headerlink\" title=\"7 应用之自定义的向量运算\"></a>7 应用之自定义的向量运算</h2><p>弄清楚四则运算的解析方法后，我们可以创造自己制定规则的表达式运算了。</p>\n<p>因为之前的项目我写过向量运算，但是因为函数调用的写法有点丑陋，我这里就尝试自定义向量运算表达式。</p>\n<h3 id=\"7-1-向量表示之引入符号（Sign-）\"><a href=\"#7-1-向量表示之引入符号（Sign-）\" class=\"headerlink\" title=\"7.1 向量表示之引入符号（Sign [ , ]）\"></a>7.1 向量表示之引入符号（Sign [ , ]）</h3><p>这里一个 2维向量 我用 <code>[1,2]</code> 来表示。所以先在 词法分析（Lexer）里增加 <code>[,]</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// start 状态里</span></span><br><span class=\"line\"><span class=\"comment\">// 符号</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"*\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"(\"</span>,<span class=\"string\">\")\"</span>,<span class=\"string\">\"[\"</span>,<span class=\"string\">\",\"</span>,<span class=\"string\">\"]\"</span>].includes(char)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>[</code> 和 <code>]</code> 是一对，本质和括号对 <code>(</code> <code>)</code> 没什么区别。</p>\n<p><code>,</code> 其定位就是一个分割符，没有成对子。而且 <code>,</code> 出现后，其前面的节点都要 link 起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">VecNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"[\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WallNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\",\"</span>,</span><br><span class=\"line\">    children:[],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> opposite = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"(\"</span> : <span class=\"string\">\")\"</span> ,</span><br><span class=\"line\">  <span class=\"string\">\"[\"</span> : <span class=\"string\">\"]\"</span> ,</span><br><span class=\"line\">  <span class=\"string\">\"ROOT\"</span> : <span class=\"string\">\"ROOT_END\"</span> ,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (token.value === <span class=\"string\">\"[\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1[</span></span><br><span class=\"line\">  <span class=\"comment\">// 1 + 1 [</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFullNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"非顶端[前面不能有满项\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.push(CreateTypeNode(<span class=\"string\">\"[\"</span>)());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (token.value === <span class=\"string\">\",\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ,</span></span><br><span class=\"line\">  <span class=\"comment\">// ,,</span></span><br><span class=\"line\">  <span class=\"comment\">// (,</span></span><br><span class=\"line\">  <span class=\"comment\">// [,</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNoChildrenNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\",不能接在空符后面\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// [ 1 + ,</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNotFullNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\",不能接在非满项后面\"</span>);</span><br><span class=\"line\">  link(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.push(CreateTypeNode(<span class=\"string\">\",\"</span>)());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (token.value === <span class=\"string\">\"]\"</span> ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [1+]</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNotFullNode(top)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"]前不能有非满项\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> remove(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子 <code>[ 1 + 2 * 3 , 4 + 5 * 6 ]</code> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"string\">`&lt;Root&gt;`</span></span><br><span class=\"line\">[   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;1&gt;`</span> </span><br><span class=\"line\">+   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 2&gt;`</span> </span><br><span class=\"line\">*   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1&gt;&lt;* 2&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1&gt;&lt;* 2 3&gt;`</span> </span><br><span class=\"line\">,   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;4&gt;`</span> </span><br><span class=\"line\">+   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4 5&gt;`</span> </span><br><span class=\"line\">*   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&gt;&lt;* 5&gt;`</span> </span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&gt;&lt;* 5 6&gt;`</span> </span><br><span class=\"line\">]   <span class=\"string\">`&lt;Root&gt;&lt;[&gt;&lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&lt;* 5 6&gt;&gt;`</span> </span><br><span class=\"line\">    <span class=\"string\">`&lt;Root&gt;&lt;] &lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&lt;* 5 6&gt;&gt;&gt;`</span> </span><br><span class=\"line\">EOF <span class=\"string\">`&lt;RootEnd &lt;] &lt;+ 1 &lt;* 2 3&gt;&gt;&lt;,&gt;&lt;+ 4&lt;* 5 6&gt;&gt;&gt;&gt;`</span></span><br></pre></td></tr></table></figure>\n\n\n<p>最后在 evaluate 方法里增加对向量的支持。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// evaluate 里</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"]\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> notWall = children.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.type !== <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(notWall[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = evaluate(notWall[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumA = <span class=\"keyword\">typeof</span> a === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumB = <span class=\"keyword\">typeof</span> b === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNumA &amp;&amp; isNumB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(a,b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"只有两个数量才能生成向量\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast18_s.gif\" alt=\"ast\"></p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s755x660_jfs/t1/51274/9/13256/68924/5da02232Ed7289fd9/2a7ffb17f4a9bb21.jpg\" alt=\"ast\"></p>\n<h3 id=\"7-2-向量加减乘除法取负\"><a href=\"#7-2-向量加减乘除法取负\" class=\"headerlink\" title=\"7.2 向量加减乘除法取负\"></a>7.2 向量加减乘除法取负</h3><p>向量加减乘除法取负继续源用 <code>+</code> , <code>-</code> , <code>*</code> , <code>/</code> 符号，只需要在 evaluate 方法里做判断就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// evaluate 里</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"+\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Vector2d.is(a) &amp;&amp; Vector2d.is(b))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector2d.add(a,b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"-\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Vector2d.is(a) &amp;&amp; Vector2d.is(b))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector2d.sub(a,b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"*\"</span> || type === <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVecA = Vector2d.is(a);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVecB = Vector2d.is(b);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumA = <span class=\"keyword\">typeof</span> a === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumB = <span class=\"keyword\">typeof</span> b === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( isNumA &amp;&amp; isNumB )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"*\"</span>) <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"/\"</span>) <span class=\"keyword\">return</span> a / b;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isVecA &amp;&amp; isNumB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"*\"</span>) <span class=\"keyword\">return</span> Vector2d.scale(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"/\"</span>) <span class=\"keyword\">return</span> Vector2d.scale(a,<span class=\"number\">1</span>/b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isVecB &amp;&amp; isNumA) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"*\"</span>) <span class=\"keyword\">return</span> Vector2d.scale(b,a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">\"/\"</span>) <span class=\"keyword\">return</span> Vector2d.scale(b,<span class=\"number\">1</span>/a);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"两个向量不能相乘，请用@dot\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"NEGATE\"</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Vector2d.is(a))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector2d.scale(a,<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-向量旋转、点乘，角度的单位转换\"><a href=\"#7-3-向量旋转、点乘，角度的单位转换\" class=\"headerlink\" title=\"7.3 向量旋转、点乘，角度的单位转换\"></a>7.3 向量旋转、点乘，角度的单位转换</h3><p>向量的旋转（<code>@rot</code>）、点乘（<code>@dot</code>），角度的单位转换（<code>@deg</code>），用这3个自定义符号。</p>\n<p>这里需要修改一下 词法分析 的状态机，在 start 状态下新增一个跃迁状态 customSgin 用 <code>@</code> 为标识。然后 customSgin 状态下输入[a-zA-Z]都回跃迁自身 否则 跃迁回状态 start 并输出 Token。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s750x400_jfs/t1/69281/39/12809/13086/5da02232Ef5aaefde/6cebfe531f9f4497.jpg\" alt=\"ast\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Lexer 里</span></span><br><span class=\"line\">  start(char) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数字</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\"0\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>,<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>,<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inInt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// .</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">\".\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inFloat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 符号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\"+\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"*\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"string\">\"(\"</span>,<span class=\"string\">\")\"</span>,<span class=\"string\">\"[\"</span>,<span class=\"string\">\"]\"</span>,<span class=\"string\">\",\"</span>,<span class=\"string\">\"&lt;\"</span>,<span class=\"string\">\"&gt;\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 空白字符</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">\" \"</span>,<span class=\"string\">\"\\r\"</span>,<span class=\"string\">\"\\n\"</span>].includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 结束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === EOF)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"EOF\"</span>, EOF);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (char === <span class=\"string\">\"@\"</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customSgin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  customSgin(char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>.split(<span class=\"string\">\"\"</span>).includes(char)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token.push(char);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.customSgin;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.emmitToken(<span class=\"string\">\"SIGN\"</span>, <span class=\"keyword\">this</span>.token.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.token = [];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.start(char); <span class=\"comment\">// put back char</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后定义节点和节点优先级。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DegNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"@deg\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">1</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">DotNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"@dot\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RotNode</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    type:<span class=\"string\">\"@rot\"</span>,</span><br><span class=\"line\">    children:[...arguments],</span><br><span class=\"line\">    maxChildren:<span class=\"number\">2</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> operatorValue = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"ROOT\"</span> : <span class=\"number\">0</span>, </span><br><span class=\"line\">  <span class=\"string\">\"(\"</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"[\"</span> : <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"@dot\"</span> : <span class=\"number\">2</span>, <span class=\"comment\">// 向量点乘</span></span><br><span class=\"line\">  <span class=\"string\">\"&lt;\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"&gt;\"</span> : <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"+\"</span> : <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"string\">\"-\"</span> : <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"string\">\"*\"</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">  <span class=\"string\">\"/\"</span> : <span class=\"number\">5</span>,</span><br><span class=\"line\">  <span class=\"string\">\"@rot\"</span> : <span class=\"number\">5</span>, <span class=\"comment\">// 向量旋转</span></span><br><span class=\"line\">  <span class=\"string\">\"NEGATE\"</span> : <span class=\"number\">6</span>, <span class=\"comment\">// 取负</span></span><br><span class=\"line\">  <span class=\"string\">\"@deg\"</span> : <span class=\"number\">7</span>, <span class=\"comment\">// 角度转换</span></span><br><span class=\"line\">  <span class=\"string\">\"NUMBER\"</span> : <span class=\"number\">8</span>, <span class=\"comment\">// 取正</span></span><br><span class=\"line\">  <span class=\"string\">\")\"</span> : <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"string\">\"]\"</span> : <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ROOT_END\"</span> : <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有在 evaluate 里写对应的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"@dot\"</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVecA = Vector2d.is(a);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVecB = Vector2d.is(b);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isVecA &amp;&amp; isVecB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector2d.dot(a,b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"只有向量和向量能点乘\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"@rot\"</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = evaluate(children[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVecA = Vector2d.is(a);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isVecB = Vector2d.is(b);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumA = <span class=\"keyword\">typeof</span> a === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumB = <span class=\"keyword\">typeof</span> b === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isVecA &amp;&amp; isNumB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector2d.rotate(a,b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isVecB &amp;&amp; isNumA) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Vector2d.rotate(b,a);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"只有向量和数量能旋转\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"string\">\"@deg\"</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = evaluate(children[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isNumA = <span class=\"keyword\">typeof</span> a === <span class=\"string\">\"number\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNumA)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"非数字不能转换deg\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来一个例子 <code>[1, 0] @rot - 90 @deg</code> ,把 [1,0] 旋转负 90 度。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/others/ast21_s.gif\" alt=\"ast\"></p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s626x567_jfs/t1/78350/34/12497/62507/5da02232E064c50c9/8d71fa5ebacbd32a.jpg\" alt=\"ast\"></p>\n<h2 id=\"8-Demo手动玩\"><a href=\"#8-Demo手动玩\" class=\"headerlink\" title=\"8 Demo手动玩\"></a>8 Demo手动玩</h2><p>最后结合 Vue 写了一个 表达式转 AST 的可视化 demo，支持数字和向量。</p>\n<p><a href=\"http://rococolate.github.io/blog/ast/index.html\" target=\"_blank\" rel=\"noopener\">http://rococolate.github.io/blog/ast/index.html</a></p>\n<p>demo 源码: <a href=\"https://github.com/Rococolate/ast_demo\" target=\"_blank\" rel=\"noopener\">https://github.com/Rococolate/ast_demo</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck36vflpl0006soyxf22zf94i","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflpu000csoyx0a05uy5c"},{"post_id":"ck36vflp80001soyxjs81yfwb","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflpz000gsoyxcrcy62r4"},{"post_id":"ck36vflpn0007soyxmqfrq3di","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflq3000jsoyx6vfsr2bi"},{"post_id":"ck36vflpq000asoyxdc03p0pj","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflq6000osoyxxrs6v76c"},{"post_id":"ck36vflpf0002soyx93vyaiwv","category_id":"ck36vflpo0008soyx66jzvuto","_id":"ck36vflq7000qsoyxrdj3zp0k"},{"post_id":"ck36vflpj0005soyxsj2pfjec","category_id":"ck36vflpo0008soyx66jzvuto","_id":"ck36vflq8000usoyxax346kyh"},{"post_id":"ck36vflq5000nsoyxl3eo0lbs","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflq9000wsoyx6m1degsd"},{"post_id":"ck36vflpt000bsoyx5tj0k0h7","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflqa000zsoyx6y5j0e0e"},{"post_id":"ck36vflpx000fsoyx4l1dnusj","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflqa0010soyxuk561ve7"},{"post_id":"ck36vflq0000isoyx7pk6fu8m","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflqb0012soyx9hvlw70e"},{"post_id":"ck36vflr7001msoyxe8x2k9f3","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflrd001rsoyxzb54cl5u"},{"post_id":"ck36vflr9001nsoyxh10ie37e","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflrf001tsoyx1rstiues"},{"post_id":"ck36vflrb001psoyxho6zqvuf","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflrg001wsoyx2zgaznp6"},{"post_id":"ck36vflrc001qsoyxrlypq06u","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflrh001xsoyxnuar8i6k"},{"post_id":"ck36vflre001ssoyxssbf2z1j","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflri001zsoyxalotkon9"},{"post_id":"ck36vflrf001vsoyx69uvsanv","category_id":"ck36vflpo0008soyx66jzvuto","_id":"ck36vflri0021soyxjrr9k1ic"},{"post_id":"ck36vflrq002lsoyx54zq9z9q","category_id":"ck36vflph0003soyx9cq8mjxw","_id":"ck36vflrv002psoyxxf7qc0ov"},{"post_id":"ck36vflrs002msoyx1t3ifnti","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vflrv002rsoyx1ymfxlgr"},{"post_id":"ck36vflrz0030soyxjuitabk5","category_id":"ck36vflpo0008soyx66jzvuto","_id":"ck36vfls40034soyxva4qp5qd"},{"post_id":"ck36vfls00031soyx2r37ripk","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vfls50036soyxgoqdnar9"},{"post_id":"ck36vfls20033soyx66s3exsa","category_id":"ck36vflq4000lsoyx8eayiit4","_id":"ck36vfls60038soyx6lroi93k"}],"PostTag":[{"post_id":"ck36vflp80001soyxjs81yfwb","tag_id":"ck36vflpj0004soyxw6bjyg3y","_id":"ck36vflq0000hsoyxg8wrceza"},{"post_id":"ck36vflp80001soyxjs81yfwb","tag_id":"ck36vflpo0009soyxc7go9ljz","_id":"ck36vflq3000ksoyxmwjux9fv"},{"post_id":"ck36vflpx000fsoyx4l1dnusj","tag_id":"ck36vflpv000esoyxqgkdscds","_id":"ck36vflq6000psoyxyv34dero"},{"post_id":"ck36vflpf0002soyx93vyaiwv","tag_id":"ck36vflpv000esoyxqgkdscds","_id":"ck36vflq7000rsoyxo02notkk"},{"post_id":"ck36vflpj0005soyxsj2pfjec","tag_id":"ck36vflpv000esoyxqgkdscds","_id":"ck36vflq8000vsoyxvioesy89"},{"post_id":"ck36vflpl0006soyxf22zf94i","tag_id":"ck36vflq8000tsoyxrtyjdp64","_id":"ck36vflqb0014soyxv2o7ierd"},{"post_id":"ck36vflpl0006soyxf22zf94i","tag_id":"ck36vflqa000ysoyx4i6ssibm","_id":"ck36vflqc0015soyxxhtr9p87"},{"post_id":"ck36vflpl0006soyxf22zf94i","tag_id":"ck36vflqa0011soyxha9qygxc","_id":"ck36vflqc0017soyxpsl4afvg"},{"post_id":"ck36vflpn0007soyxmqfrq3di","tag_id":"ck36vflqb0013soyxr7vwet9u","_id":"ck36vflqd0019soyx2h817ak9"},{"post_id":"ck36vflpn0007soyxmqfrq3di","tag_id":"ck36vflqc0016soyxoupxjwdq","_id":"ck36vflqd001asoyxuwk8msuc"},{"post_id":"ck36vflpq000asoyxdc03p0pj","tag_id":"ck36vflqc0018soyxydkctcha","_id":"ck36vflqd001dsoyx5jp43nd0"},{"post_id":"ck36vflpq000asoyxdc03p0pj","tag_id":"ck36vflqd001bsoyxwkm7r4n3","_id":"ck36vflqe001esoyxirt48b5q"},{"post_id":"ck36vflpt000bsoyx5tj0k0h7","tag_id":"ck36vflqd001csoyxe90daqae","_id":"ck36vflqe001gsoyxkkk4xow3"},{"post_id":"ck36vflq0000isoyx7pk6fu8m","tag_id":"ck36vflqe001fsoyxek7paadj","_id":"ck36vflqf001jsoyxh6uywuby"},{"post_id":"ck36vflq0000isoyx7pk6fu8m","tag_id":"ck36vflqe001hsoyxz447kydf","_id":"ck36vflqf001ksoyxps9ja4xu"},{"post_id":"ck36vflq5000nsoyxl3eo0lbs","tag_id":"ck36vflqf001isoyxlex27z30","_id":"ck36vflqf001lsoyx2ktvc6if"},{"post_id":"ck36vflr7001msoyxe8x2k9f3","tag_id":"ck36vflrb001osoyxwhy6fl21","_id":"ck36vflri0020soyxv14gst3w"},{"post_id":"ck36vflr7001msoyxe8x2k9f3","tag_id":"ck36vflrf001usoyxyoalzp3q","_id":"ck36vflri0022soyxf21tlbq1"},{"post_id":"ck36vflr9001nsoyxh10ie37e","tag_id":"ck36vflrh001ysoyx7an2lkwc","_id":"ck36vflrj0025soyx07g7tp3i"},{"post_id":"ck36vflr9001nsoyxh10ie37e","tag_id":"ck36vflri0023soyx06lml0om","_id":"ck36vflrj0026soyxb3z841qb"},{"post_id":"ck36vflrb001psoyxho6zqvuf","tag_id":"ck36vflrj0024soyxkteglsx0","_id":"ck36vflrk0028soyxwwts0eo7"},{"post_id":"ck36vflrc001qsoyxrlypq06u","tag_id":"ck36vflrj0027soyxa8jltvjy","_id":"ck36vflrl002csoyxal3jzhjw"},{"post_id":"ck36vflrc001qsoyxrlypq06u","tag_id":"ck36vflrk0029soyxjn0oo53h","_id":"ck36vflrl002dsoyxhvjf9lo8"},{"post_id":"ck36vflrc001qsoyxrlypq06u","tag_id":"ck36vflrk002asoyxp3bjbhff","_id":"ck36vflrm002fsoyxktg8ctmc"},{"post_id":"ck36vflre001ssoyxssbf2z1j","tag_id":"ck36vflrk002bsoyxxfzslkso","_id":"ck36vflrm002gsoyx9v3bzkx2"},{"post_id":"ck36vflre001ssoyxssbf2z1j","tag_id":"ck36vflqa0011soyxha9qygxc","_id":"ck36vflrn002isoyxfsublscs"},{"post_id":"ck36vflrf001vsoyx69uvsanv","tag_id":"ck36vflrl002esoyxhe2w8lyw","_id":"ck36vflro002jsoyxu015y1ee"},{"post_id":"ck36vflrf001vsoyx69uvsanv","tag_id":"ck36vflrm002hsoyxvcwohj3v","_id":"ck36vflro002ksoyx6jtq91tx"},{"post_id":"ck36vflrs002msoyx1t3ifnti","tag_id":"ck36vflrj0027soyxa8jltvjy","_id":"ck36vflru002osoyxdtuotuyj"},{"post_id":"ck36vflrs002msoyx1t3ifnti","tag_id":"ck36vflrk0029soyxjn0oo53h","_id":"ck36vflrv002qsoyx877jyocg"},{"post_id":"ck36vflrs002msoyx1t3ifnti","tag_id":"ck36vflrk002asoyxp3bjbhff","_id":"ck36vflrv002tsoyxuw2wmirm"},{"post_id":"ck36vflrq002lsoyx54zq9z9q","tag_id":"ck36vflru002nsoyx63ap7aps","_id":"ck36vflrw002wsoyx02rqz8bx"},{"post_id":"ck36vflrq002lsoyx54zq9z9q","tag_id":"ck36vflrv002ssoyxcnxqy3pz","_id":"ck36vflrx002xsoyxlrgedb1e"},{"post_id":"ck36vflrq002lsoyx54zq9z9q","tag_id":"ck36vflrw002usoyxx3uq7tfh","_id":"ck36vflrx002ysoyxdxyfa3ap"},{"post_id":"ck36vflrq002lsoyx54zq9z9q","tag_id":"ck36vflrw002vsoyx9sfs4syx","_id":"ck36vflrx002zsoyxi8diu1k7"},{"post_id":"ck36vfls20033soyx66s3exsa","tag_id":"ck36vflpv000esoyxqgkdscds","_id":"ck36vfls40035soyxbgt7fxvw"},{"post_id":"ck36vflrz0030soyxjuitabk5","tag_id":"ck36vfls20032soyxhw229907","_id":"ck36vfls6003bsoyxp3urejpc"},{"post_id":"ck36vflrz0030soyxjuitabk5","tag_id":"ck36vfls50037soyxfobz6kyl","_id":"ck36vfls7003csoyxwtdm9umj"},{"post_id":"ck36vflrz0030soyxjuitabk5","tag_id":"ck36vfls60039soyx24xw9igk","_id":"ck36vfls7003esoyxwf7hayj9"},{"post_id":"ck36vfls00031soyx2r37ripk","tag_id":"ck36vfls6003asoyxycghzgk4","_id":"ck36vfls8003fsoyxjcpwhwce"},{"post_id":"ck36vfls00031soyx2r37ripk","tag_id":"ck36vfls7003dsoyxprmikz09","_id":"ck36vfls8003gsoyxupzj4whr"}],"Tag":[{"name":"CSS","_id":"ck36vflpj0004soyxw6bjyg3y"},{"name":"CSS Houdini","_id":"ck36vflpo0009soyxc7go9ljz"},{"name":"AST","_id":"ck36vflpv000esoyxqgkdscds"},{"name":"web内容","_id":"ck36vflq8000tsoyxrtyjdp64"},{"name":"电池电量","_id":"ck36vflqa000ysoyx4i6ssibm"},{"name":"性能优化","_id":"ck36vflqa0011soyxha9qygxc"},{"name":"资源治理","_id":"ck36vflqb0013soyxr7vwet9u"},{"name":"前端工程化","_id":"ck36vflqc0016soyxoupxjwdq"},{"name":"webpack loader","_id":"ck36vflqc0018soyxydkctcha"},{"name":"工程化","_id":"ck36vflqd001bsoyxwkm7r4n3"},{"name":"V8引擎","_id":"ck36vflqd001csoyxe90daqae"},{"name":"折叠屏适配","_id":"ck36vflqe001fsoyxek7paadj"},{"name":"设计原则","_id":"ck36vflqe001hsoyxz447kydf"},{"name":"字体","_id":"ck36vflqf001isoyxlex27z30"},{"name":"引导蒙层","_id":"ck36vflrb001osoyxwhy6fl21"},{"name":"canvas","_id":"ck36vflrf001usoyxyoalzp3q"},{"name":"碰撞检测","_id":"ck36vflrh001ysoyx7an2lkwc"},{"name":"向量","_id":"ck36vflri0023soyx06lml0om"},{"name":"TypeScript","_id":"ck36vflrj0024soyxkteglsx0"},{"name":"Mocha","_id":"ck36vflrj0027soyxa8jltvjy"},{"name":"BDD/TDD","_id":"ck36vflrk0029soyxjn0oo53h"},{"name":"测试框架","_id":"ck36vflrk002asoyxp3bjbhff"},{"name":"composite","_id":"ck36vflrk002bsoyxxfzslkso"},{"name":"Electron","_id":"ck36vflrl002esoyxhe2w8lyw"},{"name":"桌面开发","_id":"ck36vflrm002hsoyxvcwohj3v"},{"name":"type=\"module\"","_id":"ck36vflru002nsoyx63ap7aps"},{"name":"代码拆分","_id":"ck36vflrv002ssoyxcnxqy3pz"},{"name":"rollup打包","_id":"ck36vflrw002usoyxx3uq7tfh"},{"name":"modulepreload","_id":"ck36vflrw002vsoyx9sfs4syx"},{"name":"Vue.compile","_id":"ck36vfls20032soyxhw229907"},{"name":"CPU性能优化","_id":"ck36vfls50037soyxfobz6kyl"},{"name":"火焰图","_id":"ck36vfls60039soyx24xw9igk"},{"name":"Interection Observer","_id":"ck36vfls6003asoyxycghzgk4"},{"name":"滚动优化","_id":"ck36vfls7003dsoyxprmikz09"}]}}