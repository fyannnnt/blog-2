{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image1.png","path":"images/og_image1.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/_config.yml","hash":"6c6af82a33cbca5b91424b3e1d5767fd618f1157","modified":1567945594877},{"_id":"source/CNAME","hash":"9d8d27cbe55d66b11586869f0aaee6d49e054464","modified":1567503020445},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1567511331230},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1567511331230},{"_id":"themes/icarus/package.json","hash":"e9bcb9fcf69462d5b03c7870eb13ab28aa7933c7","modified":1567511331247},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1567511331237},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1567511331237},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1567511331237},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1567511331237},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1567511331238},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1567511331238},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1567511331238},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1567511331238},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1567511331239},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1567511331239},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1567511331239},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1567511331239},{"_id":"themes/icarus/layout/archive.ejs","hash":"577ea70388261f782ba736e21a736c641e32f280","modified":1567511331239},{"_id":"themes/icarus/languages/zh-Hans.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1567945594877},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1567511331240},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1567511331240},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1567511331243},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1567511331243},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1567511331243},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1567511331245},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1567511331246},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1567511331246},{"_id":"themes/icarus/scripts/index.js","hash":"f97eb95812480cc3b07cc0ad44dc39f9a0032f24","modified":1567511331248},{"_id":"source/_posts/2019-08/CSS Houdini实现动态波浪纹.md","hash":"ecd489fd130e6f87ee8c4d52f0f2fff3e7006cf4","modified":1568109475303},{"_id":"source/_posts/2019-08/Javascript抽象语法树上篇(基础篇).md","hash":"50692309432e3d4727486eeb80206ef889a3a9f6","modified":1567520214567},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1567511331230},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1567511331231},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1567511331231},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1567511331231},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1567511331231},{"_id":"source/_posts/2019-08/collision-detection.md","hash":"32cd5a9da1750af7660fe164af2e85e292946aae","modified":1568109489716},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1567511331232},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1567511331232},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1567511331232},{"_id":"source/_posts/2019-08/Javascript抽象语法树下篇(实践篇).md","hash":"73152a21baf3ab96692bcc5de12981185e079b30","modified":1567520253046},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1567511331233},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1567511331233},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1567511331234},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1567511331234},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1567511331234},{"_id":"source/_posts/2019-09/【译】在生产环境中使用原生JavaScript模块.md","hash":"2ad509fb2e2cfdac8c51b45c8f4b10e96d6e7551","modified":1568109550846},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1567511331234},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"28863042ad8fcf9ecb86d5288ecd3ce5250a984d","modified":1567511331235},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1567511331235},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1567511331235},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1567511331235},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1567511331235},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1567511331235},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1567511331236},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1567511331236},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1567511331236},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1567511331236},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1567511331236},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"c5d296f3f21e77f3d1b1879c4adb51f7222015c5","modified":1567511331232},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1567511331232},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1567511331233},{"_id":"themes/icarus/includes/helpers/override.js","hash":"11e9ca1f5e834da388656f49e29587cd7626e817","modified":1567511331233},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1567511331233},{"_id":"themes/icarus/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1567511331233},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1567511331240},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1567511331240},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1567511331240},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"8a9172d7c9a8f050dc978a06e0f0998ba2e9c61a","modified":1567511331240},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"886026a36495f3c57cdef46bc9e9a94a0e390eb0","modified":1567511331241},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1567511331241},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1567511331241},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1567511331241},{"_id":"themes/icarus/layout/common/article.ejs","hash":"43553b2efad2b4dffff6100133274b463fd1108f","modified":1567945594878},{"_id":"themes/icarus/layout/common/head.ejs","hash":"7ff920979b2bf684887ec410823dcd6ba0dbffd2","modified":1567511331241},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"2c81bf5f95ef50f15f9eb93a75e84397a5272215","modified":1568000588241},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1567511331242},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"5082ea45df0f79f955143177287d92bcf3832fcf","modified":1567511331242},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"0dfa185adfd0d8ea19c9581f1b2db6b4bc94681e","modified":1567511331242},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1567511331242},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1567511331242},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1567511331243},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1567511331243},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1567511331243},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1567511331244},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1567511331245},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1567511331245},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1567511331245},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1567511331246},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1567511331246},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1567511331246},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1567511331246},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1567511331245},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1567511331245},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1567511331245},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1567511331246},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1567511331247},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1567511331246},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"9b6f8bbed3cfc070d92ed76e81ee742ff8cfa4c2","modified":1567511331247},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"0bb55344f7ac0e5b762712985c3aebc55de9331b","modified":1567511331247},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1567511331247},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1567511331247},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1567511331247},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1567511331248},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1567511331248},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1567511331248},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1567511331248},{"_id":"themes/icarus/source/css/style.styl","hash":"8f49c29a8246e9ce1a7bf62e39473e46e8637fc1","modified":1567511331249},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1567511331250},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1567511331251},{"_id":"themes/icarus/source/images/avatar.png","hash":"a6466a5e44f25e2904c1a1c470678a233a39d3b6","modified":1567520005223},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1567511331252},{"_id":"themes/icarus/source/images/og_image1.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1567520005228},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1567511331253},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1567511331254},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1567511331253},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1567511331254},{"_id":"themes/icarus/source/js/main.js","hash":"faee41896e7bb3373ba5032b82d0b21a0321cea5","modified":1567511331254},{"_id":"themes/icarus/source/images/og_image.png","hash":"2934d2c883f827869adce83d22102312ae7be63b","modified":1567520005226}],"Category":[{"name":"H5开发","_id":"ck0dnoh8y0002hm9fn38edf2n"},{"name":"NodeJS","_id":"ck0dnoh940007hm9foeugiies"},{"name":"知识分享","_id":"ck0dnoh97000ehm9fjxetowto"},{"name":"Web","_id":"ck0dnoh98000jhm9fe1gnfs4f"},{"name":"Web开发","_id":"ck0dnvqqq000xhm9fpc9jhs4b"}],"Data":[],"Page":[],"Post":[{"title":"CSS Houdini实现动态波浪纹","subtitle":"CSS Houdini号称CSS领域最令人振奋的革新，它直接将CSS的API暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的CSS属性，从而定制和扩展浏览器的展示行为。","cover":"http://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg","thumbnail":"http://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg","date":"2019-07-12T11:00:00.000Z","ckey":22,"author":{"nick":"黄浩群","github_name":"huanghaoqun"},"_content":"\nCSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。\n<!--more-->\n## 背景\n\n我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。\n\n## 什么是 CSS Houdini？\n\nCSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。\n\n![](http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png)\n\nCSS Houdini 目前主要提供了以下几个 API：\n\n#### CSS Properties and Values API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png)\n\n允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 `--` 开头，通过 `var()` 调用：\n\n```css\ndiv {\n  --font-color: #9e4a9b;\n  color: var(--font-color);\n}\n```\n\n此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：\n\n```css\n.container {\n  --font-color: #9e4a9b;\n}\n.container .text {\n  color: var(--font-color);\n}\n```\n\n定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：\n\n ```css\n.text {\n  --box-shadow-color: #3a4ba2;\n  box-shadow: 0 0 30px var(--box-shadow-color);\n}\n.text:hover {\n  --box-shadow-color: #7f2c2b;\n}\n ```\n\n#### Painting API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png)\n\n允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，\"怎么画\" 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：\n\n```js\nregisterPaint('rect', class {\n  paint(ctx, size, properties, args) {\n    // @TODO\n  }\n});\n```\n\nregisterPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：\n\n- `ctx`：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。\n- `size`：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。\n- `properties`：包含节点的 CSS 属性，需要调用静态方法 `inputProperties` 声明注入。\n- `args`: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 `inputArguments` 声明注入。\n\n编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：\n\n```css\n.wrapper {\n  background-image: paint(rect);\n}\n```\n\nPainting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。\n\n#### Layout API\n\n允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，\"如何布局\" 的逻辑需要我们自己编写：\n\n```js\nregisterLayout('block-like', class {\n  layout(children, edges, constraints, properties, breakToken) {\n    // @TODO\n    return {\n      // inlineSize: number,\n      // blockSize: number,\n      // autoBlockSize: number,\n      // childFragments: sequence<LayoutFragment>\n    }\n  }\n})\n```\n\nregisterLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。\n\n同样的，调用时只需：\n\n```css\n.wrapper {\n  display: layout('block-like');\n}\n```\n\n因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。\n\n#### Worklets\n\nregisterPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：\n\n```js\nif (\"paintWorklet\" in CSS) {\n  CSS.paintWorklet.addModule(\"paintworklet.js\");\n}\n```\n\n```js\nif (\"layoutWorklet\" in CSS) {\n  CSS.layoutWorklet.addModule(\"layoutworklet.js\");\n}\n```\n\n\n## 基础：三步用上 Painting API\n\n我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 `--rect-color` 指定。\n\n#### 1、编写一个 Paint 类：\n\n新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：\n\n```js\nregisterPaint(\"rect\", class {\n  static get inputProperties() {\n    return [\"--rect-color\"];\n  }\n  paint(ctx, geom, properties) {\n    const color = properties.get(\"--rect-color\")[0];\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, geom.width, geom.height);\n  }\n});\n```\n\n上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 `--rect-color` 变量，并将元素的背景填充为指定颜色。由于需要使用属性 `--rect-color`，我们需要在静态方法 `inputProperties` 中声明。\n\n#### 2、Worklets 加载 Paint 类：\n\nHTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：\n\n```html\n<div class=\"rect\"></div>\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n  }\n</script>\n```\n\n#### 3、使用 Paint 类：\n\nCSS 中使用的时候，只需要调用 paint 方法：\n\n```css\n.rect {\n  width: 100vw;\n  height: 100vh;\n  background-image: paint(rect);\n  --rect-color: rgb(255, 64, 129);\n}\n```\n\n可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。\n\n## 进阶：实现动态波纹\n\n根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：\n\n```html\n<!-- index.html -->\n<div id=\"wave\"></div>\n\n<style>\n  #wave {\n    width: 20%;\n    height: 70vh;\n    margin: 10vh auto;\n    background-color: #ff3e81;\n    background-image: paint(wave);\n  }\n</style>\n\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n\n    const wave = document.querySelector(\"#wave\");\n    let tick = 0;  \n    requestAnimationFrame(function raf(now) {\n      tick += 1;\n      wave.style.cssText = `--animation-tick: ${tick};`;\n      requestAnimationFrame(raf);\n    });\n  }\n</script>\n```\n\n```js\n// paintworklet.js\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n  paint(ctx, geom, properties) {\n    let tick = Number(properties.get('--animation-tick'));\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * 0.4;\n    tick = tick * 2;\n\n    ctx.beginPath();\n    ctx.moveTo(0, initY + Math.sin(tick / 20) * 10);\n    for (let i = 1; i <= width; i++) {\n      ctx.lineTo(i, initY + Math.sin((i + tick) / 20) * 10);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + Math.sin(tick / 20) * 10);\n    ctx.closePath();\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n    ctx.fill();\n  }\n})\n```\n\npaintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif)\n\n然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：\n\n##### 1）波纹高度（Y）随位置（X）变化而不规则变化\n\n![](http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg)\n\n把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；\n\n##### 2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\n\n动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。\n\n提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？\n\n为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：\n\n```js\n// paintworklet.js\nimport SimplexNoise from 'simplex-noise';\nconst sim = new SimplexNoise(() => 1);\n\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n\n  paint(ctx, geom, properties) {\n    const tick = Number(properties.get('--animation-tick'));\n\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.4)', 0.004, tick, 15, 0.4);\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.5)', 0.006, tick, 12, 0.4);\n  }\n  \n  /**\n   * 绘制波纹\n   */\n  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) {\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * ih;\n    const speedT = tick * ratio;\n\n    ctx.beginPath();\n    for (let x = 0, speedX = 0; x <= width; x++) {\n      speedX += ratio * 1;\n      var y = initY + sim.noise2D(speedX, speedT) * amp;\n      ctx[x === 0 ? 'moveTo' : 'lineTo'](x, y);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + sim.noise2D(0, speedT) * amp);\n    ctx.closePath();\n\n    ctx.fillStyle = fillColor;\n    ctx.fill();\n  }\n})\n```\n\n修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！\n\n![](http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif)\n\n## 参考文章\n\n> [CSS Painting API Level 1](https://www.w3.org/TR/css-paint-api-1/)\n> [CSS Layout API Level 1](https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/)\n> [CSS 魔術師 Houdini API 介紹](https://blog.techbridge.cc/2017/05/23/css-houdini/)\n","source":"_posts/2019-08/CSS Houdini实现动态波浪纹.md","raw":"---\ntitle: CSS Houdini实现动态波浪纹\nsubtitle: CSS Houdini号称CSS领域最令人振奋的革新，它直接将CSS的API暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的CSS属性，从而定制和扩展浏览器的展示行为。\ncover: http://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg\nthumbnail: http://img12.360buyimg.com/jdphoto/s800x530_jfs/t1/74847/21/5179/217476/5d35b8afEa7d7bcb6/685be624382850e6.jpg\ndate: 2019-07-12 19:00:00\ntags:\n  - CSS\n  - CSS Houdini\ncategories: Web开发\nckey: 22\nauthor:\n  nick: 黄浩群\n  github_name: huanghaoqun\n---\n\nCSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。\n<!--more-->\n## 背景\n\n我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。\n\n## 什么是 CSS Houdini？\n\nCSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。\n\n![](http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png)\n\nCSS Houdini 目前主要提供了以下几个 API：\n\n#### CSS Properties and Values API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png)\n\n允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 `--` 开头，通过 `var()` 调用：\n\n```css\ndiv {\n  --font-color: #9e4a9b;\n  color: var(--font-color);\n}\n```\n\n此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：\n\n```css\n.container {\n  --font-color: #9e4a9b;\n}\n.container .text {\n  color: var(--font-color);\n}\n```\n\n定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：\n\n ```css\n.text {\n  --box-shadow-color: #3a4ba2;\n  box-shadow: 0 0 30px var(--box-shadow-color);\n}\n.text:hover {\n  --box-shadow-color: #7f2c2b;\n}\n ```\n\n#### Painting API\n\n![](http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png)\n\n允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，\"怎么画\" 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：\n\n```js\nregisterPaint('rect', class {\n  paint(ctx, size, properties, args) {\n    // @TODO\n  }\n});\n```\n\nregisterPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：\n\n- `ctx`：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。\n- `size`：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。\n- `properties`：包含节点的 CSS 属性，需要调用静态方法 `inputProperties` 声明注入。\n- `args`: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 `inputArguments` 声明注入。\n\n编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：\n\n```css\n.wrapper {\n  background-image: paint(rect);\n}\n```\n\nPainting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。\n\n#### Layout API\n\n允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，\"如何布局\" 的逻辑需要我们自己编写：\n\n```js\nregisterLayout('block-like', class {\n  layout(children, edges, constraints, properties, breakToken) {\n    // @TODO\n    return {\n      // inlineSize: number,\n      // blockSize: number,\n      // autoBlockSize: number,\n      // childFragments: sequence<LayoutFragment>\n    }\n  }\n})\n```\n\nregisterLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。\n\n同样的，调用时只需：\n\n```css\n.wrapper {\n  display: layout('block-like');\n}\n```\n\n因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。\n\n#### Worklets\n\nregisterPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：\n\n```js\nif (\"paintWorklet\" in CSS) {\n  CSS.paintWorklet.addModule(\"paintworklet.js\");\n}\n```\n\n```js\nif (\"layoutWorklet\" in CSS) {\n  CSS.layoutWorklet.addModule(\"layoutworklet.js\");\n}\n```\n\n\n## 基础：三步用上 Painting API\n\n我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 `--rect-color` 指定。\n\n#### 1、编写一个 Paint 类：\n\n新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：\n\n```js\nregisterPaint(\"rect\", class {\n  static get inputProperties() {\n    return [\"--rect-color\"];\n  }\n  paint(ctx, geom, properties) {\n    const color = properties.get(\"--rect-color\")[0];\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, geom.width, geom.height);\n  }\n});\n```\n\n上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 `--rect-color` 变量，并将元素的背景填充为指定颜色。由于需要使用属性 `--rect-color`，我们需要在静态方法 `inputProperties` 中声明。\n\n#### 2、Worklets 加载 Paint 类：\n\nHTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：\n\n```html\n<div class=\"rect\"></div>\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n  }\n</script>\n```\n\n#### 3、使用 Paint 类：\n\nCSS 中使用的时候，只需要调用 paint 方法：\n\n```css\n.rect {\n  width: 100vw;\n  height: 100vh;\n  background-image: paint(rect);\n  --rect-color: rgb(255, 64, 129);\n}\n```\n\n可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。\n\n## 进阶：实现动态波纹\n\n根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：\n\n```html\n<!-- index.html -->\n<div id=\"wave\"></div>\n\n<style>\n  #wave {\n    width: 20%;\n    height: 70vh;\n    margin: 10vh auto;\n    background-color: #ff3e81;\n    background-image: paint(wave);\n  }\n</style>\n\n<script>\n  if (\"paintWorklet\" in CSS) {\n    CSS.paintWorklet.addModule(\"paintworklet.js\");\n\n    const wave = document.querySelector(\"#wave\");\n    let tick = 0;  \n    requestAnimationFrame(function raf(now) {\n      tick += 1;\n      wave.style.cssText = `--animation-tick: ${tick};`;\n      requestAnimationFrame(raf);\n    });\n  }\n</script>\n```\n\n```js\n// paintworklet.js\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n  paint(ctx, geom, properties) {\n    let tick = Number(properties.get('--animation-tick'));\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * 0.4;\n    tick = tick * 2;\n\n    ctx.beginPath();\n    ctx.moveTo(0, initY + Math.sin(tick / 20) * 10);\n    for (let i = 1; i <= width; i++) {\n      ctx.lineTo(i, initY + Math.sin((i + tick) / 20) * 10);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + Math.sin(tick / 20) * 10);\n    ctx.closePath();\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n    ctx.fill();\n  }\n})\n```\n\npaintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。\n\n![](http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif)\n\n然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：\n\n##### 1）波纹高度（Y）随位置（X）变化而不规则变化\n\n![](http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg)\n\n把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；\n\n##### 2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\n\n动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。\n\n提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？\n\n为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：\n\n```js\n// paintworklet.js\nimport SimplexNoise from 'simplex-noise';\nconst sim = new SimplexNoise(() => 1);\n\nregisterPaint('wave', class {\n  static get inputProperties() {\n    return ['--animation-tick'];\n  }\n\n  paint(ctx, geom, properties) {\n    const tick = Number(properties.get('--animation-tick'));\n\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.4)', 0.004, tick, 15, 0.4);\n    this.drawWave(ctx, geom, 'rgba(255, 255, 255, 0.5)', 0.006, tick, 12, 0.4);\n  }\n  \n  /**\n   * 绘制波纹\n   */\n  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) {\n    const {\n      width,\n      height\n    } = geom;\n    const initY = height * ih;\n    const speedT = tick * ratio;\n\n    ctx.beginPath();\n    for (let x = 0, speedX = 0; x <= width; x++) {\n      speedX += ratio * 1;\n      var y = initY + sim.noise2D(speedX, speedT) * amp;\n      ctx[x === 0 ? 'moveTo' : 'lineTo'](x, y);\n    }\n    ctx.lineTo(width, height);\n    ctx.lineTo(0, height);\n    ctx.lineTo(0, initY + sim.noise2D(0, speedT) * amp);\n    ctx.closePath();\n\n    ctx.fillStyle = fillColor;\n    ctx.fill();\n  }\n})\n```\n\n修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！\n\n![](http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif)\n\n## 参考文章\n\n> [CSS Painting API Level 1](https://www.w3.org/TR/css-paint-api-1/)\n> [CSS Layout API Level 1](https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/)\n> [CSS 魔術師 Houdini API 介紹](https://blog.techbridge.cc/2017/05/23/css-houdini/)\n","slug":"CSS Houdini实现动态波浪纹","published":1,"updated":"2019-09-10T09:57:55.303Z","_id":"ck0dnoh8t0000hm9f1dm9rrqa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>CSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。</p>\n<a id=\"more\"></a>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。</p>\n<h2 id=\"什么是-CSS-Houdini？\"><a href=\"#什么是-CSS-Houdini？\" class=\"headerlink\" title=\"什么是 CSS Houdini？\"></a>什么是 CSS Houdini？</h2><p>CSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png\" alt></p>\n<p>CSS Houdini 目前主要提供了以下几个 API：</p>\n<h4 id=\"CSS-Properties-and-Values-API\"><a href=\"#CSS-Properties-and-Values-API\" class=\"headerlink\" title=\"CSS Properties and Values API\"></a>CSS Properties and Values API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png\" alt></p>\n<p>允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 <code>--</code> 开头，通过 <code>var()</code> 调用：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--font-color</span>: <span class=\"hljs-number\">#9e4a9b</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--font-color</span>: <span class=\"hljs-number\">#9e4a9b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.container</span> <span class=\"hljs-selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：</p>\n <figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--box-shadow-color</span>: <span class=\"hljs-number\">#3a4ba2</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">30px</span> <span class=\"hljs-built_in\">var</span>(--box-shadow-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-selector-class\">.text</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--box-shadow-color</span>: <span class=\"hljs-number\">#7f2c2b</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Painting-API\"><a href=\"#Painting-API\" class=\"headerlink\" title=\"Painting API\"></a>Painting API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png\" alt></p>\n<p>允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，”怎么画” 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"hljs-string\">'rect'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  paint(ctx, size, properties, args) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// @TODO</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>registerPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：</p>\n<ul>\n<li><code>ctx</code>：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。</li>\n<li><code>size</code>：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。</li>\n<li><code>properties</code>：包含节点的 CSS 属性，需要调用静态方法 <code>inputProperties</code> 声明注入。</li>\n<li><code>args</code>: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 <code>inputArguments</code> 声明注入。</li>\n</ul>\n<p>编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(rect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Painting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。</p>\n<h4 id=\"Layout-API\"><a href=\"#Layout-API\" class=\"headerlink\" title=\"Layout API\"></a>Layout API</h4><p>允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，”如何布局” 的逻辑需要我们自己编写：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerLayout(<span class=\"hljs-string\">'block-like'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  layout(children, edges, constraints, properties, breakToken) &#123;</span><br><span class=\"line\">    <span class=\"hljs-comment\">// @TODO</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">// inlineSize: number,</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// blockSize: number,</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// autoBlockSize: number,</span></span><br><span class=\"line\">      <span class=\"hljs-comment\">// childFragments: sequence&lt;LayoutFragment&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>registerLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。</p>\n<p>同样的，调用时只需：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">display</span>: <span class=\"hljs-built_in\">layout</span>(<span class=\"hljs-string\">'block-like'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。</p>\n<h4 id=\"Worklets\"><a href=\"#Worklets\" class=\"headerlink\" title=\"Worklets\"></a>Worklets</h4><p>registerPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"paintWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.paintWorklet.addModule(<span class=\"hljs-string\">\"paintworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"layoutWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.layoutWorklet.addModule(<span class=\"hljs-string\">\"layoutworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础：三步用上-Painting-API\"><a href=\"#基础：三步用上-Painting-API\" class=\"headerlink\" title=\"基础：三步用上 Painting API\"></a>基础：三步用上 Painting API</h2><p>我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 <code>--rect-color</code> 指定。</p>\n<h4 id=\"1、编写一个-Paint-类：\"><a href=\"#1、编写一个-Paint-类：\" class=\"headerlink\" title=\"1、编写一个 Paint 类：\"></a>1、编写一个 Paint 类：</h4><p>新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"hljs-string\">\"rect\"</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">\"--rect-color\"</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> color = properties.get(<span class=\"hljs-string\">\"--rect-color\"</span>)[<span class=\"hljs-number\">0</span>];</span><br><span class=\"line\">    ctx.fillStyle = color;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, geom.width, geom.height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 <code>--rect-color</code> 变量，并将元素的背景填充为指定颜色。由于需要使用属性 <code>--rect-color</code>，我们需要在静态方法 <code>inputProperties</code> 中声明。</p>\n<h4 id=\"2、Worklets-加载-Paint-类：\"><a href=\"#2、Worklets-加载-Paint-类：\" class=\"headerlink\" title=\"2、Worklets 加载 Paint 类：\"></a>2、Worklets 加载 Paint 类：</h4><p>HTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"rect\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"paintWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    CSS.paintWorklet.addModule(<span class=\"hljs-string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、使用-Paint-类：\"><a href=\"#3、使用-Paint-类：\" class=\"headerlink\" title=\"3、使用 Paint 类：\"></a>3、使用 Paint 类：</h4><p>CSS 中使用的时候，只需要调用 paint 方法：</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.rect</span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">paint</span>(rect);</span><br><span class=\"line\">  <span class=\"hljs-attribute\">--rect-color</span>: <span class=\"hljs-built_in\">rgb</span>(255, 64, 129);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。</p>\n<h2 id=\"进阶：实现动态波纹\"><a href=\"#进阶：实现动态波纹\" class=\"headerlink\" title=\"进阶：实现动态波纹\"></a>进阶：实现动态波纹</h2><p>根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"wave\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-id\">#wave</span> &#123;</span></span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    height: 70vh;</span><br><span class=\"line\">    margin: 10vh auto;</span><br><span class=\"line\"><span class=\"hljs-css\">    <span class=\"hljs-selector-tag\">background-color</span>: <span class=\"hljs-selector-id\">#ff3e81</span>;</span></span><br><span class=\"line\">    background-image: paint(wave);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"paintWorklet\"</span> <span class=\"hljs-keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    CSS.paintWorklet.addModule(<span class=\"hljs-string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-keyword\">const</span> wave = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#wave\"</span>);</span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-keyword\">let</span> tick = <span class=\"hljs-number\">0</span>;  </span></span><br><span class=\"line\"><span class=\"hljs-javascript\">    requestAnimationFrame(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">raf</span>(<span class=\"hljs-params\">now</span>) </span>&#123;</span></span><br><span class=\"line\">      tick += 1;</span><br><span class=\"line\"><span class=\"hljs-javascript\">      wave.style.cssText = <span class=\"hljs-string\">`--animation-tick: <span class=\"hljs-subst\">$&#123;tick&#125;</span>;`</span>;</span></span><br><span class=\"line\">      requestAnimationFrame(raf);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// paintworklet.js</span></span><br><span class=\"line\">registerPaint(<span class=\"hljs-string\">'wave'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> tick = <span class=\"hljs-built_in\">Number</span>(properties.get(<span class=\"hljs-string\">'--animation-tick'</span>));</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> initY = height * <span class=\"hljs-number\">0.4</span>;</span><br><span class=\"line\">    tick = tick * <span class=\"hljs-number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(<span class=\"hljs-number\">0</span>, initY + <span class=\"hljs-built_in\">Math</span>.sin(tick / <span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">10</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      ctx.lineTo(i, initY + <span class=\"hljs-built_in\">Math</span>.sin((i + tick) / <span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, initY + <span class=\"hljs-built_in\">Math</span>.sin(tick / <span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">10</span>);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = <span class=\"hljs-string\">'rgba(255, 255, 255, 0.5)'</span>;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>paintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif\" alt></p>\n<p>然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：</p>\n<h5 id=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"><a href=\"#1）波纹高度（Y）随位置（X）变化而不规则变化\" class=\"headerlink\" title=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"></a>1）波纹高度（Y）随位置（X）变化而不规则变化</h5><p><img src=\"http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg\" alt></p>\n<p>把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；</p>\n<h5 id=\"2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\"><a href=\"#2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\" class=\"headerlink\" title=\"2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\"></a>2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化</h5><p>动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。</p>\n<p>提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？</p>\n<p>为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// paintworklet.js</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> SimplexNoise <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'simplex-noise'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> sim = <span class=\"hljs-keyword\">new</span> SimplexNoise(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">registerPaint(<span class=\"hljs-string\">'wave'</span>, <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> tick = <span class=\"hljs-built_in\">Number</span>(properties.get(<span class=\"hljs-string\">'--animation-tick'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.drawWave(ctx, geom, <span class=\"hljs-string\">'rgba(255, 255, 255, 0.4)'</span>, <span class=\"hljs-number\">0.004</span>, tick, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">0.4</span>);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.drawWave(ctx, geom, <span class=\"hljs-string\">'rgba(255, 255, 255, 0.5)'</span>, <span class=\"hljs-number\">0.006</span>, tick, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0.4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * 绘制波纹</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> initY = height * ih;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> speedT = tick * ratio;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>, speedX = <span class=\"hljs-number\">0</span>; x &lt;= width; x++) &#123;</span><br><span class=\"line\">      speedX += ratio * <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">var</span> y = initY + sim.noise2D(speedX, speedT) * amp;</span><br><span class=\"line\">      ctx[x === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">'moveTo'</span> : <span class=\"hljs-string\">'lineTo'</span>](x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"hljs-number\">0</span>, initY + sim.noise2D(<span class=\"hljs-number\">0</span>, speedT) * amp);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = fillColor;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://www.w3.org/TR/css-paint-api-1/\" target=\"_blank\" rel=\"noopener\">CSS Painting API Level 1</a><br><a href=\"https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/\" target=\"_blank\" rel=\"noopener\">CSS Layout API Level 1</a><br><a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"noopener\">CSS 魔術師 Houdini API 介紹</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>CSS Houdini 号称 CSS 领域最令人振奋的革新。CSS 本身长期欠缺语法特性，可拓展性几乎为零，并且新特性的支持效率太低，兼容性差。而 Houdini 直接将 CSS 的 API 暴露给开发者，以往完全黑盒的浏览器解析流开始对外开放，开发者可以自定义属于自己的 CSS 属性，从而定制和扩展浏览器的展示行为。</p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们知道，浏览器在渲染页面时，首先会解析页面的 HTML 和 CSS，生成渲染树（rendering tree），再经由布局（layout）和绘制（painting），呈现出整个页面内容。在 Houdini 出现之前，这个流程上我们能操作的空间少之甚少，尤其是 layout 和 painting 环节，可以说是完全封闭，使得我们很难通过 polyfill 等类似的手段为欠支持的 CSS 特性提供兼容。而另一方面，语法特性的缺失也极大地限制了 CSS 的编程灵活性，社区中 sass、less、stylus 等 CSS 预处理技术的出现大多都源于这个原因，它们都希望通过预编译，突破 CSS 的局限性，让 CSS 拥有更强大的组织和编写能力。所以慢慢地，我们都不再手写 CSS，更方便、更灵活的 CSS 扩展语言成了 web 开发的主角。看到这样的情况，CSS Houdini 终于坐不住了。</p>\n<h2 id=\"什么是-CSS-Houdini？\"><a href=\"#什么是-CSS-Houdini？\" class=\"headerlink\" title=\"什么是 CSS Houdini？\"></a>什么是 CSS Houdini？</h2><p>CSS Houdini 对外开放了浏览器解析流程的一系列 API，这些 API 允许开发者介入浏览器的 CSS engine 运作，带来了更多的 CSS 解决方案。</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/68616/22/5220/46079/5d35ae6cE910a7d93/c4847bf0290cc197.png\" alt></p>\n<p>CSS Houdini 目前主要提供了以下几个 API：</p>\n<h4 id=\"CSS-Properties-and-Values-API\"><a href=\"#CSS-Properties-and-Values-API\" class=\"headerlink\" title=\"CSS Properties and Values API\"></a>CSS Properties and Values API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/62083/29/7239/130597/5d552adfE3e66fe18/f2cd80f6ff6b96ef.png\" alt></p>\n<p>允许在 CSS 中定义变量和使用变量，是目前支持程度最高的一个 API。CSS 变量以 <code>--</code> 开头，通过 <code>var()</code> 调用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--font-color</span>: <span class=\"number\">#9e4a9b</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外，CSS 变量也可以在其他节点中使用，只不过是有作用域限制的，也就是说自身定义的 CSS 变量只能被自身或自身的子节点使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--font-color</span>: <span class=\"number\">#9e4a9b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--font-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义和使用 CSS 变量可以让我们的 CSS 代码变得更加简洁明了，比如我们可以单纯通过改变变量来改变 box-shadow 的颜色：</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.text</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: <span class=\"number\">#3a4ba2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"built_in\">var</span>(--box-shadow-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.text</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: <span class=\"number\">#7f2c2b</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Painting-API\"><a href=\"#Painting-API\" class=\"headerlink\" title=\"Painting API\"></a>Painting API</h4><p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/44659/25/7169/119642/5d552a70Ea58b14ae/de69915b1641efad.png\" alt></p>\n<p>允许开发者编写自己的 Paint Module，自定义诸如 background-image 这类的绘制属性。自定义的重点在于，”怎么画” 的逻辑需要我们来描述，因此我们利用 registerPaint 来描述我们的绘制逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"string\">'rect'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  paint(ctx, size, properties, args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @TODO</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>registerPaint 方法注册了一个 Paint 类 rect 以供调用，这个类的核心在于它的 paint 方法。paint 方法用于描述自定义的绘制逻辑，它接收四个参数：</p>\n<ul>\n<li><code>ctx</code>：一个 Canvas 的 Context 对象，因此 paint 中的绘制方式跟 canvas 绘制是一样的。</li>\n<li><code>size</code>：包含节点的尺寸信息，同时也是 canvas 可绘制范围（画板）的尺寸信息。</li>\n<li><code>properties</code>：包含节点的 CSS 属性，需要调用静态方法 <code>inputProperties</code> 声明注入。</li>\n<li><code>args</code>: CSS 中调用 Paint 类时传入的参数，需要调用静态方法 <code>inputArguments</code> 声明注入。</li>\n</ul>\n<p>编写完 Paint 类之后，我们在 CSS 中只需要这样调用，就能应用到我们自定义的绘制逻辑：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">paint</span>(rect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Painting API 目前在高版本 Chrome、Opera 浏览器已有支持，且实现起来比较简单，后边我们还将通过 demo 进一步演示。</p>\n<h4 id=\"Layout-API\"><a href=\"#Layout-API\" class=\"headerlink\" title=\"Layout API\"></a>Layout API</h4><p>允许开发者编写自己的 Layout Module，自定义诸如 display 这类的布局属性。同样的，”如何布局” 的逻辑需要我们自己编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerLayout(<span class=\"string\">'block-like'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  layout(children, edges, constraints, properties, breakToken) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @TODO</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// inlineSize: number,</span></span><br><span class=\"line\">      <span class=\"comment\">// blockSize: number,</span></span><br><span class=\"line\">      <span class=\"comment\">// autoBlockSize: number,</span></span><br><span class=\"line\">      <span class=\"comment\">// childFragments: sequence&lt;LayoutFragment&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>registerLayout 方法用于注册一个 Layout 类以供调用，它的 layout 方法用于描述自定义的布局逻辑，最终返回一个包含布局后的位置尺寸信息和子节点序列信息的对象，引擎将根据这个对象进行布局渲染。</p>\n<p>同样的，调用时只需：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: <span class=\"built_in\">layout</span>(<span class=\"string\">'block-like'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此利用 Layout API，你完全可以实现对 flex 布局的手工兼容。相比 Painting，Layout 的编写显得更加复杂，涉及到盒模型的深入概念，且支持度不高，这里就不细讲了。</p>\n<h4 id=\"Worklets\"><a href=\"#Worklets\" class=\"headerlink\" title=\"Worklets\"></a>Worklets</h4><p>registerPaint、registerLayout 这些 API 在全局上并不存在，为什么可以直接调用呢？这是因为上述的 JS 代码并不是直接执行的，而是通过 Worklets 载入执行的。Worklets 类似于 Web Worker，是一个运行于主代码之外的独立工作进程，但比 Worker 更为轻量，负责 CSS 渲染任务是最合适的了。和 Web Worker 一样，Worklets 拥有一个隔离于主进程的全局空间，在这个空间里，没有 window 对象，却有 registerPaint、registerLayout 这些全局 API。因此，我们需要这样引入自定义 JS 代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"paintWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.paintWorklet.addModule(<span class=\"string\">\"paintworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"layoutWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span><br><span class=\"line\">  CSS.layoutWorklet.addModule(<span class=\"string\">\"layoutworklet.js\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础：三步用上-Painting-API\"><a href=\"#基础：三步用上-Painting-API\" class=\"headerlink\" title=\"基础：三步用上 Painting API\"></a>基础：三步用上 Painting API</h2><p>我们来自定义 background-image 属性，它将用于给作用节点绘制一个矩形背景，背景色值由该节点上的一个 CSS 变量 <code>--rect-color</code> 指定。</p>\n<h4 id=\"1、编写一个-Paint-类：\"><a href=\"#1、编写一个-Paint-类：\" class=\"headerlink\" title=\"1、编写一个 Paint 类：\"></a>1、编写一个 Paint 类：</h4><p>新建一个 paintworklet.js，利用 registerPaint 方法注册一个 Paint 类 rect，定义属性的绘制逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerPaint(<span class=\"string\">\"rect\"</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">\"--rect-color\"</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> color = properties.get(<span class=\"string\">\"--rect-color\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    ctx.fillStyle = color;</span><br><span class=\"line\">    ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, geom.width, geom.height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上边定义了一个名为 rect 的 Paint 类，当 rect 被使用时，会实例化 rect 并自动触发 paint 方法执行渲染。paint 方法中，我们获取节点 CSS 定义的 <code>--rect-color</code> 变量，并将元素的背景填充为指定颜色。由于需要使用属性 <code>--rect-color</code>，我们需要在静态方法 <code>inputProperties</code> 中声明。</p>\n<h4 id=\"2、Worklets-加载-Paint-类：\"><a href=\"#2、Worklets-加载-Paint-类：\" class=\"headerlink\" title=\"2、Worklets 加载 Paint 类：\"></a>2、Worklets 加载 Paint 类：</h4><p>HTML 中通过 Worklets 载入上一步骤实现的 paintworklet.js 并注册 Paint 类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rect\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"paintWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    CSS.paintWorklet.addModule(<span class=\"string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、使用-Paint-类：\"><a href=\"#3、使用-Paint-类：\" class=\"headerlink\" title=\"3、使用 Paint 类：\"></a>3、使用 Paint 类：</h4><p>CSS 中使用的时候，只需要调用 paint 方法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.rect</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">paint</span>(rect);</span><br><span class=\"line\">  <span class=\"attribute\">--rect-color</span>: <span class=\"built_in\">rgb</span>(255, 64, 129);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看得出利用 CSS Houdini，我们可以像操作 canvas 一样灵活自如地实现我们想要的样式功能。</p>\n<h2 id=\"进阶：实现动态波纹\"><a href=\"#进阶：实现动态波纹\" class=\"headerlink\" title=\"进阶：实现动态波纹\"></a>进阶：实现动态波纹</h2><p>根据上述步骤，我们演示一下如何用 CSS Painting API 实现一个动态波浪的效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wave\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-id\">#wave</span> &#123;</span></span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    height: 70vh;</span><br><span class=\"line\">    margin: 10vh auto;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff3e81</span>;</span></span><br><span class=\"line\">    background-image: paint(wave);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"paintWorklet\"</span> <span class=\"keyword\">in</span> CSS) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    CSS.paintWorklet.addModule(<span class=\"string\">\"paintworklet.js\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> wave = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#wave\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> tick = <span class=\"number\">0</span>;  </span></span><br><span class=\"line\"><span class=\"javascript\">    requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">raf</span>(<span class=\"params\">now</span>) </span>&#123;</span></span><br><span class=\"line\">      tick += 1;</span><br><span class=\"line\"><span class=\"javascript\">      wave.style.cssText = <span class=\"string\">`--animation-tick: <span class=\"subst\">$&#123;tick&#125;</span>;`</span>;</span></span><br><span class=\"line\">      requestAnimationFrame(raf);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// paintworklet.js</span></span><br><span class=\"line\">registerPaint(<span class=\"string\">'wave'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tick = <span class=\"built_in\">Number</span>(properties.get(<span class=\"string\">'--animation-tick'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initY = height * <span class=\"number\">0.4</span>;</span><br><span class=\"line\">    tick = tick * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(<span class=\"number\">0</span>, initY + <span class=\"built_in\">Math</span>.sin(tick / <span class=\"number\">20</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      ctx.lineTo(i, initY + <span class=\"built_in\">Math</span>.sin((i + tick) / <span class=\"number\">20</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, initY + <span class=\"built_in\">Math</span>.sin(tick / <span class=\"number\">20</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = <span class=\"string\">'rgba(255, 255, 255, 0.5)'</span>;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>paintworklet 中，利用 sin 函数绘制波浪线，由于 AnimationWorklets 尚处于实验阶段，开放较少，这里我们在 worklet 外部用 requestAnimationFrame API 来做动画驱动，让波浪纹动起来。完成后能看到下边这样的效果。</p>\n<p><img src=\"http://img11.360buyimg.com/jdphoto/jfs/t1/62725/39/5284/51731/5d370c8dE7f7aa85c/742a46388ea6a1c6.gif\" alt></p>\n<p>然而事实上这个效果略显僵硬，sin 函数太过于规则了，现实中的波浪应该是不规则波动的，这种不规则主要体现在两个方面：</p>\n<h5 id=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"><a href=\"#1）波纹高度（Y）随位置（X）变化而不规则变化\" class=\"headerlink\" title=\"1）波纹高度（Y）随位置（X）变化而不规则变化\"></a>1）波纹高度（Y）随位置（X）变化而不规则变化</h5><p><img src=\"http://img14.360buyimg.com/jdphoto/s900x500_jfs/t1/40083/3/12170/6523/5d3671ebE5dd16e72/2b687d898da5cd39.jpg\" alt></p>\n<p>把图按照 x-y 正交分解之后，我们希望的不规则，可以认为是固定某一时刻，随着 x 轴变化，波纹高度 y 呈现不规则变化；</p>\n<h5 id=\"2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\"><a href=\"#2）固定某点（X-固定），波纹高度（Y）随时间推进而不规则变化\" class=\"headerlink\" title=\"2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化\"></a>2）固定某点（X 固定），波纹高度（Y）随时间推进而不规则变化</h5><p>动态过程需要考虑时间维度，我们希望的不规则，还需要体现在时间的影响中，比如风吹过的前一秒和后一秒，同一个位置的波浪高度肯定是不规则变化的。</p>\n<p>提到不规则，有朋友可能想到了用 Math.random 方法，然而这里的不规则并不适合用随机数来实现，因为前后两次取的随机数是不连续的，而前后两个点的波浪是连续的。这个不难理解，你见过长成锯齿状的波浪吗？又或者你见过上一刻 10 米高、下一刻就掉到 2 米的波浪吗？</p>\n<p>为了实现这种连续不规则的特征，我们弃用 sin 函数，引入了一个包 simplex-noise。由于影响波高的有两个维度，位置 X 和时间 T，这里需要用到 noise2D 方法，它提前在一个三维的空间中，构建了一个连续的不规则曲面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// paintworklet.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimplexNoise <span class=\"keyword\">from</span> <span class=\"string\">'simplex-noise'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sim = <span class=\"keyword\">new</span> SimplexNoise(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">registerPaint(<span class=\"string\">'wave'</span>, <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> inputProperties() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'--animation-tick'</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  paint(ctx, geom, properties) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tick = <span class=\"built_in\">Number</span>(properties.get(<span class=\"string\">'--animation-tick'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawWave(ctx, geom, <span class=\"string\">'rgba(255, 255, 255, 0.4)'</span>, <span class=\"number\">0.004</span>, tick, <span class=\"number\">15</span>, <span class=\"number\">0.4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawWave(ctx, geom, <span class=\"string\">'rgba(255, 255, 255, 0.5)'</span>, <span class=\"number\">0.006</span>, tick, <span class=\"number\">12</span>, <span class=\"number\">0.4</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 绘制波纹</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  drawWave(ctx, geom, fillColor, ratio, tick, amp, ih) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      width,</span><br><span class=\"line\">      height</span><br><span class=\"line\">    &#125; = geom;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> initY = height * ih;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> speedT = tick * ratio;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x = <span class=\"number\">0</span>, speedX = <span class=\"number\">0</span>; x &lt;= width; x++) &#123;</span><br><span class=\"line\">      speedX += ratio * <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> y = initY + sim.noise2D(speedX, speedT) * amp;</span><br><span class=\"line\">      ctx[x === <span class=\"number\">0</span> ? <span class=\"string\">'moveTo'</span> : <span class=\"string\">'lineTo'</span>](x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.lineTo(width, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, height);</span><br><span class=\"line\">    ctx.lineTo(<span class=\"number\">0</span>, initY + sim.noise2D(<span class=\"number\">0</span>, speedT) * amp);</span><br><span class=\"line\">    ctx.closePath();</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.fillStyle = fillColor;</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改峰值和偏置项等参数，可以再画多一个不一样的波浪纹，效果如下，完工！</p>\n<p><img src=\"http://img10.360buyimg.com/wq/jfs/t1/53549/28/5908/185285/5d388198E26af6da0/3a083165ba78d400.gif\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://www.w3.org/TR/css-paint-api-1/\" target=\"_blank\" rel=\"noopener\">CSS Painting API Level 1</a><br><a href=\"https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/\" target=\"_blank\" rel=\"noopener\">CSS Layout API Level 1</a><br><a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"noopener\">CSS 魔術師 Houdini API 介紹</a></p>\n</blockquote>"},{"title":"Javascript抽象语法树上篇(基础篇)","subtitle":"介绍AST基础、规范解读、业界现状","cover":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","thumbnail":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","date":"2019-07-19T14:00:00.000Z","author":{"nick":"陈晓强","github_name":"chenxiaoqiang12"},"_content":"\n\n# 一、基础\n\n## 为什么要了解抽象语法树\n日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。\n<!--more-->\n## 什么是抽象语法树\n抽象语法树即：Abstract Syntax Tree。简称AST，见下图。\n1. 图中code先经过parse转换成一个树状数据结构\n2. 接着对树中节点进行转换，图中将叶子节点对换位置\n3. 将树状结构通过generate再生成code\n\n图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。\n\n![AST示例](https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png)  \n\n## 如何获得抽象语法树\n获得抽象语法树的过程为：代码 => 词法分析 => 语法分析 => AST  \n`词法分析`：把字符串形式的代码转换为令牌（tokens）流。  \n`语法分析`：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。  \n如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中`function`、`square`、`(`、`)`、`{`、`}`等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成`二元表达式`，关键词return与二元表达式组合成`return语句`。最后组合成一个`函数声明语句`。\n\n![语法分析](https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg)\n\n# 二、规范\n如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构\n\n![AST结构](https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg)\n\n那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。\n\n## 规范起源\n在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是[Parser_API](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[1]</sup>，后来被人整理到github项目[estree](https://github.com/estree/estree)<sup>[2]</sup>，慢慢的成了业界的规范。\n## 规范解读\n上面提到的`Parser_API`是规范的原文，中文版:[Parser_API](https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目[estree](https://github.com/estree/estree)，打开项目地址，如下图\n![estree](https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg)  \n其中最下面的`es5.md`为ES5规范，仅列出ES5的内容，`es2015.md`为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的`es2019.md`即ES10是对ES9的补充，仅有一条规则。\n\n打开最基础的`es5.md`，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用https://astexplorer.net/ 辅助阅读，可以实时输出AST。\n- [Node objects](###node-objects)\n- [Programs](###programs)\n- [Identifier](###identifier)\n- [Literal](###literal)\n- [Functions](###functions)\n- [Statements](###statements)\n- [Declarations](###declarations)\n- [Expressions](###expressions)\n- [Patterns](###patterns)\n\n\n### Node objects\n\n```js\ninterface Node {\n    type: string;\n    loc: SourceLocation | null;\n}\n```\n\n定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段\n\n`type`字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口  \n`loc`字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下\n\n```js\ninterface SourceLocation {\n    source: string | null;\n    start: Position;\n    end: Position;\n}\n```\n\n每个 `Position` 对象包含了行（从1开始）和列（从0开始）信息，接口如下\n\n```js\ninterface Position {\n    line: number; // >= 1\n    column: number; // >= 0\n}\n```\n\n### Programs\n\n```js\ninterface Program <: Node {\n    type: \"Program\";\n    body: [ Directive | Statement ];\n}\n```\n\n一棵完整的程序代码树，一般作为根节点\n\n### Identifier\n\n```js\ninterface Identifier <: Expression, Pattern {\n    type: \"Identifier\";\n    name: string;\n}\n```\n标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。\n\n### Literal\n\n```js\ninterface Literal <: Expression {\n    type: \"Literal\";\n    value: string | boolean | null | number | RegExp;\n}\n```\n字面量，如`“hello”`、`true`、`null`、`100`、`/\\d/`这些，注意字面量本身也是一个表达式语句(ExpressionStatement)\n\n### Functions\n\n```js\ninterface Function <: Node {\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: FunctionBody;\n}\n```\n\n一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。\n\n### Statements\n\n```js\ninterface Statement <: Node { }\n```\n语句，子类有很多，`块语句`、`if/switch语句`、`return语句`、`for/while语句`、`with语句`等等\n\n### Declarations\n\n```js\ninterface Declaration <: Statement { }\n```\n声明，子类主要有变量申明、函数声明。\n\n### Expressions\n\n```js\ninterface Expression <: Node { }\n```\n表达式，子类很多，有二元表达式(`n*n`)、函数表达式(var fun = `function(){}`)、数组表达式(var arr = `[]`)、对象表达式(var obj = `{}`)、赋值表达式(`a = 1`)等等\n\n### Patterns\n\n```js\ninterface Pattern <: Node { }\n```\n\n模式，主要在 ES6 的解构赋值中有意义(let `{name}` = user，其中{name}部分为`ObjectPattern`)，在 ES5 中，可以理解为和`Identifier` 差不多的东西。\n\n# 三、现状\n通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST\n- Esprima，比较经典，出现的比较早\n- Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析\n- UglifyJS2，主要用于代码压缩\n- babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser\n- Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代\n- flow、shift等等\n\nAST基础篇介绍完毕，下篇将从实践的角度继续介绍\n\n**References**  \n[1] Parser_API：https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API  \n[2] estree：https://github.com/estree/estree  \n[3] Parser_API(中文)：https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API  ","source":"_posts/2019-08/Javascript抽象语法树上篇(基础篇).md","raw":"---\ntitle: Javascript抽象语法树上篇(基础篇)\nsubtitle: 介绍AST基础、规范解读、业界现状\ncover: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\nthumbnail: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\ndate: 2019-07-19 22:00:00\ntags: \n  - AST\ncategories: NodeJS\nauthor:\n    nick: 陈晓强\n    github_name: chenxiaoqiang12\n---\n\n\n# 一、基础\n\n## 为什么要了解抽象语法树\n日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。\n<!--more-->\n## 什么是抽象语法树\n抽象语法树即：Abstract Syntax Tree。简称AST，见下图。\n1. 图中code先经过parse转换成一个树状数据结构\n2. 接着对树中节点进行转换，图中将叶子节点对换位置\n3. 将树状结构通过generate再生成code\n\n图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。\n\n![AST示例](https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png)  \n\n## 如何获得抽象语法树\n获得抽象语法树的过程为：代码 => 词法分析 => 语法分析 => AST  \n`词法分析`：把字符串形式的代码转换为令牌（tokens）流。  \n`语法分析`：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。  \n如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中`function`、`square`、`(`、`)`、`{`、`}`等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成`二元表达式`，关键词return与二元表达式组合成`return语句`。最后组合成一个`函数声明语句`。\n\n![语法分析](https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg)\n\n# 二、规范\n如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构\n\n![AST结构](https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg)\n\n那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。\n\n## 规范起源\n在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是[Parser_API](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[1]</sup>，后来被人整理到github项目[estree](https://github.com/estree/estree)<sup>[2]</sup>，慢慢的成了业界的规范。\n## 规范解读\n上面提到的`Parser_API`是规范的原文，中文版:[Parser_API](https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API)<sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目[estree](https://github.com/estree/estree)，打开项目地址，如下图\n![estree](https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg)  \n其中最下面的`es5.md`为ES5规范，仅列出ES5的内容，`es2015.md`为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的`es2019.md`即ES10是对ES9的补充，仅有一条规则。\n\n打开最基础的`es5.md`，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用https://astexplorer.net/ 辅助阅读，可以实时输出AST。\n- [Node objects](###node-objects)\n- [Programs](###programs)\n- [Identifier](###identifier)\n- [Literal](###literal)\n- [Functions](###functions)\n- [Statements](###statements)\n- [Declarations](###declarations)\n- [Expressions](###expressions)\n- [Patterns](###patterns)\n\n\n### Node objects\n\n```js\ninterface Node {\n    type: string;\n    loc: SourceLocation | null;\n}\n```\n\n定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段\n\n`type`字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口  \n`loc`字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下\n\n```js\ninterface SourceLocation {\n    source: string | null;\n    start: Position;\n    end: Position;\n}\n```\n\n每个 `Position` 对象包含了行（从1开始）和列（从0开始）信息，接口如下\n\n```js\ninterface Position {\n    line: number; // >= 1\n    column: number; // >= 0\n}\n```\n\n### Programs\n\n```js\ninterface Program <: Node {\n    type: \"Program\";\n    body: [ Directive | Statement ];\n}\n```\n\n一棵完整的程序代码树，一般作为根节点\n\n### Identifier\n\n```js\ninterface Identifier <: Expression, Pattern {\n    type: \"Identifier\";\n    name: string;\n}\n```\n标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。\n\n### Literal\n\n```js\ninterface Literal <: Expression {\n    type: \"Literal\";\n    value: string | boolean | null | number | RegExp;\n}\n```\n字面量，如`“hello”`、`true`、`null`、`100`、`/\\d/`这些，注意字面量本身也是一个表达式语句(ExpressionStatement)\n\n### Functions\n\n```js\ninterface Function <: Node {\n    id: Identifier | null;\n    params: [ Pattern ];\n    body: FunctionBody;\n}\n```\n\n一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。\n\n### Statements\n\n```js\ninterface Statement <: Node { }\n```\n语句，子类有很多，`块语句`、`if/switch语句`、`return语句`、`for/while语句`、`with语句`等等\n\n### Declarations\n\n```js\ninterface Declaration <: Statement { }\n```\n声明，子类主要有变量申明、函数声明。\n\n### Expressions\n\n```js\ninterface Expression <: Node { }\n```\n表达式，子类很多，有二元表达式(`n*n`)、函数表达式(var fun = `function(){}`)、数组表达式(var arr = `[]`)、对象表达式(var obj = `{}`)、赋值表达式(`a = 1`)等等\n\n### Patterns\n\n```js\ninterface Pattern <: Node { }\n```\n\n模式，主要在 ES6 的解构赋值中有意义(let `{name}` = user，其中{name}部分为`ObjectPattern`)，在 ES5 中，可以理解为和`Identifier` 差不多的东西。\n\n# 三、现状\n通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST\n- Esprima，比较经典，出现的比较早\n- Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析\n- UglifyJS2，主要用于代码压缩\n- babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser\n- Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代\n- flow、shift等等\n\nAST基础篇介绍完毕，下篇将从实践的角度继续介绍\n\n**References**  \n[1] Parser_API：https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API  \n[2] estree：https://github.com/estree/estree  \n[3] Parser_API(中文)：https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API  ","slug":"Javascript抽象语法树上篇(基础篇)","published":1,"updated":"2019-09-03T14:16:54.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0dnoh8w0001hm9fii3v1cw4","content":"<h1 id=\"一、基础\"><a href=\"#一、基础\" class=\"headerlink\" title=\"一、基础\"></a>一、基础</h1><h2 id=\"为什么要了解抽象语法树\"><a href=\"#为什么要了解抽象语法树\" class=\"headerlink\" title=\"为什么要了解抽象语法树\"></a>为什么要了解抽象语法树</h2><p>日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h2><p>抽象语法树即：Abstract Syntax Tree。简称AST，见下图。</p>\n<ol>\n<li>图中code先经过parse转换成一个树状数据结构</li>\n<li>接着对树中节点进行转换，图中将叶子节点对换位置</li>\n<li>将树状结构通过generate再生成code</li>\n</ol>\n<p>图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\" alt=\"AST示例\">  </p>\n<h2 id=\"如何获得抽象语法树\"><a href=\"#如何获得抽象语法树\" class=\"headerlink\" title=\"如何获得抽象语法树\"></a>如何获得抽象语法树</h2><p>获得抽象语法树的过程为：代码 =&gt; 词法分析 =&gt; 语法分析 =&gt; AST<br><code>词法分析</code>：把字符串形式的代码转换为令牌（tokens）流。<br><code>语法分析</code>：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。<br>如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中<code>function</code>、<code>square</code>、<code>(</code>、<code>)</code>、<code>{</code>、<code>}</code>等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成<code>二元表达式</code>，关键词return与二元表达式组合成<code>return语句</code>。最后组合成一个<code>函数声明语句</code>。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg\" alt=\"语法分析\"></p>\n<h1 id=\"二、规范\"><a href=\"#二、规范\" class=\"headerlink\" title=\"二、规范\"></a>二、规范</h1><p>如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg\" alt=\"AST结构\"></p>\n<p>那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。</p>\n<h2 id=\"规范起源\"><a href=\"#规范起源\" class=\"headerlink\" title=\"规范起源\"></a>规范起源</h2><p>在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[1]</sup>，后来被人整理到github项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a><sup>[2]</sup>，慢慢的成了业界的规范。</p>\n<h2 id=\"规范解读\"><a href=\"#规范解读\" class=\"headerlink\" title=\"规范解读\"></a>规范解读</h2><p>上面提到的<code>Parser_API</code>是规范的原文，中文版:<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a>，打开项目地址，如下图<br><img src=\"https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg\" alt=\"estree\"><br>其中最下面的<code>es5.md</code>为ES5规范，仅列出ES5的内容，<code>es2015.md</code>为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的<code>es2019.md</code>即ES10是对ES9的补充，仅有一条规则。</p>\n<p>打开最基础的<code>es5.md</code>，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 辅助阅读，可以实时输出AST。</p>\n<ul>\n<li><a href=\"###node-objects\">Node objects</a></li>\n<li><a href=\"###programs\">Programs</a></li>\n<li><a href=\"###identifier\">Identifier</a></li>\n<li><a href=\"###literal\">Literal</a></li>\n<li><a href=\"###functions\">Functions</a></li>\n<li><a href=\"###statements\">Statements</a></li>\n<li><a href=\"###declarations\">Declarations</a></li>\n<li><a href=\"###expressions\">Expressions</a></li>\n<li><a href=\"###patterns\">Patterns</a></li>\n</ul>\n<h3 id=\"Node-objects\"><a href=\"#Node-objects\" class=\"headerlink\" title=\"Node objects\"></a>Node objects</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Node &#123;</span><br><span class=\"line\">    type: string;</span><br><span class=\"line\">    loc: SourceLocation | <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段</p>\n<p><code>type</code>字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口<br><code>loc</code>字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SourceLocation &#123;</span><br><span class=\"line\">    source: string | <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">    start: Position;</span><br><span class=\"line\">    end: Position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个 <code>Position</code> 对象包含了行（从1开始）和列（从0开始）信息，接口如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Position &#123;</span><br><span class=\"line\">    line: number; <span class=\"hljs-comment\">// &gt;= 1</span></span><br><span class=\"line\">    column: number; <span class=\"hljs-comment\">// &gt;= 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Programs\"><a href=\"#Programs\" class=\"headerlink\" title=\"Programs\"></a>Programs</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Program &lt;: Node &#123;</span><br><span class=\"line\">    type: <span class=\"hljs-string\">\"Program\"</span>;</span><br><span class=\"line\">    body: [ Directive | Statement ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一棵完整的程序代码树，一般作为根节点</p>\n<h3 id=\"Identifier\"><a href=\"#Identifier\" class=\"headerlink\" title=\"Identifier\"></a>Identifier</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Identifier &lt;: Expression, Pattern &#123;</span><br><span class=\"line\">    type: <span class=\"hljs-string\">\"Identifier\"</span>;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。</p>\n<h3 id=\"Literal\"><a href=\"#Literal\" class=\"headerlink\" title=\"Literal\"></a>Literal</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Literal &lt;: Expression &#123;</span><br><span class=\"line\">    type: <span class=\"hljs-string\">\"Literal\"</span>;</span><br><span class=\"line\">    value: string | boolean | <span class=\"hljs-literal\">null</span> | number | <span class=\"hljs-built_in\">RegExp</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字面量，如<code>“hello”</code>、<code>true</code>、<code>null</code>、<code>100</code>、<code>/\\d/</code>这些，注意字面量本身也是一个表达式语句(ExpressionStatement)</p>\n<h3 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"hljs-built_in\">Function</span> &lt;: Node &#123;</span><br><span class=\"line\">    id: Identifier | <span class=\"hljs-literal\">null</span>;</span><br><span class=\"line\">    params: [ Pattern ];</span><br><span class=\"line\">    body: FunctionBody;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。</p>\n<h3 id=\"Statements\"><a href=\"#Statements\" class=\"headerlink\" title=\"Statements\"></a>Statements</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Statement &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>语句，子类有很多，<code>块语句</code>、<code>if/switch语句</code>、<code>return语句</code>、<code>for/while语句</code>、<code>with语句</code>等等</p>\n<h3 id=\"Declarations\"><a href=\"#Declarations\" class=\"headerlink\" title=\"Declarations\"></a>Declarations</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Declaration &lt;: Statement &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明，子类主要有变量申明、函数声明。</p>\n<h3 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Expression &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式，子类很多，有二元表达式(<code>n*n</code>)、函数表达式(var fun = <code>function(){}</code>)、数组表达式(var arr = <code>[]</code>)、对象表达式(var obj = <code>{}</code>)、赋值表达式(<code>a = 1</code>)等等</p>\n<h3 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h3><figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Pattern &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>模式，主要在 ES6 的解构赋值中有意义(let <code>{name}</code> = user，其中{name}部分为<code>ObjectPattern</code>)，在 ES5 中，可以理解为和<code>Identifier</code> 差不多的东西。</p>\n<h1 id=\"三、现状\"><a href=\"#三、现状\" class=\"headerlink\" title=\"三、现状\"></a>三、现状</h1><p>通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST</p>\n<ul>\n<li>Esprima，比较经典，出现的比较早</li>\n<li>Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析</li>\n<li>UglifyJS2，主要用于代码压缩</li>\n<li>babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser</li>\n<li>Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代</li>\n<li>flow、shift等等</li>\n</ul>\n<p>AST基础篇介绍完毕，下篇将从实践的角度继续介绍</p>\n<p><strong>References</strong><br>[1] Parser_API：<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a><br>[2] estree：<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">https://github.com/estree/estree</a><br>[3] Parser_API(中文)：<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a>  </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、基础\"><a href=\"#一、基础\" class=\"headerlink\" title=\"一、基础\"></a>一、基础</h1><h2 id=\"为什么要了解抽象语法树\"><a href=\"#为什么要了解抽象语法树\" class=\"headerlink\" title=\"为什么要了解抽象语法树\"></a>为什么要了解抽象语法树</h2><p>日常工作中，我们会碰到js代码解析的场景，比如分析代码中require了哪些包，有些什么关键API调用，大部分情况使用正则表达式来处理，可一旦场景复杂，或者依赖于代码上下文时，正则就很难处理了，这时候就要用到抽象语法树。常见的uglify、eslint、babel、webpack等等都是基于抽象语法树来处理的，如此强大，有必要好好了解一下。</p>","more":"<h2 id=\"什么是抽象语法树\"><a href=\"#什么是抽象语法树\" class=\"headerlink\" title=\"什么是抽象语法树\"></a>什么是抽象语法树</h2><p>抽象语法树即：Abstract Syntax Tree。简称AST，见下图。</p>\n<ol>\n<li>图中code先经过parse转换成一个树状数据结构</li>\n<li>接着对树中节点进行转换，图中将叶子节点对换位置</li>\n<li>将树状结构通过generate再生成code</li>\n</ol>\n<p>图中树状数据结构即AST，从这个过程可以看到将代码转成AST后，通过操作节点来改变代码。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x250_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\" alt=\"AST示例\">  </p>\n<h2 id=\"如何获得抽象语法树\"><a href=\"#如何获得抽象语法树\" class=\"headerlink\" title=\"如何获得抽象语法树\"></a>如何获得抽象语法树</h2><p>获得抽象语法树的过程为：代码 =&gt; 词法分析 =&gt; 语法分析 =&gt; AST<br><code>词法分析</code>：把字符串形式的代码转换为令牌（tokens）流。<br><code>语法分析</code>：把一个令牌流转换成 AST 的形式。这个阶段会使用令牌中的信息把它们转换成一个 AST 的表述结构，这样更易于后续的操作。<br>如下图，代码为一个简单的函数声明。词法分析阶段，将代码作为字符串输入获得关键词，图中<code>function</code>、<code>square</code>、<code>(</code>、<code>)</code>、<code>{</code>、<code>}</code>等都被识别为关键词(稍微回忆下编译原理，字符挨个入栈，符合一定规则即出栈)。语法分析阶段，对关键词的组合形成一个个节点，如n*n这3个关键词组合成<code>二元表达式</code>，关键词return与二元表达式组合成<code>return语句</code>。最后组合成一个<code>函数声明语句</code>。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x505_jfs/t1/67215/22/6748/65259/5d4b98d6E32a2feb2/4bc376c9987dec15.jpg\" alt=\"语法分析\"></p>\n<h1 id=\"二、规范\"><a href=\"#二、规范\" class=\"headerlink\" title=\"二、规范\"></a>二、规范</h1><p>如何获得AST已经简单介绍了，那AST最终应该以什么样的数据结构存在呢，先看看上述函数声明的AST结构</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s1000x1000_jfs/t1/43930/17/12779/134361/5d5e7fb9E1fab10c2/ab0d1ed9d9d1f174.jpg\" alt=\"AST结构\"></p>\n<p>那解析的依据是什么，为什么要以上图的结构出现，业界已经有了一套成熟的规范。</p>\n<h2 id=\"规范起源\"><a href=\"#规范起源\" class=\"headerlink\" title=\"规范起源\"></a>规范起源</h2><p>在v8引擎之前，最早js引擎是SpiderMonkey，第一个版本由js作者Brendan Eich设计，后交给Mozilla组织维护。js引擎在执行js文件时，都会先将js代码转换成抽象语法树(AST)。有一天，一位Mozilla工程师在FireFox中公开了这个将代码转成AST的解析器Api，也就是<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[1]</sup>，后来被人整理到github项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a><sup>[2]</sup>，慢慢的成了业界的规范。</p>\n<h2 id=\"规范解读\"><a href=\"#规范解读\" class=\"headerlink\" title=\"规范解读\"></a>规范解读</h2><p>上面提到的<code>Parser_API</code>是规范的原文，中文版:<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">Parser_API</a><sup>[3]</sup>，但读起来并不太友好，推荐直接读整理后的git项目<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">estree</a>，打开项目地址，如下图<br><img src=\"https://img11.360buyimg.com/jdphoto/s1000x400_jfs/t1/52416/13/8437/259414/5d5e8084Ee689071b/de6fd0db3a182b11.jpg\" alt=\"estree\"><br>其中最下面的<code>es5.md</code>为ES5规范，仅列出ES5的内容，<code>es2015.md</code>为ES6规范，但只列出了针对ES5新增的内容，依次类推，最后的<code>es2019.md</code>即ES10是对ES9的补充，仅有一条规则。</p>\n<p>打开最基础的<code>es5.md</code>，可以看到所有语法基础，这里跟大家一起读一下大类，细分类别就略过了。读规范时可以使用<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 辅助阅读，可以实时输出AST。</p>\n<ul>\n<li><a href=\"###node-objects\">Node objects</a></li>\n<li><a href=\"###programs\">Programs</a></li>\n<li><a href=\"###identifier\">Identifier</a></li>\n<li><a href=\"###literal\">Literal</a></li>\n<li><a href=\"###functions\">Functions</a></li>\n<li><a href=\"###statements\">Statements</a></li>\n<li><a href=\"###declarations\">Declarations</a></li>\n<li><a href=\"###expressions\">Expressions</a></li>\n<li><a href=\"###patterns\">Patterns</a></li>\n</ul>\n<h3 id=\"Node-objects\"><a href=\"#Node-objects\" class=\"headerlink\" title=\"Node objects\"></a>Node objects</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Node &#123;</span><br><span class=\"line\">    type: string;</span><br><span class=\"line\">    loc: SourceLocation | <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义AST中节点基本类型，其他所有具体节点都需要实现以上接口，即每个节点都必须包含type、loc两个字段</p>\n<p><code>type</code>字段表示不同的节点类型，下边会再讲一下各个类型的情况，分别对应了 JavaScript 中的什么语法。你可以从这个字段看出这个节点实现了哪个接口<br><code>loc</code>字段表示源码的位置信息，如果没有相关信息的话为 null，否则是一个对象，包含了开始和结束的位置。接口如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface SourceLocation &#123;</span><br><span class=\"line\">    source: string | <span class=\"literal\">null</span>;</span><br><span class=\"line\">    start: Position;</span><br><span class=\"line\">    end: Position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个 <code>Position</code> 对象包含了行（从1开始）和列（从0开始）信息，接口如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Position &#123;</span><br><span class=\"line\">    line: number; <span class=\"comment\">// &gt;= 1</span></span><br><span class=\"line\">    column: number; <span class=\"comment\">// &gt;= 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Programs\"><a href=\"#Programs\" class=\"headerlink\" title=\"Programs\"></a>Programs</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Program &lt;: Node &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"Program\"</span>;</span><br><span class=\"line\">    body: [ Directive | Statement ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一棵完整的程序代码树，一般作为根节点</p>\n<h3 id=\"Identifier\"><a href=\"#Identifier\" class=\"headerlink\" title=\"Identifier\"></a>Identifier</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Identifier &lt;: Expression, Pattern &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"Identifier\"</span>;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>标识符，我们写代码时自定义的名称，如变量名、函数名、属性名。</p>\n<h3 id=\"Literal\"><a href=\"#Literal\" class=\"headerlink\" title=\"Literal\"></a>Literal</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Literal &lt;: Expression &#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"Literal\"</span>;</span><br><span class=\"line\">    value: string | boolean | <span class=\"literal\">null</span> | number | <span class=\"built_in\">RegExp</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字面量，如<code>“hello”</code>、<code>true</code>、<code>null</code>、<code>100</code>、<code>/\\d/</code>这些，注意字面量本身也是一个表达式语句(ExpressionStatement)</p>\n<h3 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"built_in\">Function</span> &lt;: Node &#123;</span><br><span class=\"line\">    id: Identifier | <span class=\"literal\">null</span>;</span><br><span class=\"line\">    params: [ Pattern ];</span><br><span class=\"line\">    body: FunctionBody;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个函数声明或者表达式，id是函数名，params是标识符数组，body是函数体，也是一个语句块。</p>\n<h3 id=\"Statements\"><a href=\"#Statements\" class=\"headerlink\" title=\"Statements\"></a>Statements</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Statement &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>语句，子类有很多，<code>块语句</code>、<code>if/switch语句</code>、<code>return语句</code>、<code>for/while语句</code>、<code>with语句</code>等等</p>\n<h3 id=\"Declarations\"><a href=\"#Declarations\" class=\"headerlink\" title=\"Declarations\"></a>Declarations</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Declaration &lt;: Statement &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明，子类主要有变量申明、函数声明。</p>\n<h3 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Expression &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式，子类很多，有二元表达式(<code>n*n</code>)、函数表达式(var fun = <code>function(){}</code>)、数组表达式(var arr = <code>[]</code>)、对象表达式(var obj = <code>{}</code>)、赋值表达式(<code>a = 1</code>)等等</p>\n<h3 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Pattern &lt;: Node &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>模式，主要在 ES6 的解构赋值中有意义(let <code>{name}</code> = user，其中{name}部分为<code>ObjectPattern</code>)，在 ES5 中，可以理解为和<code>Identifier</code> 差不多的东西。</p>\n<h1 id=\"三、现状\"><a href=\"#三、现状\" class=\"headerlink\" title=\"三、现状\"></a>三、现状</h1><p>通过以上规范解读，知道了最终要生成的AST以什么样的结构存在，对于javascript的解析，业界已经有很多成熟的解析器，可以将js代码转换成符合规范的AST</p>\n<ul>\n<li>Esprima，比较经典，出现的比较早</li>\n<li>Acorn，fork自Esprima，代码更精简。webpack使用acorn进行模块解析</li>\n<li>UglifyJS2，主要用于代码压缩</li>\n<li>babylon，babel解析器，fork自Acorn，目前最新版本是babylon7,对应npm包@babel/parser</li>\n<li>Espree，eslint默认的解析器，由于遵循同一套规范，也可以使用babel的解析器替代</li>\n<li>flow、shift等等</li>\n</ul>\n<p>AST基础篇介绍完毕，下篇将从实践的角度继续介绍</p>\n<p><strong>References</strong><br>[1] Parser_API：<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a><br>[2] estree：<a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"noopener\">https://github.com/estree/estree</a><br>[3] Parser_API(中文)：<a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a>  </p>"},{"title":"Javascript抽象语法树下篇(实践篇)","subtitle":"AST应用","cover":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","thumbnail":"https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png","date":"2019-07-20T14:00:00.000Z","author":{"nick":"陈晓强","github_name":"chenxiaoqiang12"},"_content":"\n上篇已经对AST基础做了介绍，本篇介绍AST的运用\n\n## AST应用的三个要点\n1. 需要一个解析器，将代码转换为AST\n2. 需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作\n3. 需要一个代码生成器，能够将AST转换为代码\n<!--more-->\n\n## esprima与babel\n常用的满足上述3个要点的工具包有两个，一个是`esprima`，一个是`babel `\n\nesprima相关包及使用如下\n```js\nconst esprima = require('esprima');   // code => ast\nconst estraverse = require('estraverse'); //ast遍历\nconst escodegen = require('escodegen'); // ast => code\nlet code = 'const a = 1';\nconst ast = esprima.parseScript(code);\nestraverse.traverse(ast, {\n    enter: function (node) {\n        //节点操作\n    }\n});\nconst transformCode = escodegen.generate(ast);\n```\n\nbabel相关包及使用如下\n```js\nconst parser = require('@babel/parser');  //code => ast\nconst traverse = require('@babel/traverse').default; // ast遍历，节点增删改查，作用域处理等\nconst generate = require('@babel/generator').default; // ast => code\nconst t = require('@babel/types'); // 用于AST节点的Lodash式工具库,各节点构造、验证等\nlet code = 'const a = 1';\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  enter (path) { \n    //节点操作\n  }\n})\nconst transformCode = escodegen.generate(ast);\n```\n\n目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。\n\n## 使用babel工具操作AST\n如上一章节所示\n- `@babel/parser`用于将代码转换为AST\n- `@babel/traverse`用于对AST的遍历，包括节点增删改查、作用域等处理\n- `@babel/generator` 用于将AST转换成代码\n- `@babel/types` 用于AST节点操作的Lodash式工具库,各节点构造、验证等\n\n更多api详见[babel手册](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md)<sup>[1]</sup>\n\n下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。\n\n### 案例1:去掉代码中的console.log()\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nfunction square(n) {\n  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n`\nlet ast = parser.parse(sourceCode);\n\u000btraverse(ast, {\n CallExpression(path) {\n  let { callee } = path.node;\n  if (callee.type === ‘MemberExpression’ && callee.object.name === ‘console’ && callee.property.name === ‘log’ ) {\n   path.remove(); // 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除\n  }\n }\n})\u000b\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nfunction square(n) {\n-  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n```\n\n\n此案例涉及知识点\n1. 如何通过\u000btraverse遍历特定节点\n2. 识别出console.log()在规范中属于函数调用表达式,节点类型为`CallExpression`。\n3. console.log本身即`callee`是在对象console上的一个方法，因此`console.log`是一个成员表达式，类型为`MemberExpression`。\n4. `MemberExpression`根据规范有一个`object`属性代表被访问的对象，有一个`property`代表访问的成员。\n5. 通过`path.remove()`api可以对节点进行删除。\n6. 可以通过https://astexplorer.net/ 来辅助对代码节点的识别。注意选择`babylon7`，即babe7,对应`@babel/parser`\n\n\n### 案例2:变量混淆\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nfunction square(number) {\n  console.warn(number);\n  return number * number;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  FunctionDeclaration(path) {\n    let unia = path.scope.generateUidIdentifier(\"a\");\n    path.scope.rename(\"number\",unia.name);\n }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-function square(number) {\n+  function square(_a) {\n-  console.warn(number);\n+  console.warn(_a);\n-  return number * number;\n+  return _a * _a;\n}\n```\n\n此案例涉及知识点\n1. `path.scope`保存了当前作用域的相关信息\n2. 可以通过api对作用域内的变量名进行批量修改操作\n3. 通过`path.scope`可以获得当前作用域唯一标识符，避免变量名冲突\n\n\n\n### 案例3:转换箭头函数并去掉未使用参数\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nnew Promise((resolve,reject)=>{\n  setTimeout(()=>{\n    resolve(1);\n  },200)\n});\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ArrowFunctionExpression (path) { \n    let { id, params, body } = path.node;\n    for(let key in path.scope.bindings){   //注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this\n      if(!path.scope.bindings[key].referenced){\n        params = params.filter(param=>{\n          return param.name!==key;\n        })\n      }\n    }\n  path.replaceWith(t.functionExpression(id, params, body)); \n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-new Promise((resolve,reject)=>{\n+new Promise(function(resolve){\n-  setTimeout(()=>{\n+  setTimeout(function(){\n    resolve(1);\n  },200)\n});\n```\n\n此案例涉及知识点\n1. 箭头函数节点：`ArrowFunctionExpression`\n2. 通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用\n3. 通过@babel/types可以很方便的构建任意类型节点\n4. 通过`path.replaceWith()`可以进行节点替换\n\n### 案例4:京东购物小程序的Tree-shaking\n\n删掉小程序中的冗余代码，`部分`实现代码示例如下\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nexport function square (x) {\n    return x * x;\n}\nexport function cube (x) {\n    return x * x * x;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ExportNamedDeclaration (path) {\n    let unused = ['cube']   // 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的\n    let { declaration = {} } = path.node;\n    if (declaration.type === 'FunctionDeclaration') {\n      unused.forEach(exportItem => {\n        // references=1表示仅有一次引用，即export的引用，没有在别处调用\n        if (declaration.id.name === exportItem && path.scope.bindings[exportItem].references === 1) {\n          path.remove();\n        }\n      });\n    }\n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nexport function square (x) {\n    return x * x;\n}\n-export function cube (x) {\n-    return x * x * x;\n-}\n```\n\n此案例涉及知识点\n1. export节点：`ExportNamedDeclaration`\n\n\n\n### 案例5:将代码转换成svg流程图\n此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见[js-code-to-svg-flowchart](https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart)<sup>[2]</sup>\n\n可以体验一下：[demo](https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html)<sup>[3]</sup>\n\n通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情\n\n## AST在其他语言的应用\n除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。\n\n![其他AST](https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg)\n\n## 结语\n在上述[AST网站](https://astexplorer.net/)中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。\n\n**References**  \n[1] babel手册：https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md  \n[2] js-code-to-svg-flowchart：https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart  \n[3] demo：https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html  ","source":"_posts/2019-08/Javascript抽象语法树下篇(实践篇).md","raw":"---\ntitle: Javascript抽象语法树下篇(实践篇)\nsubtitle: AST应用\ncover: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\nthumbnail: https://img11.360buyimg.com/jdphoto/s1206x333_jfs/t1/50930/18/7113/140191/5d4b8ef0Effa8d6bc/e776e627fe5e3f93.png\ndate: 2019-07-20 22:00:00\ntags: \n  - AST\ncategories: NodeJS\nauthor:\n    nick: 陈晓强\n    github_name: chenxiaoqiang12\n---\n\n上篇已经对AST基础做了介绍，本篇介绍AST的运用\n\n## AST应用的三个要点\n1. 需要一个解析器，将代码转换为AST\n2. 需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作\n3. 需要一个代码生成器，能够将AST转换为代码\n<!--more-->\n\n## esprima与babel\n常用的满足上述3个要点的工具包有两个，一个是`esprima`，一个是`babel `\n\nesprima相关包及使用如下\n```js\nconst esprima = require('esprima');   // code => ast\nconst estraverse = require('estraverse'); //ast遍历\nconst escodegen = require('escodegen'); // ast => code\nlet code = 'const a = 1';\nconst ast = esprima.parseScript(code);\nestraverse.traverse(ast, {\n    enter: function (node) {\n        //节点操作\n    }\n});\nconst transformCode = escodegen.generate(ast);\n```\n\nbabel相关包及使用如下\n```js\nconst parser = require('@babel/parser');  //code => ast\nconst traverse = require('@babel/traverse').default; // ast遍历，节点增删改查，作用域处理等\nconst generate = require('@babel/generator').default; // ast => code\nconst t = require('@babel/types'); // 用于AST节点的Lodash式工具库,各节点构造、验证等\nlet code = 'const a = 1';\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  enter (path) { \n    //节点操作\n  }\n})\nconst transformCode = escodegen.generate(ast);\n```\n\n目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。\n\n## 使用babel工具操作AST\n如上一章节所示\n- `@babel/parser`用于将代码转换为AST\n- `@babel/traverse`用于对AST的遍历，包括节点增删改查、作用域等处理\n- `@babel/generator` 用于将AST转换成代码\n- `@babel/types` 用于AST节点操作的Lodash式工具库,各节点构造、验证等\n\n更多api详见[babel手册](https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md)<sup>[1]</sup>\n\n下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。\n\n### 案例1:去掉代码中的console.log()\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nfunction square(n) {\n  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n`\nlet ast = parser.parse(sourceCode);\n\u000btraverse(ast, {\n CallExpression(path) {\n  let { callee } = path.node;\n  if (callee.type === ‘MemberExpression’ && callee.object.name === ‘console’ && callee.property.name === ‘log’ ) {\n   path.remove(); // 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除\n  }\n }\n})\u000b\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nfunction square(n) {\n-  console.log(n);\n  console.warn(n);\n  return n * n;\n}\n```\n\n\n此案例涉及知识点\n1. 如何通过\u000btraverse遍历特定节点\n2. 识别出console.log()在规范中属于函数调用表达式,节点类型为`CallExpression`。\n3. console.log本身即`callee`是在对象console上的一个方法，因此`console.log`是一个成员表达式，类型为`MemberExpression`。\n4. `MemberExpression`根据规范有一个`object`属性代表被访问的对象，有一个`property`代表访问的成员。\n5. 通过`path.remove()`api可以对节点进行删除。\n6. 可以通过https://astexplorer.net/ 来辅助对代码节点的识别。注意选择`babylon7`，即babe7,对应`@babel/parser`\n\n\n### 案例2:变量混淆\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nfunction square(number) {\n  console.warn(number);\n  return number * number;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  FunctionDeclaration(path) {\n    let unia = path.scope.generateUidIdentifier(\"a\");\n    path.scope.rename(\"number\",unia.name);\n }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-function square(number) {\n+  function square(_a) {\n-  console.warn(number);\n+  console.warn(_a);\n-  return number * number;\n+  return _a * _a;\n}\n```\n\n此案例涉及知识点\n1. `path.scope`保存了当前作用域的相关信息\n2. 可以通过api对作用域内的变量名进行批量修改操作\n3. 通过`path.scope`可以获得当前作用域唯一标识符，避免变量名冲突\n\n\n\n### 案例3:转换箭头函数并去掉未使用参数\n\n实现代码\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nnew Promise((resolve,reject)=>{\n  setTimeout(()=>{\n    resolve(1);\n  },200)\n});\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ArrowFunctionExpression (path) { \n    let { id, params, body } = path.node;\n    for(let key in path.scope.bindings){   //注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this\n      if(!path.scope.bindings[key].referenced){\n        params = params.filter(param=>{\n          return param.name!==key;\n        })\n      }\n    }\n  path.replaceWith(t.functionExpression(id, params, body)); \n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\n-new Promise((resolve,reject)=>{\n+new Promise(function(resolve){\n-  setTimeout(()=>{\n+  setTimeout(function(){\n    resolve(1);\n  },200)\n});\n```\n\n此案例涉及知识点\n1. 箭头函数节点：`ArrowFunctionExpression`\n2. 通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用\n3. 通过@babel/types可以很方便的构建任意类型节点\n4. 通过`path.replaceWith()`可以进行节点替换\n\n### 案例4:京东购物小程序的Tree-shaking\n\n删掉小程序中的冗余代码，`部分`实现代码示例如下\n```js\nconst parser = require('@babel/parser');\nconst traverse = require('@babel/traverse').default;\nconst generate = require('@babel/generator').default;\nconst t = require('@babel/types');\n\u000blet sourceCode = `\nexport function square (x) {\n    return x * x;\n}\nexport function cube (x) {\n    return x * x * x;\n}\n`\nlet ast = parser.parse(sourceCode);\ntraverse(ast, {\n  ExportNamedDeclaration (path) {\n    let unused = ['cube']   // 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的\n    let { declaration = {} } = path.node;\n    if (declaration.type === 'FunctionDeclaration') {\n      unused.forEach(exportItem => {\n        // references=1表示仅有一次引用，即export的引用，没有在别处调用\n        if (declaration.id.name === exportItem && path.scope.bindings[exportItem].references === 1) {\n          path.remove();\n        }\n      });\n    }\n  }\n})\n\nconsole.log(generate(ast).code);\n```\n\n处理结果\n```diff\nexport function square (x) {\n    return x * x;\n}\n-export function cube (x) {\n-    return x * x * x;\n-}\n```\n\n此案例涉及知识点\n1. export节点：`ExportNamedDeclaration`\n\n\n\n### 案例5:将代码转换成svg流程图\n此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见[js-code-to-svg-flowchart](https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart)<sup>[2]</sup>\n\n可以体验一下：[demo](https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html)<sup>[3]</sup>\n\n通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情\n\n## AST在其他语言的应用\n除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。\n\n![其他AST](https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg)\n\n## 结语\n在上述[AST网站](https://astexplorer.net/)中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。\n\n**References**  \n[1] babel手册：https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md  \n[2] js-code-to-svg-flowchart：https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart  \n[3] demo：https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html  ","slug":"Javascript抽象语法树下篇(实践篇)","published":1,"updated":"2019-09-03T14:17:33.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0dnoh900004hm9folja3hg8","content":"<p>上篇已经对AST基础做了介绍，本篇介绍AST的运用</p>\n<h2 id=\"AST应用的三个要点\"><a href=\"#AST应用的三个要点\" class=\"headerlink\" title=\"AST应用的三个要点\"></a>AST应用的三个要点</h2><ol>\n<li>需要一个解析器，将代码转换为AST</li>\n<li>需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作</li>\n<li>需要一个代码生成器，能够将AST转换为代码<a id=\"more\"></a>\n\n</li>\n</ol>\n<h2 id=\"esprima与babel\"><a href=\"#esprima与babel\" class=\"headerlink\" title=\"esprima与babel\"></a>esprima与babel</h2><p>常用的满足上述3个要点的工具包有两个，一个是<code>esprima</code>，一个是<code>babel</code></p>\n<p>esprima相关包及使用如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> esprima = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'esprima'</span>);   <span class=\"hljs-comment\">// code =&gt; ast</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> estraverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'estraverse'</span>); <span class=\"hljs-comment\">//ast遍历</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> escodegen = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'escodegen'</span>); <span class=\"hljs-comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> code = <span class=\"hljs-string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> ast = esprima.parseScript(code);</span><br><span class=\"line\">estraverse.traverse(ast, &#123;</span><br><span class=\"line\">    enter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">//节点操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>babel相关包及使用如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);  <span class=\"hljs-comment\">//code =&gt; ast</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default; <span class=\"hljs-comment\">// ast遍历，节点增删改查，作用域处理等</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default; <span class=\"hljs-comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>); <span class=\"hljs-comment\">// 用于AST节点的Lodash式工具库,各节点构造、验证等</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> code = <span class=\"hljs-string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  enter (path) &#123; </span><br><span class=\"line\">    <span class=\"hljs-comment\">//节点操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。</p>\n<h2 id=\"使用babel工具操作AST\"><a href=\"#使用babel工具操作AST\" class=\"headerlink\" title=\"使用babel工具操作AST\"></a>使用babel工具操作AST</h2><p>如上一章节所示</p>\n<ul>\n<li><code>@babel/parser</code>用于将代码转换为AST</li>\n<li><code>@babel/traverse</code>用于对AST的遍历，包括节点增删改查、作用域等处理</li>\n<li><code>@babel/generator</code> 用于将AST转换成代码</li>\n<li><code>@babel/types</code> 用于AST节点操作的Lodash式工具库,各节点构造、验证等</li>\n</ul>\n<p>更多api详见<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">babel手册</a><sup>[1]</sup></p>\n<p>下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。</p>\n<h3 id=\"案例1-去掉代码中的console-log\"><a href=\"#案例1-去掉代码中的console-log\" class=\"headerlink\" title=\"案例1:去掉代码中的console.log()\"></a>案例1:去掉代码中的console.log()</h3><p>实现代码</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">function square(n) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  console.log(n);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  console.warn(n);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  return n * n;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">\u000btraverse(ast, &#123;</span><br><span class=\"line\"> CallExpression(path) &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> &#123; callee &#125; = path.node;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (callee.type === ‘MemberExpression’ &amp;&amp; callee.object.name === ‘<span class=\"hljs-built_in\">console</span>’ &amp;&amp; callee.property.name === ‘log’ ) &#123;</span><br><span class=\"line\">   path.remove(); <span class=\"hljs-comment\">// 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)\u000b</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function square(n) &#123;</span><br><span class=\"line\"><span class=\"hljs-deletion\">-  console.log(n);</span></span><br><span class=\"line\">  console.warn(n);</span><br><span class=\"line\">  return n * n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>如何通过\u000btraverse遍历特定节点</li>\n<li>识别出console.log()在规范中属于函数调用表达式,节点类型为<code>CallExpression</code>。</li>\n<li>console.log本身即<code>callee</code>是在对象console上的一个方法，因此<code>console.log</code>是一个成员表达式，类型为<code>MemberExpression</code>。</li>\n<li><code>MemberExpression</code>根据规范有一个<code>object</code>属性代表被访问的对象，有一个<code>property</code>代表访问的成员。</li>\n<li>通过<code>path.remove()</code>api可以对节点进行删除。</li>\n<li>可以通过<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 来辅助对代码节点的识别。注意选择<code>babylon7</code>，即babe7,对应<code>@babel/parser</code></li>\n</ol>\n<h3 id=\"案例2-变量混淆\"><a href=\"#案例2-变量混淆\" class=\"headerlink\" title=\"案例2:变量混淆\"></a>案例2:变量混淆</h3><p>实现代码</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  console.warn(number);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  return number * number;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  FunctionDeclaration(path) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> unia = path.scope.generateUidIdentifier(<span class=\"hljs-string\">\"a\"</span>);</span><br><span class=\"line\">    path.scope.rename(<span class=\"hljs-string\">\"number\"</span>,unia.name);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-deletion\">-function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  function square(_a) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-  console.warn(number);</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  console.warn(_a);</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-  return number * number;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  return _a * _a;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li><code>path.scope</code>保存了当前作用域的相关信息</li>\n<li>可以通过api对作用域内的变量名进行批量修改操作</li>\n<li>通过<code>path.scope</code>可以获得当前作用域唯一标识符，避免变量名冲突</li>\n</ol>\n<h3 id=\"案例3-转换箭头函数并去掉未使用参数\"><a href=\"#案例3-转换箭头函数并去掉未使用参数\" class=\"headerlink\" title=\"案例3:转换箭头函数并去掉未使用参数\"></a>案例3:转换箭头函数并去掉未使用参数</h3><p>实现代码</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    resolve(1);</span></span><br><span class=\"line\"><span class=\"hljs-string\">  &#125;,200)</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;);</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ArrowFunctionExpression (path) &#123; </span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> &#123; id, params, body &#125; = path.node;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> path.scope.bindings)&#123;   <span class=\"hljs-comment\">//注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">if</span>(!path.scope.bindings[key].referenced)&#123;</span><br><span class=\"line\">        params = params.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">param</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"hljs-keyword\">return</span> param.name!==key;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  path.replaceWith(t.functionExpression(id, params, body)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-deletion\">-new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+new Promise(function(resolve)&#123;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"hljs-addition\">+  setTimeout(function()&#123;</span></span><br><span class=\"line\">    resolve(1);</span><br><span class=\"line\">  &#125;,200)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>箭头函数节点：<code>ArrowFunctionExpression</code></li>\n<li>通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用</li>\n<li>通过@babel/types可以很方便的构建任意类型节点</li>\n<li>通过<code>path.replaceWith()</code>可以进行节点替换</li>\n</ol>\n<h3 id=\"案例4-京东购物小程序的Tree-shaking\"><a href=\"#案例4-京东购物小程序的Tree-shaking\" class=\"headerlink\" title=\"案例4:京东购物小程序的Tree-shaking\"></a>案例4:京东购物小程序的Tree-shaking</h3><p>删掉小程序中的冗余代码，<code>部分</code>实现代码示例如下</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> generate = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"hljs-keyword\">let</span> sourceCode = <span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-string\">export function square (x) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    return x * x;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-string\">    return x * x * x;</span></span><br><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span><br><span class=\"line\"><span class=\"hljs-string\">`</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ExportNamedDeclaration (path) &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> unused = [<span class=\"hljs-string\">'cube'</span>]   <span class=\"hljs-comment\">// 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">let</span> &#123; declaration = &#123;&#125; &#125; = path.node;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (declaration.type === <span class=\"hljs-string\">'FunctionDeclaration'</span>) &#123;</span><br><span class=\"line\">      unused.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">exportItem</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-comment\">// references=1表示仅有一次引用，即export的引用，没有在别处调用</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (declaration.id.name === exportItem &amp;&amp; path.scope.bindings[exportItem].references === <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"line\">          path.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function square (x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-deletion\">-export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-    return x * x * x;</span></span><br><span class=\"line\"><span class=\"hljs-deletion\">-&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>export节点：<code>ExportNamedDeclaration</code></li>\n</ol>\n<h3 id=\"案例5-将代码转换成svg流程图\"><a href=\"#案例5-将代码转换成svg流程图\" class=\"headerlink\" title=\"案例5:将代码转换成svg流程图\"></a>案例5:将代码转换成svg流程图</h3><p>此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">js-code-to-svg-flowchart</a><sup>[2]</sup></p>\n<p>可以体验一下：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">demo</a><sup>[3]</sup></p>\n<p>通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情</p>\n<h2 id=\"AST在其他语言的应用\"><a href=\"#AST在其他语言的应用\" class=\"headerlink\" title=\"AST在其他语言的应用\"></a>AST在其他语言的应用</h2><p>除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg\" alt=\"其他AST\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在上述<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST网站</a>中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。</p>\n<p><strong>References</strong><br>[1] babel手册：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</a><br>[2] js-code-to-svg-flowchart：<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart</a><br>[3] demo：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html</a>  </p>\n","site":{"data":{}},"excerpt":"<p>上篇已经对AST基础做了介绍，本篇介绍AST的运用</p>\n<h2 id=\"AST应用的三个要点\"><a href=\"#AST应用的三个要点\" class=\"headerlink\" title=\"AST应用的三个要点\"></a>AST应用的三个要点</h2><ol>\n<li>需要一个解析器，将代码转换为AST</li>\n<li>需要一个遍历器，能够遍历AST,并能够方便的对AST节点进行增删改查等操作</li>\n<li>需要一个代码生成器，能够将AST转换为代码</li></ol>","more":"</li>\n</ol>\n<h2 id=\"esprima与babel\"><a href=\"#esprima与babel\" class=\"headerlink\" title=\"esprima与babel\"></a>esprima与babel</h2><p>常用的满足上述3个要点的工具包有两个，一个是<code>esprima</code>，一个是<code>babel</code></p>\n<p>esprima相关包及使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> esprima = <span class=\"built_in\">require</span>(<span class=\"string\">'esprima'</span>);   <span class=\"comment\">// code =&gt; ast</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> estraverse = <span class=\"built_in\">require</span>(<span class=\"string\">'estraverse'</span>); <span class=\"comment\">//ast遍历</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> escodegen = <span class=\"built_in\">require</span>(<span class=\"string\">'escodegen'</span>); <span class=\"comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ast = esprima.parseScript(code);</span><br><span class=\"line\">estraverse.traverse(ast, &#123;</span><br><span class=\"line\">    enter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//节点操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>babel相关包及使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);  <span class=\"comment\">//code =&gt; ast</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default; <span class=\"comment\">// ast遍历，节点增删改查，作用域处理等</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default; <span class=\"comment\">// ast =&gt; code</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>); <span class=\"comment\">// 用于AST节点的Lodash式工具库,各节点构造、验证等</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> code = <span class=\"string\">'const a = 1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  enter (path) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//节点操作</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformCode = escodegen.generate(ast);</span><br></pre></td></tr></table></figure>\n\n<p>目前babel不管是从生态上还是文档上比esprima要好很多，因此推荐大家使用babel工具，本文示例也使用babel来做演示。</p>\n<h2 id=\"使用babel工具操作AST\"><a href=\"#使用babel工具操作AST\" class=\"headerlink\" title=\"使用babel工具操作AST\"></a>使用babel工具操作AST</h2><p>如上一章节所示</p>\n<ul>\n<li><code>@babel/parser</code>用于将代码转换为AST</li>\n<li><code>@babel/traverse</code>用于对AST的遍历，包括节点增删改查、作用域等处理</li>\n<li><code>@babel/generator</code> 用于将AST转换成代码</li>\n<li><code>@babel/types</code> 用于AST节点操作的Lodash式工具库,各节点构造、验证等</li>\n</ul>\n<p>更多api详见<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">babel手册</a><sup>[1]</sup></p>\n<p>下面通过简单案例来介绍如何操作AST，注意案例只是示例，由于篇幅对部分边界问题只会注释说明，实际开发过程中需要考虑周全。</p>\n<h3 id=\"案例1-去掉代码中的console-log\"><a href=\"#案例1-去掉代码中的console-log\" class=\"headerlink\" title=\"案例1:去掉代码中的console.log()\"></a>案例1:去掉代码中的console.log()</h3><p>实现代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function square(n) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.log(n);</span></span><br><span class=\"line\"><span class=\"string\">  console.warn(n);</span></span><br><span class=\"line\"><span class=\"string\">  return n * n;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">\u000btraverse(ast, &#123;</span><br><span class=\"line\"> CallExpression(path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; callee &#125; = path.node;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callee.type === ‘MemberExpression’ &amp;&amp; callee.object.name === ‘<span class=\"built_in\">console</span>’ &amp;&amp; callee.property.name === ‘log’ ) &#123;</span><br><span class=\"line\">   path.remove(); <span class=\"comment\">// 注意考虑对象挂载的识别，如global.console.log()，此时remove后剩下global.,会导致语法错误，此时可以判断父节点类型来排除</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)\u000b</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function square(n) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-  console.log(n);</span></span><br><span class=\"line\">  console.warn(n);</span><br><span class=\"line\">  return n * n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>如何通过\u000btraverse遍历特定节点</li>\n<li>识别出console.log()在规范中属于函数调用表达式,节点类型为<code>CallExpression</code>。</li>\n<li>console.log本身即<code>callee</code>是在对象console上的一个方法，因此<code>console.log</code>是一个成员表达式，类型为<code>MemberExpression</code>。</li>\n<li><code>MemberExpression</code>根据规范有一个<code>object</code>属性代表被访问的对象，有一个<code>property</code>代表访问的成员。</li>\n<li>通过<code>path.remove()</code>api可以对节点进行删除。</li>\n<li>可以通过<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a> 来辅助对代码节点的识别。注意选择<code>babylon7</code>，即babe7,对应<code>@babel/parser</code></li>\n</ol>\n<h3 id=\"案例2-变量混淆\"><a href=\"#案例2-变量混淆\" class=\"headerlink\" title=\"案例2:变量混淆\"></a>案例2:变量混淆</h3><p>实现代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  console.warn(number);</span></span><br><span class=\"line\"><span class=\"string\">  return number * number;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  FunctionDeclaration(path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unia = path.scope.generateUidIdentifier(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    path.scope.rename(<span class=\"string\">\"number\"</span>,unia.name);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-function square(number) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  function square(_a) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-  console.warn(number);</span></span><br><span class=\"line\"><span class=\"addition\">+  console.warn(_a);</span></span><br><span class=\"line\"><span class=\"deletion\">-  return number * number;</span></span><br><span class=\"line\"><span class=\"addition\">+  return _a * _a;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li><code>path.scope</code>保存了当前作用域的相关信息</li>\n<li>可以通过api对作用域内的变量名进行批量修改操作</li>\n<li>通过<code>path.scope</code>可以获得当前作用域唯一标识符，避免变量名冲突</li>\n</ol>\n<h3 id=\"案例3-转换箭头函数并去掉未使用参数\"><a href=\"#案例3-转换箭头函数并去掉未使用参数\" class=\"headerlink\" title=\"案例3:转换箭头函数并去掉未使用参数\"></a>案例3:转换箭头函数并去掉未使用参数</h3><p>实现代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"string\">    resolve(1);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,200)</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ArrowFunctionExpression (path) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; id, params, body &#125; = path.node;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> path.scope.bindings)&#123;   <span class=\"comment\">//注意考虑箭头函数的this特性，若发现函数体中有this调用，则需要在当前作用域绑定其父作用域的this</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!path.scope.bindings[key].referenced)&#123;</span><br><span class=\"line\">        params = params.filter(<span class=\"function\"><span class=\"params\">param</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> param.name!==key;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  path.replaceWith(t.functionExpression(id, params, body)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+new Promise(function(resolve)&#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-  setTimeout(()=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  setTimeout(function()&#123;</span></span><br><span class=\"line\">    resolve(1);</span><br><span class=\"line\">  &#125;,200)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>箭头函数节点：<code>ArrowFunctionExpression</code></li>\n<li>通过path.scope可以识别变量引用情况，是否有被引用，被哪些路径引用</li>\n<li>通过@babel/types可以很方便的构建任意类型节点</li>\n<li>通过<code>path.replaceWith()</code>可以进行节点替换</li>\n</ol>\n<h3 id=\"案例4-京东购物小程序的Tree-shaking\"><a href=\"#案例4-京东购物小程序的Tree-shaking\" class=\"headerlink\" title=\"案例4:京东购物小程序的Tree-shaking\"></a>案例4:京东购物小程序的Tree-shaking</h3><p>删掉小程序中的冗余代码，<code>部分</code>实现代码示例如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parser = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/traverse'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generate = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/generator'</span>).default;</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = <span class=\"built_in\">require</span>(<span class=\"string\">'@babel/types'</span>);</span><br><span class=\"line\">\u000b<span class=\"keyword\">let</span> sourceCode = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">export function square (x) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return x * x;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return x * x * x;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ast = parser.parse(sourceCode);</span><br><span class=\"line\">traverse(ast, &#123;</span><br><span class=\"line\">  ExportNamedDeclaration (path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unused = [<span class=\"string\">'cube'</span>]   <span class=\"comment\">// 借助webpack，我们能获得导出的方法中，哪些是没有被使用过的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; declaration = &#123;&#125; &#125; = path.node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (declaration.type === <span class=\"string\">'FunctionDeclaration'</span>) &#123;</span><br><span class=\"line\">      unused.forEach(<span class=\"function\"><span class=\"params\">exportItem</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// references=1表示仅有一次引用，即export的引用，没有在别处调用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (declaration.id.name === exportItem &amp;&amp; path.scope.bindings[exportItem].references === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          path.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generate(ast).code);</span><br></pre></td></tr></table></figure>\n\n<p>处理结果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function square (x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"deletion\">-export function cube (x) &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-    return x * x * x;</span></span><br><span class=\"line\"><span class=\"deletion\">-&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此案例涉及知识点</p>\n<ol>\n<li>export节点：<code>ExportNamedDeclaration</code></li>\n</ol>\n<h3 id=\"案例5-将代码转换成svg流程图\"><a href=\"#案例5-将代码转换成svg流程图\" class=\"headerlink\" title=\"案例5:将代码转换成svg流程图\"></a>案例5:将代码转换成svg流程图</h3><p>此案例是git上一个比较有意思的开源项目，通过AST将代码转换为svg流程图，详见<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">js-code-to-svg-flowchart</a><sup>[2]</sup></p>\n<p>可以体验一下：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">demo</a><sup>[3]</sup></p>\n<p>通过以上示例，可以看到通过AST我们可以对代码任意蹂躏，做出很多有意思的事情</p>\n<h2 id=\"AST在其他语言的应用\"><a href=\"#AST在其他语言的应用\" class=\"headerlink\" title=\"AST在其他语言的应用\"></a>AST在其他语言的应用</h2><p>除了Javascript，其他语言如HTML、CSS、SQL等也有广泛的AST应用。如下图，可以在这里找到对应语言的解析器，开启AST之门。</p>\n<p><img src=\"https://img11.360buyimg.com/jdphoto/s600x600_jfs/t1/43052/11/11500/153664/5d4c1b42E574a7b81/886ebd80827cc3fa.jpg\" alt=\"其他AST\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>在上述<a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">AST网站</a>中，可以看到HTML的解析器有个vue选项，读过vue源码的同学应该知道vue模板在转换成HTML之前会先将模板转换成AST然后生成render function进而生成VirtualDOM。我们平时开发对AST使用比较少，但其实到处都能见到AST的影子：babel、webpack、eslint、taro等等。希望能抛砖引玉，使同学们在各自团队产出更多基于AST的优秀工具、项目。</p>\n<p><strong>References</strong><br>[1] babel手册：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md\" target=\"_blank\" rel=\"noopener\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</a><br>[2] js-code-to-svg-flowchart：<a href=\"https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart\" target=\"_blank\" rel=\"noopener\">https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart</a><br>[3] demo：<a href=\"https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html\" target=\"_blank\" rel=\"noopener\">https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html</a>  </p>"},{"title":"碰撞检测的向量实现","subtitle":"1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现","cover":"https://img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg","date":"2019-06-26T16:00:00.000Z","ckey":15,"author":{"nick":"吴冠禧","github_name":"wuguanxi"},"_content":"\n***\n\n*注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现*\n\n## 前言\n\n2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。\n<!--more-->\n![rect_circle](//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg)\n\n如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。\n\n## 向量\n\n向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。\n\n### 向量的代数表示\n\n向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。\n\n```javascript\n// 二维平面向量\nclass Vector2d{\n  constructor(vx=1,vy=1){\n    this.vx = vx;\n    this.vy = vy;\n  }\n}\nconst vecA = new Vector2d(1,2);\nconst vecB = new Vector2d(3,1);\n```\n![act1](//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg)\n\n### 向量运算\n\n加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。\n\n![act2](//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png)\n\n```javascript\n// 向量的加法运算\nstatic add(vec,vec2){\n  const vx = vec.vx + vec2.vx;\n  const vy = vec.vy + vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：\n\n![act3](//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png)\n\n```javascript\n// 向量的减法运算\nstatic sub(vec,vec2){\n  const vx = vec.vx - vec2.vx;\n  const vy = vec.vy - vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n大小：向量的大小，是其各个分量的平方和开方。\n\n```javascript\n// 获取向量长度\nlength(){\n  return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n}\n```\n\n点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。\n\n```javascript\n// 向量的数量积\nstatic dot(vec,vec2){\n  return vec.vx * vec2.vx + vec.vy * vec2.vy;\n}\n```\n\n旋转：向量的旋转可以用旋转矩阵求解\n\n![act4](//wq.360buyimg.com/data/ppms/movie/act4.svg)\n\n![act5](//wq.360buyimg.com/data/ppms/picture/act5.svg)\n\n![act6](//wq.360buyimg.com/data/ppms/picture/act6.svg)\n\n```javascript\n//向量的旋转 \nstatic rotate(vec,angle){\n  const cosVal = Math.cos(angle);\n  const sinVal = Math.sin(angle);\n  const vx = vec.vx * cosVal - vec.vy * sinVal;\n  const vy = vec.vx * sinVal + vec.vy * cosVal;\n  return new Vector2d(vx,vy);\n}\n```\n\n## 圆\n\n圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。\n\n```javascript\nclass Circle{\n  // x,y是圆的圆心 r是半径\n  constructor(x=0,y=0,r=1){\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n  get P(){ return new Vector2d(this.x,this.y) } // 圆心向量\n}\n```\n\n## 矩形\n\n矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation\n\n```javascript\nexport class Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n}\n```\n\n## 两圆相交\n\n![cb1](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg)\n\n两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。\n\n两圆心距离可以用圆心向量相减，然后求相减向量的长度。\n\n![act7](//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg)\n\n```javascript\ncircleCircleIntersect(circle1,circle2){\n  const P1 = circle1.P;\n  const P2 = circle2.P;\n  const r1 = circle1.r;\n  const r2 = circle2.r;\n  const u = Vector2d.sub(P1,P2);\n  return u.length() <= r1  + r2 ;\n}\n```\n\n## 圆和矩形相交\n\n涉及到矩形的相交问题都先要判断是否轴对称。\n\n### 矩形轴对称\n\n![cb2](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg)\n\n先看轴对称的情况，下面是来自知乎问题[怎样判断平面上一个矩形和一个圆形是否有重叠？](https://www.zhihu.com/question/24251545)「Milo Yip」的回答搬运：\n\n设c为矩形中心，h为矩形半長，p为圆心，r为半径。\n\n![act8](//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg)\n\n方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。\n\n1. 首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：\n\n![act9](//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg)\n\n2. 然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。\n\n![act10](//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg)\n\n3. 最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。\n\n\n下面我用js实现一下：\n\n其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n}\n\nrectCircleIntersect(rect,circle){\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = circle.P;\n  const h = Vector2d.sub(A3,C); // 矩形半长\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n### 矩形非轴对称\n\n![cb3](//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg)\n\n这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。\n\n![act11](//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg)\n\n矩形中心到圆心向量为是CP\n\n反向旋转θ度得向量CP'\n\n然后根据向量得三角形定律得OP' = OC + CP'\n\n后面就代入矩形是轴对称的公式进行计算\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\np(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  let P;\n  if (rotation % 360 === 0) {\n    P = circle.P; // 轴对称直接输出P\n  } else {\n    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*-1)); // 非轴对称，计算P‘\n  }\n  return P;\n}\n\nrectCircleIntersect(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = p(rect,circle);\n  const h = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n查看Demo1 [https://rococolate.github.io/blog/gom/test1.html](//rococolate.github.io/blog/gom/test1.html)\n\n![demo1](//wq.360buyimg.com/data/ppms/picture/demo1.gif)\n\n## 两矩形相交\n\n### 两矩形都轴对称AABB\n\n![cb4](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg)\n\n想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。\n\n![act12](//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg)\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\nAABBrectRectIntersect(rect1,rect2){\n  const P = rect2.C;\n  const w2 = rect2.w; \n  const h2 = rect2.h; \n  const {w,h,x,y} = rect1;\n  const C = rect1.C;\n  const A3 = new Vector2d(x+w/2+w2/2,y+h/2+h2/2); // 新矩形的半长\n  const H = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - H.vx,0),Math.max(v.vy - H.vy,0));\n  return u.lengthSquared() === 0; // 点可以看成是半径为0的圆\n} \n```\n\n### 两矩形相交非轴对称OBB\n\n![cb5](//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg)\n\n两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）\n\n分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。\n\n因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。\n\n![act13](//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg)\n\n如何投影？这里补充一下向量点积的几何意义。\n\n![act15](//wq.360buyimg.com/data/ppms/picture/act15.gif)\n\n在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影\n\n回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。\n\n![act14](//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg)\n\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); }\n  get _A1(){ return new Vector2d(this.x-this.w/2,this.y-this.h/2); }  // 4角顶点\n  get _A2(){ return new Vector2d(this.x+this.w/2,this.y-this.h/2); }\n  get _A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); }\n  get _A4(){ return new Vector2d(this.x-this.w/2,this.y+this.h/2); }\n  get _axisX(){ return new Vector2d(1,0); } // 未旋转时的对称轴X\n  get _axisY(){ return new Vector2d(0,1); } // 未旋转时的对称轴Y\n  get _CA1(){ return Vector2d.sub(this._A1,this.C); }\n  get _CA2(){ return Vector2d.sub(this._A2,this.C); }\n  get _CA3(){ return Vector2d.sub(this._A3,this.C); }\n  get _CA4(){ return Vector2d.sub(this._A4,this.C); }\n  get _rotation(){ return this.rotation / 180 * Math.PI; }\n  get A1(){ return this.rotation % 360 === 0 ?  this._A1 :  Vector2d.add(this.C,Vector2d.rotate(this._CA1,this._rotation)); } // 计算上旋转后4角顶点\n  get A2(){ return this.rotation % 360 === 0 ?  this._A2 :  Vector2d.add(this.C,Vector2d.rotate(this._CA2,this._rotation)); }\n  get A3(){ return this.rotation % 360 === 0 ?  this._A3 :  Vector2d.add(this.C,Vector2d.rotate(this._CA3,this._rotation)); }\n  get A4(){ return this.rotation % 360 === 0 ?  this._A4 :  Vector2d.add(this.C,Vector2d.rotate(this._CA4,this._rotation)); }\n  get axisX(){ return this.rotation % 360 === 0 ?  this._axisX :  Vector2d.rotate(this._axisX,this._rotation); } // 计算上旋转后的对称轴X\n  get axisY(){ return this.rotation % 360 === 0 ?  this._axisY :  Vector2d.rotate(this._axisY,this._rotation); } // 计算上旋转后的对称轴Y\n  get _vertexs(){ return [this._A1,this._A2,this._A3,this._A4]; } \n  get vertexs(){ return [this.A1,this.A2,this.A3,this.A4]; } // 4角顶点数组\n}\n\nOBBrectRectIntersect(rect1,rect2){\n  const rect1AxisX = rect1.axisX;\n  const rect1AxisY = rect1.axisY;\n  const rect2AxisX = rect2.axisX;\n  const rect2AxisY = rect2.axisY;\n  if (!cross(rect1,rect2,rect1AxisX)) return false;  // 一旦有不相交的轴就可以return false\n  if (!cross(rect1,rect2,rect1AxisY)) return false;\n  if (!cross(rect1,rect2,rect2AxisX)) return false;\n  if (!cross(rect1,rect2,rect2AxisY)) return false;\n  return true;  // 4轴投影都相交 return true\n}\ncross(rect1,rect2,axis){\n  const vertexs1ScalarProjection = rect1.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形1的4个顶点投影并排序\n  const vertexs2ScalarProjection = rect2.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形2的4个顶点投影并排序\n  const rect1Min = vertexs1ScalarProjection[0]; // 矩形1最小长度\n  const rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形1最大长度\n  const rect2Min = vertexs2ScalarProjection[0]; // 矩形2最小长度\n  const rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形2最大长度\n  return rect1Max >= rect2Min && rect2Max >= rect1Min;  // 相交判断 \n}\n```\n\n最后放上一个相交的应用Demo [https://rococolate.github.io/blog/gom/test2.html](//rococolate.github.io/blog/gom/test2.html),Demo里的形状都可以拖拽，当碰到其他形状时会变透明。\n\n![demo2](//wq.360buyimg.com/data/ppms/movie/demo2.gif)\n\n### 参考文章\n\n[第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/](http://blog.jmecn.net/chapter-15-collision-detection/)\n\n[方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397](http://daily.zhihu.com/story/4761397)\n\n[怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545](https://www.zhihu.com/question/24251545)\n\n[“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html](https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html)\n\n[码农干货系列【1】--方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html](https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html)\n\n[Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix](https://en.wikipedia.org/wiki/Rotation_matrix)\n\n[数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF](https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF)\n\n[向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F](https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F)\n\n","source":"_posts/2019-08/collision-detection.md","raw":"---\ntitle: 碰撞检测的向量实现\nsubtitle: 1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现\ncover: https://img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg\ndate: 2019-06-27 00:00:00\ntags: \n    - 碰撞检测\n    - 向量\ncategories: Web开发\nckey: 15\nauthor:\n    nick: 吴冠禧\n    github_name: wuguanxi\n---\n\n***\n\n*注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现*\n\n## 前言\n\n2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。\n<!--more-->\n![rect_circle](//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg)\n\n如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。\n\n## 向量\n\n向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。\n\n### 向量的代数表示\n\n向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。\n\n```javascript\n// 二维平面向量\nclass Vector2d{\n  constructor(vx=1,vy=1){\n    this.vx = vx;\n    this.vy = vy;\n  }\n}\nconst vecA = new Vector2d(1,2);\nconst vecB = new Vector2d(3,1);\n```\n![act1](//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg)\n\n### 向量运算\n\n加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。\n\n![act2](//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png)\n\n```javascript\n// 向量的加法运算\nstatic add(vec,vec2){\n  const vx = vec.vx + vec2.vx;\n  const vy = vec.vy + vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：\n\n![act3](//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png)\n\n```javascript\n// 向量的减法运算\nstatic sub(vec,vec2){\n  const vx = vec.vx - vec2.vx;\n  const vy = vec.vy - vec2.vy;\n  return new Vector2d(vx,vy);\n}\n```\n\n大小：向量的大小，是其各个分量的平方和开方。\n\n```javascript\n// 获取向量长度\nlength(){\n  return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n}\n```\n\n点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。\n\n```javascript\n// 向量的数量积\nstatic dot(vec,vec2){\n  return vec.vx * vec2.vx + vec.vy * vec2.vy;\n}\n```\n\n旋转：向量的旋转可以用旋转矩阵求解\n\n![act4](//wq.360buyimg.com/data/ppms/movie/act4.svg)\n\n![act5](//wq.360buyimg.com/data/ppms/picture/act5.svg)\n\n![act6](//wq.360buyimg.com/data/ppms/picture/act6.svg)\n\n```javascript\n//向量的旋转 \nstatic rotate(vec,angle){\n  const cosVal = Math.cos(angle);\n  const sinVal = Math.sin(angle);\n  const vx = vec.vx * cosVal - vec.vy * sinVal;\n  const vy = vec.vx * sinVal + vec.vy * cosVal;\n  return new Vector2d(vx,vy);\n}\n```\n\n## 圆\n\n圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。\n\n```javascript\nclass Circle{\n  // x,y是圆的圆心 r是半径\n  constructor(x=0,y=0,r=1){\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n  get P(){ return new Vector2d(this.x,this.y) } // 圆心向量\n}\n```\n\n## 矩形\n\n矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation\n\n```javascript\nexport class Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n}\n```\n\n## 两圆相交\n\n![cb1](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg)\n\n两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。\n\n两圆心距离可以用圆心向量相减，然后求相减向量的长度。\n\n![act7](//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg)\n\n```javascript\ncircleCircleIntersect(circle1,circle2){\n  const P1 = circle1.P;\n  const P2 = circle2.P;\n  const r1 = circle1.r;\n  const r2 = circle2.r;\n  const u = Vector2d.sub(P1,P2);\n  return u.length() <= r1  + r2 ;\n}\n```\n\n## 圆和矩形相交\n\n涉及到矩形的相交问题都先要判断是否轴对称。\n\n### 矩形轴对称\n\n![cb2](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg)\n\n先看轴对称的情况，下面是来自知乎问题[怎样判断平面上一个矩形和一个圆形是否有重叠？](https://www.zhihu.com/question/24251545)「Milo Yip」的回答搬运：\n\n设c为矩形中心，h为矩形半長，p为圆心，r为半径。\n\n![act8](//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg)\n\n方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。\n\n1. 首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：\n\n![act9](//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg)\n\n2. 然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。\n\n![act10](//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg)\n\n3. 最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。\n\n\n下面我用js实现一下：\n\n其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n}\n\nrectCircleIntersect(rect,circle){\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = circle.P;\n  const h = Vector2d.sub(A3,C); // 矩形半长\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n### 矩形非轴对称\n\n![cb3](//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg)\n\n这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。\n\n![act11](//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg)\n\n矩形中心到圆心向量为是CP\n\n反向旋转θ度得向量CP'\n\n然后根据向量得三角形定律得OP' = OC + CP'\n\n后面就代入矩形是轴对称的公式进行计算\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\np(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  let P;\n  if (rotation % 360 === 0) {\n    P = circle.P; // 轴对称直接输出P\n  } else {\n    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*-1)); // 非轴对称，计算P‘\n  }\n  return P;\n}\n\nrectCircleIntersect(rect,circle){\n  const rotation = rect.rotation;\n  const C = rect.C;\n  const r = circle.r;\n  const A3 = rect.A3;\n  const P = p(rect,circle);\n  const h = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - h.vx,0),Math.max(v.vy - h.vy,0));\n  return u.lengthSquared() <= r * r;\n}\n```\n\n查看Demo1 [https://rococolate.github.io/blog/gom/test1.html](//rococolate.github.io/blog/gom/test1.html)\n\n![demo1](//wq.360buyimg.com/data/ppms/picture/demo1.gif)\n\n## 两矩形相交\n\n### 两矩形都轴对称AABB\n\n![cb4](//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg)\n\n想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。\n\n![act12](//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg)\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); } // 矩形中心向量\n  get A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); } // 顶点A3向量\n  get _rotation(){ return this.rotation / 180 * Math.PI; }  // 角度单位转换\n}\n\nAABBrectRectIntersect(rect1,rect2){\n  const P = rect2.C;\n  const w2 = rect2.w; \n  const h2 = rect2.h; \n  const {w,h,x,y} = rect1;\n  const C = rect1.C;\n  const A3 = new Vector2d(x+w/2+w2/2,y+h/2+h2/2); // 新矩形的半长\n  const H = Vector2d.sub(A3,C);\n  const v = new Vector2d(Math.abs(P.vx - C.vx),Math.abs(P.vy - C.vy));\n  const u = new Vector2d(Math.max(v.vx - H.vx,0),Math.max(v.vy - H.vy,0));\n  return u.lengthSquared() === 0; // 点可以看成是半径为0的圆\n} \n```\n\n### 两矩形相交非轴对称OBB\n\n![cb5](//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg)\n\n两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）\n\n分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。\n\n因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。\n\n![act13](//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg)\n\n如何投影？这里补充一下向量点积的几何意义。\n\n![act15](//wq.360buyimg.com/data/ppms/picture/act15.gif)\n\n在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影\n\n回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。\n\n![act14](//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg)\n\n\n```javascript\nclass Rect{\n  // x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg\n  constructor(x=0,y=0,w=1,h=1,rotation=0){\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.rotation = rotation;\n  }\n  get C(){ return new Vector2d(this.x,this.y); }\n  get _A1(){ return new Vector2d(this.x-this.w/2,this.y-this.h/2); }  // 4角顶点\n  get _A2(){ return new Vector2d(this.x+this.w/2,this.y-this.h/2); }\n  get _A3(){ return new Vector2d(this.x+this.w/2,this.y+this.h/2); }\n  get _A4(){ return new Vector2d(this.x-this.w/2,this.y+this.h/2); }\n  get _axisX(){ return new Vector2d(1,0); } // 未旋转时的对称轴X\n  get _axisY(){ return new Vector2d(0,1); } // 未旋转时的对称轴Y\n  get _CA1(){ return Vector2d.sub(this._A1,this.C); }\n  get _CA2(){ return Vector2d.sub(this._A2,this.C); }\n  get _CA3(){ return Vector2d.sub(this._A3,this.C); }\n  get _CA4(){ return Vector2d.sub(this._A4,this.C); }\n  get _rotation(){ return this.rotation / 180 * Math.PI; }\n  get A1(){ return this.rotation % 360 === 0 ?  this._A1 :  Vector2d.add(this.C,Vector2d.rotate(this._CA1,this._rotation)); } // 计算上旋转后4角顶点\n  get A2(){ return this.rotation % 360 === 0 ?  this._A2 :  Vector2d.add(this.C,Vector2d.rotate(this._CA2,this._rotation)); }\n  get A3(){ return this.rotation % 360 === 0 ?  this._A3 :  Vector2d.add(this.C,Vector2d.rotate(this._CA3,this._rotation)); }\n  get A4(){ return this.rotation % 360 === 0 ?  this._A4 :  Vector2d.add(this.C,Vector2d.rotate(this._CA4,this._rotation)); }\n  get axisX(){ return this.rotation % 360 === 0 ?  this._axisX :  Vector2d.rotate(this._axisX,this._rotation); } // 计算上旋转后的对称轴X\n  get axisY(){ return this.rotation % 360 === 0 ?  this._axisY :  Vector2d.rotate(this._axisY,this._rotation); } // 计算上旋转后的对称轴Y\n  get _vertexs(){ return [this._A1,this._A2,this._A3,this._A4]; } \n  get vertexs(){ return [this.A1,this.A2,this.A3,this.A4]; } // 4角顶点数组\n}\n\nOBBrectRectIntersect(rect1,rect2){\n  const rect1AxisX = rect1.axisX;\n  const rect1AxisY = rect1.axisY;\n  const rect2AxisX = rect2.axisX;\n  const rect2AxisY = rect2.axisY;\n  if (!cross(rect1,rect2,rect1AxisX)) return false;  // 一旦有不相交的轴就可以return false\n  if (!cross(rect1,rect2,rect1AxisY)) return false;\n  if (!cross(rect1,rect2,rect2AxisX)) return false;\n  if (!cross(rect1,rect2,rect2AxisY)) return false;\n  return true;  // 4轴投影都相交 return true\n}\ncross(rect1,rect2,axis){\n  const vertexs1ScalarProjection = rect1.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形1的4个顶点投影并排序\n  const vertexs2ScalarProjection = rect2.vertexs.map(vex => Vector2d.dot(vex,axis)).sort((a,b)=>a-b); // 矩形2的4个顶点投影并排序\n  const rect1Min = vertexs1ScalarProjection[0]; // 矩形1最小长度\n  const rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形1最大长度\n  const rect2Min = vertexs2ScalarProjection[0]; // 矩形2最小长度\n  const rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - 1]; // 矩形2最大长度\n  return rect1Max >= rect2Min && rect2Max >= rect1Min;  // 相交判断 \n}\n```\n\n最后放上一个相交的应用Demo [https://rococolate.github.io/blog/gom/test2.html](//rococolate.github.io/blog/gom/test2.html),Demo里的形状都可以拖拽，当碰到其他形状时会变透明。\n\n![demo2](//wq.360buyimg.com/data/ppms/movie/demo2.gif)\n\n### 参考文章\n\n[第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/](http://blog.jmecn.net/chapter-15-collision-detection/)\n\n[方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397](http://daily.zhihu.com/story/4761397)\n\n[怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545](https://www.zhihu.com/question/24251545)\n\n[“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html](https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html)\n\n[码农干货系列【1】--方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html](https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html)\n\n[Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix](https://en.wikipedia.org/wiki/Rotation_matrix)\n\n[数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF](https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF)\n\n[向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F](https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F)\n\n","slug":"collision-detection","published":1,"updated":"2019-09-10T09:58:09.716Z","_id":"ck0dnoh910005hm9fdkfqolx8","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p><em>注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现</em></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。</p>\n<a id=\"more\"></a>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg\" alt=\"rect_circle\"></p>\n<p>如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。</p>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><p>向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。</p>\n<h3 id=\"向量的代数表示\"><a href=\"#向量的代数表示\" class=\"headerlink\" title=\"向量的代数表示\"></a>向量的代数表示</h3><p>向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 二维平面向量</span></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vector2d</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(vx=1,vy=1)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.vx = vx;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.vy = vy;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vecA = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> vecB = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg\" alt=\"act1\"></p>\n<h3 id=\"向量运算\"><a href=\"#向量运算\" class=\"headerlink\" title=\"向量运算\"></a>向量运算</h3><p>加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png\" alt=\"act2\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 向量的加法运算</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> add(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vx = vec.vx + vec2.vx;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vy = vec.vy + vec2.vy;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png\" alt=\"act3\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 向量的减法运算</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> sub(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vx = vec.vx - vec2.vx;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vy = vec.vy - vec2.vy;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大小：向量的大小，是其各个分量的平方和开方。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 获取向量长度</span></span><br><span class=\"line\">length()&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.sqrt(<span class=\"hljs-keyword\">this</span>.vx * <span class=\"hljs-keyword\">this</span>.vx + <span class=\"hljs-keyword\">this</span>.vy * <span class=\"hljs-keyword\">this</span>.vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 向量的数量积</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> dot(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> vec.vx * vec2.vx + vec.vy * vec2.vy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>旋转：向量的旋转可以用旋转矩阵求解</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/act4.svg\" alt=\"act4\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act5.svg\" alt=\"act5\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act6.svg\" alt=\"act6\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//向量的旋转 </span></span><br><span class=\"line\"><span class=\"hljs-keyword\">static</span> rotate(vec,angle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> cosVal = <span class=\"hljs-built_in\">Math</span>.cos(angle);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> sinVal = <span class=\"hljs-built_in\">Math</span>.sin(angle);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vx = vec.vx * cosVal - vec.vy * sinVal;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vy = vec.vx * sinVal + vec.vy * cosVal;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆\"><a href=\"#圆\" class=\"headerlink\" title=\"圆\"></a>圆</h2><p>圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Circle</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是圆的圆心 r是半径</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,r=1)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.r = r;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> P()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y) &#125; <span class=\"hljs-comment\">// 圆心向量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h2><p>矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两圆相交\"><a href=\"#两圆相交\" class=\"headerlink\" title=\"两圆相交\"></a>两圆相交</h2><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg\" alt=\"cb1\"></p>\n<p>两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。</p>\n<p>两圆心距离可以用圆心向量相减，然后求相减向量的长度。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg\" alt=\"act7\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circleCircleIntersect(circle1,circle2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P1 = circle1.P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P2 = circle2.P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r1 = circle1.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r2 = circle2.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = Vector2d.sub(P1,P2);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.length() &lt;= r1  + r2 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆和矩形相交\"><a href=\"#圆和矩形相交\" class=\"headerlink\" title=\"圆和矩形相交\"></a>圆和矩形相交</h2><p>涉及到矩形的相交问题都先要判断是否轴对称。</p>\n<h3 id=\"矩形轴对称\"><a href=\"#矩形轴对称\" class=\"headerlink\" title=\"矩形轴对称\"></a>矩形轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg\" alt=\"cb2\"></p>\n<p>先看轴对称的情况，下面是来自知乎问题<a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？</a>「Milo Yip」的回答搬运：</p>\n<p>设c为矩形中心，h为矩形半長，p为圆心，r为半径。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg\" alt=\"act8\"></p>\n<p>方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。</p>\n<ol>\n<li>首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg\" alt=\"act9\"></p>\n<ol start=\"2\">\n<li>然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg\" alt=\"act10\"></p>\n<ol start=\"3\">\n<li>最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。</li>\n</ol>\n<p>下面我用js实现一下：</p>\n<p>其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125; <span class=\"hljs-comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125; <span class=\"hljs-comment\">// 顶点A3向量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P = circle.P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> h = Vector2d.sub(A3,C); <span class=\"hljs-comment\">// 矩形半长</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"hljs-built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.max(v.vx - h.vx,<span class=\"hljs-number\">0</span>),<span class=\"hljs-built_in\">Math</span>.max(v.vy - h.vy,<span class=\"hljs-number\">0</span>));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩形非轴对称\"><a href=\"#矩形非轴对称\" class=\"headerlink\" title=\"矩形非轴对称\"></a>矩形非轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg\" alt=\"cb3\"></p>\n<p>这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg\" alt=\"act11\"></p>\n<p>矩形中心到圆心向量为是CP</p>\n<p>反向旋转θ度得向量CP’</p>\n<p>然后根据向量得三角形定律得OP’ = OC + CP’</p>\n<p>后面就代入矩形是轴对称的公式进行计算</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125; <span class=\"hljs-comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125; <span class=\"hljs-comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _rotation()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI; &#125;  <span class=\"hljs-comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">let</span> P;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">    P = circle.P; <span class=\"hljs-comment\">// 轴对称直接输出P</span></span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">// 非轴对称，计算P‘</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P = p(rect,circle);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> h = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"hljs-built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.max(v.vx - h.vx,<span class=\"hljs-number\">0</span>),<span class=\"hljs-built_in\">Math</span>.max(v.vy - h.vy,<span class=\"hljs-number\">0</span>));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看Demo1 <a href=\"//rococolate.github.io/blog/gom/test1.html\">https://rococolate.github.io/blog/gom/test1.html</a></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/demo1.gif\" alt=\"demo1\"></p>\n<h2 id=\"两矩形相交\"><a href=\"#两矩形相交\" class=\"headerlink\" title=\"两矩形相交\"></a>两矩形相交</h2><h3 id=\"两矩形都轴对称AABB\"><a href=\"#两矩形都轴对称AABB\" class=\"headerlink\" title=\"两矩形都轴对称AABB\"></a>两矩形都轴对称AABB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg\" alt=\"cb4\"></p>\n<p>想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg\" alt=\"act12\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125; <span class=\"hljs-comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125; <span class=\"hljs-comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _rotation()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI; &#125;  <span class=\"hljs-comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AABBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> P = rect2.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> w2 = rect2.w; </span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> h2 = rect2.h; </span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> &#123;w,h,x,y&#125; = rect1;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> C = rect1.C;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> A3 = <span class=\"hljs-keyword\">new</span> Vector2d(x+w/<span class=\"hljs-number\">2</span>+w2/<span class=\"hljs-number\">2</span>,y+h/<span class=\"hljs-number\">2</span>+h2/<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 新矩形的半长</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> H = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"hljs-built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> u = <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-built_in\">Math</span>.max(v.vx - H.vx,<span class=\"hljs-number\">0</span>),<span class=\"hljs-built_in\">Math</span>.max(v.vy - H.vy,<span class=\"hljs-number\">0</span>));</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> u.lengthSquared() === <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 点可以看成是半径为0的圆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两矩形相交非轴对称OBB\"><a href=\"#两矩形相交非轴对称OBB\" class=\"headerlink\" title=\"两矩形相交非轴对称OBB\"></a>两矩形相交非轴对称OBB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg\" alt=\"cb5\"></p>\n<p>两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）</p>\n<p>分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。</p>\n<p>因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg\" alt=\"act13\"></p>\n<p>如何投影？这里补充一下向量点积的几何意义。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act15.gif\" alt=\"act15\"></p>\n<p>在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影</p>\n<p>回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg\" alt=\"act14\"></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> C()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-keyword\">this</span>.y); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A1()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x-<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y-<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;  <span class=\"hljs-comment\">// 4角顶点</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A2()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y-<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x+<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _A4()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-keyword\">this</span>.x-<span class=\"hljs-keyword\">this</span>.w/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.y+<span class=\"hljs-keyword\">this</span>.h/<span class=\"hljs-number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _axisX()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>); &#125; <span class=\"hljs-comment\">// 未旋转时的对称轴X</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _axisY()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2d(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>); &#125; <span class=\"hljs-comment\">// 未旋转时的对称轴Y</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA1()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A1,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA2()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A2,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA3()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A3,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _CA4()&#123; <span class=\"hljs-keyword\">return</span> Vector2d.sub(<span class=\"hljs-keyword\">this</span>._A4,<span class=\"hljs-keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _rotation()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation / <span class=\"hljs-number\">180</span> * <span class=\"hljs-built_in\">Math</span>.PI; &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A1()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A1 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA1,<span class=\"hljs-keyword\">this</span>._rotation)); &#125; <span class=\"hljs-comment\">// 计算上旋转后4角顶点</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A2()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A2 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA2,<span class=\"hljs-keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A3()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A3 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA3,<span class=\"hljs-keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> A4()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._A4 :  Vector2d.add(<span class=\"hljs-keyword\">this</span>.C,Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._CA4,<span class=\"hljs-keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> axisX()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._axisX :  Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._axisX,<span class=\"hljs-keyword\">this</span>._rotation); &#125; <span class=\"hljs-comment\">// 计算上旋转后的对称轴X</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> axisY()&#123; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rotation % <span class=\"hljs-number\">360</span> === <span class=\"hljs-number\">0</span> ?  <span class=\"hljs-keyword\">this</span>._axisY :  Vector2d.rotate(<span class=\"hljs-keyword\">this</span>._axisY,<span class=\"hljs-keyword\">this</span>._rotation); &#125; <span class=\"hljs-comment\">// 计算上旋转后的对称轴Y</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> _vertexs()&#123; <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>._A1,<span class=\"hljs-keyword\">this</span>._A2,<span class=\"hljs-keyword\">this</span>._A3,<span class=\"hljs-keyword\">this</span>._A4]; &#125; </span><br><span class=\"line\">  <span class=\"hljs-keyword\">get</span> vertexs()&#123; <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-keyword\">this</span>.A1,<span class=\"hljs-keyword\">this</span>.A2,<span class=\"hljs-keyword\">this</span>.A3,<span class=\"hljs-keyword\">this</span>.A4]; &#125; <span class=\"hljs-comment\">// 4角顶点数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">OBBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1AxisX = rect1.axisX;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1AxisY = rect1.axisY;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2AxisX = rect2.axisX;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2AxisY = rect2.axisY;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect1AxisX)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">// 一旦有不相交的轴就可以return false</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect1AxisY)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect2AxisX)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!cross(rect1,rect2,rect2AxisY)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// 4轴投影都相交 return true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cross(rect1,rect2,axis)&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vertexs1ScalarProjection = rect1.vertexs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b); <span class=\"hljs-comment\">// 矩形1的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> vertexs2ScalarProjection = rect2.vertexs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)=&gt;</span>a-b); <span class=\"hljs-comment\">// 矩形2的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1Min = vertexs1ScalarProjection[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 矩形1最小长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 矩形1最大长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2Min = vertexs2ScalarProjection[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 矩形2最小长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 矩形2最大长度</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> rect1Max &gt;= rect2Min &amp;&amp; rect2Max &gt;= rect1Min;  <span class=\"hljs-comment\">// 相交判断 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后放上一个相交的应用Demo <a href=\"//rococolate.github.io/blog/gom/test2.html\">https://rococolate.github.io/blog/gom/test2.html</a>,Demo里的形状都可以拖拽，当碰到其他形状时会变透明。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/demo2.gif\" alt=\"demo2\"></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"http://blog.jmecn.net/chapter-15-collision-detection/\" target=\"_blank\" rel=\"noopener\">第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/</a></p>\n<p><a href=\"http://daily.zhihu.com/story/4761397\" target=\"_blank\" rel=\"noopener\">方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397</a></p>\n<p><a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545</a></p>\n<p><a href=\"https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html\" target=\"_blank\" rel=\"noopener\">“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html</a></p>\n<p><a href=\"https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html\" target=\"_blank\" rel=\"noopener\">码农干货系列【1】–方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\" target=\"_blank\" rel=\"noopener\">Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF\" target=\"_blank\" rel=\"noopener\">数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F\" target=\"_blank\" rel=\"noopener\">向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F</a></p>\n","site":{"data":{}},"excerpt":"<hr>\n<p><em>注：1、本文只讨论2d图形碰撞检测。2、本文讨论圆形与圆形，矩形与矩形、圆形与矩形碰撞检测的向量实现</em></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>2D游戏中，通常使用矩形、圆形等来代替复杂图形的相交检测。因为这两种形状的碰撞检测速度是最快的。其中矩形包围盒又可以分为轴对齐包围盒（AABB, Axis Aligned Bounding Box）与转向包围盒（OBB, Oriented Bounding Box）。AABB与OBB的区别在于，AABB中的矩形的其中一条边和坐标轴平行，OBB的计算复杂度要高于AABB。根据不同的使用场景，可以用不同的方案。</p>","more":"<p><img src=\"//img11.360buyimg.com/jdphoto/s620x560_jfs/t1/80783/1/8376/38236/5d65e598Edf614f1c/bf61dd8f367c1fe3.jpg\" alt=\"rect_circle\"></p>\n<p>如上图，明显皮卡超适合用包围盒，精灵球适合用包围球。</p>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><p>向量作为一种数学工具，在碰撞检测中发挥很大作用，后面的计算都是通过向量来完成，所以先来复习一下向量。</p>\n<h3 id=\"向量的代数表示\"><a href=\"#向量的代数表示\" class=\"headerlink\" title=\"向量的代数表示\"></a>向量的代数表示</h3><p>向量的代数表示指在指定了一个坐标系之后，用一个向量在该坐标系下的坐标来表示该向量，兼具了符号的抽象性和几何形象性，因而具有最高的实用性，被广泛采用于需要定量分析的情形。 对于自由向量，将向量的起点平移到坐标原点后，向量就可以用一个坐标系下的一个点来表示，该点的坐标值即向量的终点坐标。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二维平面向量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector2d</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(vx=1,vy=1)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vx = vx;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vy = vy;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> vecA = <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> vecB = <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">3</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1290x1154_jfs/t1/68885/38/8539/71859/5d65e55bE2b5751b3/2b647f5612032dd9.jpg\" alt=\"act1\"></p>\n<h3 id=\"向量运算\"><a href=\"#向量运算\" class=\"headerlink\" title=\"向量运算\"></a>向量运算</h3><p>加法：向量的加法满足平行四边形法则和三角形法则。具体的，两向量相加还是一个向量，分别是x与y两个分量的相加。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s250x132_jfs/t1/54796/4/9046/3551/5d65e55cEac8a13ef/3885604423efb468.png\" alt=\"act2\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向量的加法运算</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> add(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vx = vec.vx + vec2.vx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vy = vec.vy + vec2.vy;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>减法：两个向量a和b的相减得到的向量可以表示为a和b的起点重合后，从b的终点指向a的终点的向量：</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s125x90_jfs/t1/60329/32/8319/1814/5d65e55cE5334d839/6fcddfee0544366b.png\" alt=\"act3\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向量的减法运算</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> sub(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vx = vec.vx - vec2.vx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vy = vec.vy - vec2.vy;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大小：向量的大小，是其各个分量的平方和开方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取向量长度</span></span><br><span class=\"line\">length()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.sqrt(<span class=\"keyword\">this</span>.vx * <span class=\"keyword\">this</span>.vx + <span class=\"keyword\">this</span>.vy * <span class=\"keyword\">this</span>.vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点积：从代数角度看，先对两个数字序列中的每组对应元素求积，再对所有积求和，结果即为点积。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向量的数量积</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> dot(vec,vec2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vec.vx * vec2.vx + vec.vy * vec2.vy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>旋转：向量的旋转可以用旋转矩阵求解</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/act4.svg\" alt=\"act4\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act5.svg\" alt=\"act5\"></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act6.svg\" alt=\"act6\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向量的旋转 </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> rotate(vec,angle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cosVal = <span class=\"built_in\">Math</span>.cos(angle);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sinVal = <span class=\"built_in\">Math</span>.sin(angle);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vx = vec.vx * cosVal - vec.vy * sinVal;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vy = vec.vx * sinVal + vec.vy * cosVal;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(vx,vy);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆\"><a href=\"#圆\" class=\"headerlink\" title=\"圆\"></a>圆</h2><p>圆形比较简单，只要确认圆心x,y和半径r就行了,然后推导出圆心向量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是圆的圆心 r是半径</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,r=1)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> P()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y) &#125; <span class=\"comment\">// 圆心向量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩形\"><a href=\"#矩形\" class=\"headerlink\" title=\"矩形\"></a>矩形</h2><p>矩形就较为复杂，定义一个矩形需要中心坐标的x,y、两边长w和h，还有根据中心的旋转角度rotation</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两圆相交\"><a href=\"#两圆相交\" class=\"headerlink\" title=\"两圆相交\"></a>两圆相交</h2><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/57163/39/9099/14858/5d65e55fEffdcb176/57c25cf570a4ee9e.jpg\" alt=\"cb1\"></p>\n<p>两圆相交比较简单，只需判断两圆心之间的距离小于两圆的半径之和。</p>\n<p>两圆心距离可以用圆心向量相减，然后求相减向量的长度。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1278x1158_jfs/t1/78788/22/8433/100490/5d65e55cE23cd6e1f/35ccb0c8d410dd21.jpg\" alt=\"act7\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">circleCircleIntersect(circle1,circle2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P1 = circle1.P;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P2 = circle2.P;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r1 = circle1.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r2 = circle2.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = Vector2d.sub(P1,P2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.length() &lt;= r1  + r2 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"圆和矩形相交\"><a href=\"#圆和矩形相交\" class=\"headerlink\" title=\"圆和矩形相交\"></a>圆和矩形相交</h2><p>涉及到矩形的相交问题都先要判断是否轴对称。</p>\n<h3 id=\"矩形轴对称\"><a href=\"#矩形轴对称\" class=\"headerlink\" title=\"矩形轴对称\"></a>矩形轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/69704/11/8440/18353/5d65e55fE03a7fcd8/b1033efa2e0d2752.jpg\" alt=\"cb2\"></p>\n<p>先看轴对称的情况，下面是来自知乎问题<a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？</a>「Milo Yip」的回答搬运：</p>\n<p>设c为矩形中心，h为矩形半長，p为圆心，r为半径。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s318x262_jfs/t1/72838/27/8482/5018/5d65e55dE659a7987/abf537a49489e6ea.jpg\" alt=\"act8\"></p>\n<p>方法是计算圆心与矩形的最短距离 u，若 u 的长度小于 r 则两者相交。</p>\n<ol>\n<li>首先利用绝对值把 p - c 转移到第一象限，下图显示不同象限的圆心也能映射至第一象限，这不影响相交测试的结果：</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s454x360_jfs/t1/66277/16/8649/13651/5d65e55dEdfa2dc2a/c9dc0c312235e28f.jpg\" alt=\"act9\"></p>\n<ol start=\"2\">\n<li>然后，把 v 减去 h，负数的分量设置为0，就得到圆心与矩形最短距离的矢量 u。下图展示了4种情况，红色的u是结果。</li>\n</ol>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s485x413_jfs/t1/69046/31/8461/17083/5d65e55dE8cc4fab4/68cdc49cff29310b.jpg\" alt=\"act10\"></p>\n<ol start=\"3\">\n<li>最后要比较 u 和 r 的长度，若距离少于 r，则两者相交。可以只求 u 的长度平方是否小于 r 的平方。</li>\n</ol>\n<p>下面我用js实现一下：</p>\n<p>其中矩形的四个顶点命名为A1，A2，A3，A4，矩形在第一象限的半長h等于CA3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125; <span class=\"comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125; <span class=\"comment\">// 顶点A3向量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = circle.P;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> h = Vector2d.sub(A3,C); <span class=\"comment\">// 矩形半长</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.max(v.vx - h.vx,<span class=\"number\">0</span>),<span class=\"built_in\">Math</span>.max(v.vy - h.vy,<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"矩形非轴对称\"><a href=\"#矩形非轴对称\" class=\"headerlink\" title=\"矩形非轴对称\"></a>矩形非轴对称</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x300_jfs/t1/79031/4/8501/19188/5d65e55fE833f1b75/d99274f73505b044.jpg\" alt=\"cb3\"></p>\n<p>这个问题其实也很好解决，将矩形中心视为旋转中心，将矩形和圆形一起反向旋转将矩形转为轴对称，然后就可以套用上面的解法。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1450x1264_jfs/t1/44508/26/9498/85357/5d65e55dEff734bc5/5abd584e382cf7e3.jpg\" alt=\"act11\"></p>\n<p>矩形中心到圆心向量为是CP</p>\n<p>反向旋转θ度得向量CP’</p>\n<p>然后根据向量得三角形定律得OP’ = OC + CP’</p>\n<p>后面就代入矩形是轴对称的公式进行计算</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125; <span class=\"comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125; <span class=\"comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _rotation()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI; &#125;  <span class=\"comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> P;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    P = circle.P; <span class=\"comment\">// 轴对称直接输出P</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    P = Vector2d.add(C,Vector2d.rotate(Vector2d.sub(circle.P,C),rect._rotation*<span class=\"number\">-1</span>)); <span class=\"comment\">// 非轴对称，计算P‘</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rectCircleIntersect(rect,circle)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rotation = rect.rotation;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r = circle.r;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> A3 = rect.A3;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = p(rect,circle);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> h = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.max(v.vx - h.vx,<span class=\"number\">0</span>),<span class=\"built_in\">Math</span>.max(v.vy - h.vy,<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.lengthSquared() &lt;= r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看Demo1 <a href=\"//rococolate.github.io/blog/gom/test1.html\">https://rococolate.github.io/blog/gom/test1.html</a></p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/demo1.gif\" alt=\"demo1\"></p>\n<h2 id=\"两矩形相交\"><a href=\"#两矩形相交\" class=\"headerlink\" title=\"两矩形相交\"></a>两矩形相交</h2><h3 id=\"两矩形都轴对称AABB\"><a href=\"#两矩形都轴对称AABB\" class=\"headerlink\" title=\"两矩形都轴对称AABB\"></a>两矩形都轴对称AABB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s300x200_jfs/t1/64807/28/8452/16218/5d65e560Efab78661/dd246daf8b975413.jpg\" alt=\"cb4\"></p>\n<p>想象一下两个矩形A和B，B贴着A的边走了一圈，B的矩形中心的轨迹是一个新的矩形，这样就简化成新矩形与B中心点这一点的相交问题，又因为点可以看成是半径为0的圆，所以问题又转换为圆形和矩形相交。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1536x1296_jfs/t1/59961/5/8554/88838/5d65e55eE92504fe4/bb22a626d8cd50f2.jpg\" alt=\"act12\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125; <span class=\"comment\">// 矩形中心向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125; <span class=\"comment\">// 顶点A3向量</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _rotation()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI; &#125;  <span class=\"comment\">// 角度单位转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AABBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = rect2.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> w2 = rect2.w; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> h2 = rect2.h; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;w,h,x,y&#125; = rect1;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> C = rect1.C;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> A3 = <span class=\"keyword\">new</span> Vector2d(x+w/<span class=\"number\">2</span>+w2/<span class=\"number\">2</span>,y+h/<span class=\"number\">2</span>+h2/<span class=\"number\">2</span>); <span class=\"comment\">// 新矩形的半长</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> H = Vector2d.sub(A3,C);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.abs(P.vx - C.vx),<span class=\"built_in\">Math</span>.abs(P.vy - C.vy));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> Vector2d(<span class=\"built_in\">Math</span>.max(v.vx - H.vx,<span class=\"number\">0</span>),<span class=\"built_in\">Math</span>.max(v.vy - H.vy,<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u.lengthSquared() === <span class=\"number\">0</span>; <span class=\"comment\">// 点可以看成是半径为0的圆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两矩形相交非轴对称OBB\"><a href=\"#两矩形相交非轴对称OBB\" class=\"headerlink\" title=\"两矩形相交非轴对称OBB\"></a>两矩形相交非轴对称OBB</h3><p><img src=\"//img11.360buyimg.com/jdphoto/s500x200_jfs/t1/61010/26/8345/34564/5d65e560Ec24d9ad7/e2bf9a264c5020ba.jpg\" alt=\"cb5\"></p>\n<p>两个矩形的OBB检测使用分离轴定理（Separating Axis Theorem）</p>\n<p>分离轴定理：通过判断任意两个矩形 在任意角度下的投影是否均存在重叠，来判断是否发生碰撞。若在某一角度光源下，两物体的投影存在间隙，则为不碰撞，否则为发生碰撞。</p>\n<p>因为矩形的对边平行，所以只要判断四条对称轴上的投影即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1178x1136_jfs/t1/75083/14/8469/28383/5d65e55eE3f0e3baf/39d9e49cf74cc0a2.jpg\" alt=\"act13\"></p>\n<p>如何投影？这里补充一下向量点积的几何意义。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/picture/act15.gif\" alt=\"act15\"></p>\n<p>在欧几里得空间中，点积可以直观地定义为 A·B = |A||B|cosθ ,其中|A|cosθ是A到B的投影，如果B是单位向量，那么A·B就是A到单位向量B的投影</p>\n<p>回到矩形，将矩形4个顶点都投影到对称轴上，我们分别将其点乘即可。</p>\n<p><img src=\"//img11.360buyimg.com/jdphoto/s1460x1344_jfs/t1/39666/16/15585/46915/5d65e55fE6c8ca323/8933478064477889.jpg\" alt=\"act14\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// x,y是矩形中心的坐标 w是宽 h是高 rotation是角度单位deg</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x=0,y=0,w=1,h=1,rotation=0)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.rotation = rotation;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> C()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x,<span class=\"keyword\">this</span>.y); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A1()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x-<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y-<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;  <span class=\"comment\">// 4角顶点</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A2()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y-<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x+<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _A4()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"keyword\">this</span>.x-<span class=\"keyword\">this</span>.w/<span class=\"number\">2</span>,<span class=\"keyword\">this</span>.y+<span class=\"keyword\">this</span>.h/<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _axisX()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">1</span>,<span class=\"number\">0</span>); &#125; <span class=\"comment\">// 未旋转时的对称轴X</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _axisY()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector2d(<span class=\"number\">0</span>,<span class=\"number\">1</span>); &#125; <span class=\"comment\">// 未旋转时的对称轴Y</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA1()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A1,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA2()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A2,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA3()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A3,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _CA4()&#123; <span class=\"keyword\">return</span> Vector2d.sub(<span class=\"keyword\">this</span>._A4,<span class=\"keyword\">this</span>.C); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> _rotation()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation / <span class=\"number\">180</span> * <span class=\"built_in\">Math</span>.PI; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> A1()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A1 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA1,<span class=\"keyword\">this</span>._rotation)); &#125; <span class=\"comment\">// 计算上旋转后4角顶点</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> A2()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A2 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA2,<span class=\"keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> A3()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A3 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA3,<span class=\"keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> A4()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._A4 :  Vector2d.add(<span class=\"keyword\">this</span>.C,Vector2d.rotate(<span class=\"keyword\">this</span>._CA4,<span class=\"keyword\">this</span>._rotation)); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> axisX()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._axisX :  Vector2d.rotate(<span class=\"keyword\">this</span>._axisX,<span class=\"keyword\">this</span>._rotation); &#125; <span class=\"comment\">// 计算上旋转后的对称轴X</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> axisY()&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.rotation % <span class=\"number\">360</span> === <span class=\"number\">0</span> ?  <span class=\"keyword\">this</span>._axisY :  Vector2d.rotate(<span class=\"keyword\">this</span>._axisY,<span class=\"keyword\">this</span>._rotation); &#125; <span class=\"comment\">// 计算上旋转后的对称轴Y</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> _vertexs()&#123; <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>._A1,<span class=\"keyword\">this</span>._A2,<span class=\"keyword\">this</span>._A3,<span class=\"keyword\">this</span>._A4]; &#125; </span><br><span class=\"line\">  <span class=\"keyword\">get</span> vertexs()&#123; <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>.A1,<span class=\"keyword\">this</span>.A2,<span class=\"keyword\">this</span>.A3,<span class=\"keyword\">this</span>.A4]; &#125; <span class=\"comment\">// 4角顶点数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">OBBrectRectIntersect(rect1,rect2)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1AxisX = rect1.axisX;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1AxisY = rect1.axisY;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2AxisX = rect2.axisX;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2AxisY = rect2.axisY;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect1AxisX)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 一旦有不相交的轴就可以return false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect1AxisY)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect2AxisX)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cross(rect1,rect2,rect2AxisY)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">// 4轴投影都相交 return true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cross(rect1,rect2,axis)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vertexs1ScalarProjection = rect1.vertexs.map(<span class=\"function\"><span class=\"params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b); <span class=\"comment\">// 矩形1的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> vertexs2ScalarProjection = rect2.vertexs.map(<span class=\"function\"><span class=\"params\">vex</span> =&gt;</span> Vector2d.dot(vex,axis)).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b); <span class=\"comment\">// 矩形2的4个顶点投影并排序</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1Min = vertexs1ScalarProjection[<span class=\"number\">0</span>]; <span class=\"comment\">// 矩形1最小长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect1Max = vertexs1ScalarProjection[vertexs1ScalarProjection.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 矩形1最大长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2Min = vertexs2ScalarProjection[<span class=\"number\">0</span>]; <span class=\"comment\">// 矩形2最小长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> rect2Max = vertexs2ScalarProjection[vertexs1ScalarProjection.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 矩形2最大长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rect1Max &gt;= rect2Min &amp;&amp; rect2Max &gt;= rect1Min;  <span class=\"comment\">// 相交判断 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后放上一个相交的应用Demo <a href=\"//rococolate.github.io/blog/gom/test2.html\">https://rococolate.github.io/blog/gom/test2.html</a>,Demo里的形状都可以拖拽，当碰到其他形状时会变透明。</p>\n<p><img src=\"//wq.360buyimg.com/data/ppms/movie/demo2.gif\" alt=\"demo2\"></p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"http://blog.jmecn.net/chapter-15-collision-detection/\" target=\"_blank\" rel=\"noopener\">第十五章：碰撞检测 http://blog.jmecn.net/chapter-15-collision-detection/</a></p>\n<p><a href=\"http://daily.zhihu.com/story/4761397\" target=\"_blank\" rel=\"noopener\">方块的战争：浅谈格斗游戏的精髓 http://daily.zhihu.com/story/4761397</a></p>\n<p><a href=\"https://www.zhihu.com/question/24251545\" target=\"_blank\" rel=\"noopener\">怎样判断平面上一个矩形和一个圆形是否有重叠？ https://www.zhihu.com/question/24251545</a></p>\n<p><a href=\"https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html\" target=\"_blank\" rel=\"noopener\">“等一下，我碰！”——常见的2D碰撞检测 https://aotu.io/notes/2017/02/16/2d-collision-detection/index.html</a></p>\n<p><a href=\"https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html\" target=\"_blank\" rel=\"noopener\">码农干货系列【1】–方向包围盒(OBB)碰撞检测 https://www.cnblogs.com/iamzhanglei/archive/2012/06/07/2539751.html</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\" target=\"_blank\" rel=\"noopener\">Rotation matrix https://en.wikipedia.org/wiki/Rotation_matrix</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF\" target=\"_blank\" rel=\"noopener\">数量积 https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F\" target=\"_blank\" rel=\"noopener\">向量 https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F</a></p>"},{"title":"【译】在生产环境中使用原生JavaScript模块","date":"2019-09-10T09:47:26.000Z","cover":"https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg","thumbnail":"https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg","author":{"nick":"龚亮","github_name":"gongliang11"},"_content":"\n> 原文地址：https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\n> 原文作者：PHILIP WALTON\n> 译者：龚亮 ，校对：刘辉\n> 声明：本翻译仅做学习交流使用，转载请注明来源\n\n两年前，我写了一篇有关module/nomodule技术的[文章](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过`<script type=\"module\">`加载）和一个使用ES5语法的版本（通过`<script nomodule>`加载）。该技术允许你向支持模块（*译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多\"模块\"一词，都是这个含义*）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。\n<!--more-->\n但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  \n\n为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  \n\n其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  \n\n不过，当时并没有更好的方法来部署模块(*译者注：指遵循ES2015模块规范的文件*)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(*译者注：指除ES2015模块外的传统部署方式*)更好的性能。实际上，这个站点(*译者注：指原文章所在的网站*)已经在生产环境中使用原生模块好几个月了。\n\n# 对模块的误解\n与我交流过的很多人都认为模块（*译者注：指遵循ES2015模块规范的部署方式*）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:\n> ...小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。\n\n如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。\n\n如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（*译者注：原文是minifier，指去除空格注释等*）。  \n\n实际情况是，**你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！**\n\n事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（*译者注：指rollup和webpack中的runtime的代码*），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有`import`和`export`语句的模块，则不需要这些代码！\n\n幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。\n\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n尽管如此，Rollup有一个插件（[rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs)），它可以将CommonJS源代码转换为`ES2015`。如果一开始你的依赖项采用ES2015模块管理肯定会[更好](https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules)，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。\n\n在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。\n\n# 最优打包策略\n打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。\n\n同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。\n\n因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。\n\n默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。\n\n在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。\n\n那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。\n\n# 包级别的代码拆分\n如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态`import()`时[自动代码拆分](https://rollupjs.org/guide/en/#code-splitting)（在v1.0.0中添加）和通过`manualChunks`选项进行[可编程的手动代码拆分](https://rollupjs.org/guide/en/#manualchunks)（在v1.11.0中添加）。\n\n有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。\n\n这是一个使用`manualChunks`选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)\n\n```\nexport default {\n  input: {\n    main: 'src/main.mjs',\n  },\n  output: {\n    dir: 'build',\n    format: 'esm',\n    entryFileNames: '[name].[hash].mjs',\n  },\n  manualChunks(id) {\n    if (id.includes('node_modules')) {\n      // Return the directory name following the last `node_modules`.\n      // 返回最后一个node_modules后面跟着的目录名\n      // Usually this is the package, but it could also be the scope.\n      // 通常都会是一个包名，也有可能是一个私有域\n      const dirs = id.split(path.sep);\n      return dirs[dirs.lastIndexOf('node_modules') + 1];\n    }\n  },\n}\n```\n\n`manualChunks`选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。\n\n考虑从`lodash-es`包中导入`cloneDeep()`、`debounce()`和`find()`模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它`lodash`模块)一起放入一个名为`npm.lodash-es.XXXX.mjs`的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。\n\n在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):\n```\nexport {cloneDeep, debounce, find};\n```\n希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用`import`和`export`语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。\n\n例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:\n```\n(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"import1\"],{\n\n/***/ \"tLzr\":\n/*!*********************************!*\\\n  !*** ./app/scripts/import-1.js ***!\n  \\*********************************/\n/*! exports provided: import1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"import1\", function() { return import1; });\n/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ \"6xPP\");\n\nconst import1 = \"imported: \" + _dep_1__WEBPACK_IMPORTED_MODULE_0__[\"dep1\"];\n\n/***/ })\n\n}]);\n```\n\n## 如果你有数百个npm依赖项怎么办？\n我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。\n\n当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。\n\n但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。\n\n尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，`React`和`react-dom`)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项[分组为同一个文件](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162))。\n\n# 动态导入\n使用原生`import`语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。\n\n如果你想使用动态`import()`懒加载代码，那么你还必须处理这样一个事实：有些浏览器[支持模块](https://caniuse.com/#feat=es6-module)，但[不支持动态`import()`](https://caniuse.com/#feat=es6-module-dynamic-import)（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。\n\n幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态`import()`。\n\n向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用`import()`之前):\n```\nimport dynamicImportPolyfill from 'dynamic-import-polyfill';\n\n// This needs to be done before any dynamic imports are used. And if your\n// modules are hosted in a sub-directory, the path must be specified here.\ndynamicImportPolyfill.initialize({modulePath: '/modules/'});\n```\n最后要做的是告诉Rollup将输出代码中的动态`import()`重命名为你指定的另一个名称(通过[`output.dynamicImportFunction`](https://rollupjs.org/guide/en/#outputdynamicimportfunction)选项配置)。动态导入polyfill默认使用名称为__import__，但是可以[配置](https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options)它。\n\n需要重命名`import()`语句的原因是`import`是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生`import()`，因为这样做会导致语法错误。\n\n让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。\n\n## 高效加载JavaScript模块\n当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。\n\n但是，当你加载实际的JavaScript模块（通过`<script type=\"module\">`以及随后`import`语句引用的模块时），你将希望使用[`modulepreload`](https://developers.google.com/web/updates/2017/12/modulepreload)而不是传统的[`preload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content)(仅适用于原始脚本)。\n```\n<link rel=\"modulepreload\" href=\"/modules/main.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-one.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-two.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-three.XXXX.mjs\">\n<!-- ... -->\n<script type=\"module\" src=\"/modules/main.XXXX.mjs\"></script>\n```\n实际上，对于预加载原生的模块，`modulepreload`实际上比传统的`preload`要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。\n\n这意味着通过`modulepreload`加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。\n\n## 生成`modulepreload`列表\nRollup的[bundle](https://rollupjs.org/guide/en/#generatebundle)对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的[generateBundle](https://rollupjs.org/guide/en/#generatebundle)钩子中很容易获得需要预加载哪些文件的列表。\n\n虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:\n```\n{\n  generateBundle(options, bundle) {\n    // A mapping of entry chunk names to their full dependency list.\n    const modulepreloadMap = {};\n\n    for (const [fileName, chunkInfo] of Object.entries(bundle)) {\n      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) {\n        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];\n      }\n    }\n\n    // Do something with the mapping...\n    console.log(modulepreloadMap);\n  }\n}\n```\n例如，这里是我如何为这个站点以及我的[demo应用](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84)生成[modulepreload列表的](https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43)。\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n# 为什么要部署原生模块？\n如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。\n\n### 更小的代码总量\n\n当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要[webpack运行时和清单](https://webpack.js.org/concepts/manifest/)。\n\n### 更好的预加载\n正如我在前一节中提到的，使用`modulepreload`允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。\n\n因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和`modulepreload`加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。\n\n换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。\n\n### 更面向未来\n许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性[KV存储API](https://developers.google.com/web/updates/2019/03/kv-storage)时曾提到过这个问题)。\n\n以下是一些仅限模块才有的最令人兴奋的新功能：\n\n* [内置模块](https://github.com/tc39/proposal-javascript-standard-library/)\n* [HTML模块](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md)\n* [CSS模块](https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md)\n* [JSON模块](https://github.com/whatwg/html/pull/4407)\n* [导入地图](https://github.com/WICG/import-maps)\n* [workers、service workers和window之间共享模块](https://html.spec.whatwg.org/multipage/workers.html#module-worker-example)\n\n# 支持旧版浏览器\n在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。\n\n对于支持模块但不支持动态导入的浏览器，可以使用上面提到的[`dynamic-import-polyfill`](https://github.com/GoogleChromeLabs/dynamic-import-polyfill)。由于polyfill非常小，并且在可用时将使用浏览器的原生动态`import()`，因此添加这个polyfill几乎没有大小或性能成本。\n\n对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。\n\n## 一个实际的例子\n由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个[演示应用程序](https://rollup-native-modules-boilerplate.glitch.me/)，它使用了我在这里阐述的所有技术。\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n这个演示程序可以在不支持动态`import()`的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。\n\n为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:\n\n* Babel转换（包括JSX）\n* CommonJS的依赖关系（例如react，react-dom）\n* CSS依赖项\n* Asset hashing\n* 代码拆分\n* 动态导入（带有polyfill降级机制）\n* module/nomodule降级机制\n\n代码托管在[GitHub](https://github.com/philipwalton/rollup-native-modules-boilerplate)上(因此你可以派生repo并自己构建它)，而演示则托管在[Glitch](https://glitch.com/edit/#!/rollup-native-modules-boilerplate)上，因此你可以重新组合代码并使用这些特性。\n\n最重要的是查看示例中使用的[Rollup配置](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js)，因为它定义了如何生成最终模块。\n\n# 总结\n希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。\n\n以下是快速完成此工作所需步骤的摘要：\n* 使用打包器，但要确保输出格式为ES2015模块\n* 积极地进行代码拆分(如果可能的话，一直到node包)\n* 预加载静态依赖关系图中的所有模块(通过`modulepreload`)\n* 使用polyfill来支持不支持动态`import()`的浏览器\n* 使用`<script nomodule>`支持根本不支持模块的浏览器\n\n如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请[告诉我](https://twitter.com/philwalton)进展如何，因为我既想听你的问题，也想听你的成功故事！\n\n模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。\n\n> 译者评：\n1.作者上一篇文章的译文：https://jdc.jd.com/archives/4911\n2.另外一篇讲JavaScript原生模块的文章：https://www.jianshu.com/p/9aae3884b05b\n","source":"_posts/2019-09/【译】在生产环境中使用原生JavaScript模块.md","raw":"---\ntitle: 【译】在生产环境中使用原生JavaScript模块\ndate: 2019-09-10 17:47:26\ncover: https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg\nthumbnail: https://img11.360buyimg.com/jdphoto/s800x350_jfs/t1/62365/21/9771/68519/5d770858Ec9e78573/093303e535ac7a36.jpg\ntags: \n  - type=\"module\"\n  - 代码拆分\n  - rollup打包\n  - modulepreload\ncategories: Web开发\nauthor:\n    nick: 龚亮\n    github_name: gongliang11\n---\n\n> 原文地址：https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\n> 原文作者：PHILIP WALTON\n> 译者：龚亮 ，校对：刘辉\n> 声明：本翻译仅做学习交流使用，转载请注明来源\n\n两年前，我写了一篇有关module/nomodule技术的[文章](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/)，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过`<script type=\"module\">`加载）和一个使用ES5语法的版本（通过`<script nomodule>`加载）。该技术允许你向支持模块（*译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多\"模块\"一词，都是这个含义*）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。\n<!--more-->\n但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  \n\n为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  \n\n其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  \n\n不过，当时并没有更好的方法来部署模块(*译者注：指遵循ES2015模块规范的文件*)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(*译者注：指除ES2015模块外的传统部署方式*)更好的性能。实际上，这个站点(*译者注：指原文章所在的网站*)已经在生产环境中使用原生模块好几个月了。\n\n# 对模块的误解\n与我交流过的很多人都认为模块（*译者注：指遵循ES2015模块规范的部署方式*）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:\n> ...小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。\n\n如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。\n\n如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（*译者注：原文是minifier，指去除空格注释等*）。  \n\n实际情况是，**你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！**\n\n事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（*译者注：指rollup和webpack中的runtime的代码*），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有`import`和`export`语句的模块，则不需要这些代码！\n\n幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。\n\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n尽管如此，Rollup有一个插件（[rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs)），它可以将CommonJS源代码转换为`ES2015`。如果一开始你的依赖项采用ES2015模块管理肯定会[更好](https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules)，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。\n\n在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。\n\n# 最优打包策略\n打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。\n\n同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。\n\n因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。\n\n默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。\n\n在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。\n\n那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。\n\n# 包级别的代码拆分\n如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态`import()`时[自动代码拆分](https://rollupjs.org/guide/en/#code-splitting)（在v1.0.0中添加）和通过`manualChunks`选项进行[可编程的手动代码拆分](https://rollupjs.org/guide/en/#manualchunks)（在v1.11.0中添加）。\n\n有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。\n\n这是一个使用`manualChunks`选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)\n\n```\nexport default {\n  input: {\n    main: 'src/main.mjs',\n  },\n  output: {\n    dir: 'build',\n    format: 'esm',\n    entryFileNames: '[name].[hash].mjs',\n  },\n  manualChunks(id) {\n    if (id.includes('node_modules')) {\n      // Return the directory name following the last `node_modules`.\n      // 返回最后一个node_modules后面跟着的目录名\n      // Usually this is the package, but it could also be the scope.\n      // 通常都会是一个包名，也有可能是一个私有域\n      const dirs = id.split(path.sep);\n      return dirs[dirs.lastIndexOf('node_modules') + 1];\n    }\n  },\n}\n```\n\n`manualChunks`选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。\n\n考虑从`lodash-es`包中导入`cloneDeep()`、`debounce()`和`find()`模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它`lodash`模块)一起放入一个名为`npm.lodash-es.XXXX.mjs`的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。\n\n在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):\n```\nexport {cloneDeep, debounce, find};\n```\n希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用`import`和`export`语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。\n\n例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:\n```\n(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"import1\"],{\n\n/***/ \"tLzr\":\n/*!*********************************!*\\\n  !*** ./app/scripts/import-1.js ***!\n  \\*********************************/\n/*! exports provided: import1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"import1\", function() { return import1; });\n/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ \"6xPP\");\n\nconst import1 = \"imported: \" + _dep_1__WEBPACK_IMPORTED_MODULE_0__[\"dep1\"];\n\n/***/ })\n\n}]);\n```\n\n## 如果你有数百个npm依赖项怎么办？\n我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。\n\n当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。\n\n但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。\n\n尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，`React`和`react-dom`)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项[分组为同一个文件](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162))。\n\n# 动态导入\n使用原生`import`语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。\n\n如果你想使用动态`import()`懒加载代码，那么你还必须处理这样一个事实：有些浏览器[支持模块](https://caniuse.com/#feat=es6-module)，但[不支持动态`import()`](https://caniuse.com/#feat=es6-module-dynamic-import)（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。\n\n幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态`import()`。\n\n向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用`import()`之前):\n```\nimport dynamicImportPolyfill from 'dynamic-import-polyfill';\n\n// This needs to be done before any dynamic imports are used. And if your\n// modules are hosted in a sub-directory, the path must be specified here.\ndynamicImportPolyfill.initialize({modulePath: '/modules/'});\n```\n最后要做的是告诉Rollup将输出代码中的动态`import()`重命名为你指定的另一个名称(通过[`output.dynamicImportFunction`](https://rollupjs.org/guide/en/#outputdynamicimportfunction)选项配置)。动态导入polyfill默认使用名称为__import__，但是可以[配置](https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options)它。\n\n需要重命名`import()`语句的原因是`import`是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生`import()`，因为这样做会导致语法错误。\n\n让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。\n\n## 高效加载JavaScript模块\n当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。\n\n但是，当你加载实际的JavaScript模块（通过`<script type=\"module\">`以及随后`import`语句引用的模块时），你将希望使用[`modulepreload`](https://developers.google.com/web/updates/2017/12/modulepreload)而不是传统的[`preload`](https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content)(仅适用于原始脚本)。\n```\n<link rel=\"modulepreload\" href=\"/modules/main.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-one.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-two.XXXX.mjs\">\n<link rel=\"modulepreload\" href=\"/modules/npm.pkg-three.XXXX.mjs\">\n<!-- ... -->\n<script type=\"module\" src=\"/modules/main.XXXX.mjs\"></script>\n```\n实际上，对于预加载原生的模块，`modulepreload`实际上比传统的`preload`要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。\n\n这意味着通过`modulepreload`加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。\n\n## 生成`modulepreload`列表\nRollup的[bundle](https://rollupjs.org/guide/en/#generatebundle)对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的[generateBundle](https://rollupjs.org/guide/en/#generatebundle)钩子中很容易获得需要预加载哪些文件的列表。\n\n虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:\n```\n{\n  generateBundle(options, bundle) {\n    // A mapping of entry chunk names to their full dependency list.\n    const modulepreloadMap = {};\n\n    for (const [fileName, chunkInfo] of Object.entries(bundle)) {\n      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) {\n        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];\n      }\n    }\n\n    // Do something with the mapping...\n    console.log(modulepreloadMap);\n  }\n}\n```\n例如，这里是我如何为这个站点以及我的[demo应用](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84)生成[modulepreload列表的](https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43)。\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n# 为什么要部署原生模块？\n如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。\n\n### 更小的代码总量\n\n当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要[webpack运行时和清单](https://webpack.js.org/concepts/manifest/)。\n\n### 更好的预加载\n正如我在前一节中提到的，使用`modulepreload`允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。\n\n因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和`modulepreload`加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。\n\n换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。\n\n### 更面向未来\n许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性[KV存储API](https://developers.google.com/web/updates/2019/03/kv-storage)时曾提到过这个问题)。\n\n以下是一些仅限模块才有的最令人兴奋的新功能：\n\n* [内置模块](https://github.com/tc39/proposal-javascript-standard-library/)\n* [HTML模块](https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md)\n* [CSS模块](https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md)\n* [JSON模块](https://github.com/whatwg/html/pull/4407)\n* [导入地图](https://github.com/WICG/import-maps)\n* [workers、service workers和window之间共享模块](https://html.spec.whatwg.org/multipage/workers.html#module-worker-example)\n\n# 支持旧版浏览器\n在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。\n\n对于支持模块但不支持动态导入的浏览器，可以使用上面提到的[`dynamic-import-polyfill`](https://github.com/GoogleChromeLabs/dynamic-import-polyfill)。由于polyfill非常小，并且在可用时将使用浏览器的原生动态`import()`，因此添加这个polyfill几乎没有大小或性能成本。\n\n对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。\n\n## 一个实际的例子\n由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个[演示应用程序](https://rollup-native-modules-boilerplate.glitch.me/)，它使用了我在这里阐述的所有技术。\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n这个演示程序可以在不支持动态`import()`的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。\n\n为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:\n\n* Babel转换（包括JSX）\n* CommonJS的依赖关系（例如react，react-dom）\n* CSS依赖项\n* Asset hashing\n* 代码拆分\n* 动态导入（带有polyfill降级机制）\n* module/nomodule降级机制\n\n代码托管在[GitHub](https://github.com/philipwalton/rollup-native-modules-boilerplate)上(因此你可以派生repo并自己构建它)，而演示则托管在[Glitch](https://glitch.com/edit/#!/rollup-native-modules-boilerplate)上，因此你可以重新组合代码并使用这些特性。\n\n最重要的是查看示例中使用的[Rollup配置](https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js)，因为它定义了如何生成最终模块。\n\n# 总结\n希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。\n\n以下是快速完成此工作所需步骤的摘要：\n* 使用打包器，但要确保输出格式为ES2015模块\n* 积极地进行代码拆分(如果可能的话，一直到node包)\n* 预加载静态依赖关系图中的所有模块(通过`modulepreload`)\n* 使用polyfill来支持不支持动态`import()`的浏览器\n* 使用`<script nomodule>`支持根本不支持模块的浏览器\n\n如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请[告诉我](https://twitter.com/philwalton)进展如何，因为我既想听你的问题，也想听你的成功故事！\n\n模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。\n\n> 译者评：\n1.作者上一篇文章的译文：https://jdc.jd.com/archives/4911\n2.另外一篇讲JavaScript原生模块的文章：https://www.jianshu.com/p/9aae3884b05b\n","slug":"【译】在生产环境中使用原生JavaScript模块","published":1,"updated":"2019-09-10T09:59:10.846Z","_id":"ck0dnoh930006hm9fewtbpp46","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>原文地址：<a href=\"https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\" target=\"_blank\" rel=\"noopener\">https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/</a><br>原文作者：PHILIP WALTON<br>译者：龚亮 ，校对：刘辉<br>声明：本翻译仅做学习交流使用，转载请注明来源</p>\n</blockquote>\n<p>两年前，我写了一篇有关module/nomodule技术的<a href=\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\" target=\"_blank\" rel=\"noopener\">文章</a>，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过<code>&lt;script type=&quot;module&quot;&gt;</code>加载）和一个使用ES5语法的版本（通过<code>&lt;script nomodule&gt;</code>加载）。该技术允许你向支持模块（<em>译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多”模块”一词，都是这个含义</em>）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。</p>\n<a id=\"more\"></a>\n<p>但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  </p>\n<p>为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  </p>\n<p>其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  </p>\n<p>不过，当时并没有更好的方法来部署模块(<em>译者注：指遵循ES2015模块规范的文件</em>)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(<em>译者注：指除ES2015模块外的传统部署方式</em>)更好的性能。实际上，这个站点(<em>译者注：指原文章所在的网站</em>)已经在生产环境中使用原生模块好几个月了。</p>\n<h1 id=\"对模块的误解\"><a href=\"#对模块的误解\" class=\"headerlink\" title=\"对模块的误解\"></a>对模块的误解</h1><p>与我交流过的很多人都认为模块（<em>译者注：指遵循ES2015模块规范的部署方式</em>）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:</p>\n<blockquote>\n<p>…小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。</p>\n</blockquote>\n<p>如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：</p>\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。</p>\n<p>如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（<em>译者注：原文是minifier，指去除空格注释等</em>）。  </p>\n<p>实际情况是，<strong>你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！</strong></p>\n<p>事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（<em>译者注：指rollup和webpack中的runtime的代码</em>），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有<code>import</code>和<code>export</code>语句的模块，则不需要这些代码！</p>\n<p>幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n<p>尽管如此，Rollup有一个插件（<a href=\"https://github.com/rollup/rollup-plugin-commonjs\" target=\"_blank\" rel=\"noopener\">rollup-plugin-commonjs</a>），它可以将CommonJS源代码转换为<code>ES2015</code>。如果一开始你的依赖项采用ES2015模块管理肯定会<a href=\"https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules\" target=\"_blank\" rel=\"noopener\">更好</a>，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。</p>\n<p>在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。</p>\n<h1 id=\"最优打包策略\"><a href=\"#最优打包策略\" class=\"headerlink\" title=\"最优打包策略\"></a>最优打包策略</h1><p>打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。</p>\n<p>同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。</p>\n<p>因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。</p>\n<p>默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。</p>\n<p>在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。</p>\n<p>那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。</p>\n<h1 id=\"包级别的代码拆分\"><a href=\"#包级别的代码拆分\" class=\"headerlink\" title=\"包级别的代码拆分\"></a>包级别的代码拆分</h1><p>如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态<code>import()</code>时<a href=\"https://rollupjs.org/guide/en/#code-splitting\" target=\"_blank\" rel=\"noopener\">自动代码拆分</a>（在v1.0.0中添加）和通过<code>manualChunks</code>选项进行<a href=\"https://rollupjs.org/guide/en/#manualchunks\" target=\"_blank\" rel=\"noopener\">可编程的手动代码拆分</a>（在v1.11.0中添加）。</p>\n<p>有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。</p>\n<p>这是一个使用<code>manualChunks</code>选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  input: &#123;</span><br><span class=\"line\">    main: &apos;src/main.mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    dir: &apos;build&apos;,</span><br><span class=\"line\">    format: &apos;esm&apos;,</span><br><span class=\"line\">    entryFileNames: &apos;[name].[hash].mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  manualChunks(id) &#123;</span><br><span class=\"line\">    if (id.includes(&apos;node_modules&apos;)) &#123;</span><br><span class=\"line\">      // Return the directory name following the last `node_modules`.</span><br><span class=\"line\">      // 返回最后一个node_modules后面跟着的目录名</span><br><span class=\"line\">      // Usually this is the package, but it could also be the scope.</span><br><span class=\"line\">      // 通常都会是一个包名，也有可能是一个私有域</span><br><span class=\"line\">      const dirs = id.split(path.sep);</span><br><span class=\"line\">      return dirs[dirs.lastIndexOf(&apos;node_modules&apos;) + 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>manualChunks</code>选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。</p>\n<p>考虑从<code>lodash-es</code>包中导入<code>cloneDeep()</code>、<code>debounce()</code>和<code>find()</code>模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它<code>lodash</code>模块)一起放入一个名为<code>npm.lodash-es.XXXX.mjs</code>的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。</p>\n<p>在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;cloneDeep, debounce, find&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用<code>import</code>和<code>export</code>语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。</p>\n<p>例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[&quot;import1&quot;],&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &quot;tLzr&quot;:</span><br><span class=\"line\">/*!*********************************!*\\</span><br><span class=\"line\">  !*** ./app/scripts/import-1.js ***!</span><br><span class=\"line\">  \\*********************************/</span><br><span class=\"line\">/*! exports provided: import1 */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;import1&quot;, function() &#123; return import1; &#125;);</span><br><span class=\"line\">/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ &quot;6xPP&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">const import1 = &quot;imported: &quot; + _dep_1__WEBPACK_IMPORTED_MODULE_0__[&quot;dep1&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如果你有数百个npm依赖项怎么办？\"><a href=\"#如果你有数百个npm依赖项怎么办？\" class=\"headerlink\" title=\"如果你有数百个npm依赖项怎么办？\"></a>如果你有数百个npm依赖项怎么办？</h2><p>我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。</p>\n<p>当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。</p>\n<p>但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。</p>\n<p>尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，<code>React</code>和<code>react-dom</code>)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162\" target=\"_blank\" rel=\"noopener\">分组为同一个文件</a>)。</p>\n<h1 id=\"动态导入\"><a href=\"#动态导入\" class=\"headerlink\" title=\"动态导入\"></a>动态导入</h1><p>使用原生<code>import</code>语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。</p>\n<p>如果你想使用动态<code>import()</code>懒加载代码，那么你还必须处理这样一个事实：有些浏览器<a href=\"https://caniuse.com/#feat=es6-module\" target=\"_blank\" rel=\"noopener\">支持模块</a>，但<a href=\"https://caniuse.com/#feat=es6-module-dynamic-import\" target=\"_blank\" rel=\"noopener\">不支持动态<code>import()</code></a>（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。</p>\n<p>幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态<code>import()</code>。</p>\n<p>向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用<code>import()</code>之前):</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dynamicImportPolyfill from &apos;dynamic-import-polyfill&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// This needs to be done before any dynamic imports are used. And if your</span><br><span class=\"line\">// modules are hosted in a sub-directory, the path must be specified here.</span><br><span class=\"line\">dynamicImportPolyfill.initialize(&#123;modulePath: &apos;/modules/&apos;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后要做的是告诉Rollup将输出代码中的动态<code>import()</code>重命名为你指定的另一个名称(通过<a href=\"https://rollupjs.org/guide/en/#outputdynamicimportfunction\" target=\"_blank\" rel=\"noopener\"><code>output.dynamicImportFunction</code></a>选项配置)。动态导入polyfill默认使用名称为<strong>import</strong>，但是可以<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options\" target=\"_blank\" rel=\"noopener\">配置</a>它。</p>\n<p>需要重命名<code>import()</code>语句的原因是<code>import</code>是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生<code>import()</code>，因为这样做会导致语法错误。</p>\n<p>让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。</p>\n<h2 id=\"高效加载JavaScript模块\"><a href=\"#高效加载JavaScript模块\" class=\"headerlink\" title=\"高效加载JavaScript模块\"></a>高效加载JavaScript模块</h2><p>当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。</p>\n<p>但是，当你加载实际的JavaScript模块（通过<code>&lt;script type=&quot;module&quot;&gt;</code>以及随后<code>import</code>语句引用的模块时），你将希望使用<a href=\"https://developers.google.com/web/updates/2017/12/modulepreload\" target=\"_blank\" rel=\"noopener\"><code>modulepreload</code></a>而不是传统的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\"><code>preload</code></a>(仅适用于原始脚本)。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/main.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-one.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-two.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-three.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;/modules/main.XXXX.mjs&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，对于预加载原生的模块，<code>modulepreload</code>实际上比传统的<code>preload</code>要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。</p>\n<p>这意味着通过<code>modulepreload</code>加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。</p>\n<h2 id=\"生成modulepreload列表\"><a href=\"#生成modulepreload列表\" class=\"headerlink\" title=\"生成modulepreload列表\"></a>生成<code>modulepreload</code>列表</h2><p>Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">bundle</a>对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">generateBundle</a>钩子中很容易获得需要预加载哪些文件的列表。</p>\n<p>虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  generateBundle(options, bundle) &#123;</span><br><span class=\"line\">    // A mapping of entry chunk names to their full dependency list.</span><br><span class=\"line\">    const modulepreloadMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const [fileName, chunkInfo] of Object.entries(bundle)) &#123;</span><br><span class=\"line\">      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) &#123;</span><br><span class=\"line\">        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Do something with the mapping...</span><br><span class=\"line\">    console.log(modulepreloadMap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如，这里是我如何为这个站点以及我的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84\" target=\"_blank\" rel=\"noopener\">demo应用</a>生成<a href=\"https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43\" target=\"_blank\" rel=\"noopener\">modulepreload列表的</a>。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n<h1 id=\"为什么要部署原生模块？\"><a href=\"#为什么要部署原生模块？\" class=\"headerlink\" title=\"为什么要部署原生模块？\"></a>为什么要部署原生模块？</h1><p>如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。</p>\n<h3 id=\"更小的代码总量\"><a href=\"#更小的代码总量\" class=\"headerlink\" title=\"更小的代码总量\"></a>更小的代码总量</h3><p>当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要<a href=\"https://webpack.js.org/concepts/manifest/\" target=\"_blank\" rel=\"noopener\">webpack运行时和清单</a>。</p>\n<h3 id=\"更好的预加载\"><a href=\"#更好的预加载\" class=\"headerlink\" title=\"更好的预加载\"></a>更好的预加载</h3><p>正如我在前一节中提到的，使用<code>modulepreload</code>允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。</p>\n<p>因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和<code>modulepreload</code>加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。</p>\n<p>换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。</p>\n<h3 id=\"更面向未来\"><a href=\"#更面向未来\" class=\"headerlink\" title=\"更面向未来\"></a>更面向未来</h3><p>许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性<a href=\"https://developers.google.com/web/updates/2019/03/kv-storage\" target=\"_blank\" rel=\"noopener\">KV存储API</a>时曾提到过这个问题)。</p>\n<p>以下是一些仅限模块才有的最令人兴奋的新功能：</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-javascript-standard-library/\" target=\"_blank\" rel=\"noopener\">内置模块</a></li>\n<li><a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md\" target=\"_blank\" rel=\"noopener\">HTML模块</a></li>\n<li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md\" target=\"_blank\" rel=\"noopener\">CSS模块</a></li>\n<li><a href=\"https://github.com/whatwg/html/pull/4407\" target=\"_blank\" rel=\"noopener\">JSON模块</a></li>\n<li><a href=\"https://github.com/WICG/import-maps\" target=\"_blank\" rel=\"noopener\">导入地图</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/workers.html#module-worker-example\" target=\"_blank\" rel=\"noopener\">workers、service workers和window之间共享模块</a></li>\n</ul>\n<h1 id=\"支持旧版浏览器\"><a href=\"#支持旧版浏览器\" class=\"headerlink\" title=\"支持旧版浏览器\"></a>支持旧版浏览器</h1><p>在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。</p>\n<p>对于支持模块但不支持动态导入的浏览器，可以使用上面提到的<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill\" target=\"_blank\" rel=\"noopener\"><code>dynamic-import-polyfill</code></a>。由于polyfill非常小，并且在可用时将使用浏览器的原生动态<code>import()</code>，因此添加这个polyfill几乎没有大小或性能成本。</p>\n<p>对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。</p>\n<h2 id=\"一个实际的例子\"><a href=\"#一个实际的例子\" class=\"headerlink\" title=\"一个实际的例子\"></a>一个实际的例子</h2><p>由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个<a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">演示应用程序</a>，它使用了我在这里阐述的所有技术。</p>\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n<p>这个演示程序可以在不支持动态<code>import()</code>的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。</p>\n<p>为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:</p>\n<ul>\n<li>Babel转换（包括JSX）</li>\n<li>CommonJS的依赖关系（例如react，react-dom）</li>\n<li>CSS依赖项</li>\n<li>Asset hashing</li>\n<li>代码拆分</li>\n<li>动态导入（带有polyfill降级机制）</li>\n<li>module/nomodule降级机制</li>\n</ul>\n<p>代码托管在<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">GitHub</a>上(因此你可以派生repo并自己构建它)，而演示则托管在<a href=\"https://glitch.com/edit/#!/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">Glitch</a>上，因此你可以重新组合代码并使用这些特性。</p>\n<p>最重要的是查看示例中使用的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js\" target=\"_blank\" rel=\"noopener\">Rollup配置</a>，因为它定义了如何生成最终模块。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。</p>\n<p>以下是快速完成此工作所需步骤的摘要：</p>\n<ul>\n<li>使用打包器，但要确保输出格式为ES2015模块</li>\n<li>积极地进行代码拆分(如果可能的话，一直到node包)</li>\n<li>预加载静态依赖关系图中的所有模块(通过<code>modulepreload</code>)</li>\n<li>使用polyfill来支持不支持动态<code>import()</code>的浏览器</li>\n<li>使用<code>&lt;script nomodule&gt;</code>支持根本不支持模块的浏览器</li>\n</ul>\n<p>如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请<a href=\"https://twitter.com/philwalton\" target=\"_blank\" rel=\"noopener\">告诉我</a>进展如何，因为我既想听你的问题，也想听你的成功故事！</p>\n<p>模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。</p>\n<blockquote>\n<p>译者评：<br>1.作者上一篇文章的译文：<a href=\"https://jdc.jd.com/archives/4911\" target=\"_blank\" rel=\"noopener\">https://jdc.jd.com/archives/4911</a><br>2.另外一篇讲JavaScript原生模块的文章：<a href=\"https://www.jianshu.com/p/9aae3884b05b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9aae3884b05b</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原文地址：<a href=\"https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/\" target=\"_blank\" rel=\"noopener\">https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/</a><br>原文作者：PHILIP WALTON<br>译者：龚亮 ，校对：刘辉<br>声明：本翻译仅做学习交流使用，转载请注明来源</p>\n</blockquote>\n<p>两年前，我写了一篇有关module/nomodule技术的<a href=\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\" target=\"_blank\" rel=\"noopener\">文章</a>，这项技术允许你在编写ES2015+代码时，使用打包器和转换器生成两个版本的代码库，一个具有现代语法的版本（通过<code>&lt;script type=&quot;module&quot;&gt;</code>加载）和一个使用ES5语法的版本（通过<code>&lt;script nomodule&gt;</code>加载）。该技术允许你向支持模块（<em>译者注：指ECMA制定的标准的export/import模块语法及其加载机制，又称为ES Module、ESM、ES6 Module、ES2015 Module，下文中将出现很多”模块”一词，都是这个含义</em>）的浏览器发送更少的代码，现在大多数Web框架和CLI都支持它。</p>","more":"<p>但是那时候，尽管能够在生产中部署现代JavaScript，大多数浏览器也都支持模块，我仍然建议打包你的代码。  </p>\n<p>为什么？主要是因为我觉得在浏览器中加载模块很慢。尽管像HTTP/2这样的新协议理论上有效地支持加载大量小文件，但当时的所有性能研究都认为使用打包器更有效。  </p>\n<p>其实当时的研究是不完整的。该研究所使用的模块测试示例由部署到生产环境中未优化和未缩小的源文件组成。它并没有将优化后的模块包与优化后的原始脚本进行比较。  </p>\n<p>不过，当时并没有更好的方法来部署模块(<em>译者注：指遵循ES2015模块规范的文件</em>)。但是现在，打包技术取得了一些最新进展，可以将生产代码部署为ES2015模块(包含静态导入和动态导入)，从而获得比非模块(<em>译者注：指除ES2015模块外的传统部署方式</em>)更好的性能。实际上，这个站点(<em>译者注：指原文章所在的网站</em>)已经在生产环境中使用原生模块好几个月了。</p>\n<h1 id=\"对模块的误解\"><a href=\"#对模块的误解\" class=\"headerlink\" title=\"对模块的误解\"></a>对模块的误解</h1><p>与我交流过的很多人都认为模块（<em>译者注：指遵循ES2015模块规范的部署方式</em>）是大规模生产环境下应用程序的一个选择罢了。他们中的许多人引用了我刚刚提到的研究，并建议不要在生产环境中使用模块，除非:</p>\n<blockquote>\n<p>…小型web应用程序，总共只有不到100个模块，依赖树相对较浅(即最大深度小于5)。</p>\n</blockquote>\n<p>如果你曾经查看过node_modules目录，可能知道即使是小型应用程序也很容易有超过100个模块依赖项。我们来看看npm上一些流行的工具包有多少个模块依赖项吧：</p>\n<table>\n    <tbody>\n        <tr>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">包</font></font></th>\n            <th style=\"background-color: #eee;\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">模块数量</font></font></th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/date-fns\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">date-fns</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">729</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/lodash-es\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">lodash-es</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">643</font></font></td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.npmjs.com/package/rxjs\" target=\"_blank\" rel=\"noopener\"><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">rxjs</font></font></a></td>\n            <td><font style=\"vertical-align: inherit;\"><font style=\"vertical-align: inherit;\">226</font></font></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>人们对模块的主要误解是，在生产环境中使用模块时只有两个选择：(1)按原样部署所有源代码(包括node_modules目录)，(2)完全不使用模块。</p>\n<p>如果你仔细考虑我所引用研究给出的建议，它没有说加载模块比普通加载脚本慢，也没有说你不应该使用模块。它只是说，如果你将数百个未经过压缩的模块文件部署到生产环境中，Chrome将无法像加载单个经过压缩的模块一样快速的加载它们。所以建议继续使用打包器、编译器和压缩器（<em>译者注：原文是minifier，指去除空格注释等</em>）。  </p>\n<p>实际情况是，<strong>你可以在生产环境中使用上面所有技术的同时，也可以使用ES2015模块！</strong></p>\n<p>事实上，因为浏览器已经知道如何加载模块（对不支持模块的浏览器可以做降级处理），所以模块才是我们应该打包出的格式。如果你检查大多数流行的打包器生成的输出代码，你会发现很多样板代码（<em>译者注：指rollup和webpack中的runtime的代码</em>），其唯一的目的是动态加载其它代码并管理依赖，但如果我们只使用带有<code>import</code>和<code>export</code>语句的模块，则不需要这些代码！</p>\n<p>幸运的是，今天至少有一个流行的打包器（Rollup）支持模块作为输出格式，这意味着可以打包代码并在生产环境中部署模块（没有加载器样板代码）。由于Rollup（根据我的经验，这是最好的打包器）具有出色的tree-shaking，使得Rollup打包出的模块是目前所有打包器输出模块中代码最少的。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n<font style=\"font-weight: bold\">更新：</font> Parcel<a src=\"https://twitter.com/devongovett/status/1163792519764877312\">计划</a>在下一版本中添加模块支持。Webpack目前不支持模块输出格式，但这里有一些相关讨论<a src=\"https://github.com/webpack/webpack/issues/2933\">＃2933</a>，<a src=\"https://github.com/webpack/webpack/issues/8895\">＃8895</a>，<a src=\"https://github.com/webpack/webpack/issues/8896\">＃8896</a>。\n</p>\n另一个误解是，除非你的所有依赖项都使用模块，否则你不能使用模块。不幸的是大多数npm包仍然以CommonJS的形式发布(甚至有些包以ES2015编写，但在发布到npm之前转换为CommonJS)！\n\n<p>尽管如此，Rollup有一个插件（<a href=\"https://github.com/rollup/rollup-plugin-commonjs\" target=\"_blank\" rel=\"noopener\">rollup-plugin-commonjs</a>），它可以将CommonJS源代码转换为<code>ES2015</code>。如果一开始你的依赖项采用ES2015模块管理肯定会<a href=\"https://rollupjs.org/guide/en/#why-are-es-modules-better-than-commonjs-modules\" target=\"_blank\" rel=\"noopener\">更好</a>，但是有一些依赖关系不是这样管理的并不会阻止你部署模块。</p>\n<p>在本文的剩余部分，我将向你展示如何打包到模块（包括使用动态导入和代码拆分的粒度），解释为什么它通常比原始脚本更高效，并展示如何处理不支持模块的浏览器。</p>\n<h1 id=\"最优打包策略\"><a href=\"#最优打包策略\" class=\"headerlink\" title=\"最优打包策略\"></a>最优打包策略</h1><p>打包生产代码一直是需要权衡利弊。一方面，希望代码尽快加载和执行。另一方面，又不希望加载用户实际用不到的代码。</p>\n<p>同时，还希望代码尽可能地被缓存。打包的一个大问题是，即使只是一行代码有修改也会使整个打包后的包缓存失效。如果直接使用ES2015模块部署应用程序（就像它们在源代码中一样），那么你可以自由地进行小的更改，同时让应用程序的大部分代码仍然保留在缓存中。但就像我已经指出的那样，这也意味着你的代码需要更长时间才能被新用户的浏览器加载完成。</p>\n<p>因此，找到最优打包粒度的挑战是在加载性能和长期缓存之间取得适当的平衡。</p>\n<p>默认情况下，大多数打包器在动态导入时进行代码拆分，但我认为仅动态导入的代码拆分粒度不够细，特别是对于拥有大量留存用户的站点（缓存很重要）。</p>\n<p>在我看来，你应该尽可能细粒度地拆分代码，直到开始显著地影响加载性能为止。虽然我强烈建议你自己动手进行分析，但是查阅上文引用的研究可以得出一个大致的结论。当加载少于100个模块时，没有明显的性能差异。针对HTTP/2性能的研究发现，加载少于50个文件时没有明显的差异(尽管他们只测试了1、6、50和1000，所以100个文件可能就可以了)。</p>\n<p>那么，最好的代码拆分方法是什么呢？除了通过动态导入做代码拆分外，我还建议以npm包为粒度做代码拆分，node_modules中的模块都合并到以其包名命名的文件中。</p>\n<h1 id=\"包级别的代码拆分\"><a href=\"#包级别的代码拆分\" class=\"headerlink\" title=\"包级别的代码拆分\"></a>包级别的代码拆分</h1><p>如上所述，打包技术的一些最新进展使得高性能模块部署成为可能。我提到的增强是指Rollup的两个新功能：通过动态<code>import()</code>时<a href=\"https://rollupjs.org/guide/en/#code-splitting\" target=\"_blank\" rel=\"noopener\">自动代码拆分</a>（在v1.0.0中添加）和通过<code>manualChunks</code>选项进行<a href=\"https://rollupjs.org/guide/en/#manualchunks\" target=\"_blank\" rel=\"noopener\">可编程的手动代码拆分</a>（在v1.11.0中添加）。</p>\n<p>有了这两个功能，现在很容易在包级别进行代码拆分的构建配置。</p>\n<p>这是一个使用<code>manualChunks</code>选项配置的例子，每个位于node_module里的模块将被合并到以包名命名的文件里(当然，这种模块路径里肯定包含node_modules)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  input: &#123;</span><br><span class=\"line\">    main: &apos;src/main.mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    dir: &apos;build&apos;,</span><br><span class=\"line\">    format: &apos;esm&apos;,</span><br><span class=\"line\">    entryFileNames: &apos;[name].[hash].mjs&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  manualChunks(id) &#123;</span><br><span class=\"line\">    if (id.includes(&apos;node_modules&apos;)) &#123;</span><br><span class=\"line\">      // Return the directory name following the last `node_modules`.</span><br><span class=\"line\">      // 返回最后一个node_modules后面跟着的目录名</span><br><span class=\"line\">      // Usually this is the package, but it could also be the scope.</span><br><span class=\"line\">      // 通常都会是一个包名，也有可能是一个私有域</span><br><span class=\"line\">      const dirs = id.split(path.sep);</span><br><span class=\"line\">      return dirs[dirs.lastIndexOf(&apos;node_modules&apos;) + 1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>manualChunks</code>选项接收一个函数，该函数将模块文件路径作为惟一的参数，也可以返回一个文件名，参数中的模块将被加入到这个文件里。如果没有返回任何内容，参数中的模块将被添加到默认文件中。</p>\n<p>考虑从<code>lodash-es</code>包中导入<code>cloneDeep()</code>、<code>debounce()</code>和<code>find()</code>模块的一个应用程序。上面的配置将把各个模块(以及它们导入的任何其它<code>lodash</code>模块)一起放入一个名为<code>npm.lodash-es.XXXX.mjs</code>的输出文件中，(其中XXXX是lodash-es模块文件的哈希值)。</p>\n<p>在该文件的末尾，你会看到这样的导出语句(注意，它只包含添加到块中模块的导出语句，而不是所有lodash模块):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;cloneDeep, debounce, find&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>希望这个例子能清楚地说明使用Rollup手动拆分代码的工作原理。就我个人而言，我认为使用<code>import</code>和<code>export</code>语句的代码拆分比使用非标准的、特定于打包器实现的代码拆分更容易阅读和理解。</p>\n<p>例如，跟踪这个文件中发生了什么很难(我以前使用webpack对一个项目做代码拆分后的实际输出)，而且在支持模块的浏览器中其实不需要这些代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[&quot;import1&quot;],&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &quot;tLzr&quot;:</span><br><span class=\"line\">/*!*********************************!*\\</span><br><span class=\"line\">  !*** ./app/scripts/import-1.js ***!</span><br><span class=\"line\">  \\*********************************/</span><br><span class=\"line\">/*! exports provided: import1 */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;import1&quot;, function() &#123; return import1; &#125;);</span><br><span class=\"line\">/* harmony import */ var _dep_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dep-1 */ &quot;6xPP&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">const import1 = &quot;imported: &quot; + _dep_1__WEBPACK_IMPORTED_MODULE_0__[&quot;dep1&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如果你有数百个npm依赖项怎么办？\"><a href=\"#如果你有数百个npm依赖项怎么办？\" class=\"headerlink\" title=\"如果你有数百个npm依赖项怎么办？\"></a>如果你有数百个npm依赖项怎么办？</h2><p>我在上面说过，我认为包级别上的代码拆分是站点代码拆分的最佳状态，而又不会太激进。</p>\n<p>当然，如果你的应用程序从数百个不同的npm包中导入模块，那么浏览器可能无法有效地加载所有模块。</p>\n<p>但是，如果你确实有很多npm依赖项，那么先不要完全放弃这个策略。请记住，你可能不会在每个页面上加载所有的npm依赖项，因此检查实际加载了多少依赖项非常重要。</p>\n<p>尽管如此，确实有一些非常大的应用程序具有如此多的npm依赖关系，以至于它们不能实际地对其中的每一个应用程序进行代码拆分。如果你是这种情况，我建议你找出一种方法来将一些依赖项分组到公共文件中。一般来说，你可以将可能在同一时间发生变化的包(例如，<code>React</code>和<code>react-dom</code>)分组，因为它们必须一起失效(例如，我稍后展示的示例应用程序将所有React依赖项<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/da5e616c24d554dd8ffe562a7436709106be9eed/rollup.config.js#L159-L162\" target=\"_blank\" rel=\"noopener\">分组为同一个文件</a>)。</p>\n<h1 id=\"动态导入\"><a href=\"#动态导入\" class=\"headerlink\" title=\"动态导入\"></a>动态导入</h1><p>使用原生<code>import</code>语句进行代码拆分和模块加载的一个缺点是，需要开发人员对不支持模块的浏览器做兼容处理。</p>\n<p>如果你想使用动态<code>import()</code>懒加载代码，那么你还必须处理这样一个事实：有些浏览器<a href=\"https://caniuse.com/#feat=es6-module\" target=\"_blank\" rel=\"noopener\">支持模块</a>，但<a href=\"https://caniuse.com/#feat=es6-module-dynamic-import\" target=\"_blank\" rel=\"noopener\">不支持动态<code>import()</code></a>（Edge 16–18, Firefox 60–66, Safari 11, Chrome 61–63）。</p>\n<p>幸运的是，一个很小的(~400字节)、非常高性能的polyfill可用于动态<code>import()</code>。</p>\n<p>向站点添加polyfill很容易。你所要做的是导入它并在应用程序的主入口点初始化它(在调用<code>import()</code>之前):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dynamicImportPolyfill from &apos;dynamic-import-polyfill&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// This needs to be done before any dynamic imports are used. And if your</span><br><span class=\"line\">// modules are hosted in a sub-directory, the path must be specified here.</span><br><span class=\"line\">dynamicImportPolyfill.initialize(&#123;modulePath: &apos;/modules/&apos;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最后要做的是告诉Rollup将输出代码中的动态<code>import()</code>重命名为你指定的另一个名称(通过<a href=\"https://rollupjs.org/guide/en/#outputdynamicimportfunction\" target=\"_blank\" rel=\"noopener\"><code>output.dynamicImportFunction</code></a>选项配置)。动态导入polyfill默认使用名称为<strong>import</strong>，但是可以<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill#configuration-options\" target=\"_blank\" rel=\"noopener\">配置</a>它。</p>\n<p>需要重命名<code>import()</code>语句的原因是<code>import</code>是JavaScript中的一个关键字。这意味着不可能使用相同的名称来填充原生<code>import()</code>，因为这样做会导致语法错误。</p>\n<p>让Rollup在构建时重命名它是很好的，这意味着你的源代码可以使用标准版本，并且在将来不再需要polyfill时，你将不必重新更改它。</p>\n<h2 id=\"高效加载JavaScript模块\"><a href=\"#高效加载JavaScript模块\" class=\"headerlink\" title=\"高效加载JavaScript模块\"></a>高效加载JavaScript模块</h2><p>当你使用代码拆分的时候，最好预加载所有马上要使用的模块(即主入口模块导入图中的所有模块)。</p>\n<p>但是，当你加载实际的JavaScript模块（通过<code>&lt;script type=&quot;module&quot;&gt;</code>以及随后<code>import</code>语句引用的模块时），你将希望使用<a href=\"https://developers.google.com/web/updates/2017/12/modulepreload\" target=\"_blank\" rel=\"noopener\"><code>modulepreload</code></a>而不是传统的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\"><code>preload</code></a>(仅适用于原始脚本)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/main.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-one.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-two.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;link rel=&quot;modulepreload&quot; href=&quot;/modules/npm.pkg-three.XXXX.mjs&quot;&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;/modules/main.XXXX.mjs&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，对于预加载原生的模块，<code>modulepreload</code>实际上比传统的<code>preload</code>要严格得多，它不仅下载文件，而且在主线程之外立即开始解析和编译文件。传统的预加载无法做到这一点，因为它不知道在预加载时该文件将用作模块脚本还是原始脚本。</p>\n<p>这意味着通过<code>modulepreload</code>加载模块通常会更快，而且在实例化时不太可能导致主线程卡顿。</p>\n<h2 id=\"生成modulepreload列表\"><a href=\"#生成modulepreload列表\" class=\"headerlink\" title=\"生成modulepreload列表\"></a>生成<code>modulepreload</code>列表</h2><p>Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">bundle</a>对象中的每个入口文件在其静态依赖关系图中包含完整的导入列表，因此在Rollup的<a href=\"https://rollupjs.org/guide/en/#generatebundle\" target=\"_blank\" rel=\"noopener\">generateBundle</a>钩子中很容易获得需要预加载哪些文件的列表。</p>\n<p>虽然在npm上确实存在一些modulepreload插件，但是为图中的每个入口点生成一个modulepreload列表只需要几行代码，所以我更愿意像这样手动创建它:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  generateBundle(options, bundle) &#123;</span><br><span class=\"line\">    // A mapping of entry chunk names to their full dependency list.</span><br><span class=\"line\">    const modulepreloadMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const [fileName, chunkInfo] of Object.entries(bundle)) &#123;</span><br><span class=\"line\">      if (chunkInfo.isEntry || chunkInfo.isDynamicEntry) &#123;</span><br><span class=\"line\">        modulepreloadMap[chunkInfo.name] = [fileName, ...chunkInfo.imports];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Do something with the mapping...</span><br><span class=\"line\">    console.log(modulepreloadMap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如，这里是我如何为这个站点以及我的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/78c687bf757374b5e685508e3afc9560a86a3c96/rollup.config.js#L57-L84\" target=\"_blank\" rel=\"noopener\">demo应用</a>生成<a href=\"https://github.com/philipwalton/blog/blob/90e914731c77296dccf2ed315599326c6014a080/tasks/javascript.js#L18-L43\" target=\"_blank\" rel=\"noopener\">modulepreload列表的</a>。</p>\n<p style=\"background:#f8f8f8;padding:10px;\">\n注意：虽然对于模块脚本来说，modulepreload绝对比原始的preload更好，但它对浏览器的支持更差(目前只支持chrome)。如果你的流量中有相当一部分是非chrome流量，那么使用classic preload是有意义的。<br>\n<br>\n与使用modulepreload不同，使用preload时需要注意的一点是，预加载脚本不会放在浏览器的模块映射中，这意味着可能会不止一次地处理预加载的请求(例如，如果模块在浏览器完成预加载之前导入文件)。\n</p>\n\n<h1 id=\"为什么要部署原生模块？\"><a href=\"#为什么要部署原生模块？\" class=\"headerlink\" title=\"为什么要部署原生模块？\"></a>为什么要部署原生模块？</h1><p>如果你已经在使用像webpack这样的打包器，并且已经在使用细粒度代码拆分和预加载这些文件(与我在这里描述的类似)，那么你可能想知道是否值得改变策略，使用原生模块。下面是我认为你应该考虑它的几个原因，以及为什么打包到原生模块比使用带有模块加载代码的原始脚本要好。</p>\n<h3 id=\"更小的代码总量\"><a href=\"#更小的代码总量\" class=\"headerlink\" title=\"更小的代码总量\"></a>更小的代码总量</h3><p>当使用原生模块时，现代浏览器不必为用户加载任何不必要的模块加载或依赖关系管理代码。例如，如果使用原生模块，则根本不需要<a href=\"https://webpack.js.org/concepts/manifest/\" target=\"_blank\" rel=\"noopener\">webpack运行时和清单</a>。</p>\n<h3 id=\"更好的预加载\"><a href=\"#更好的预加载\" class=\"headerlink\" title=\"更好的预加载\"></a>更好的预加载</h3><p>正如我在前一节中提到的，使用<code>modulepreload</code>允许你加载代码并在主线程之外解析/编译代码。在其他条件相同的情况下，这意味着页面的交互速度更快，并且主线程在用户交互期间不太可能被阻塞。</p>\n<p>因此，无论你如何细粒度地对应用程序进行代码拆分，使用import语句和<code>modulepreload</code>加载模块要比通过原始script标签和常规preload加载更有效(特别是如果这些标签是动态生成的，并在运行时添加到DOM中)。</p>\n<p>换句话说，由Rollup打包出的20个模块文件将比由webpack打包出的20个原始脚本文件加载得更快(不是因为webpack，而是因为它不是原生模块)。</p>\n<h3 id=\"更面向未来\"><a href=\"#更面向未来\" class=\"headerlink\" title=\"更面向未来\"></a>更面向未来</h3><p>许多最令人兴奋的新浏览器特性都是构建在模块之上的，而不是原始的脚本。这意味着，如果你想使用这些特性中的任何一个，你的代码需要作为原生模块部署，而不是转换为ES5并通过原始的script标签加载(我在尝试使用实验性<a href=\"https://developers.google.com/web/updates/2019/03/kv-storage\" target=\"_blank\" rel=\"noopener\">KV存储API</a>时曾提到过这个问题)。</p>\n<p>以下是一些仅限模块才有的最令人兴奋的新功能：</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-javascript-standard-library/\" target=\"_blank\" rel=\"noopener\">内置模块</a></li>\n<li><a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-modules-explainer.md\" target=\"_blank\" rel=\"noopener\">HTML模块</a></li>\n<li><a href=\"https://github.com/MicrosoftEdge/MSEdgeExplainers/blob/master/CSSModules/v1Explainer.md\" target=\"_blank\" rel=\"noopener\">CSS模块</a></li>\n<li><a href=\"https://github.com/whatwg/html/pull/4407\" target=\"_blank\" rel=\"noopener\">JSON模块</a></li>\n<li><a href=\"https://github.com/WICG/import-maps\" target=\"_blank\" rel=\"noopener\">导入地图</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/workers.html#module-worker-example\" target=\"_blank\" rel=\"noopener\">workers、service workers和window之间共享模块</a></li>\n</ul>\n<h1 id=\"支持旧版浏览器\"><a href=\"#支持旧版浏览器\" class=\"headerlink\" title=\"支持旧版浏览器\"></a>支持旧版浏览器</h1><p>在全球范围内，超过83%的浏览器原生支持JavaScript模块(包括动态导入)，因此对于你的大多数用户来说，不需要做任何处理就可以使用这项技术。</p>\n<p>对于支持模块但不支持动态导入的浏览器，可以使用上面提到的<a href=\"https://github.com/GoogleChromeLabs/dynamic-import-polyfill\" target=\"_blank\" rel=\"noopener\"><code>dynamic-import-polyfill</code></a>。由于polyfill非常小，并且在可用时将使用浏览器的原生动态<code>import()</code>，因此添加这个polyfill几乎没有大小或性能成本。</p>\n<p>对于根本不支持模块的浏览器，可以使用我前面提到的module/nomodule技术。</p>\n<h2 id=\"一个实际的例子\"><a href=\"#一个实际的例子\" class=\"headerlink\" title=\"一个实际的例子\"></a>一个实际的例子</h2><p>由于谈论跨浏览器兼容性总是比实际实现它要容易，所以我构建了一个<a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">演示应用程序</a>，它使用了我在这里阐述的所有技术。</p>\n<figure style=\"margin:0;\">\n    <a href=\"https://rollup-native-modules-boilerplate.glitch.me/\" target=\"_blank\" rel=\"noopener\">\n        <img srcset=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" src=\"https://wq.360buyimg.com/data/ppms/picture/native_javascript_modules_demo_1400w_82ff366688.png\" alt=\"A demo app showing how to use native JavaScript modules with legacy browser support\">\n    </a>\n</figure>\n\n<p>这个演示程序可以在不支持动态<code>import()</code>的浏览器中运行(如Edge 18和Firefox ESR)，也可以在不支持模块的浏览器中运行(如Internet Explorer 11)。</p>\n<p>为了说明这个策略不仅适用于简单的用例，我还包含了当今复杂的JavaScript应用程序需要的许多特性:</p>\n<ul>\n<li>Babel转换（包括JSX）</li>\n<li>CommonJS的依赖关系（例如react，react-dom）</li>\n<li>CSS依赖项</li>\n<li>Asset hashing</li>\n<li>代码拆分</li>\n<li>动态导入（带有polyfill降级机制）</li>\n<li>module/nomodule降级机制</li>\n</ul>\n<p>代码托管在<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">GitHub</a>上(因此你可以派生repo并自己构建它)，而演示则托管在<a href=\"https://glitch.com/edit/#!/rollup-native-modules-boilerplate\" target=\"_blank\" rel=\"noopener\">Glitch</a>上，因此你可以重新组合代码并使用这些特性。</p>\n<p>最重要的是查看示例中使用的<a href=\"https://github.com/philipwalton/rollup-native-modules-boilerplate/blob/master/rollup.config.js\" target=\"_blank\" rel=\"noopener\">Rollup配置</a>，因为它定义了如何生成最终模块。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>希望这篇文章让你相信，现在不仅可以在生产环境中部署原生JavaScript模块，而且这样做可以提高站点的加载和运行时性能。</p>\n<p>以下是快速完成此工作所需步骤的摘要：</p>\n<ul>\n<li>使用打包器，但要确保输出格式为ES2015模块</li>\n<li>积极地进行代码拆分(如果可能的话，一直到node包)</li>\n<li>预加载静态依赖关系图中的所有模块(通过<code>modulepreload</code>)</li>\n<li>使用polyfill来支持不支持动态<code>import()</code>的浏览器</li>\n<li>使用<code>&lt;script nomodule&gt;</code>支持根本不支持模块的浏览器</li>\n</ul>\n<p>如果你已经在构建设置中使用了Rollup，我希望你尝试这里介绍的技术，并在生产环境中部署原生模块(带有代码拆分和动态导入)。如果你这样做了，请<a href=\"https://twitter.com/philwalton\" target=\"_blank\" rel=\"noopener\">告诉我</a>进展如何，因为我既想听你的问题，也想听你的成功故事！</p>\n<p>模块是JavaScript的明确未来，我希望我们所有的工具和依赖都能尽快包含模块。希望本文能在这个方向上起到一点推动作用。</p>\n<blockquote>\n<p>译者评：<br>1.作者上一篇文章的译文：<a href=\"https://jdc.jd.com/archives/4911\" target=\"_blank\" rel=\"noopener\">https://jdc.jd.com/archives/4911</a><br>2.另外一篇讲JavaScript原生模块的文章：<a href=\"https://www.jianshu.com/p/9aae3884b05b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9aae3884b05b</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0dnoh8w0001hm9fii3v1cw4","category_id":"ck0dnoh940007hm9foeugiies","_id":"ck0dnoh98000fhm9fgfznnwv9"},{"post_id":"ck0dnoh900004hm9folja3hg8","category_id":"ck0dnoh940007hm9foeugiies","_id":"ck0dnoh98000ihm9fhsfhiika"},{"post_id":"ck0dnoh930006hm9fewtbpp46","category_id":"ck0dnvqqq000xhm9fpc9jhs4b","_id":"ck0dnvqqt000yhm9fj1vneviz"},{"post_id":"ck0dnoh8t0000hm9f1dm9rrqa","category_id":"ck0dnvqqq000xhm9fpc9jhs4b","_id":"ck0dnvxyt000zhm9f0562tp87"},{"post_id":"ck0dnoh910005hm9fdkfqolx8","category_id":"ck0dnvqqq000xhm9fpc9jhs4b","_id":"ck0dnwh480012hm9fh8fo3uxy"}],"PostTag":[{"post_id":"ck0dnoh8t0000hm9f1dm9rrqa","tag_id":"ck0dnoh900003hm9ffee15m81","_id":"ck0dnoh950009hm9fb0v9spin"},{"post_id":"ck0dnoh8w0001hm9fii3v1cw4","tag_id":"ck0dnoh940008hm9f03bev5ct","_id":"ck0dnoh97000dhm9f1nkmgs9b"},{"post_id":"ck0dnoh900004hm9folja3hg8","tag_id":"ck0dnoh940008hm9f03bev5ct","_id":"ck0dnoh98000hhm9fa6gmraj6"},{"post_id":"ck0dnoh910005hm9fdkfqolx8","tag_id":"ck0dnoh98000ghm9f8f1ptcrd","_id":"ck0dnoh99000nhm9faz1v1f82"},{"post_id":"ck0dnoh910005hm9fdkfqolx8","tag_id":"ck0dnoh98000khm9famco84kk","_id":"ck0dnoh99000ohm9fn2nqm964"},{"post_id":"ck0dnoh930006hm9fewtbpp46","tag_id":"ck0dnsi7l000rhm9f7q2igw8r","_id":"ck0dnsi7m000thm9fyuyodtv2"},{"post_id":"ck0dnoh930006hm9fewtbpp46","tag_id":"ck0dnsi7m000shm9foqsjppwu","_id":"ck0dnsi7n000uhm9fbzz8ygfd"},{"post_id":"ck0dnoh930006hm9fewtbpp46","tag_id":"ck0dntjrr000vhm9fpgt6eafv","_id":"ck0dntjrs000whm9f4aafk6he"},{"post_id":"ck0dnoh8t0000hm9f1dm9rrqa","tag_id":"ck0dnw6rr0010hm9fbpgn0ap4","_id":"ck0dnw6rr0011hm9fp6qkevq2"},{"post_id":"ck0dnoh930006hm9fewtbpp46","tag_id":"ck0dnxsd60000f09f09r7x6jh","_id":"ck0dnxsd80001f09fjp1rwo0n"}],"Tag":[{"name":"CSS","_id":"ck0dnoh900003hm9ffee15m81"},{"name":"AST","_id":"ck0dnoh940008hm9f03bev5ct"},{"name":"碰撞检测","_id":"ck0dnoh98000ghm9f8f1ptcrd"},{"name":"向量","_id":"ck0dnoh98000khm9famco84kk"},{"name":"原生JavaScript模块","_id":"ck0dnoh99000mhm9fuh7u6fx3"},{"name":"rollup打包","_id":"ck0dnsi7l000rhm9f7q2igw8r"},{"name":"modulepreload","_id":"ck0dnsi7m000shm9foqsjppwu"},{"name":"代码拆分","_id":"ck0dntjrr000vhm9fpgt6eafv"},{"name":"CSS Houdini","_id":"ck0dnw6rr0010hm9fbpgn0ap4"},{"name":"type=\"module\"","_id":"ck0dnxsd60000f09f09r7x6jh"}]}}